
C:\Users\kristblo\AppData\Local\arduino\sketches\1F95492A5442252F194949EABEC15B49/V4x_PD_example_no_freeze_mux_bypass.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20003ac0 	.word	0x20003ac0
6000142c:	200041c0 	.word	0x200041c0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fa00 	bl	60001844 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f99e 	bl	60001854 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fbcc 	bl	60001ce8 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd31 	bl	60001fc8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9da 	bl	60001964 <configure_external_ram>
	analog_init();
600015b0:	f000 f91e 	bl	600017f0 <analog_init>
	pwm_init();
600015b4:	f000 fd14 	bl	60001fe0 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fbc4 	bl	60001d44 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f944 	bl	60001848 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc55 	bl	60001e74 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f93d 	bl	60001850 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f939 	bl	6000184c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fcfd 	bl	60001fd8 <____libc_init_array_veneer>
	main();
600015de:	f000 fcf7 	bl	60001fd0 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000dfa8 	.word	0x0000dfa8
600015f0:	60002200 	.word	0x60002200
600015f4:	00000000 	.word	0x00000000
600015f8:	20003ac0 	.word	0x20003ac0
600015fc:	600101ac 	.word	0x600101ac
60001600:	20000000 	.word	0x20000000
60001604:	20003800 	.word	0x20003800
60001608:	00006679 	.word	0x00006679
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	000057ad 	.word	0x000057ad
6000161c:	20004164 	.word	0x20004164
60001620:	000057b1 	.word	0x000057b1
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20004168 	.word	0x20004168
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	200013f0 	.word	0x200013f0
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	200013f0 	.word	0x200013f0

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	200013f0 	.word	0x200013f0
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	200013f0 	.word	0x200013f0

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017f0:	4b10      	ldr	r3, [pc, #64]	; (60001834 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600017f2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600017f4:	4a10      	ldr	r2, [pc, #64]	; (60001838 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600017f8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600017fc:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017fe:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001800:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001804:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001806:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000180a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000180c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000180e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001810:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001812:	061b      	lsls	r3, r3, #24
60001814:	d4fc      	bmi.n	60001810 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001816:	4a09      	ldr	r2, [pc, #36]	; (6000183c <analog_init+0x4c>)
60001818:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000181c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000181e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001820:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001822:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001824:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001828:	d1fb      	bne.n	60001822 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000182a:	4a05      	ldr	r2, [pc, #20]	; (60001840 <analog_init+0x50>)
6000182c:	7013      	strb	r3, [r2, #0]
}
6000182e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001832:	4770      	bx	lr
60001834:	400fc000 	.word	0x400fc000
60001838:	400c4000 	.word	0x400c4000
6000183c:	400c8000 	.word	0x400c8000
60001840:	2000418d 	.word	0x2000418d

60001844 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001844:	4770      	bx	lr
60001846:	bf00      	nop

60001848 <startup_default_middle_hook>:
60001848:	4770      	bx	lr
6000184a:	bf00      	nop

6000184c <startup_default_late_hook>:
6000184c:	4770      	bx	lr
6000184e:	bf00      	nop

60001850 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001850:	bf00      	nop
60001852:	4770      	bx	lr

60001854 <configure_cache>:
{
60001854:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001856:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000185a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000185c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000185e:	4831      	ldr	r0, [pc, #196]	; (60001924 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001860:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001864:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001868:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000186e:	482e      	ldr	r0, [pc, #184]	; (60001928 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001870:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001874:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001876:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000187a:	482c      	ldr	r0, [pc, #176]	; (6000192c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000187c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001880:	4a2b      	ldr	r2, [pc, #172]	; (60001930 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001882:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001886:	4c2b      	ldr	r4, [pc, #172]	; (60001934 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001888:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000188c:	482a      	ldr	r0, [pc, #168]	; (60001938 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000188e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001892:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001896:	4c29      	ldr	r4, [pc, #164]	; (6000193c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001898:	4829      	ldr	r0, [pc, #164]	; (60001940 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000189a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000189e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600018a2:	4c28      	ldr	r4, [pc, #160]	; (60001944 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600018a4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018a8:	4827      	ldr	r0, [pc, #156]	; (60001948 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018aa:	4a28      	ldr	r2, [pc, #160]	; (6000194c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600018ac:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018b0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018b4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018b8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018bc:	4c24      	ldr	r4, [pc, #144]	; (60001950 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018be:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018c0:	4824      	ldr	r0, [pc, #144]	; (60001954 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018c2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018c6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018ca:	4a23      	ldr	r2, [pc, #140]	; (60001958 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018cc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018d0:	4c22      	ldr	r4, [pc, #136]	; (6000195c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018d2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018d6:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018da:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018de:	4820      	ldr	r0, [pc, #128]	; (60001960 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e4:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018e6:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018ea:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600018ee:	bf00      	nop
	asm("nop");
600018f0:	bf00      	nop
	asm("nop");
600018f2:	bf00      	nop
	asm("nop");
600018f4:	bf00      	nop
	asm("nop");
600018f6:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018f8:	2201      	movs	r2, #1
600018fa:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001902:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001906:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000190a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000190e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001912:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001916:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000191a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000191e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001922:	4770      	bx	lr
60001924:	1000003f 	.word	0x1000003f
60001928:	07080025 	.word	0x07080025
6000192c:	00100009 	.word	0x00100009
60001930:	200041c0 	.word	0x200041c0
60001934:	00200013 	.word	0x00200013
60001938:	07020021 	.word	0x07020021
6000193c:	20000014 	.word	0x20000014
60001940:	13080025 	.word	0x13080025
60001944:	10000009 	.word	0x10000009
60001948:	20200016 	.word	0x20200016
6000194c:	130b0027 	.word	0x130b0027
60001950:	40000017 	.word	0x40000017
60001954:	60000018 	.word	0x60000018
60001958:	070b002f 	.word	0x070b002f
6000195c:	70000019 	.word	0x70000019
60001960:	8000001a 	.word	0x8000001a

60001964 <configure_external_ram>:
{
60001964:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001966:	4bb8      	ldr	r3, [pc, #736]	; (60001c48 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001968:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000196a:	4eb8      	ldr	r6, [pc, #736]	; (60001c4c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000196c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000196e:	4fb8      	ldr	r7, [pc, #736]	; (60001c50 <configure_external_ram+0x2ec>)
{
60001970:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001972:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001976:	49b7      	ldr	r1, [pc, #732]	; (60001c54 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001978:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000197c:	4db6      	ldr	r5, [pc, #728]	; (60001c58 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000197e:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001982:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001986:	4cb5      	ldr	r4, [pc, #724]	; (60001c5c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001988:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000198c:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001990:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001994:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001998:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000199c:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019a0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019a2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019a4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019a6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019a8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600019b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600019b6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019ba:	4aa9      	ldr	r2, [pc, #676]	; (60001c60 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600019bc:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600019c0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600019c4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600019c8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600019cc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019d0:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600019d2:	4ba4      	ldr	r3, [pc, #656]	; (60001c64 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019d4:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600019d6:	48a4      	ldr	r0, [pc, #656]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019d8:	49a4      	ldr	r1, [pc, #656]	; (60001c6c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600019da:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019dc:	4aa4      	ldr	r2, [pc, #656]	; (60001c70 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019de:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600019e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600019e4:	f043 030c 	orr.w	r3, r3, #12
600019e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019ec:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600019f0:	6803      	ldr	r3, [r0, #0]
600019f2:	f043 0302 	orr.w	r3, r3, #2
600019f6:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019f8:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019fa:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019fc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a00:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a02:	4b9c      	ldr	r3, [pc, #624]	; (60001c74 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a04:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a06:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a08:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a0a:	4c9b      	ldr	r4, [pc, #620]	; (60001c78 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a0c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a0e:	4a9b      	ldr	r2, [pc, #620]	; (60001c7c <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a14:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a16:	68c3      	ldr	r3, [r0, #12]
60001a18:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001a1c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a1e:	6a03      	ldr	r3, [r0, #32]
60001a20:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a22:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a24:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a26:	6a03      	ldr	r3, [r0, #32]
60001a28:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a2a:	4a95      	ldr	r2, [pc, #596]	; (60001c80 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a2c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a2e:	4c95      	ldr	r4, [pc, #596]	; (60001c84 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a30:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a32:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a34:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001a36:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a38:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001a40:	f043 0301 	orr.w	r3, r3, #1
60001a44:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001a48:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a4c:	498e      	ldr	r1, [pc, #568]	; (60001c88 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001a52:	f043 0301 	orr.w	r3, r3, #1
60001a56:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a5a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a5e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a60:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a62:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a64:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a68:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a6a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a6c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a6e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a72:	6803      	ldr	r3, [r0, #0]
60001a74:	f023 0302 	bic.w	r3, r3, #2
60001a78:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a7a:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a7c:	4b83      	ldr	r3, [pc, #524]	; (60001c8c <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a7e:	4984      	ldr	r1, [pc, #528]	; (60001c90 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a80:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a82:	f843 2b04 	str.w	r2, [r3], #4
60001a86:	428b      	cmp	r3, r1
60001a88:	d1fb      	bne.n	60001a82 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a8a:	4a77      	ldr	r2, [pc, #476]	; (60001c68 <configure_external_ram+0x304>)
60001a8c:	6813      	ldr	r3, [r2, #0]
60001a8e:	f043 0301 	orr.w	r3, r3, #1
60001a92:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a94:	6813      	ldr	r3, [r2, #0]
60001a96:	f013 0301 	ands.w	r3, r3, #1
60001a9a:	d1fb      	bne.n	60001a94 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a9c:	487a      	ldr	r0, [pc, #488]	; (60001c88 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a9e:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001aa0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001aa4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001aa6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001aaa:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001aac:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001ab0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001ab4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001ab8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001abc:	4975      	ldr	r1, [pc, #468]	; (60001c94 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001abe:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001ac2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001ac6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001aca:	4873      	ldr	r0, [pc, #460]	; (60001c98 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001acc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001ad0:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001ad4:	4c71      	ldr	r4, [pc, #452]	; (60001c9c <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001ad6:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001ada:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001ade:	4970      	ldr	r1, [pc, #448]	; (60001ca0 <configure_external_ram+0x33c>)
60001ae0:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae4:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001ae6:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001aea:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aee:	485e      	ldr	r0, [pc, #376]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001af0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af8:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001afc:	6943      	ldr	r3, [r0, #20]
60001afe:	07da      	lsls	r2, r3, #31
60001b00:	d5fc      	bpl.n	60001afc <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b02:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b04:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b0a:	4957      	ldr	r1, [pc, #348]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b0e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b12:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b16:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b1a:	694b      	ldr	r3, [r1, #20]
60001b1c:	07db      	lsls	r3, r3, #31
60001b1e:	d5fc      	bpl.n	60001b1a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b20:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b22:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b28:	4a4f      	ldr	r2, [pc, #316]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b2a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b2c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b30:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b34:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b38:	6953      	ldr	r3, [r2, #20]
60001b3a:	07df      	lsls	r7, r3, #31
60001b3c:	d5fc      	bpl.n	60001b38 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b40:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b42:	4858      	ldr	r0, [pc, #352]	; (60001ca4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4948      	ldr	r1, [pc, #288]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b4c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	694b      	ldr	r3, [r1, #20]
60001b56:	07de      	lsls	r6, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b5a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b5e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b62:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b64:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b66:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b68:	4293      	cmp	r3, r2
60001b6a:	d165      	bne.n	60001c38 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b6c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b72:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b74:	483c      	ldr	r0, [pc, #240]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b76:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b7a:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b7e:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b82:	6943      	ldr	r3, [r0, #20]
60001b84:	07dd      	lsls	r5, r3, #31
60001b86:	d5fc      	bpl.n	60001b82 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b88:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b8a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b8e:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b90:	4a35      	ldr	r2, [pc, #212]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b94:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b98:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b9c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ba0:	6953      	ldr	r3, [r2, #20]
60001ba2:	07dc      	lsls	r4, r3, #31
60001ba4:	d5fc      	bpl.n	60001ba0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ba6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ba8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bb0:	492d      	ldr	r1, [pc, #180]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001bb4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bb8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bbc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bc0:	694b      	ldr	r3, [r1, #20]
60001bc2:	07d8      	lsls	r0, r3, #31
60001bc4:	d5fc      	bpl.n	60001bc0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bc6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001bc8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bcc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bd0:	4a25      	ldr	r2, [pc, #148]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bd2:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001bd4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bd8:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bdc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be0:	6953      	ldr	r3, [r2, #20]
60001be2:	07d9      	lsls	r1, r3, #31
60001be4:	d5fc      	bpl.n	60001be0 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001be6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001be8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bec:	482d      	ldr	r0, [pc, #180]	; (60001ca4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bee:	491e      	ldr	r1, [pc, #120]	; (60001c68 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bf0:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001bf2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bf6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bfa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bfe:	694b      	ldr	r3, [r1, #20]
60001c00:	07da      	lsls	r2, r3, #31
60001c02:	d5fc      	bpl.n	60001bfe <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001c04:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c08:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001c0c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001c0e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001c10:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c12:	4293      	cmp	r3, r2
60001c14:	d050      	beq.n	60001cb8 <configure_external_ram+0x354>
60001c16:	2508      	movs	r5, #8
60001c18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001c1c:	4922      	ldr	r1, [pc, #136]	; (60001ca8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c1e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001c20:	4b22      	ldr	r3, [pc, #136]	; (60001cac <configure_external_ram+0x348>)
			external_psram_size = 16;
60001c22:	4a23      	ldr	r2, [pc, #140]	; (60001cb0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c24:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001c26:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001c28:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c2a:	2301      	movs	r3, #1
60001c2c:	4821      	ldr	r0, [pc, #132]	; (60001cb4 <configure_external_ram+0x350>)
60001c2e:	4422      	add	r2, r4
60001c30:	f000 f9da 	bl	60001fe8 <__sm_set_pool_veneer>
}
60001c34:	b003      	add	sp, #12
60001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c38:	4b1e      	ldr	r3, [pc, #120]	; (60001cb4 <configure_external_ram+0x350>)
60001c3a:	2200      	movs	r2, #0
60001c3c:	e9c3 2200 	strd	r2, r2, [r3]
60001c40:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001c44:	b003      	add	sp, #12
60001c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001c48:	401f8000 	.word	0x401f8000
60001c4c:	0001b0f9 	.word	0x0001b0f9
60001c50:	000110f9 	.word	0x000110f9
60001c54:	401f8400 	.word	0x401f8400
60001c58:	000170f9 	.word	0x000170f9
60001c5c:	400fc000 	.word	0x400fc000
60001c60:	1ffffcff 	.word	0x1ffffcff
60001c64:	a0000300 	.word	0xa0000300
60001c68:	402a4000 	.word	0x402a4000
60001c6c:	402a8000 	.word	0x402a8000
60001c70:	ffff0012 	.word	0xffff0012
60001c74:	00f737ff 	.word	0x00f737ff
60001c78:	80000040 	.word	0x80000040
60001c7c:	7cf0ff00 	.word	0x7cf0ff00
60001c80:	830f00ff 	.word	0x830f00ff
60001c84:	00020063 	.word	0x00020063
60001c88:	5af05af0 	.word	0x5af05af0
60001c8c:	402a4200 	.word	0x402a4200
60001c90:	402a4300 	.word	0x402a4300
60001c94:	3018049f 	.word	0x3018049f
60001c98:	0a1806eb 	.word	0x0a1806eb
60001c9c:	0a180638 	.word	0x0a180638
60001ca0:	26013206 	.word	0x26013206
60001ca4:	00030004 	.word	0x00030004
60001ca8:	70000000 	.word	0x70000000
60001cac:	70000000 	.word	0x70000000
60001cb0:	2000418e 	.word	0x2000418e
60001cb4:	20004068 	.word	0x20004068
	FLEXSPI2_IPCR0 = addr;
60001cb8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001cbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001cc0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001cc2:	4808      	ldr	r0, [pc, #32]	; (60001ce4 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001cc4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001cc8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ccc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001cd0:	6943      	ldr	r3, [r0, #20]
60001cd2:	07db      	lsls	r3, r3, #31
60001cd4:	d5fc      	bpl.n	60001cd0 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001cd6:	2301      	movs	r3, #1
60001cd8:	2510      	movs	r5, #16
60001cda:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001cde:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ce0:	e79c      	b.n	60001c1c <configure_external_ram+0x2b8>
60001ce2:	bf00      	nop
60001ce4:	402a4000 	.word	0x402a4000

60001ce8 <usb_pll_start>:
{
60001ce8:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cea:	4a15      	ldr	r2, [pc, #84]	; (60001d40 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cec:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cf2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cf6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cfa:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cfe:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d02:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001d04:	f013 0f02 	tst.w	r3, #2
60001d08:	d10e      	bne.n	60001d28 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001d0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001d0e:	d00f      	beq.n	60001d30 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001d14:	d00e      	beq.n	60001d34 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d16:	2b00      	cmp	r3, #0
60001d18:	daf3      	bge.n	60001d02 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001d1e:	d10b      	bne.n	60001d38 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d20:	065b      	lsls	r3, r3, #25
60001d22:	d50b      	bpl.n	60001d3c <usb_pll_start+0x54>
}
60001d24:	bcf0      	pop	{r4, r5, r6, r7}
60001d26:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d28:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001d2a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d2c:	6190      	str	r0, [r2, #24]
			continue;
60001d2e:	e7e8      	b.n	60001d02 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d30:	6155      	str	r5, [r2, #20]
			continue;
60001d32:	e7e6      	b.n	60001d02 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d34:	6156      	str	r6, [r2, #20]
			continue;
60001d36:	e7e4      	b.n	60001d02 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d38:	6191      	str	r1, [r2, #24]
			continue;
60001d3a:	e7e2      	b.n	60001d02 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d3c:	6157      	str	r7, [r2, #20]
			continue;
60001d3e:	e7e0      	b.n	60001d02 <usb_pll_start+0x1a>
60001d40:	400d8000 	.word	0x400d8000

60001d44 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d44:	4a3f      	ldr	r2, [pc, #252]	; (60001e44 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001d48:	493f      	ldr	r1, [pc, #252]	; (60001e48 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d4a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d52:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d56:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001e4c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d5a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001e50 <tempmon_init+0x10c>
{
60001d62:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d68:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d6c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d70:	4d38      	ldr	r5, [pc, #224]	; (60001e54 <tempmon_init+0x110>)
60001d72:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d74:	4c38      	ldr	r4, [pc, #224]	; (60001e58 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d76:	4839      	ldr	r0, [pc, #228]	; (60001e5c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d78:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7a:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d7e:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d80:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d88:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	ee07 1a10 	vmov	s14, r1
60001d90:	4b33      	ldr	r3, [pc, #204]	; (60001e60 <tempmon_init+0x11c>)
60001d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d96:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d9c:	4931      	ldr	r1, [pc, #196]	; (60001e64 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d9e:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001da6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001daa:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dae:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001db2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dbe:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dc2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dca:	4827      	ldr	r0, [pc, #156]	; (60001e68 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dcc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd0:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd4:	ee75 5a87 	vadd.f32	s11, s11, s14
60001dd8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ddc:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001de0:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001de8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dec:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001df4:	ee16 3a10 	vmov	r3, s12
60001df8:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e00:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001e04:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e06:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e0a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001e12:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001e16:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e18:	4914      	ldr	r1, [pc, #80]	; (60001e6c <tempmon_init+0x128>)
60001e1a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001e1e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e22:	f043 0302 	orr.w	r3, r3, #2
60001e26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001e2a:	4b11      	ldr	r3, [pc, #68]	; (60001e70 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e2c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001e30:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e38:	2201      	movs	r2, #1
}
60001e3a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001e40:	4770      	bx	lr
60001e42:	bf00      	nop
60001e44:	400d8100 	.word	0x400d8100
60001e48:	401f4400 	.word	0x401f4400
60001e4c:	42aa0000 	.word	0x42aa0000
60001e50:	42b40000 	.word	0x42b40000
60001e54:	20004154 	.word	0x20004154
60001e58:	20004150 	.word	0x20004150
60001e5c:	20004158 	.word	0x20004158
60001e60:	2000415c 	.word	0x2000415c
60001e64:	0fff0000 	.word	0x0fff0000
60001e68:	e000e400 	.word	0xe000e400
60001e6c:	20003800 	.word	0x20003800
60001e70:	00006861 	.word	0x00006861

60001e74 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e74:	4b31      	ldr	r3, [pc, #196]	; (60001f3c <usb_init+0xc8>)
60001e76:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e7a:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e7c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e80:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e84:	f000 f89c 	bl	60001fc0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e88:	4a2d      	ldr	r2, [pc, #180]	; (60001f40 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e8a:	492e      	ldr	r1, [pc, #184]	; (60001f44 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e8c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e90:	482d      	ldr	r0, [pc, #180]	; (60001f48 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e92:	f043 0303 	orr.w	r3, r3, #3
60001e96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e9a:	4b2c      	ldr	r3, [pc, #176]	; (60001f4c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e9c:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ea0:	6802      	ldr	r2, [r0, #0]
60001ea2:	421a      	tst	r2, r3
60001ea4:	d103      	bne.n	60001eae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001ea6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001eaa:	079a      	lsls	r2, r3, #30
60001eac:	d01b      	beq.n	60001ee6 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001eae:	4a25      	ldr	r2, [pc, #148]	; (60001f44 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001eb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001eb4:	4b24      	ldr	r3, [pc, #144]	; (60001f48 <usb_init+0xd4>)
60001eb6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001eb8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001ebc:	f043 0302 	orr.w	r3, r3, #2
60001ec0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001ec4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001ec8:	079b      	lsls	r3, r3, #30
60001eca:	d4fb      	bmi.n	60001ec4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001ecc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001ed0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ed4:	4b1c      	ldr	r3, [pc, #112]	; (60001f48 <usb_init+0xd4>)
60001ed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001eda:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001ede:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ee0:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001ee2:	f000 f889 	bl	60001ff8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ee6:	4a18      	ldr	r2, [pc, #96]	; (60001f48 <usb_init+0xd4>)
60001ee8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001eec:	4c15      	ldr	r4, [pc, #84]	; (60001f44 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001eee:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ef0:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ef2:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ef4:	4b16      	ldr	r3, [pc, #88]	; (60001f50 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ef6:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ef8:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001efc:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f00:	4618      	mov	r0, r3
60001f02:	f000 f875 	bl	60001ff0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001f06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f0a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001f0c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001f10:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001f14:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001f16:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001f1a:	641a      	str	r2, [r3, #64]	; 0x40
60001f1c:	4b0d      	ldr	r3, [pc, #52]	; (60001f54 <usb_init+0xe0>)
60001f1e:	4a0e      	ldr	r2, [pc, #56]	; (60001f58 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001f20:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001f24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001f28:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001f2c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001f30:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001f32:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001f36:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001f3a:	bd10      	pop	{r4, pc}
60001f3c:	400d8000 	.word	0x400d8000
60001f40:	400fc000 	.word	0x400fc000
60001f44:	402e0000 	.word	0x402e0000
60001f48:	400d9000 	.word	0x400d9000
60001f4c:	001e1c00 	.word	0x001e1c00
60001f50:	20000000 	.word	0x20000000
60001f54:	20003800 	.word	0x20003800
60001f58:	00006a49 	.word	0x00006a49

60001f5c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f5c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f5e:	4b0e      	ldr	r3, [pc, #56]	; (60001f98 <_reboot_Teensyduino_+0x3c>)
60001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f62:	079b      	lsls	r3, r3, #30
60001f64:	d400      	bmi.n	60001f68 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f66:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f68:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f6a:	4b0c      	ldr	r3, [pc, #48]	; (60001f9c <_reboot_Teensyduino_+0x40>)
60001f6c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f6e:	4a0c      	ldr	r2, [pc, #48]	; (60001fa0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f70:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f74:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f78:	490a      	ldr	r1, [pc, #40]	; (60001fa4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f7a:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f7e:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f80:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f82:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f8a:	4807      	ldr	r0, [pc, #28]	; (60001fa8 <_reboot_Teensyduino_+0x4c>)
60001f8c:	4a07      	ldr	r2, [pc, #28]	; (60001fac <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f8e:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f90:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f92:	689b      	ldr	r3, [r3, #8]
60001f94:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f96:	bf00      	nop
60001f98:	401f4400 	.word	0x401f4400
60001f9c:	402e0000 	.word	0x402e0000
60001fa0:	400ac000 	.word	0x400ac000
60001fa4:	00200003 	.word	0x00200003
60001fa8:	20208000 	.word	0x20208000
60001fac:	eb120000 	.word	0xeb120000

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__usb_init_serialnumber_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__usb_init_serialnumber_veneer+0x4>
60001fc4:	000071b9 	.word	0x000071b9

60001fc8 <__set_arm_clock_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__set_arm_clock_veneer+0x4>
60001fcc:	00005b3d 	.word	0x00005b3d

60001fd0 <__main_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <__main_veneer+0x4>
60001fd4:	00005fed 	.word	0x00005fed

60001fd8 <____libc_init_array_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <____libc_init_array_veneer+0x4>
60001fdc:	00008c49 	.word	0x00008c49

60001fe0 <__pwm_init_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <__pwm_init_veneer+0x4>
60001fe4:	00006569 	.word	0x00006569

60001fe8 <__sm_set_pool_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__sm_set_pool_veneer+0x4>
60001fec:	00007acd 	.word	0x00007acd

60001ff0 <__memset_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <__memset_veneer+0x4>
60001ff4:	00008a5d 	.word	0x00008a5d

60001ff8 <__delay_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__delay_veneer+0x4>
60001ffc:	00005e2d 	.word	0x00005e2d

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000045 00000411                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:

    }
}

bool TLx493D_A1B6_transferWriteRegisters(TLx493D_t *sensor) {
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
void tlx493d_gen_3_convertTemperatureToRaw(const TLx493D_t *sensor, double temperature, int16_t *rawTemperature) {
    (void) sensor;

    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);

}
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
                                               uint8_t pinEnableValue, uint8_t pinDisableValue,
                                               uint32_t delayAfterEnable, uint32_t delayAfterDisable,
                                               uint32_t delayBeforeEnable, uint32_t delayBeforeDisable) {
            addressPins[0] = { true, pinNumber, pinDriveDirection, pinTristateDirection, pinEnableValue, pinDisableValue,
                               delayAfterEnable, delayAfterDisable, delayBeforeEnable, delayBeforeDisable };
        }
      38:	20003ac0 	.word	0x20003ac0

void tlx493d_gen_2_convertTemperatureToRaw(const TLx493D_t *sensor, double temperature, int16_t *rawTemperature) {
    (void) sensor;
    
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
}
      3c:	20003ac0 	.word	0x20003ac0
                    sensor->comInterface.comLibObj.spi_obj = NULL;
                }
            }

            sensor->comInterface.comLibFuncs = NULL;
        }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
            if( executeInit ) {
                sensor->comInterface.comLibFuncs->init.iic_init(sensor);
            }

            return true;
        }
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

// Setup-related functions
void initializeSerial() {
  Serial.begin(115200);
}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      60:	200040c0 	.word	0x200040c0
      64:	60014c00 	.word	0x60014c00

00000068 <__tcf_0>:
                /**
                 * @brief The function `~TLx493D` is the destructor of the template class.
                 * 
                 */
                ~TLx493D() {
                }
      68:	4801      	ldr	r0, [pc, #4]	; (70 <__tcf_0+0x8>)
      6a:	f001 bbb3 	b.w	17d4 <ifx::tlx493d::Kit2GoBoardSupport::~Kit2GoBoardSupport()>
      6e:	bf00      	nop
      70:	20003ca8 	.word	0x20003ca8

00000074 <setup>:
  ADC2_CFG = mode1;
      74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}
      78:	4d1d      	ldr	r5, [pc, #116]	; (f0 <setup+0x7c>)
      7a:	f240 28ee 	movw	r8, #750	; 0x2ee
      7e:	4c1d      	ldr	r4, [pc, #116]	; (f4 <setup+0x80>)
      80:	4f1d      	ldr	r7, [pc, #116]	; (f8 <setup+0x84>)
      82:	f8df 9078 	ldr.w	r9, [pc, #120]	; fc <setup+0x88>
      86:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
      88:	f007 fc7c 	bl	7984 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      8c:	7823      	ldrb	r3, [r4, #0]
      8e:	b30b      	cbz	r3, d4 <setup+0x60>
      90:	783b      	ldrb	r3, [r7, #0]
      92:	07db      	lsls	r3, r3, #31
      94:	d51e      	bpl.n	d4 <setup+0x60>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      96:	682b      	ldr	r3, [r5, #0]
      98:	f8d9 2000 	ldr.w	r2, [r9]
      9c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      9e:	2b0e      	cmp	r3, #14
      a0:	d918      	bls.n	d4 <setup+0x60>
float lastMagField[NUM_SENSORS][3] = {{0}}; // Store last readings for all sensors
int freezeCounter = 0;

void setup(){
  Serial.begin(115200);
  delay(50);
      a2:	2032      	movs	r0, #50	; 0x32
      a4:	f005 fec2 	bl	5e2c <delay>

  initializeSensors();
      a8:	f000 fac8 	bl	63c <initializeSensors()>
  delay(50);
      ac:	2032      	movs	r0, #50	; 0x32
      ae:	f005 febd 	bl	5e2c <delay>

  initializeSolenoids();
      b2:	f000 fb51 	bl	758 <initializeSolenoids()>
  delay(50);
      b6:	2032      	movs	r0, #50	; 0x32
      b8:	f005 feb8 	bl	5e2c <delay>

  calibrateSensors();
      bc:	f000 fd6e 	bl	b9c <calibrateSensors()>
  delay(50);
      c0:	2032      	movs	r0, #50	; 0x32
      c2:	f005 feb3 	bl	5e2c <delay>

  calibrateDirectFeedthrough();
      c6:	f000 fe03 	bl	cd0 <calibrateDirectFeedthrough()>
  delay(50);
      ca:	2032      	movs	r0, #50	; 0x32
}
      cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  delay(50);
      d0:	f005 beac 	b.w	5e2c <delay>
			uint32_t elapsed = systick_millis_count - millis_begin;
      d4:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
      d6:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
      d8:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
      da:	b12a      	cbz	r2, e8 <setup+0x74>
				if (elapsed > 2000) break;
      dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      e0:	d8df      	bhi.n	a2 <setup+0x2e>
			yield();
      e2:	f007 fc4f 	bl	7984 <yield>
      e6:	e7cf      	b.n	88 <setup+0x14>
				if (elapsed > 750) break;
      e8:	4543      	cmp	r3, r8
      ea:	d9fa      	bls.n	e2 <setup+0x6e>
      ec:	e7d9      	b.n	a2 <setup+0x2e>
      ee:	bf00      	nop
      f0:	20004168 	.word	0x20004168
      f4:	20004196 	.word	0x20004196
      f8:	20004195 	.word	0x20004195
      fc:	20004178 	.word	0x20004178

00000100 <loop>:

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
     100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     104:	4da2      	ldr	r5, [pc, #648]	; (390 <loop+0x290>)
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
		}
	}
	else
	for (mask=0x01; mask; mask <<= 1) {
     106:	ed2d 8b02 	vpush	{d8}
     10a:	f005 fee3 	bl	5ed4 <micros>
	if (pin >= CORE_NUM_DIGITAL) return;
     10e:	682b      	ldr	r3, [r5, #0]
     110:	4604      	mov	r4, r0
     112:	1ac3      	subs	r3, r0, r3
     114:	2bc7      	cmp	r3, #199	; 0xc7
     116:	d876      	bhi.n	206 <loop+0x106>
     118:	4d9e      	ldr	r5, [pc, #632]	; (394 <loop+0x294>)
     11a:	682b      	ldr	r3, [r5, #0]
     11c:	1ae3      	subs	r3, r4, r3
     11e:	2bc7      	cmp	r3, #199	; 0xc7
     120:	d92d      	bls.n	17e <loop+0x7e>
     122:	4b9d      	ldr	r3, [pc, #628]	; (398 <loop+0x298>)
	pinmode = *(p->reg + 1);
     124:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
     128:	edd3 7a00 	vldr	s15, [r3]
	if (pinmode & mask) {
     12c:	eef0 7ae7 	vabs.f32	s15, s15
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     130:	eef4 7ac7 	vcmpe.f32	s15, s14
	mask = p->mask;
     134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (pinmode & mask) {
     138:	dc25      	bgt.n	186 <loop+0x86>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	eddf 7a98 	vldr	s15, [pc, #608]	; 39c <loop+0x29c>
     13e:	4f98      	ldr	r7, [pc, #608]	; (3a0 <loop+0x2a0>)
     140:	eef0 0a67 	vmov.f32	s1, s15
     144:	eeb0 0a67 	vmov.f32	s0, s15
     148:	edc7 7a00 	vstr	s15, [r7]
     14c:	4e95      	ldr	r6, [pc, #596]	; (3a4 <loop+0x2a4>)
     14e:	edc6 0a00 	vstr	s1, [r6]
     152:	f000 f9cb 	bl	4ec <applyControlSignals(float, float)>
     156:	4b94      	ldr	r3, [pc, #592]	; (3a8 <loop+0x2a8>)
     158:	6839      	ldr	r1, [r7, #0]
     15a:	6832      	ldr	r2, [r6, #0]
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
     15c:	6019      	str	r1, [r3, #0]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     15e:	4993      	ldr	r1, [pc, #588]	; (3ac <loop+0x2ac>)
     160:	4b93      	ldr	r3, [pc, #588]	; (3b0 <loop+0x2b0>)
     162:	4894      	ldr	r0, [pc, #592]	; (3b4 <loop+0x2b4>)

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     164:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(hardware->irq);
     166:	680b      	ldr	r3, [r1, #0]
     168:	4a93      	ldr	r2, [pc, #588]	; (3b8 <loop+0x2b8>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     16a:	3301      	adds	r3, #1
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     16c:	602c      	str	r4, [r5, #0]
     16e:	fb00 2203 	mla	r2, r0, r3, r2
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     172:	4892      	ldr	r0, [pc, #584]	; (3bc <loop+0x2bc>)
     174:	600b      	str	r3, [r1, #0]
	NVIC_ENABLE_IRQ(hardware->irq);
     176:	ebb0 0f72 	cmp.w	r0, r2, ror #1
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     17a:	f200 80dd 	bhi.w	338 <loop+0x238>
	NVIC_ENABLE_IRQ(hardware->irq);
     17e:	ecbd 8b02 	vpop	{d8}
     182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     186:	4a8e      	ldr	r2, [pc, #568]	; (3c0 <loop+0x2c0>)
     188:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
     18c:	4b8d      	ldr	r3, [pc, #564]	; (3c4 <loop+0x2c4>)
     18e:	ed92 0a00 	vldr	s0, [r2]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     192:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 3c8 <loop+0x2c8>
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     196:	ee20 0a06 	vmul.f32	s0, s0, s12
     19a:	edd3 6a00 	vldr	s13, [r3]
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     19e:	eddf 7a8b 	vldr	s15, [pc, #556]	; 3cc <loop+0x2cc>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1a2:	eea6 0a87 	vfma.f32	s0, s13, s14
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
     1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     1ae:	f100 80d6 	bmi.w	35e <loop+0x25e>

	// Bit 5 TXINVERT
	if (format & 0x20) {
     1b2:	eddf 7a87 	vldr	s15, [pc, #540]	; 3d0 <loop+0x2d0>
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1b6:	eeb4 0a67 	vcmp.f32	s0, s15

		// if half duplex mode - PU on TX should be PD. 
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1be:	fe37 0a80 	vselgt.f32	s0, s15, s0
     1c2:	4a84      	ldr	r2, [pc, #528]	; (3d4 <loop+0x2d4>)
     1c4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
     1c8:	4b83      	ldr	r3, [pc, #524]	; (3d8 <loop+0x2d8>)
     1ca:	edd2 0a00 	vldr	s1, [r2]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ce:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 3c8 <loop+0x2c8>
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1d2:	ee60 0a86 	vmul.f32	s1, s1, s12
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1d6:	edd3 6a00 	vldr	s13, [r3]
	port->STAT = c;
     1da:	eddf 7a7c 	vldr	s15, [pc, #496]	; 3cc <loop+0x2cc>

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1de:	4f70      	ldr	r7, [pc, #448]	; (3a0 <loop+0x2a0>)
     1e0:	eee6 0a87 	vfma.f32	s1, s13, s14
     1e4:	ed87 0a00 	vstr	s0, [r7]

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );

	// Enable the processing of serialEvent for this object, if user function exists.
	// Linker will assign NULL for a weak function which isn't implemented.
	if (hardware->_serialEvent) addToSerialEventsList();
     1e8:	eef4 0ae7 	vcmpe.f32	s1, s15
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     1f0:	f100 80b8 	bmi.w	364 <loop+0x264>
     1f4:	eddf 7a76 	vldr	s15, [pc, #472]	; 3d0 <loop+0x2d0>
     1f8:	eef4 0a67 	vcmp.f32	s1, s15
     1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     200:	fe77 0aa0 	vselgt.f32	s1, s15, s1
     204:	e7a2      	b.n	14c <loop+0x4c>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     206:	ee07 3a90 	vmov	s15, r3
     20a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 3dc <loop+0x2dc>
};
     20e:	4b74      	ldr	r3, [pc, #464]	; (3e0 <loop+0x2e0>)
     210:	2016      	movs	r0, #22
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     212:	eeb8 8a67 	vcvt.f32.u32	s16, s15
     216:	4e73      	ldr	r6, [pc, #460]	; (3e4 <loop+0x2e4>)
     218:	4f73      	ldr	r7, [pc, #460]	; (3e8 <loop+0x2e8>)
     21a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 40c <loop+0x30c>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     21e:	eec7 7a08 	vdiv.f32	s15, s14, s16
     222:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 408 <loop+0x308>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     226:	edc3 7a00 	vstr	s15, [r3]
     22a:	f000 f90d 	bl	448 <getSolenoidCurrent(unsigned short)>
     22e:	2015      	movs	r0, #21
     230:	ed86 0a00 	vstr	s0, [r6]
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     234:	f000 f908 	bl	448 <getSolenoidCurrent(unsigned short)>
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     238:	2014      	movs	r0, #20
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     23a:	ed87 0a00 	vstr	s0, [r7]
     23e:	f000 f903 	bl	448 <getSolenoidCurrent(unsigned short)>
     242:	2017      	movs	r0, #23
     244:	ed88 0a00 	vstr	s0, [r8]
     248:	f000 f8fe 	bl	448 <getSolenoidCurrent(unsigned short)>
     24c:	ed89 0a00 	vstr	s0, [r9]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     250:	f000 fb0c 	bl	86c <readAllSensors()>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     254:	edd9 1a00 	vldr	s3, [r9]
     258:	ed98 1a00 	vldr	s2, [r8]
     25c:	edd7 0a00 	vldr	s1, [r7]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     260:	ed96 0a00 	vldr	s0, [r6]
     264:	f000 fb3c 	bl	8e0 <processSensorData(float, float, float, float)>
};
     268:	4b60      	ldr	r3, [pc, #384]	; (3ec <loop+0x2ec>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     26a:	eddf 7a61 	vldr	s15, [pc, #388]	; 3f0 <loop+0x2f0>
     26e:	ed93 6a00 	vldr	s12, [r3]
     272:	ed93 7a01 	vldr	s14, [r3, #4]
     276:	485f      	ldr	r0, [pc, #380]	; (3f4 <loop+0x2f4>)
     278:	ee26 6a27 	vmul.f32	s12, s12, s15
     27c:	4a5e      	ldr	r2, [pc, #376]	; (3f8 <loop+0x2f8>)
     27e:	ee27 7a27 	vmul.f32	s14, s14, s15
     282:	ed90 5a00 	vldr	s10, [r0]
     286:	edd2 5a00 	vldr	s11, [r2]
     28a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     28e:	eeb7 1ac5 	vcvt.f64.f32	d1, s10
     292:	6899      	ldr	r1, [r3, #8]
     294:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
     298:	4b4f      	ldr	r3, [pc, #316]	; (3d8 <loop+0x2d8>)
     29a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    prevMagFieldX = magFieldX;
    prevMagFieldY = magFieldY;
    prevMagFieldZ = magFieldZ;
    prevSensorTime = currentTime;
     29e:	602c      	str	r4, [r5, #0]
    magFieldX = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][0] + (1.0 - ALPHA) * prevMagFieldX;
     2a0:	4d48      	ldr	r5, [pc, #288]	; (3c4 <loop+0x2c4>)
     2a2:	ed9f 4b33 	vldr	d4, [pc, #204]	; 370 <loop+0x270>
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2a6:	ed9f 3b34 	vldr	d3, [pc, #208]	; 378 <loop+0x278>
    magFieldY = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][1] + (1.0 - ALPHA) * prevMagFieldY;
     2aa:	eea2 7b04 	vfma.f64	d7, d2, d4
    magFieldX = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][0] + (1.0 - ALPHA) * prevMagFieldX;
     2ae:	eea1 6b04 	vfma.f64	d6, d1, d4
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2b2:	ed9f 1b33 	vldr	d1, [pc, #204]	; 380 <loop+0x280>
    magFieldY = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][1] + (1.0 - ALPHA) * prevMagFieldY;
     2b6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2ba:	ed9f 4b33 	vldr	d4, [pc, #204]	; 388 <loop+0x288>
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     2be:	ee77 5a65 	vsub.f32	s11, s14, s11
    prevMagFieldY = magFieldY;
     2c2:	ed82 7a00 	vstr	s14, [r2]
    magFieldX = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][0] + (1.0 - ALPHA) * prevMagFieldX;
     2c6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2ca:	4a3d      	ldr	r2, [pc, #244]	; (3c0 <loop+0x2c0>)
    magFieldY = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][1] + (1.0 - ALPHA) * prevMagFieldY;
     2cc:	ed83 7a00 	vstr	s14, [r3]
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     2d0:	4b40      	ldr	r3, [pc, #256]	; (3d4 <loop+0x2d4>)
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2d2:	ee36 5a45 	vsub.f32	s10, s12, s10
     2d6:	edd2 7a00 	vldr	s15, [r2]
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     2da:	ed93 7a00 	vldr	s14, [r3]
    prevMagFieldX = magFieldX;
     2de:	ed80 6a00 	vstr	s12, [r0]
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2e2:	ee85 2a08 	vdiv.f32	s4, s10, s16
    magFieldX = ALPHA * rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][0] + (1.0 - ALPHA) * prevMagFieldX;
     2e6:	ed85 6a00 	vstr	s12, [r5]
    magFieldZ = rawMagFieldDetrended[PRIMARY_SENSOR_INDEX][2];
     2ea:	482b      	ldr	r0, [pc, #172]	; (398 <loop+0x298>)
     2ec:	6001      	str	r1, [r0, #0]
    prevMagFieldZ = magFieldZ;
     2ee:	4843      	ldr	r0, [pc, #268]	; (3fc <loop+0x2fc>)
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     2f0:	ee85 5a88 	vdiv.f32	s10, s11, s16
    prevMagFieldZ = magFieldZ;
     2f4:	6001      	str	r1, [r0, #0]

    checkSensorFreeze(lastMagField, &freezeCounter);
     2f6:	4942      	ldr	r1, [pc, #264]	; (400 <loop+0x300>)
     2f8:	4842      	ldr	r0, [pc, #264]	; (404 <loop+0x304>)
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     2fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     2fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     302:	ee26 6b01 	vmul.f64	d6, d6, d1
     306:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     30a:	ee27 7b01 	vmul.f64	d7, d7, d1
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     30e:	ee22 2b03 	vmul.f64	d2, d2, d3
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     312:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     316:	ee25 5b03 	vmul.f64	d5, d5, d3
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     31a:	eea2 6b04 	vfma.f64	d6, d2, d4
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     31e:	eea5 7b04 	vfma.f64	d7, d5, d4
      dMagFieldX = DALPHA * ((magFieldX - prevMagFieldX) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldX;
     322:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     326:	ed82 6a00 	vstr	s12, [r2]
      dMagFieldY = DALPHA * ((magFieldY - prevMagFieldY) / (float)dt * 1e6) + (1.0 - DALPHA) * dMagFieldY;
     32a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     32e:	ed83 7a00 	vstr	s14, [r3]
    checkSensorFreeze(lastMagField, &freezeCounter);
     332:	f000 fb3d 	bl	9b0 <checkSensorFreeze(float (*) [3], int*)>
     336:	e6ef      	b.n	118 <loop+0x18>

    controlLoopCounter++;
    prevControlTime = currentTime;

    if(controlLoopCounter % 10 == 0){
      logSystemState(currentTime, currentXPos, currentXNeg, currentYPos, currentYNeg);
     338:	4833      	ldr	r0, [pc, #204]	; (408 <loop+0x308>)
     33a:	4b2a      	ldr	r3, [pc, #168]	; (3e4 <loop+0x2e4>)
     33c:	4933      	ldr	r1, [pc, #204]	; (40c <loop+0x30c>)
     33e:	4a2a      	ldr	r2, [pc, #168]	; (3e8 <loop+0x2e8>)
     340:	edd0 1a00 	vldr	s3, [r0]
     344:	4620      	mov	r0, r4
     346:	ed93 0a00 	vldr	s0, [r3]
     34a:	ed91 1a00 	vldr	s2, [r1]
     34e:	edd2 0a00 	vldr	s1, [r2]
    }
  }
     352:	ecbd 8b02 	vpop	{d8}
     356:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      logSystemState(currentTime, currentXPos, currentXNeg, currentYPos, currentYNeg);
     35a:	f000 bb75 	b.w	a48 <logSystemState(unsigned long, float, float, float, float)>
      pwmInputX = constrain(Kp * magFieldX + Kd * dMagFieldX, -150, 150);
     35e:	eeb0 0a67 	vmov.f32	s0, s15
     362:	e72e      	b.n	1c2 <loop+0xc2>
      pwmInputY = constrain(Kp * magFieldY + Kd * dMagFieldY, -150, 150);
     364:	eef0 0a67 	vmov.f32	s1, s15
     368:	e6f0      	b.n	14c <loop+0x4c>
     36a:	bf00      	nop
     36c:	f3af 8000 	nop.w
     370:	60000000 	.word	0x60000000
     374:	3fe66666 	.word	0x3fe66666
     378:	00000000 	.word	0x00000000
     37c:	412e8480 	.word	0x412e8480
     380:	98000000 	.word	0x98000000
     384:	3fe99999 	.word	0x3fe99999
     388:	a0000000 	.word	0xa0000000
     38c:	3fc99999 	.word	0x3fc99999
     390:	200040f0 	.word	0x200040f0
     394:	200040d8 	.word	0x200040d8
     398:	200040b0 	.word	0x200040b0
     39c:	00000000 	.word	0x00000000
     3a0:	200040f4 	.word	0x200040f4
     3a4:	200040f8 	.word	0x200040f8
     3a8:	200040e8 	.word	0x200040e8
     3ac:	20004038 	.word	0x20004038
     3b0:	200040ec 	.word	0x200040ec
     3b4:	cccccccd 	.word	0xcccccccd
     3b8:	19999998 	.word	0x19999998
     3bc:	19999999 	.word	0x19999999
     3c0:	2000404c 	.word	0x2000404c
     3c4:	200040a8 	.word	0x200040a8
     3c8:	c2c80000 	.word	0xc2c80000
     3cc:	c3160000 	.word	0xc3160000
     3d0:	43160000 	.word	0x43160000
     3d4:	20004050 	.word	0x20004050
     3d8:	200040ac 	.word	0x200040ac
     3dc:	49742400 	.word	0x49742400
     3e0:	20004114 	.word	0x20004114
     3e4:	20004040 	.word	0x20004040
     3e8:	2000403c 	.word	0x2000403c
     3ec:	20004108 	.word	0x20004108
     3f0:	3e99999a 	.word	0x3e99999a
     3f4:	200040dc 	.word	0x200040dc
     3f8:	200040e0 	.word	0x200040e0
     3fc:	200040e4 	.word	0x200040e4
     400:	20004098 	.word	0x20004098
     404:	2000409c 	.word	0x2000409c
     408:	20004044 	.word	0x20004044
     40c:	20004048 	.word	0x20004048

00000410 <_GLOBAL__sub_I_Sensors>:
     410:	b510      	push	{r4, lr}
                explicit TLx493D(BusType &busObj, TLx493D_IICAddressType_t iicAdr = TLx493D_IIC_ADDR_A0_e) : busWrapper(busObj), iicAddress(iicAdr) {
     412:	4c08      	ldr	r4, [pc, #32]	; (434 <_GLOBAL__sub_I_Sensors+0x24>)
     414:	f104 0020 	add.w	r0, r4, #32
     418:	f001 f9c8 	bl	17ac <ifx::tlx493d::Kit2GoBoardSupport::Kit2GoBoardSupport()>
     41c:	2000      	movs	r0, #0
                 * @brief Constructor of the `TwoWireWrapper` class with a TwoWire function parameter. The passed
                 * TwoWire object is set to the icc attribute.
                 * 
                 * @param[in] bus Pointer to a TwoWire object which is set to icc class attribute. 
                 */
                explicit TwoWireWrapper(TwoWire &bus) : iic(&bus) {
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <_GLOBAL__sub_I_Sensors+0x28>)
     420:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
     424:	66a3      	str	r3, [r4, #104]	; 0x68
TLx493D_A1B6 Sensors[NUM_SENSORS] = {TLx493D_A1B6(Wire, TLx493D_IIC_ADDR_A0_e)};
     426:	4a05      	ldr	r2, [pc, #20]	; (43c <_GLOBAL__sub_I_Sensors+0x2c>)
     428:	4905      	ldr	r1, [pc, #20]	; (440 <_GLOBAL__sub_I_Sensors+0x30>)
     42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TLx493D_A1B6 Sensors[NUM_SENSORS] = {TLx493D_A1B6(Wire, TLx493D_IIC_ADDR_A0_e)};
     42e:	f007 bbe1 	b.w	7bf4 <__aeabi_atexit>
     432:	bf00      	nop
     434:	20003c88 	.word	0x20003c88
     438:	20002ab0 	.word	0x20002ab0
     43c:	20002e88 	.word	0x20002e88
     440:	00000069 	.word	0x00000069
     444:	00000000 	.word	0x00000000

00000448 <getSolenoidCurrent(unsigned short)>:
float getSolenoidCurrent(uint16_t pin) {
     448:	b508      	push	{r3, lr}
  uint16_t data = analogRead(pin);
     44a:	b2c0      	uxtb	r0, r0
     44c:	f005 faee 	bl	5a2c <analogRead>
  float current = voltage_diff/(100.0*0.015); // Gain = 100 (INA214), Rshunt = 0.015Ω
     450:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
  float voltage = (data*3.3)/1023.0;     // ADC to voltage
     454:	b283      	uxth	r3, r0
     456:	ee06 3a10 	vmov	s12, r3
     45a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 488 <getSolenoidCurrent(unsigned short)+0x40>
     45e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     462:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 490 <getSolenoidCurrent(unsigned short)+0x48>
     466:	ee26 6b07 	vmul.f64	d6, d6, d7
  float voltage_diff = voltage - 1.65;       // Centered around 1.65V (no current)
     46a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 498 <getSolenoidCurrent(unsigned short)+0x50>
  float voltage = (data*3.3)/1023.0;     // ADC to voltage
     46e:	ee86 7b04 	vdiv.f64	d7, d6, d4
     472:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float voltage_diff = voltage - 1.65;       // Centered around 1.65V (no current)
     476:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     47a:	ee37 7b45 	vsub.f64	d7, d7, d5
     47e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
}
     482:	ee87 0a00 	vdiv.f32	s0, s14, s0
     486:	bd08      	pop	{r3, pc}
     488:	66666666 	.word	0x66666666
     48c:	400a6666 	.word	0x400a6666
     490:	00000000 	.word	0x00000000
     494:	408ff800 	.word	0x408ff800
     498:	66666666 	.word	0x66666666
     49c:	3ffa6666 	.word	0x3ffa6666

000004a0 <setSolenoidInput(int, int, int)>:
void setSolenoidInput(int pwm, int pin1, int pin2) {
     4a0:	b538      	push	{r3, r4, r5, lr}
  if (pwm > 0) {
     4a2:	1e04      	subs	r4, r0, #0
void setSolenoidInput(int pwm, int pin1, int pin2) {
     4a4:	460b      	mov	r3, r1
     4a6:	4615      	mov	r5, r2
  if (pwm > 0) {
     4a8:	dc15      	bgt.n	4d6 <setSolenoidInput(int, int, int)+0x36>
  } else if (pwm < 0) {
     4aa:	d00a      	beq.n	4c2 <setSolenoidInput(int, int, int)+0x22>
    analogWrite(pin1, 255);
     4ac:	b2d8      	uxtb	r0, r3
     4ae:	21ff      	movs	r1, #255	; 0xff
     4b0:	f005 ff7e 	bl	63b0 <analogWrite>
    analogWrite(pin2, 255 - abs(pwm));
     4b4:	f104 01ff 	add.w	r1, r4, #255	; 0xff
     4b8:	b2e8      	uxtb	r0, r5
}
     4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    analogWrite(pin2, 255 - abs(pwm));
     4be:	f005 bf77 	b.w	63b0 <analogWrite>
    analogWrite(pin1, 0);
     4c2:	b2c8      	uxtb	r0, r1
     4c4:	4621      	mov	r1, r4
     4c6:	f005 ff73 	bl	63b0 <analogWrite>
    analogWrite(pin2, 0);
     4ca:	4621      	mov	r1, r4
     4cc:	b2e8      	uxtb	r0, r5
}
     4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    analogWrite(pin2, 0);
     4d2:	f005 bf6d 	b.w	63b0 <analogWrite>
    analogWrite(pin1, 255 - abs(pwm));
     4d6:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
     4da:	b2d8      	uxtb	r0, r3
     4dc:	f005 ff68 	bl	63b0 <analogWrite>
    analogWrite(pin2, 255);
     4e0:	21ff      	movs	r1, #255	; 0xff
     4e2:	b2e8      	uxtb	r0, r5
}
     4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    analogWrite(pin2, 255);
     4e8:	f005 bf62 	b.w	63b0 <analogWrite>

000004ec <applyControlSignals(float, float)>:
void applyControlSignals(float pwmInputX, float pwmInputY) {
     4ec:	b508      	push	{r3, lr}
     4ee:	ed2d 8b02 	vpush	{d8}
     4f2:	eef0 8a40 	vmov.f32	s17, s0
  setSolenoidInput(pwmInputX, MD2_IN1, MD2_IN2);
     4f6:	2203      	movs	r2, #3
     4f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
     4fc:	2102      	movs	r1, #2
void applyControlSignals(float pwmInputX, float pwmInputY) {
     4fe:	eeb0 8a60 	vmov.f32	s16, s1
  setSolenoidInput(-pwmInputX, MD3_IN1, MD3_IN2);
     502:	eef1 8a68 	vneg.f32	s17, s17
  setSolenoidInput(pwmInputX, MD2_IN1, MD2_IN2);
     506:	ee17 0a90 	vmov	r0, s15
     50a:	f7ff ffc9 	bl	4a0 <setSolenoidInput(int, int, int)>
  setSolenoidInput(-pwmInputX, MD3_IN1, MD3_IN2);
     50e:	2207      	movs	r2, #7
     510:	eefd 7ae8 	vcvt.s32.f32	s15, s17
     514:	2106      	movs	r1, #6
     516:	ee17 0a90 	vmov	r0, s15
     51a:	f7ff ffc1 	bl	4a0 <setSolenoidInput(int, int, int)>
  setSolenoidInput(pwmInputY, MD4_IN1, MD4_IN2);
     51e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  setSolenoidInput(-pwmInputY, MD1_IN1, MD1_IN2);
     522:	eeb1 8a48 	vneg.f32	s16, s16
  setSolenoidInput(pwmInputY, MD4_IN1, MD4_IN2);
     526:	2209      	movs	r2, #9
     528:	2108      	movs	r1, #8
     52a:	ee17 0a90 	vmov	r0, s15
     52e:	f7ff ffb7 	bl	4a0 <setSolenoidInput(int, int, int)>
  setSolenoidInput(-pwmInputY, MD1_IN1, MD1_IN2);
     532:	eefd 7ac8 	vcvt.s32.f32	s15, s16
     536:	2205      	movs	r2, #5
     538:	2104      	movs	r1, #4
}
     53a:	ecbd 8b02 	vpop	{d8}
  setSolenoidInput(-pwmInputY, MD1_IN1, MD1_IN2);
     53e:	ee17 0a90 	vmov	r0, s15
}
     542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setSolenoidInput(-pwmInputY, MD1_IN1, MD1_IN2);
     546:	f7ff bfab 	b.w	4a0 <setSolenoidInput(int, int, int)>
     54a:	bf00      	nop

0000054c <clearI2CBus()>:
  Wire.begin();
  Wire.setClock(I2C_FREQUENCY);
  delay(50);
}

void clearI2CBus() {
     54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pinMode(SDA, OUTPUT);
     54e:	2101      	movs	r1, #1
     550:	2012      	movs	r0, #18
     552:	f005 fd13 	bl	5f7c <pinMode>
  pinMode(SCL, OUTPUT);
     556:	2101      	movs	r1, #1
     558:	2013      	movs	r0, #19

  digitalWrite(SDA, HIGH);
  digitalWrite(SCL, HIGH);
  delay(10);
     55a:	2509      	movs	r5, #9
  pinMode(SCL, OUTPUT);
     55c:	f005 fd0e 	bl	5f7c <pinMode>
  digitalWrite(SDA, HIGH);
     560:	2101      	movs	r1, #1
     562:	2012      	movs	r0, #18
     564:	4e32      	ldr	r6, [pc, #200]	; (630 <clearI2CBus()+0xe4>)
     566:	f005 fcdf 	bl	5f28 <digitalWrite>
  digitalWrite(SCL, HIGH);
     56a:	2013      	movs	r0, #19
     56c:	2101      	movs	r1, #1
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     56e:	4c31      	ldr	r4, [pc, #196]	; (634 <clearI2CBus()+0xe8>)
     570:	f005 fcda 	bl	5f28 <digitalWrite>
  delay(10);
     574:	200a      	movs	r0, #10
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     576:	4f30      	ldr	r7, [pc, #192]	; (638 <clearI2CBus()+0xec>)
     578:	f005 fc58 	bl	5e2c <delay>

  for (int i = 0; i < 9; i++) {
    digitalWrite(SCL, LOW);
     57c:	2100      	movs	r1, #0
     57e:	2013      	movs	r0, #19
     580:	f005 fcd2 	bl	5f28 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     584:	6861      	ldr	r1, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     586:	6832      	ldr	r2, [r6, #0]
     588:	fba7 3202 	umull	r3, r2, r7, r2
     58c:	0c92      	lsrs	r2, r2, #18
     58e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     592:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     594:	6863      	ldr	r3, [r4, #4]
     596:	1a5b      	subs	r3, r3, r1
     598:	429a      	cmp	r2, r3
     59a:	d8fb      	bhi.n	594 <clearI2CBus()+0x48>
    delayMicroseconds(10);
    digitalWrite(SCL, HIGH);
     59c:	2101      	movs	r1, #1
     59e:	2013      	movs	r0, #19
     5a0:	f005 fcc2 	bl	5f28 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     5a4:	6861      	ldr	r1, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     5a6:	6832      	ldr	r2, [r6, #0]
     5a8:	fba7 3202 	umull	r3, r2, r7, r2
     5ac:	0c92      	lsrs	r2, r2, #18
     5ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     5b2:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     5b4:	6863      	ldr	r3, [r4, #4]
     5b6:	1a5b      	subs	r3, r3, r1
     5b8:	429a      	cmp	r2, r3
     5ba:	d8fb      	bhi.n	5b4 <clearI2CBus()+0x68>
  for (int i = 0; i < 9; i++) {
     5bc:	3d01      	subs	r5, #1
     5be:	d1dd      	bne.n	57c <clearI2CBus()+0x30>
    delayMicroseconds(10);
  }

  // Generate STOP condition
  digitalWrite(SDA, LOW);
     5c0:	4629      	mov	r1, r5
     5c2:	2012      	movs	r0, #18
     5c4:	f005 fcb0 	bl	5f28 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     5c8:	6861      	ldr	r1, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     5ca:	4b1b      	ldr	r3, [pc, #108]	; (638 <clearI2CBus()+0xec>)
     5cc:	6832      	ldr	r2, [r6, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     5ce:	4c19      	ldr	r4, [pc, #100]	; (634 <clearI2CBus()+0xe8>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     5d0:	fba3 3202 	umull	r3, r2, r3, r2
     5d4:	0c92      	lsrs	r2, r2, #18
     5d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     5da:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     5dc:	6863      	ldr	r3, [r4, #4]
     5de:	1a5b      	subs	r3, r3, r1
     5e0:	429a      	cmp	r2, r3
     5e2:	d8fb      	bhi.n	5dc <clearI2CBus()+0x90>
  delayMicroseconds(10);
  digitalWrite(SCL, HIGH);
     5e4:	2101      	movs	r1, #1
     5e6:	2013      	movs	r0, #19
     5e8:	f005 fc9e 	bl	5f28 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     5ec:	6861      	ldr	r1, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     5ee:	4b12      	ldr	r3, [pc, #72]	; (638 <clearI2CBus()+0xec>)
     5f0:	6832      	ldr	r2, [r6, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     5f2:	4c10      	ldr	r4, [pc, #64]	; (634 <clearI2CBus()+0xe8>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     5f4:	fba3 3202 	umull	r3, r2, r3, r2
     5f8:	0c92      	lsrs	r2, r2, #18
     5fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     5fe:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     600:	6863      	ldr	r3, [r4, #4]
     602:	1a5b      	subs	r3, r3, r1
     604:	429a      	cmp	r2, r3
     606:	d8fb      	bhi.n	600 <clearI2CBus()+0xb4>
  delayMicroseconds(10);
  digitalWrite(SDA, HIGH);
     608:	2101      	movs	r1, #1
     60a:	2012      	movs	r0, #18
     60c:	f005 fc8c 	bl	5f28 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     610:	6860      	ldr	r0, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     612:	4b09      	ldr	r3, [pc, #36]	; (638 <clearI2CBus()+0xec>)
     614:	6832      	ldr	r2, [r6, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     616:	4907      	ldr	r1, [pc, #28]	; (634 <clearI2CBus()+0xe8>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     618:	fba3 3202 	umull	r3, r2, r3, r2
     61c:	0c92      	lsrs	r2, r2, #18
     61e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     622:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     624:	684b      	ldr	r3, [r1, #4]
     626:	1a1b      	subs	r3, r3, r0
     628:	429a      	cmp	r2, r3
     62a:	d8fb      	bhi.n	624 <clearI2CBus()+0xd8>
  delayMicroseconds(10);
}
     62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     62e:	bf00      	nop
     630:	20001dac 	.word	0x20001dac
     634:	e0001000 	.word	0xe0001000
     638:	431bde83 	.word	0x431bde83

0000063c <initializeSensors()>:
void initializeSensors() {
     63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  clearI2CBus();
     63e:	f7ff ff85 	bl	54c <clearI2CBus()>
  delay(50);
     642:	2032      	movs	r0, #50	; 0x32
     644:	f005 fbf2 	bl	5e2c <delay>
  Wire.begin();
     648:	4d37      	ldr	r5, [pc, #220]	; (728 <initializeSensors()+0xec>)
     64a:	4838      	ldr	r0, [pc, #224]	; (72c <initializeSensors()+0xf0>)
    for (int retry = 0; retry < maxRetries && !initialized; ++retry)
     64c:	2400      	movs	r4, #0
  Wire.begin();
     64e:	f00d fc9b 	bl	df88 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(I2C_FREQUENCY);
     652:	4937      	ldr	r1, [pc, #220]	; (730 <initializeSensors()+0xf4>)
     654:	4835      	ldr	r0, [pc, #212]	; (72c <initializeSensors()+0xf0>)
                    if( ! tlx493d_init(&sensor, sensorType) ) {
                        logError("tlx493d_init failed !");
                        return false;
                    }

                    if( ! initBoardSupport(&sensor, bsc) ) {
     656:	f105 0620 	add.w	r6, r5, #32
     65a:	f000 ff5f 	bl	151c <TwoWire::setClock(unsigned long)>
                        return false;
                    }

                    bsc.init(enablePower, enableSelect, enableExtendedAdress);

                    if( ! initCommunication(&sensor, busWrapper, iicAddress, executeInit) ) {
     65e:	f105 0768 	add.w	r7, r5, #104	; 0x68
  delay(50);
     662:	2032      	movs	r0, #50	; 0x32
     664:	f005 fbe2 	bl	5e2c <delay>
  delay(10);
     668:	200a      	movs	r0, #10
     66a:	f005 fbdf 	bl	5e2c <delay>
                    if( ! tlx493d_init(&sensor, sensorType) ) {
     66e:	2100      	movs	r1, #0
     670:	4628      	mov	r0, r5
     672:	f003 f955 	bl	3920 <tlx493d_init>
     676:	b380      	cbz	r0, 6da <initializeSensors()+0x9e>
                    if( ! initBoardSupport(&sensor, bsc) ) {
     678:	4631      	mov	r1, r6
     67a:	482b      	ldr	r0, [pc, #172]	; (728 <initializeSensors()+0xec>)
     67c:	f000 ff8a 	bl	1594 <ifx::tlx493d::initBoardSupport(TLx493D_t*, ifx::tlx493d::Kit2GoBoardSupport&)>
     680:	2800      	cmp	r0, #0
     682:	d041      	beq.n	708 <initializeSensors()+0xcc>
                    bsc.init(enablePower, enableSelect, enableExtendedAdress);
     684:	2300      	movs	r3, #0
     686:	2101      	movs	r1, #1
     688:	4630      	mov	r0, r6
     68a:	461a      	mov	r2, r3
     68c:	f001 f8a4 	bl	17d8 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)>
                    if( ! initCommunication(&sensor, busWrapper, iicAddress, executeInit) ) {
     690:	2301      	movs	r3, #1
     692:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
     696:	4639      	mov	r1, r7
     698:	4823      	ldr	r0, [pc, #140]	; (728 <initializeSensors()+0xec>)
     69a:	f001 f831 	bl	1700 <ifx::tlx493d::initCommunication(TLx493D_t*, ifx::tlx493d::TwoWireWrapper&, TLx493D_IICAddressType_t, bool)>
     69e:	2800      	cmp	r0, #0
     6a0:	d037      	beq.n	712 <initializeSensors()+0xd6>
                 * @return The function `setDefaultConfig` is returning a boolean value.
                 * @retval false Error.
                 * @retval true Function execution was successful.
                 */
                bool setDefaultConfig() {
                    return ::tlx493d_setDefaultConfig(&sensor);
     6a2:	4628      	mov	r0, r5
     6a4:	f003 f95e 	bl	3964 <tlx493d_setDefaultConfig>
                        logError("initCommunication failed !");
                        return false;
                    }

                    if( ! setDefaultConfig() ) {
     6a8:	2800      	cmp	r0, #0
     6aa:	d037      	beq.n	71c <initializeSensors()+0xe0>
                 * @return The function `isFunctional` is returning a boolean value.
                 * @retval false Error.
                 * @retval true Function execution was successful.  
                 */
                bool isFunctional() {
                    return ::tlx493d_isFunctional(&sensor);
     6ac:	4628      	mov	r0, r5
     6ae:	f003 f95d 	bl	396c <tlx493d_isFunctional>
        initialized =  Sensors[i].begin() && Sensors[i].isFunctional();
     6b2:	b1b0      	cbz	r0, 6e2 <initializeSensors()+0xa6>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6b4:	2120      	movs	r1, #32
     6b6:	481f      	ldr	r0, [pc, #124]	; (734 <initializeSensors()+0xf8>)
     6b8:	f007 f8e6 	bl	7888 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     6bc:	481e      	ldr	r0, [pc, #120]	; (738 <initializeSensors()+0xfc>)
     6be:	f005 f8d7 	bl	5870 <Print::println()>
  Wire.begin();
     6c2:	481a      	ldr	r0, [pc, #104]	; (72c <initializeSensors()+0xf0>)
     6c4:	f00d fc60 	bl	df88 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(I2C_FREQUENCY);
     6c8:	4818      	ldr	r0, [pc, #96]	; (72c <initializeSensors()+0xf0>)
     6ca:	4919      	ldr	r1, [pc, #100]	; (730 <initializeSensors()+0xf4>)
     6cc:	f000 ff26 	bl	151c <TwoWire::setClock(unsigned long)>
  delay(50);
     6d0:	2032      	movs	r0, #50	; 0x32
}
     6d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(50);
     6d6:	f005 bba9 	b.w	5e2c <delay>
                        logError("tlx493d_init failed !");
     6da:	4918      	ldr	r1, [pc, #96]	; (73c <initializeSensors()+0x100>)
     6dc:	4818      	ldr	r0, [pc, #96]	; (740 <initializeSensors()+0x104>)
     6de:	f001 f949 	bl	1974 <logPrintln>
            Serial.printf("Retrying sensor ... attempt %d\n",
     6e2:	3401      	adds	r4, #1
     6e4:	4917      	ldr	r1, [pc, #92]	; (744 <initializeSensors()+0x108>)
     6e6:	4814      	ldr	r0, [pc, #80]	; (738 <initializeSensors()+0xfc>)
     6e8:	4622      	mov	r2, r4
     6ea:	f005 f8dd 	bl	58a8 <Print::printf(char const*, ...)>
            delay(20);
     6ee:	2014      	movs	r0, #20
     6f0:	f005 fb9c 	bl	5e2c <delay>
    for (int retry = 0; retry < maxRetries && !initialized; ++retry)
     6f4:	2c05      	cmp	r4, #5
     6f6:	d1ba      	bne.n	66e <initializeSensors()+0x32>
     6f8:	211c      	movs	r1, #28
     6fa:	4813      	ldr	r0, [pc, #76]	; (748 <initializeSensors()+0x10c>)
     6fc:	f007 f8c4 	bl	7888 <usb_serial_write>
     700:	480d      	ldr	r0, [pc, #52]	; (738 <initializeSensors()+0xfc>)
     702:	f005 f8b5 	bl	5870 <Print::println()>
  for (int i = 0; i < NUM_SENSORS; i++) {    
     706:	e7dc      	b.n	6c2 <initializeSensors()+0x86>
                        logError("initBoardSupport failed !");
     708:	4910      	ldr	r1, [pc, #64]	; (74c <initializeSensors()+0x110>)
     70a:	480d      	ldr	r0, [pc, #52]	; (740 <initializeSensors()+0x104>)
     70c:	f001 f932 	bl	1974 <logPrintln>
     710:	e7e7      	b.n	6e2 <initializeSensors()+0xa6>
                        logError("initCommunication failed !");
     712:	490f      	ldr	r1, [pc, #60]	; (750 <initializeSensors()+0x114>)
     714:	480a      	ldr	r0, [pc, #40]	; (740 <initializeSensors()+0x104>)
     716:	f001 f92d 	bl	1974 <logPrintln>
     71a:	e7e2      	b.n	6e2 <initializeSensors()+0xa6>
                        logError("setDefaultConfig failed !");
     71c:	490d      	ldr	r1, [pc, #52]	; (754 <initializeSensors()+0x118>)
     71e:	4808      	ldr	r0, [pc, #32]	; (740 <initializeSensors()+0x104>)
     720:	f001 f928 	bl	1974 <logPrintln>
     724:	e7dd      	b.n	6e2 <initializeSensors()+0xa6>
     726:	bf00      	nop
     728:	20003c88 	.word	0x20003c88
     72c:	20002ab0 	.word	0x20002ab0
     730:	00061a80 	.word	0x00061a80
     734:	20000fd0 	.word	0x20000fd0
     738:	20001db0 	.word	0x20001db0
     73c:	20000f18 	.word	0x20000f18
     740:	20000f30 	.word	0x20000f30
     744:	20000f90 	.word	0x20000f90
     748:	20000fb0 	.word	0x20000fb0
     74c:	20000f3c 	.word	0x20000f3c
     750:	20000f58 	.word	0x20000f58
     754:	20000f74 	.word	0x20000f74

00000758 <initializeSolenoids()>:


void initializeSolenoids() {
     758:	b508      	push	{r3, lr}
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
     75a:	2008      	movs	r0, #8
     75c:	ed2d 8b02 	vpush	{d8}
     760:	f005 ff7c 	bl	665c <analogWriteRes>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
     764:	200a      	movs	r0, #10
     766:	f005 f9b9 	bl	5adc <analogReadRes>
  // Defining bit-size on read/write operations
  analogWriteResolution(8);
  analogReadResolution(10);

  // Set pin modes
  pinMode(MD1_IN1, OUTPUT);
     76a:	2101      	movs	r1, #1
     76c:	2004      	movs	r0, #4
  pinMode(CURRENT_X_NEG, INPUT);
  pinMode(CURRENT_X_POS, INPUT);
  pinMode(CURRENT_Y_NEG, INPUT);

  // Defining PWM frequency - using standard 31250 Hz
  analogWriteFrequency(MD1_IN1, 31250);
     76e:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 868 <initializeSolenoids()+0x110>
  pinMode(MD1_IN1, OUTPUT);
     772:	f005 fc03 	bl	5f7c <pinMode>
  pinMode(MD1_IN2, OUTPUT);
     776:	2101      	movs	r1, #1
     778:	2005      	movs	r0, #5
     77a:	f005 fbff 	bl	5f7c <pinMode>
  pinMode(MD2_IN1, OUTPUT);
     77e:	2101      	movs	r1, #1
     780:	2002      	movs	r0, #2
     782:	f005 fbfb 	bl	5f7c <pinMode>
  pinMode(MD2_IN2, OUTPUT);
     786:	2101      	movs	r1, #1
     788:	2003      	movs	r0, #3
     78a:	f005 fbf7 	bl	5f7c <pinMode>
  pinMode(MD3_IN1, OUTPUT);
     78e:	2101      	movs	r1, #1
     790:	2006      	movs	r0, #6
     792:	f005 fbf3 	bl	5f7c <pinMode>
  pinMode(MD3_IN2, OUTPUT);
     796:	2101      	movs	r1, #1
     798:	2007      	movs	r0, #7
     79a:	f005 fbef 	bl	5f7c <pinMode>
  pinMode(MD4_IN1, OUTPUT);
     79e:	2101      	movs	r1, #1
     7a0:	2008      	movs	r0, #8
     7a2:	f005 fbeb 	bl	5f7c <pinMode>
  pinMode(MD4_IN2, OUTPUT);
     7a6:	2101      	movs	r1, #1
     7a8:	2009      	movs	r0, #9
     7aa:	f005 fbe7 	bl	5f7c <pinMode>
  pinMode(CURRENT_Y_POS, INPUT);
     7ae:	2100      	movs	r1, #0
     7b0:	2014      	movs	r0, #20
     7b2:	f005 fbe3 	bl	5f7c <pinMode>
  pinMode(CURRENT_X_NEG, INPUT);
     7b6:	2100      	movs	r1, #0
     7b8:	2015      	movs	r0, #21
     7ba:	f005 fbdf 	bl	5f7c <pinMode>
  pinMode(CURRENT_X_POS, INPUT);
     7be:	2100      	movs	r1, #0
     7c0:	2016      	movs	r0, #22
     7c2:	f005 fbdb 	bl	5f7c <pinMode>
  pinMode(CURRENT_Y_NEG, INPUT);
     7c6:	2100      	movs	r1, #0
     7c8:	2017      	movs	r0, #23
     7ca:	f005 fbd7 	bl	5f7c <pinMode>
  analogWriteFrequency(MD1_IN1, 31250);
     7ce:	eeb0 0a48 	vmov.f32	s0, s16
     7d2:	2004      	movs	r0, #4
     7d4:	f005 fe52 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD1_IN2, 31250);
     7d8:	eeb0 0a48 	vmov.f32	s0, s16
     7dc:	2005      	movs	r0, #5
     7de:	f005 fe4d 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD2_IN1, 31250);
     7e2:	eeb0 0a48 	vmov.f32	s0, s16
     7e6:	2002      	movs	r0, #2
     7e8:	f005 fe48 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD2_IN2, 31250);
     7ec:	eeb0 0a48 	vmov.f32	s0, s16
     7f0:	2003      	movs	r0, #3
     7f2:	f005 fe43 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD3_IN1, 31250);
     7f6:	eeb0 0a48 	vmov.f32	s0, s16
     7fa:	2006      	movs	r0, #6
     7fc:	f005 fe3e 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD3_IN2, 31250);
     800:	eeb0 0a48 	vmov.f32	s0, s16
     804:	2007      	movs	r0, #7
     806:	f005 fe39 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD4_IN1, 31250);
     80a:	eeb0 0a48 	vmov.f32	s0, s16
     80e:	2008      	movs	r0, #8
     810:	f005 fe34 	bl	647c <analogWriteFrequency>
  analogWriteFrequency(MD4_IN2, 31250);
     814:	eeb0 0a48 	vmov.f32	s0, s16
     818:	2009      	movs	r0, #9
     81a:	f005 fe2f 	bl	647c <analogWriteFrequency>

  // Setting initial state to 0
  digitalWrite(MD1_IN1, LOW);
     81e:	2100      	movs	r1, #0
     820:	2004      	movs	r0, #4
     822:	f005 fb81 	bl	5f28 <digitalWrite>
  digitalWrite(MD1_IN2, LOW);
     826:	2100      	movs	r1, #0
     828:	2005      	movs	r0, #5
     82a:	f005 fb7d 	bl	5f28 <digitalWrite>
  digitalWrite(MD2_IN1, LOW);
     82e:	2100      	movs	r1, #0
     830:	2002      	movs	r0, #2
     832:	f005 fb79 	bl	5f28 <digitalWrite>
  digitalWrite(MD2_IN2, LOW);
     836:	2100      	movs	r1, #0
     838:	2003      	movs	r0, #3
     83a:	f005 fb75 	bl	5f28 <digitalWrite>
  digitalWrite(MD3_IN1, LOW);
     83e:	2100      	movs	r1, #0
     840:	2006      	movs	r0, #6
     842:	f005 fb71 	bl	5f28 <digitalWrite>
  digitalWrite(MD3_IN2, LOW);
     846:	2100      	movs	r1, #0
     848:	2007      	movs	r0, #7
     84a:	f005 fb6d 	bl	5f28 <digitalWrite>
  digitalWrite(MD4_IN1, LOW);
     84e:	2100      	movs	r1, #0
     850:	2008      	movs	r0, #8
     852:	f005 fb69 	bl	5f28 <digitalWrite>
  digitalWrite(MD4_IN2, LOW);
     856:	2100      	movs	r1, #0
     858:	2009      	movs	r0, #9
}
     85a:	ecbd 8b02 	vpop	{d8}
     85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(MD4_IN2, LOW);
     862:	f005 bb61 	b.w	5f28 <digitalWrite>
     866:	bf00      	nop
     868:	46f42400 	.word	0x46f42400

0000086c <readAllSensors()>:
	uint32_t begin = ARM_DWT_CYCCNT;
     86c:	4917      	ldr	r1, [pc, #92]	; (8cc <readAllSensors()+0x60>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     86e:	f04f 0c32 	mov.w	ip, #50	; 0x32
     872:	4a17      	ldr	r2, [pc, #92]	; (8d0 <readAllSensors()+0x64>)
     874:	4b17      	ldr	r3, [pc, #92]	; (8d4 <readAllSensors()+0x68>)
	uint32_t begin = ARM_DWT_CYCCNT;
     876:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     878:	6812      	ldr	r2, [r2, #0]
     87a:	fba3 3202 	umull	r3, r2, r3, r2
     87e:	0c92      	lsrs	r2, r2, #18

// Sensor management functions
void readAllSensors()
{
     880:	b500      	push	{lr}
     882:	fb0c f202 	mul.w	r2, ip, r2
     886:	b087      	sub	sp, #28
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     888:	684b      	ldr	r3, [r1, #4]
     88a:	1a1b      	subs	r3, r3, r0
     88c:	429a      	cmp	r2, r3
     88e:	d8fb      	bhi.n	888 <readAllSensors()+0x1c>
                    return ::tlx493d_getMagneticField(&sensor, x, y, z);
     890:	ab04      	add	r3, sp, #16
     892:	aa02      	add	r2, sp, #8
     894:	4669      	mov	r1, sp
     896:	4810      	ldr	r0, [pc, #64]	; (8d8 <readAllSensors()+0x6c>)
     898:	f003 f85c 	bl	3954 <tlx493d_getMagneticField>
        // 1) point the TCA9548A at the current sensor
        delayMicroseconds(50);          // let the bus lines settle

        // 2) read one complete XYZ conversion
        double x, y, z;
        if (Sensors[i].getMagneticField(&x, &y, &z))
     89c:	b190      	cbz	r0, 8c4 <readAllSensors()+0x58>
        {
            rawMagField[i][0] = static_cast<float>(x);
     89e:	4b0f      	ldr	r3, [pc, #60]	; (8dc <readAllSensors()+0x70>)
     8a0:	ed9d 5b00 	vldr	d5, [sp]
            rawMagField[i][1] = static_cast<float>(y);
     8a4:	ed9d 6b02 	vldr	d6, [sp, #8]
            rawMagField[i][2] = static_cast<float>(z);
     8a8:	ed9d 7b04 	vldr	d7, [sp, #16]
            rawMagField[i][0] = static_cast<float>(x);
     8ac:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
            rawMagField[i][1] = static_cast<float>(y);
     8b0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            rawMagField[i][2] = static_cast<float>(z);
     8b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            rawMagField[i][0] = static_cast<float>(x);
     8b8:	ed83 5a00 	vstr	s10, [r3]
            rawMagField[i][1] = static_cast<float>(y);
     8bc:	ed83 6a01 	vstr	s12, [r3, #4]
            rawMagField[i][2] = static_cast<float>(z);
     8c0:	ed83 7a02 	vstr	s14, [r3, #8]
        }
    }
}
     8c4:	b007      	add	sp, #28
     8c6:	f85d fb04 	ldr.w	pc, [sp], #4
     8ca:	bf00      	nop
     8cc:	e0001000 	.word	0xe0001000
     8d0:	20001dac 	.word	0x20001dac
     8d4:	431bde83 	.word	0x431bde83
     8d8:	20003c88 	.word	0x20003c88
     8dc:	200040fc 	.word	0x200040fc

000008e0 <processSensorData(float, float, float, float)>:

void processSensorData(float currentXPos, float currentXNeg, float currentYPos, float currentYNeg) {
  // Process all sensor data
  for (int i = 0; i < NUM_SENSORS; i++) {
    // Apply feedthrough compensation for each sensor
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     8e0:	4a1f      	ldr	r2, [pc, #124]	; (960 <processSensorData(float, float, float, float)+0x80>)
     8e2:	4b20      	ldr	r3, [pc, #128]	; (964 <processSensorData(float, float, float, float)+0x84>)
    
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
                                 feedthroughSlopeY[i][0] * currentYPos + 
                                 feedthroughSlopeY[i][1] * currentYNeg;
    
    rawMagFieldDetrended[i][2] = rawMagField[i][2] - meanMagField[i][2] + 
     8e4:	edd2 7a02 	vldr	s15, [r2, #8]
     8e8:	edd3 6a02 	vldr	s13, [r3, #8]
                                 feedthroughSlopeZX[i][0] * currentXPos + 
     8ec:	491e      	ldr	r1, [pc, #120]	; (968 <processSensorData(float, float, float, float)+0x88>)
    rawMagFieldDetrended[i][2] = rawMagField[i][2] - meanMagField[i][2] + 
     8ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     8f2:	edd3 5a00 	vldr	s11, [r3]
    rawMagFieldDetrended[i][2] = rawMagField[i][2] - meanMagField[i][2] + 
     8f6:	ed91 7a00 	vldr	s14, [r1]
                                 feedthroughSlopeZX[i][0] * currentXPos + 
     8fa:	ed91 5a01 	vldr	s10, [r1, #4]
    rawMagFieldDetrended[i][2] = rawMagField[i][2] - meanMagField[i][2] + 
     8fe:	eee0 7a07 	vfma.f32	s15, s0, s14
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     902:	ed93 6a01 	vldr	s12, [r3, #4]
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     906:	edd2 6a00 	vldr	s13, [r2]
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     90a:	ed92 7a01 	vldr	s14, [r2, #4]
                                 feedthroughSlopeZX[i][1] * currentXNeg + 
                                 feedthroughSlopeZY[i][0] * currentYPos + 
     90e:	4b17      	ldr	r3, [pc, #92]	; (96c <processSensorData(float, float, float, float)+0x8c>)
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     910:	ee76 6ae5 	vsub.f32	s13, s13, s11
                                 feedthroughSlopeX[i][0] * currentXPos + 
     914:	4916      	ldr	r1, [pc, #88]	; (970 <processSensorData(float, float, float, float)+0x90>)
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     916:	ee37 7a46 	vsub.f32	s14, s14, s12
                                 feedthroughSlopeY[i][0] * currentYPos + 
     91a:	4a16      	ldr	r2, [pc, #88]	; (974 <processSensorData(float, float, float, float)+0x94>)
                                 feedthroughSlopeZX[i][0] * currentXPos + 
     91c:	eee0 7a85 	vfma.f32	s15, s1, s10
                                 feedthroughSlopeZX[i][1] * currentXNeg + 
     920:	edd3 4a00 	vldr	s9, [r3]
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     924:	edd1 5a00 	vldr	s11, [r1]
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     928:	ed92 6a00 	vldr	s12, [r2]
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     92c:	eee0 6a25 	vfma.f32	s13, s0, s11
                                 feedthroughSlopeX[i][0] * currentXPos + 
     930:	ed91 5a01 	vldr	s10, [r1, #4]
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     934:	eea1 7a06 	vfma.f32	s14, s2, s12
                                 feedthroughSlopeY[i][0] * currentYPos + 
     938:	edd2 5a01 	vldr	s11, [r2, #4]
                                 feedthroughSlopeZY[i][0] * currentYPos + 
     93c:	ed93 6a01 	vldr	s12, [r3, #4]
                                 feedthroughSlopeZX[i][1] * currentXNeg + 
     940:	eee1 7a24 	vfma.f32	s15, s2, s9
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     944:	4b0c      	ldr	r3, [pc, #48]	; (978 <processSensorData(float, float, float, float)+0x98>)
                                 feedthroughSlopeX[i][0] * currentXPos + 
     946:	eee0 6a85 	vfma.f32	s13, s1, s10
                                 feedthroughSlopeY[i][0] * currentYPos + 
     94a:	eea1 7aa5 	vfma.f32	s14, s3, s11
                                 feedthroughSlopeZY[i][0] * currentYPos + 
     94e:	eee1 7a86 	vfma.f32	s15, s3, s12
    rawMagFieldDetrended[i][0] = rawMagField[i][0] - meanMagField[i][0] + 
     952:	edc3 6a00 	vstr	s13, [r3]
    rawMagFieldDetrended[i][1] = rawMagField[i][1] - meanMagField[i][1] + 
     956:	ed83 7a01 	vstr	s14, [r3, #4]
    rawMagFieldDetrended[i][2] = rawMagField[i][2] - meanMagField[i][2] + 
     95a:	edc3 7a02 	vstr	s15, [r3, #8]
                                 feedthroughSlopeZY[i][1] * currentYNeg;
  }
}
     95e:	4770      	bx	lr
     960:	200040fc 	.word	0x200040fc
     964:	200040b4 	.word	0x200040b4
     968:	20004088 	.word	0x20004088
     96c:	20004090 	.word	0x20004090
     970:	20004078 	.word	0x20004078
     974:	20004080 	.word	0x20004080
     978:	20004108 	.word	0x20004108

0000097c <resetSensorAndI2C()>:
    *freezeCounter = 0;
    delay(1000);
  }
}

void resetSensorAndI2C() {
     97c:	b510      	push	{r4, lr}
     97e:	4c09      	ldr	r4, [pc, #36]	; (9a4 <resetSensorAndI2C()+0x28>)
     980:	211f      	movs	r1, #31
     982:	4809      	ldr	r0, [pc, #36]	; (9a8 <resetSensorAndI2C()+0x2c>)
     984:	f006 ff80 	bl	7888 <usb_serial_write>
     988:	4620      	mov	r0, r4
     98a:	f004 ff71 	bl	5870 <Print::println()>
  Serial.println("Resetting I2C bus and sensor...");
  
  // Call improved initializeSensors which already handles I2C reset
  initializeSensors();
     98e:	f7ff fe55 	bl	63c <initializeSensors()>
     992:	211d      	movs	r1, #29
     994:	4805      	ldr	r0, [pc, #20]	; (9ac <resetSensorAndI2C()+0x30>)
     996:	f006 ff77 	bl	7888 <usb_serial_write>
     99a:	4620      	mov	r0, r4
  
  Serial.println("I2C and sensor reset complete");
}
     99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     9a0:	f004 bf66 	b.w	5870 <Print::println()>
     9a4:	20001db0 	.word	0x20001db0
     9a8:	20000ff4 	.word	0x20000ff4
     9ac:	20001014 	.word	0x20001014

000009b0 <checkSensorFreeze(float (*) [3], int*)>:
    if (rawMagField[i][0] == lastMagField[i][0] && 
     9b0:	4b21      	ldr	r3, [pc, #132]	; (a38 <checkSensorFreeze(float (*) [3], int*)+0x88>)
     9b2:	ed90 7a00 	vldr	s14, [r0]
     9b6:	edd3 7a00 	vldr	s15, [r3]
     9ba:	eef4 7a47 	vcmp.f32	s15, s14
void checkSensorFreeze(float lastMagField[][3], int* freezeCounter) {
     9be:	b510      	push	{r4, lr}
    if (rawMagField[i][0] == lastMagField[i][0] && 
     9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void checkSensorFreeze(float lastMagField[][3], int* freezeCounter) {
     9c4:	460c      	mov	r4, r1
    if (rawMagField[i][0] == lastMagField[i][0] && 
     9c6:	d12d      	bne.n	a24 <checkSensorFreeze(float (*) [3], int*)+0x74>
        rawMagField[i][1] == lastMagField[i][1] && 
     9c8:	ed93 7a01 	vldr	s14, [r3, #4]
    if (rawMagField[i][0] == lastMagField[i][0] && 
     9cc:	edd0 6a01 	vldr	s13, [r0, #4]
     9d0:	eeb4 7a66 	vcmp.f32	s14, s13
     9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9d8:	d124      	bne.n	a24 <checkSensorFreeze(float (*) [3], int*)+0x74>
        rawMagField[i][2] == lastMagField[i][2]) {
     9da:	edd3 6a02 	vldr	s13, [r3, #8]
        rawMagField[i][1] == lastMagField[i][1] && 
     9de:	ed90 6a02 	vldr	s12, [r0, #8]
     9e2:	eef4 6a46 	vcmp.f32	s13, s12
     9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9ea:	d11b      	bne.n	a24 <checkSensorFreeze(float (*) [3], int*)+0x74>
    (*freezeCounter)++;
     9ec:	680b      	ldr	r3, [r1, #0]
    lastMagField[i][0] = rawMagField[i][0];
     9ee:	edc0 7a00 	vstr	s15, [r0]
    (*freezeCounter)++;
     9f2:	3301      	adds	r3, #1
    lastMagField[i][1] = rawMagField[i][1];
     9f4:	ed80 7a01 	vstr	s14, [r0, #4]
    lastMagField[i][2] = rawMagField[i][2];
     9f8:	edc0 6a02 	vstr	s13, [r0, #8]
  if(*freezeCounter >= freezeLimit){
     9fc:	2b13      	cmp	r3, #19
    (*freezeCounter)++;
     9fe:	600b      	str	r3, [r1, #0]
  if(*freezeCounter >= freezeLimit){
     a00:	dd18      	ble.n	a34 <checkSensorFreeze(float (*) [3], int*)+0x84>
     a02:	2124      	movs	r1, #36	; 0x24
     a04:	480d      	ldr	r0, [pc, #52]	; (a3c <checkSensorFreeze(float (*) [3], int*)+0x8c>)
     a06:	f006 ff3f 	bl	7888 <usb_serial_write>
     a0a:	480d      	ldr	r0, [pc, #52]	; (a40 <checkSensorFreeze(float (*) [3], int*)+0x90>)
     a0c:	f004 ff30 	bl	5870 <Print::println()>
    resetSensorAndI2C();
     a10:	f7ff ffb4 	bl	97c <resetSensorAndI2C()>
    *freezeCounter = 0;
     a14:	2300      	movs	r3, #0
    delay(1000);
     a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    *freezeCounter = 0;
     a1a:	6023      	str	r3, [r4, #0]
}
     a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(1000);
     a20:	f005 ba04 	b.w	5e2c <delay>
    lastMagField[i][2] = rawMagField[i][2];
     a24:	689a      	ldr	r2, [r3, #8]
    lastMagField[i][1] = rawMagField[i][1];
     a26:	6859      	ldr	r1, [r3, #4]
    *freezeCounter = 0;
     a28:	2300      	movs	r3, #0
    lastMagField[i][0] = rawMagField[i][0];
     a2a:	edc0 7a00 	vstr	s15, [r0]
    lastMagField[i][1] = rawMagField[i][1];
     a2e:	6041      	str	r1, [r0, #4]
    lastMagField[i][2] = rawMagField[i][2];
     a30:	6082      	str	r2, [r0, #8]
    *freezeCounter = 0;
     a32:	6023      	str	r3, [r4, #0]
}
     a34:	bd10      	pop	{r4, pc}
     a36:	bf00      	nop
     a38:	200040fc 	.word	0x200040fc
     a3c:	20000ef0 	.word	0x20000ef0
     a40:	20001db0 	.word	0x20001db0
     a44:	00000000 	.word	0x00000000

00000a48 <logSystemState(unsigned long, float, float, float, float)>:

void logSystemState(unsigned long currentTime, float currentXPos, float currentXNeg, float currentYPos, float currentYNeg) {
     a48:	b570      	push	{r4, r5, r6, lr}
     a4a:	ed2d 8b06 	vpush	{d8-d10}
     a4e:	ee08 0a10 	vmov	s16, r0
     a52:	2105      	movs	r1, #5
     a54:	4846      	ldr	r0, [pc, #280]	; (b70 <logSystemState(unsigned long, float, float, float, float)+0x128>)
     a56:	eeb0 9a41 	vmov.f32	s18, s2
     a5a:	eef0 8a61 	vmov.f32	s17, s3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a5e:	4c45      	ldr	r4, [pc, #276]	; (b74 <logSystemState(unsigned long, float, float, float, float)+0x12c>)
     a60:	eeb0 aa40 	vmov.f32	s20, s0
     a64:	4e44      	ldr	r6, [pc, #272]	; (b78 <logSystemState(unsigned long, float, float, float, float)+0x130>)
     a66:	eef0 9a60 	vmov.f32	s19, s1
     a6a:	f006 ff0d 	bl	7888 <usb_serial_write>
  // Convert currentTime from microseconds to seconds as a float
  float timeSec = currentTime / 1000000.0;
     a6e:	eeb8 7b48 	vcvt.f64.u32	d7, s16
     a72:	2106      	movs	r1, #6
     a74:	4620      	mov	r0, r4
  // Dynamically log data from all active sensors
  for (int i = 0; i < NUM_SENSORS; i++) {
    Serial.print(",bx");
    Serial.print(i);
    Serial.print(":");
    Serial.print(rawMagFieldDetrended[i][0], 6);
     a76:	4d41      	ldr	r5, [pc, #260]	; (b7c <logSystemState(unsigned long, float, float, float, float)+0x134>)
  float timeSec = currentTime / 1000000.0;
     a78:	ed9f 6b3b 	vldr	d6, [pc, #236]	; b68 <logSystemState(unsigned long, float, float, float, float)+0x120>
     a7c:	ee87 0b06 	vdiv.f64	d0, d7, d6
     a80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     a84:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     a88:	f004 ff1e 	bl	58c8 <Print::printFloat(double, unsigned char)>
     a8c:	2109      	movs	r1, #9
     a8e:	483c      	ldr	r0, [pc, #240]	; (b80 <logSystemState(unsigned long, float, float, float, float)+0x138>)
     a90:	f006 fefa 	bl	7888 <usb_serial_write>
     a94:	eeb7 0aca 	vcvt.f64.f32	d0, s20
     a98:	2106      	movs	r1, #6
     a9a:	4620      	mov	r0, r4
     a9c:	f004 ff14 	bl	58c8 <Print::printFloat(double, unsigned char)>
     aa0:	210a      	movs	r1, #10
     aa2:	4838      	ldr	r0, [pc, #224]	; (b84 <logSystemState(unsigned long, float, float, float, float)+0x13c>)
     aa4:	f006 fef0 	bl	7888 <usb_serial_write>
     aa8:	eeb7 0ae9 	vcvt.f64.f32	d0, s19
     aac:	2106      	movs	r1, #6
     aae:	4620      	mov	r0, r4
     ab0:	f004 ff0a 	bl	58c8 <Print::printFloat(double, unsigned char)>
     ab4:	2109      	movs	r1, #9
     ab6:	4834      	ldr	r0, [pc, #208]	; (b88 <logSystemState(unsigned long, float, float, float, float)+0x140>)
     ab8:	f006 fee6 	bl	7888 <usb_serial_write>
     abc:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
     ac0:	2106      	movs	r1, #6
     ac2:	4620      	mov	r0, r4
     ac4:	f004 ff00 	bl	58c8 <Print::printFloat(double, unsigned char)>
     ac8:	210a      	movs	r1, #10
     aca:	4830      	ldr	r0, [pc, #192]	; (b8c <logSystemState(unsigned long, float, float, float, float)+0x144>)
     acc:	f006 fedc 	bl	7888 <usb_serial_write>
     ad0:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
     ad4:	2106      	movs	r1, #6
     ad6:	4620      	mov	r0, r4
     ad8:	f004 fef6 	bl	58c8 <Print::printFloat(double, unsigned char)>
     adc:	2103      	movs	r1, #3
     ade:	482c      	ldr	r0, [pc, #176]	; (b90 <logSystemState(unsigned long, float, float, float, float)+0x148>)
     ae0:	f006 fed2 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ae4:	2100      	movs	r1, #0
     ae6:	4620      	mov	r0, r4
     ae8:	f004 feb6 	bl	5858 <Print::print(long)>
     aec:	2101      	movs	r1, #1
     aee:	4630      	mov	r0, r6
     af0:	f006 feca 	bl	7888 <usb_serial_write>
    Serial.print(rawMagFieldDetrended[i][0], 6);
     af4:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     af8:	2106      	movs	r1, #6
     afa:	4620      	mov	r0, r4
     afc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     b00:	f004 fee2 	bl	58c8 <Print::printFloat(double, unsigned char)>
     b04:	2103      	movs	r1, #3
     b06:	4823      	ldr	r0, [pc, #140]	; (b94 <logSystemState(unsigned long, float, float, float, float)+0x14c>)
     b08:	f006 febe 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     b0c:	2100      	movs	r1, #0
     b0e:	4620      	mov	r0, r4
     b10:	f004 fea2 	bl	5858 <Print::print(long)>
     b14:	2101      	movs	r1, #1
     b16:	4630      	mov	r0, r6
     b18:	f006 feb6 	bl	7888 <usb_serial_write>
    
    Serial.print(",by");
    Serial.print(i);
    Serial.print(":");
    Serial.print(rawMagFieldDetrended[i][1], 6);
     b1c:	ed95 0a01 	vldr	s0, [r5, #4]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b20:	2106      	movs	r1, #6
     b22:	4620      	mov	r0, r4
     b24:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     b28:	f004 fece 	bl	58c8 <Print::printFloat(double, unsigned char)>
     b2c:	2103      	movs	r1, #3
     b2e:	481a      	ldr	r0, [pc, #104]	; (b98 <logSystemState(unsigned long, float, float, float, float)+0x150>)
     b30:	f006 feaa 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     b34:	2100      	movs	r1, #0
     b36:	4620      	mov	r0, r4
     b38:	f004 fe8e 	bl	5858 <Print::print(long)>
     b3c:	2101      	movs	r1, #1
     b3e:	4630      	mov	r0, r6
     b40:	f006 fea2 	bl	7888 <usb_serial_write>
    Serial.print(i);
    Serial.print(":");
    
    // Add newline only after the last value
    if (i == NUM_SENSORS - 1) {
      Serial.println(rawMagFieldDetrended[i][2], 6);
     b44:	ed95 0a02 	vldr	s0, [r5, #8]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b48:	4620      	mov	r0, r4
     b4a:	2106      	movs	r1, #6
     b4c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     b50:	f004 feba 	bl	58c8 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b54:	4620      	mov	r0, r4
    } else {
      Serial.print(rawMagFieldDetrended[i][2], 6);
    }
  }
}
     b56:	ecbd 8b06 	vpop	{d8-d10}
     b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     b5e:	f004 be87 	b.w	5870 <Print::println()>
     b62:	bf00      	nop
     b64:	f3af 8000 	nop.w
     b68:	00000000 	.word	0x00000000
     b6c:	412e8480 	.word	0x412e8480
     b70:	20000e58 	.word	0x20000e58
     b74:	20001db0 	.word	0x20001db0
     b78:	20000e5c 	.word	0x20000e5c
     b7c:	20004108 	.word	0x20004108
     b80:	20000e60 	.word	0x20000e60
     b84:	20000e6c 	.word	0x20000e6c
     b88:	20000e78 	.word	0x20000e78
     b8c:	20000e84 	.word	0x20000e84
     b90:	20000e90 	.word	0x20000e90
     b94:	20000e94 	.word	0x20000e94
     b98:	20000e98 	.word	0x20000e98

00000b9c <calibrateSensors()>:

void calibrateSensors()
{
     b9c:	b570      	push	{r4, r5, r6, lr}
     b9e:	2116      	movs	r1, #22
     ba0:	b086      	sub	sp, #24
     ba2:	4842      	ldr	r0, [pc, #264]	; (cac <calibrateSensors()+0x110>)

    constexpr int SAMPLES = 1000;

    /*  clear the running sums */
    for (int s = 0; s < NUM_SENSORS; ++s) {
        meanMagField[s][0] = meanMagField[s][1] = meanMagField[s][2] = 0.0f;
     ba4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     ba8:	f006 fe6e 	bl	7888 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     bac:	4840      	ldr	r0, [pc, #256]	; (cb0 <calibrateSensors()+0x114>)
     bae:	f004 fe5f 	bl	5870 <Print::println()>
     bb2:	4c40      	ldr	r4, [pc, #256]	; (cb4 <calibrateSensors()+0x118>)
     bb4:	2300      	movs	r3, #0
     bb6:	4e40      	ldr	r6, [pc, #256]	; (cb8 <calibrateSensors()+0x11c>)
     bb8:	60a3      	str	r3, [r4, #8]
     bba:	6063      	str	r3, [r4, #4]
     bbc:	6023      	str	r3, [r4, #0]
     bbe:	ab04      	add	r3, sp, #16
     bc0:	aa02      	add	r2, sp, #8
     bc2:	4669      	mov	r1, sp
     bc4:	4630      	mov	r0, r6
     bc6:	f002 fec5 	bl	3954 <tlx493d_getMagneticField>
    /*  collect SAMPLES readings from every sensor */
    for (int n = 0; n < SAMPLES; ++n) {
        for (int s = 0; s < NUM_SENSORS; ++s) {

            double x, y, z;
            if (Sensors[s].getMagneticField(&x, &y, &z))
     bca:	b1e8      	cbz	r0, c08 <calibrateSensors()+0x6c>
            {
                meanMagField[s][0] += static_cast<float>(x);
     bcc:	edd4 4a00 	vldr	s9, [r4]
                meanMagField[s][1] += static_cast<float>(y);
     bd0:	ed9d 6b02 	vldr	d6, [sp, #8]
                meanMagField[s][2] += static_cast<float>(z);
     bd4:	ed9d 7b04 	vldr	d7, [sp, #16]
                meanMagField[s][0] += static_cast<float>(x);
     bd8:	ed9d 5b00 	vldr	d5, [sp]
                meanMagField[s][1] += static_cast<float>(y);
     bdc:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     be0:	edd4 6a01 	vldr	s13, [r4, #4]
                meanMagField[s][2] += static_cast<float>(z);
     be4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     be8:	edd4 7a02 	vldr	s15, [r4, #8]
                meanMagField[s][0] += static_cast<float>(x);
     bec:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
                meanMagField[s][1] += static_cast<float>(y);
     bf0:	ee36 6a26 	vadd.f32	s12, s12, s13
                meanMagField[s][2] += static_cast<float>(z);
     bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
                meanMagField[s][0] += static_cast<float>(x);
     bf8:	ee35 5a24 	vadd.f32	s10, s10, s9
                meanMagField[s][1] += static_cast<float>(y);
     bfc:	ed84 6a01 	vstr	s12, [r4, #4]
                meanMagField[s][2] += static_cast<float>(z);
     c00:	ed84 7a02 	vstr	s14, [r4, #8]
                meanMagField[s][0] += static_cast<float>(x);
     c04:	ed84 5a00 	vstr	s10, [r4]
            }
            /* else: bad frame – ignore, keep previous total */

            delay(1);                       // ~1 kSps per sensor, like original
     c08:	2001      	movs	r0, #1
     c0a:	f005 f90f 	bl	5e2c <delay>
    for (int n = 0; n < SAMPLES; ++n) {
     c0e:	3d01      	subs	r5, #1
     c10:	d1d5      	bne.n	bbe <calibrateSensors()+0x22>
        }
    }

    /*  convert accumulated sums into arithmetic means */
    for (int s = 0; s < NUM_SENSORS; ++s) {
        meanMagField[s][0] /= SAMPLES;
     c12:	eddf 7a2a 	vldr	s15, [pc, #168]	; cbc <calibrateSensors()+0x120>
     c16:	211c      	movs	r1, #28
        meanMagField[s][1] /= SAMPLES;
        meanMagField[s][2] /= SAMPLES;
     c18:	edd4 5a02 	vldr	s11, [r4, #8]
        meanMagField[s][0] /= SAMPLES;
     c1c:	edd4 6a00 	vldr	s13, [r4]
        meanMagField[s][1] /= SAMPLES;
     c20:	ed94 7a01 	vldr	s14, [r4, #4]
        meanMagField[s][0] /= SAMPLES;
     c24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
     c28:	4825      	ldr	r0, [pc, #148]	; (cc0 <calibrateSensors()+0x124>)
        meanMagField[s][1] /= SAMPLES;
     c2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
        meanMagField[s][2] /= SAMPLES;
     c2e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
        meanMagField[s][0] /= SAMPLES;
     c32:	ed84 6a00 	vstr	s12, [r4]
        meanMagField[s][1] /= SAMPLES;
     c36:	edc4 6a01 	vstr	s13, [r4, #4]
        meanMagField[s][2] /= SAMPLES;
     c3a:	ed84 7a02 	vstr	s14, [r4, #8]
     c3e:	f006 fe23 	bl	7888 <usb_serial_write>
     c42:	481b      	ldr	r0, [pc, #108]	; (cb0 <calibrateSensors()+0x114>)
     c44:	f004 fe14 	bl	5870 <Print::println()>
     c48:	2107      	movs	r1, #7
     c4a:	481e      	ldr	r0, [pc, #120]	; (cc4 <calibrateSensors()+0x128>)
     c4c:	f006 fe1c 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     c50:	4629      	mov	r1, r5
     c52:	4817      	ldr	r0, [pc, #92]	; (cb0 <calibrateSensors()+0x114>)
     c54:	f004 fe00 	bl	5858 <Print::print(long)>
     c58:	210c      	movs	r1, #12
     c5a:	481b      	ldr	r0, [pc, #108]	; (cc8 <calibrateSensors()+0x12c>)
     c5c:	f006 fe14 	bl	7888 <usb_serial_write>
    Serial.println("Sensor calibration complete.");

    /*  dump the new offsets for reference */
    for (int s = 0; s < NUM_SENSORS; ++s) {
        Serial.print("Sensor "); Serial.print(s); Serial.print(" mean XYZ = ");
        Serial.print(meanMagField[s][0]); Serial.print(", ");
     c60:	ed94 0a00 	vldr	s0, [r4]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     c64:	2102      	movs	r1, #2
     c66:	4812      	ldr	r0, [pc, #72]	; (cb0 <calibrateSensors()+0x114>)
     c68:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     c6c:	f004 fe2c 	bl	58c8 <Print::printFloat(double, unsigned char)>
     c70:	2102      	movs	r1, #2
     c72:	4816      	ldr	r0, [pc, #88]	; (ccc <calibrateSensors()+0x130>)
     c74:	f006 fe08 	bl	7888 <usb_serial_write>
        Serial.print(meanMagField[s][1]); Serial.print(", ");
     c78:	ed94 0a01 	vldr	s0, [r4, #4]
     c7c:	2102      	movs	r1, #2
     c7e:	480c      	ldr	r0, [pc, #48]	; (cb0 <calibrateSensors()+0x114>)
     c80:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     c84:	f004 fe20 	bl	58c8 <Print::printFloat(double, unsigned char)>
     c88:	2102      	movs	r1, #2
     c8a:	4810      	ldr	r0, [pc, #64]	; (ccc <calibrateSensors()+0x130>)
     c8c:	f006 fdfc 	bl	7888 <usb_serial_write>
        Serial.println(meanMagField[s][2]);
     c90:	ed94 0a02 	vldr	s0, [r4, #8]
     c94:	2102      	movs	r1, #2
     c96:	4806      	ldr	r0, [pc, #24]	; (cb0 <calibrateSensors()+0x114>)
     c98:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     c9c:	f004 fe14 	bl	58c8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     ca0:	4803      	ldr	r0, [pc, #12]	; (cb0 <calibrateSensors()+0x114>)
    }
}
     ca2:	b006      	add	sp, #24
     ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     ca8:	f004 bde2 	b.w	5870 <Print::println()>
     cac:	20000e9c 	.word	0x20000e9c
     cb0:	20001db0 	.word	0x20001db0
     cb4:	200040b4 	.word	0x200040b4
     cb8:	20003c88 	.word	0x20003c88
     cbc:	447a0000 	.word	0x447a0000
     cc0:	20000eb4 	.word	0x20000eb4
     cc4:	20000ed4 	.word	0x20000ed4
     cc8:	20000edc 	.word	0x20000edc
     ccc:	20000eec 	.word	0x20000eec

00000cd0 <calibrateDirectFeedthrough()>:


void calibrateDirectFeedthrough()
{
     cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cd4:	211a      	movs	r1, #26

    /*--- user-tunable parameters ---*/
    constexpr int  segTime      = 100;      // ms of data per current level
    constexpr int  settleDelay  = 50;       // ms after changing PWM
    constexpr int  numLevels    = 3;
    const     float currentLevels[numLevels] = { 50.0f, 100.0f, 150.0f };
     cd6:	4cb6      	ldr	r4, [pc, #728]	; (fb0 <calibrateDirectFeedthrough()+0x2e0>)
     cd8:	48b6      	ldr	r0, [pc, #728]	; (fb4 <calibrateDirectFeedthrough()+0x2e4>)
     cda:	4fb7      	ldr	r7, [pc, #732]	; (fb8 <calibrateDirectFeedthrough()+0x2e8>)
{
     cdc:	ed2d 8b08 	vpush	{d8-d11}
     ce0:	b0b3      	sub	sp, #204	; 0xcc
     ce2:	f006 fdd1 	bl	7888 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     ce6:	48b5      	ldr	r0, [pc, #724]	; (fbc <calibrateDirectFeedthrough()+0x2ec>)
     ce8:	f004 fdc2 	bl	5870 <Print::println()>
    const     float currentLevels[numLevels] = { 50.0f, 100.0f, 150.0f };
     cec:	ab0f      	add	r3, sp, #60	; 0x3c
        uint8_t in2;
        int     currentChannel;
        bool    isPositive;
    };

    const SolenoidConfig solenoidConfigs[4] = {
     cee:	ad1a      	add	r5, sp, #104	; 0x68
    const     float currentLevels[numLevels] = { 50.0f, 100.0f, 150.0f };
     cf0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    const SolenoidConfig solenoidConfigs[4] = {
     cf4:	340c      	adds	r4, #12
     cf6:	9506      	str	r5, [sp, #24]
    };

    /*--- accumulators ---*/
    float sumSensor[NUM_SENSORS][3][4] = {0}; // axis 0=X 1=Y 2=Z
    float sumCurrent[4]                 = {0};
    int   counts[4]                     = {0};
     cf8:	9502      	str	r5, [sp, #8]
    const     float currentLevels[numLevels] = { 50.0f, 100.0f, 150.0f };
     cfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const SolenoidConfig solenoidConfigs[4] = {
     cfe:	aa26      	add	r2, sp, #152	; 0x98
     d00:	a912      	add	r1, sp, #72	; 0x48
    int   counts[4]                     = {0};
     d02:	4693      	mov	fp, r2
     d04:	9205      	str	r2, [sp, #20]
     d06:	9107      	str	r1, [sp, #28]
     d08:	4689      	mov	r9, r1
    const SolenoidConfig solenoidConfigs[4] = {
     d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     d16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    float sumSensor[NUM_SENSORS][3][4] = {0}; // axis 0=X 1=Y 2=Z
     d1a:	2230      	movs	r2, #48	; 0x30
     d1c:	4658      	mov	r0, fp
     d1e:	2100      	movs	r1, #0
     d20:	f007 fe9c 	bl	8a5c <memset>
    float sumCurrent[4]                 = {0};
     d24:	aa16      	add	r2, sp, #88	; 0x58
     d26:	2300      	movs	r3, #0
    int   counts[4]                     = {0};
     d28:	4690      	mov	r8, r2
  float voltage = (data*3.3)/1023.0;     // ADC to voltage
     d2a:	ed9f ab9b 	vldr	d10, [pc, #620]	; f98 <calibrateDirectFeedthrough()+0x2c8>
     d2e:	ed9f 9b9c 	vldr	d9, [pc, #624]	; fa0 <calibrateDirectFeedthrough()+0x2d0>
  float voltage_diff = voltage - 1.65;       // Centered around 1.65V (no current)
     d32:	ed9f 8b9d 	vldr	d8, [pc, #628]	; fa8 <calibrateDirectFeedthrough()+0x2d8>
    float sumCurrent[4]                 = {0};
     d36:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
     d3a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    int   counts[4]                     = {0};
     d3e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
     d42:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60

    /*--------------------------------------------------
     *  sweep through each solenoid direction
     *-------------------------------------------------*/
    for (int sol = 0; sol < 4; ++sol)
     d46:	e9cd 3203 	strd	r3, r2, [sp, #12]
     d4a:	2125      	movs	r1, #37	; 0x25
     d4c:	489c      	ldr	r0, [pc, #624]	; (fc0 <calibrateDirectFeedthrough()+0x2f0>)
     d4e:	f006 fd9b 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     d52:	9903      	ldr	r1, [sp, #12]
     d54:	4899      	ldr	r0, [pc, #612]	; (fbc <calibrateDirectFeedthrough()+0x2ec>)
     d56:	f004 fd7f 	bl	5858 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d5a:	4898      	ldr	r0, [pc, #608]	; (fbc <calibrateDirectFeedthrough()+0x2ec>)
     d5c:	f004 fd88 	bl	5870 <Print::println()>
    {
        Serial.print(F("Calibrating feedthrough for solenoid "));
        Serial.println(sol);

        for (int lvl = 0; lvl < numLevels; ++lvl)
     d60:	ab0f      	add	r3, sp, #60	; 0x3c
	uint32_t begin = ARM_DWT_CYCCNT;
     d62:	4c98      	ldr	r4, [pc, #608]	; (fc4 <calibrateDirectFeedthrough()+0x2f4>)
     d64:	9301      	str	r3, [sp, #4]
        {
            const float pwm = currentLevels[lvl];
            setSolenoidInput(pwm,
                             solenoidConfigs[sol].in1,
     d66:	9b02      	ldr	r3, [sp, #8]
     d68:	781a      	ldrb	r2, [r3, #0]
                             solenoidConfigs[sol].in2);
     d6a:	785b      	ldrb	r3, [r3, #1]
                             solenoidConfigs[sol].in1,
     d6c:	ee0b 2a10 	vmov	s22, r2
                             solenoidConfigs[sol].in2);
     d70:	ee0b 3a90 	vmov	s23, r3
            const float pwm = currentLevels[lvl];
     d74:	9b01      	ldr	r3, [sp, #4]
            setSolenoidInput(pwm,
     d76:	ee1b 2a90 	vmov	r2, s23
     d7a:	ee1b 1a10 	vmov	r1, s22
            const float pwm = currentLevels[lvl];
     d7e:	ecf3 7a01 	vldmia	r3!, {s15}
            setSolenoidInput(pwm,
     d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            const float pwm = currentLevels[lvl];
     d86:	9301      	str	r3, [sp, #4]
            setSolenoidInput(pwm,
     d88:	ee17 0a90 	vmov	r0, s15
     d8c:	f7ff fb88 	bl	4a0 <setSolenoidInput(int, int, int)>
            delay(settleDelay);
     d90:	2032      	movs	r0, #50	; 0x32
     d92:	f005 f84b 	bl	5e2c <delay>
	return systick_millis_count;
     d96:	683d      	ldr	r5, [r7, #0]
     d98:	683b      	ldr	r3, [r7, #0]

            const unsigned long t0 = millis();
            while (millis() - t0 < segTime)
     d9a:	1b5b      	subs	r3, r3, r5
     d9c:	2b63      	cmp	r3, #99	; 0x63
     d9e:	d860      	bhi.n	e62 <calibrateDirectFeedthrough()+0x192>
  uint16_t data = analogRead(pin);
     da0:	9b02      	ldr	r3, [sp, #8]
     da2:	4e89      	ldr	r6, [pc, #548]	; (fc8 <calibrateDirectFeedthrough()+0x2f8>)
     da4:	f893 a004 	ldrb.w	sl, [r3, #4]
     da8:	4650      	mov	r0, sl
     daa:	f004 fe3f 	bl	5a2c <analogRead>
  float current = voltage_diff/(100.0*0.015); // Gain = 100 (INA214), Rshunt = 0.015Ω
     dae:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
  float voltage = (data*3.3)/1023.0;     // ADC to voltage
     db2:	b280      	uxth	r0, r0
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     db4:	4b85      	ldr	r3, [pc, #532]	; (fcc <calibrateDirectFeedthrough()+0x2fc>)
	uint32_t begin = ARM_DWT_CYCCNT;
     db6:	6861      	ldr	r1, [r4, #4]
     db8:	ee07 0a90 	vmov	s15, r0
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     dbc:	681a      	ldr	r2, [r3, #0]
     dbe:	4b84      	ldr	r3, [pc, #528]	; (fd0 <calibrateDirectFeedthrough()+0x300>)
     dc0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
            {
                /* measure coil current */
                const float I = getSolenoidCurrent(solenoidConfigs[sol].currentChannel);
                sumCurrent[sol] += I;
     dc4:	edd9 5a00 	vldr	s11, [r9]
     dc8:	fba3 3202 	umull	r3, r2, r3, r2
     dcc:	2332      	movs	r3, #50	; 0x32
  float voltage = (data*3.3)/1023.0;     // ADC to voltage
     dce:	ee26 6b0a 	vmul.f64	d6, d6, d10
     dd2:	0c92      	lsrs	r2, r2, #18
     dd4:	fb03 f202 	mul.w	r2, r3, r2
     dd8:	ee86 7b09 	vdiv.f64	d7, d6, d9
     ddc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float voltage_diff = voltage - 1.65;       // Centered around 1.65V (no current)
     de0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     de4:	ee37 7b48 	vsub.f64	d7, d7, d8
     de8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float current = voltage_diff/(100.0*0.015); // Gain = 100 (INA214), Rshunt = 0.015Ω
     dec:	eec7 7a05 	vdiv.f32	s15, s14, s10
                sumCurrent[sol] += I;
     df0:	ee75 7aa7 	vadd.f32	s15, s11, s15
     df4:	edc9 7a00 	vstr	s15, [r9]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     df8:	6863      	ldr	r3, [r4, #4]
     dfa:	1a5b      	subs	r3, r3, r1
     dfc:	429a      	cmp	r2, r3
     dfe:	d8fb      	bhi.n	df8 <calibrateDirectFeedthrough()+0x128>
     e00:	ab0c      	add	r3, sp, #48	; 0x30
     e02:	aa0a      	add	r2, sp, #40	; 0x28
     e04:	a908      	add	r1, sp, #32
     e06:	4630      	mov	r0, r6
     e08:	f002 fda4 	bl	3954 <tlx493d_getMagneticField>
                for (int s = 0; s < NUM_SENSORS; ++s)
                {
                    delayMicroseconds(50);   // bus settle

                    double x, y, z;
                    if (Sensors[s].getMagneticField(&x, &y, &z))
     e0c:	b1e8      	cbz	r0, e4a <calibrateDirectFeedthrough()+0x17a>
                    {
                        sumSensor[s][0][sol] += static_cast<float>(x);
     e0e:	eddb 4a00 	vldr	s9, [fp]
                        sumSensor[s][1][sol] += static_cast<float>(y);
                        sumSensor[s][2][sol] += static_cast<float>(z);
     e12:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
                        sumSensor[s][0][sol] += static_cast<float>(x);
     e16:	ed9d 5b08 	vldr	d5, [sp, #32]
                        sumSensor[s][1][sol] += static_cast<float>(y);
     e1a:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
                        sumSensor[s][0][sol] += static_cast<float>(x);
     e1e:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
                        sumSensor[s][1][sol] += static_cast<float>(y);
     e22:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
                        sumSensor[s][2][sol] += static_cast<float>(z);
     e26:	eef7 5bc7 	vcvt.f32.f64	s11, d7
                        sumSensor[s][1][sol] += static_cast<float>(y);
     e2a:	ed9b 7a04 	vldr	s14, [fp, #16]
                        sumSensor[s][2][sol] += static_cast<float>(z);
     e2e:	eddb 7a08 	vldr	s15, [fp, #32]
                        sumSensor[s][0][sol] += static_cast<float>(x);
     e32:	ee74 6a85 	vadd.f32	s13, s9, s10
                        sumSensor[s][1][sol] += static_cast<float>(y);
     e36:	ee37 7a06 	vadd.f32	s14, s14, s12
                        sumSensor[s][2][sol] += static_cast<float>(z);
     e3a:	ee77 7aa5 	vadd.f32	s15, s15, s11
                        sumSensor[s][0][sol] += static_cast<float>(x);
     e3e:	edcb 6a00 	vstr	s13, [fp]
                        sumSensor[s][1][sol] += static_cast<float>(y);
     e42:	ed8b 7a04 	vstr	s14, [fp, #16]
                        sumSensor[s][2][sol] += static_cast<float>(z);
     e46:	edcb 7a08 	vstr	s15, [fp, #32]
                    }
                }

                ++counts[sol];
     e4a:	f8d8 3000 	ldr.w	r3, [r8]
                delay(10);
     e4e:	200a      	movs	r0, #10
                ++counts[sol];
     e50:	3301      	adds	r3, #1
     e52:	f8c8 3000 	str.w	r3, [r8]
                delay(10);
     e56:	f004 ffe9 	bl	5e2c <delay>
	return systick_millis_count;
     e5a:	683b      	ldr	r3, [r7, #0]
            while (millis() - t0 < segTime)
     e5c:	1b5b      	subs	r3, r3, r5
     e5e:	2b63      	cmp	r3, #99	; 0x63
     e60:	d9a2      	bls.n	da8 <calibrateDirectFeedthrough()+0xd8>
    analogWrite(pin1, 0);
     e62:	2100      	movs	r1, #0
     e64:	ee1b 0a10 	vmov	r0, s22
     e68:	f005 faa2 	bl	63b0 <analogWrite>
    analogWrite(pin2, 0);
     e6c:	ee1b 0a90 	vmov	r0, s23
     e70:	2100      	movs	r1, #0
     e72:	f005 fa9d 	bl	63b0 <analogWrite>

            /*  turn coil off before next PWM level  */
            setSolenoidInput(0,
                             solenoidConfigs[sol].in1,
                             solenoidConfigs[sol].in2);
            delay(50);
     e76:	2032      	movs	r0, #50	; 0x32
     e78:	f004 ffd8 	bl	5e2c <delay>
        for (int lvl = 0; lvl < numLevels; ++lvl)
     e7c:	9b01      	ldr	r3, [sp, #4]
     e7e:	aa12      	add	r2, sp, #72	; 0x48
     e80:	4293      	cmp	r3, r2
     e82:	f47f af77 	bne.w	d74 <calibrateDirectFeedthrough()+0xa4>
    for (int sol = 0; sol < 4; ++sol)
     e86:	9b03      	ldr	r3, [sp, #12]
     e88:	f108 0804 	add.w	r8, r8, #4
     e8c:	9a02      	ldr	r2, [sp, #8]
     e8e:	f10b 0b04 	add.w	fp, fp, #4
     e92:	3301      	adds	r3, #1
     e94:	f109 0904 	add.w	r9, r9, #4
     e98:	320c      	adds	r2, #12
     e9a:	2b04      	cmp	r3, #4
     e9c:	9303      	str	r3, [sp, #12]
     e9e:	9202      	str	r2, [sp, #8]
     ea0:	f47f af53 	bne.w	d4a <calibrateDirectFeedthrough()+0x7a>

            /* Y axis – affected only by solenoids 2 and 3 */
            if (sol >= 2)
            {
                const float Sy = sumSensor[s][1][sol] / counts[sol];
                const float k  = (Sy - meanMagField[s][1]) / Iavg;
     ea4:	4b4b      	ldr	r3, [pc, #300]	; (fd4 <calibrateDirectFeedthrough()+0x304>)
                const float k  = (Sx - meanMagField[s][0]) / Iavg;
     ea6:	2201      	movs	r2, #1
                feedthroughSlopeY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     ea8:	484b      	ldr	r0, [pc, #300]	; (fd8 <calibrateDirectFeedthrough()+0x308>)
                const float k  = (Sy - meanMagField[s][1]) / Iavg;
     eaa:	edd3 4a01 	vldr	s9, [r3, #4]
            if (sol < 2)
     eae:	f102 38ff 	add.w	r8, r2, #4294967295
            }

            /* Z axis – affected by all solenoids */
            const float Sz = sumSensor[s][2][sol] / counts[sol];
            const float kZ = (Sz - meanMagField[s][2]) / Iavg;
     eb2:	edd3 5a02 	vldr	s11, [r3, #8]
                const float k  = (Sx - meanMagField[s][0]) / Iavg;
     eb6:	ed93 4a00 	vldr	s8, [r3]

            if (sol < 2)  // X coils’ impact on Z
                feedthroughSlopeZX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
            else          // Y coils’ impact on Z
                feedthroughSlopeZY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     eba:	4948      	ldr	r1, [pc, #288]	; (fdc <calibrateDirectFeedthrough()+0x30c>)
                feedthroughSlopeX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     ebc:	4d48      	ldr	r5, [pc, #288]	; (fe0 <calibrateDirectFeedthrough()+0x310>)
                feedthroughSlopeZX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     ebe:	4c49      	ldr	r4, [pc, #292]	; (fe4 <calibrateDirectFeedthrough()+0x314>)
     ec0:	e9dd e604 	ldrd	lr, r6, [sp, #16]
     ec4:	e9dd 7c06 	ldrd	r7, ip, [sp, #24]
            if (counts[sol] == 0) continue;
     ec8:	f85e 3b04 	ldr.w	r3, [lr], #4
     ecc:	b3a3      	cbz	r3, f38 <calibrateDirectFeedthrough()+0x268>
            const float Iavg = sumCurrent[sol] / counts[sol];
     ece:	ee07 3a90 	vmov	s15, r3
     ed2:	eddc 6a00 	vldr	s13, [ip]
            if (sol < 2)
     ed6:	f1b8 0f01 	cmp.w	r8, #1
            const float Iavg = sumCurrent[sol] / counts[sol];
     eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            if (sol < 2)
     ee2:	d837      	bhi.n	f54 <calibrateDirectFeedthrough()+0x284>
                const float Sx = sumSensor[s][0][sol] / counts[sol];
     ee4:	ed96 6a00 	vldr	s12, [r6]
            const float Sz = sumSensor[s][2][sol] / counts[sol];
     ee8:	ed96 5a08 	vldr	s10, [r6, #32]
                feedthroughSlopeX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     eec:	7a3b      	ldrb	r3, [r7, #8]
                const float Sx = sumSensor[s][0][sol] / counts[sol];
     eee:	eec6 6a27 	vdiv.f32	s13, s12, s15
                feedthroughSlopeX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     ef2:	f083 0301 	eor.w	r3, r3, #1
     ef6:	eb05 0883 	add.w	r8, r5, r3, lsl #2
                feedthroughSlopeZX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     efa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            const float Sz = sumSensor[s][2][sol] / counts[sol];
     efe:	ee85 6a27 	vdiv.f32	s12, s10, s15
                const float k  = (Sx - meanMagField[s][0]) / Iavg;
     f02:	ee76 7ac4 	vsub.f32	s15, s13, s8
     f06:	eec7 6a87 	vdiv.f32	s13, s15, s14
            const float kZ = (Sz - meanMagField[s][2]) / Iavg;
     f0a:	ee36 6a65 	vsub.f32	s12, s12, s11
     f0e:	eec6 7a07 	vdiv.f32	s15, s12, s14
                feedthroughSlopeX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     f12:	eeb1 7a66 	vneg.f32	s14, s13
     f16:	ed88 7a00 	vstr	s14, [r8]
                feedthroughSlopeZX[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     f1a:	eef1 7a67 	vneg.f32	s15, s15
     f1e:	edc3 7a00 	vstr	s15, [r3]
        for (int sol = 0; sol < 4; ++sol)
     f22:	3201      	adds	r2, #1
            if (counts[sol] == 0) continue;
     f24:	f85e 3b04 	ldr.w	r3, [lr], #4
     f28:	3604      	adds	r6, #4
     f2a:	370c      	adds	r7, #12
     f2c:	f10c 0c04 	add.w	ip, ip, #4
            if (sol < 2)
     f30:	f102 38ff 	add.w	r8, r2, #4294967295
            if (counts[sol] == 0) continue;
     f34:	2b00      	cmp	r3, #0
     f36:	d1ca      	bne.n	ece <calibrateDirectFeedthrough()+0x1fe>
        for (int sol = 0; sol < 4; ++sol)
     f38:	2a04      	cmp	r2, #4
     f3a:	d1f2      	bne.n	f22 <calibrateDirectFeedthrough()+0x252>
     f3c:	2121      	movs	r1, #33	; 0x21
     f3e:	482a      	ldr	r0, [pc, #168]	; (fe8 <calibrateDirectFeedthrough()+0x318>)
     f40:	f006 fca2 	bl	7888 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     f44:	481d      	ldr	r0, [pc, #116]	; (fbc <calibrateDirectFeedthrough()+0x2ec>)
        }
    }

    Serial.println(F("Feedthrough calibration complete."));
}
     f46:	b033      	add	sp, #204	; 0xcc
     f48:	ecbd 8b08 	vpop	{d8-d11}
     f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f50:	f004 bc8e 	b.w	5870 <Print::println()>
                const float Sy = sumSensor[s][1][sol] / counts[sol];
     f54:	ed96 6a04 	vldr	s12, [r6, #16]
        for (int sol = 0; sol < 4; ++sol)
     f58:	2a04      	cmp	r2, #4
            const float Sz = sumSensor[s][2][sol] / counts[sol];
     f5a:	ed96 5a08 	vldr	s10, [r6, #32]
                const float Sy = sumSensor[s][1][sol] / counts[sol];
     f5e:	eec6 6a27 	vdiv.f32	s13, s12, s15
                feedthroughSlopeY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     f62:	7a3b      	ldrb	r3, [r7, #8]
     f64:	f083 0301 	eor.w	r3, r3, #1
     f68:	eb00 0883 	add.w	r8, r0, r3, lsl #2
            const float Sz = sumSensor[s][2][sol] / counts[sol];
     f6c:	ee85 6a27 	vdiv.f32	s12, s10, s15
                feedthroughSlopeZY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     f70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
                const float k  = (Sy - meanMagField[s][1]) / Iavg;
     f74:	ee76 7ae4 	vsub.f32	s15, s13, s9
     f78:	eec7 6a87 	vdiv.f32	s13, s15, s14
            const float kZ = (Sz - meanMagField[s][2]) / Iavg;
     f7c:	ee36 6a65 	vsub.f32	s12, s12, s11
     f80:	eec6 7a07 	vdiv.f32	s15, s12, s14
                feedthroughSlopeY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -k;
     f84:	eeb1 7a66 	vneg.f32	s14, s13
     f88:	ed88 7a00 	vstr	s14, [r8]
                feedthroughSlopeZY[s][ solenoidConfigs[sol].isPositive ? 0 : 1 ] = -kZ;
     f8c:	eef1 7a67 	vneg.f32	s15, s15
     f90:	edc3 7a00 	vstr	s15, [r3]
        for (int sol = 0; sol < 4; ++sol)
     f94:	d1c5      	bne.n	f22 <calibrateDirectFeedthrough()+0x252>
     f96:	e7d1      	b.n	f3c <calibrateDirectFeedthrough()+0x26c>
     f98:	66666666 	.word	0x66666666
     f9c:	400a6666 	.word	0x400a6666
     fa0:	00000000 	.word	0x00000000
     fa4:	408ff800 	.word	0x408ff800
     fa8:	66666666 	.word	0x66666666
     fac:	3ffa6666 	.word	0x3ffa6666
     fb0:	20000370 	.word	0x20000370
     fb4:	20001034 	.word	0x20001034
     fb8:	20004168 	.word	0x20004168
     fbc:	20001db0 	.word	0x20001db0
     fc0:	20001050 	.word	0x20001050
     fc4:	e0001000 	.word	0xe0001000
     fc8:	20003c88 	.word	0x20003c88
     fcc:	20001dac 	.word	0x20001dac
     fd0:	431bde83 	.word	0x431bde83
     fd4:	200040b4 	.word	0x200040b4
     fd8:	20004080 	.word	0x20004080
     fdc:	20004090 	.word	0x20004090
     fe0:	20004078 	.word	0x20004078
     fe4:	20004088 	.word	0x20004088
     fe8:	20001078 	.word	0x20001078

00000fec <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     fec:	2000      	movs	r0, #0
     fee:	4770      	bx	lr

00000ff0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     ff0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     ff4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     ff8:	1a10      	subs	r0, r2, r0
     ffa:	4770      	bx	lr

00000ffc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     ffc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1000:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1004:	429a      	cmp	r2, r3
    1006:	d905      	bls.n	1014 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1008:	1c5a      	adds	r2, r3, #1
    100a:	4403      	add	r3, r0
    100c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1010:	7e98      	ldrb	r0, [r3, #26]
    1012:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1014:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1018:	4770      	bx	lr
    101a:	bf00      	nop

0000101c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    101c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1020:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1024:	429a      	cmp	r2, r3
    1026:	d902      	bls.n	102e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    1028:	4418      	add	r0, r3
    102a:	7e80      	ldrb	r0, [r0, #26]
    102c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    102e:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1032:	4770      	bx	lr

00001034 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    1034:	4770      	bx	lr
    1036:	bf00      	nop

00001038 <TwoWire::write(unsigned char)>:
{
    1038:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    103a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    103e:	b178      	cbz	r0, 1060 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1040:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    1044:	2a88      	cmp	r2, #136	; 0x88
    1046:	d903      	bls.n	1050 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1048:	2201      	movs	r2, #1
			return 0;
    104a:	2000      	movs	r0, #0
    104c:	605a      	str	r2, [r3, #4]
    104e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    1050:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    1054:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    1056:	441a      	add	r2, r3
    1058:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    105c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    1060:	4770      	bx	lr
    1062:	bf00      	nop

00001064 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    1064:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    1066:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    106a:	b90c      	cbnz	r4, 1070 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    106c:	4620      	mov	r0, r4
    106e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1070:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    1074:	4605      	mov	r5, r0
    1076:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    107a:	42a2      	cmp	r2, r4
    107c:	d80d      	bhi.n	109a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    107e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    1080:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    1084:	4622      	mov	r2, r4
    1086:	4418      	add	r0, r3
    1088:	f004 ffb8 	bl	5ffc <memcpy>
		txBufferLength += quantity;
    108c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    1090:	4620      	mov	r0, r4
		txBufferLength += quantity;
    1092:	4423      	add	r3, r4
    1094:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    1098:	bd38      	pop	{r3, r4, r5, pc}
    109a:	2201      	movs	r2, #1
    109c:	6042      	str	r2, [r0, #4]
    109e:	e7ef      	b.n	1080 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000010a0 <TwoWire::end()>:
}
    10a0:	4770      	bx	lr
    10a2:	bf00      	nop

000010a4 <TwoWire::force_clock()>:
{
    10a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10a8:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10ac:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10ae:	7e01      	ldrb	r1, [r0, #24]
{
    10b0:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10b2:	7e43      	ldrb	r3, [r0, #25]
{
    10b4:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10b6:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    10ba:	4a38      	ldr	r2, [pc, #224]	; (119c <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10bc:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    10c0:	4f37      	ldr	r7, [pc, #220]	; (11a0 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10c2:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    10c8:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    10cc:	0109      	lsls	r1, r1, #4
    10ce:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    10d0:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    10d4:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10d8:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    10dc:	011b      	lsls	r3, r3, #4
    10de:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    10e0:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10e2:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    10e6:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    10ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    10ee:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    10f0:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    10f2:	492c      	ldr	r1, [pc, #176]	; (11a4 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    10f4:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    10f6:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    10fa:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    10fc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    1100:	686b      	ldr	r3, [r5, #4]
    1102:	4333      	orrs	r3, r6
    1104:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1106:	4b28      	ldr	r3, [pc, #160]	; (11a8 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1108:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    110a:	683a      	ldr	r2, [r7, #0]
    110c:	fba3 3202 	umull	r3, r2, r3, r2
    1110:	0c92      	lsrs	r2, r2, #18
    1112:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1116:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1118:	684b      	ldr	r3, [r1, #4]
    111a:	1b1b      	subs	r3, r3, r4
    111c:	429a      	cmp	r2, r3
    111e:	d8fb      	bhi.n	1118 <TwoWire::force_clock()+0x74>
    1120:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    1124:	4a1f      	ldr	r2, [pc, #124]	; (11a4 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1126:	f8df e080 	ldr.w	lr, [pc, #128]	; 11a8 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    112a:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    112e:	4203      	tst	r3, r0
    1130:	d002      	beq.n	1138 <TwoWire::force_clock()+0x94>
    1132:	68ab      	ldr	r3, [r5, #8]
    1134:	4233      	tst	r3, r6
    1136:	d12f      	bne.n	1198 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    1138:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    113c:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    113e:	6839      	ldr	r1, [r7, #0]
    1140:	fbae 3101 	umull	r3, r1, lr, r1
    1144:	0c89      	lsrs	r1, r1, #18
    1146:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    114a:	6853      	ldr	r3, [r2, #4]
    114c:	1b1b      	subs	r3, r3, r4
    114e:	4299      	cmp	r1, r3
    1150:	d8fb      	bhi.n	114a <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    1152:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    1156:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1158:	6839      	ldr	r1, [r7, #0]
    115a:	fbae 3101 	umull	r3, r1, lr, r1
    115e:	0c89      	lsrs	r1, r1, #18
    1160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1164:	6853      	ldr	r3, [r2, #4]
    1166:	1b1b      	subs	r3, r3, r4
    1168:	4299      	cmp	r1, r3
    116a:	d8fb      	bhi.n	1164 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    116c:	f1bc 0c01 	subs.w	ip, ip, #1
    1170:	d1db      	bne.n	112a <TwoWire::force_clock()+0x86>
	bool ret = false;
    1172:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1174:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1178:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    117a:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    117e:	68db      	ldr	r3, [r3, #12]
    1180:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1184:	f899 3019 	ldrb.w	r3, [r9, #25]
    1188:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    118c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    1190:	6013      	str	r3, [r2, #0]
}
    1192:	b003      	add	sp, #12
    1194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    1198:	2001      	movs	r0, #1
    119a:	e7eb      	b.n	1174 <TwoWire::force_clock()+0xd0>
    119c:	200013f0 	.word	0x200013f0
    11a0:	20001dac 	.word	0x20001dac
    11a4:	e0001000 	.word	0xe0001000
    11a8:	431bde83 	.word	0x431bde83

000011ac <TwoWire::wait_idle()>:
	return systick_millis_count;
    11ac:	4a0e      	ldr	r2, [pc, #56]	; (11e8 <TwoWire::wait_idle()+0x3c>)
{
    11ae:	b510      	push	{r4, lr}
    11b0:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    11b2:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    11b4:	e005      	b.n	11c2 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    11b6:	01db      	lsls	r3, r3, #7
    11b8:	d407      	bmi.n	11ca <TwoWire::wait_idle()+0x1e>
    11ba:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    11bc:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    11be:	2b10      	cmp	r3, #16
    11c0:	d808      	bhi.n	11d4 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    11c2:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    11c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    11c8:	d1f5      	bne.n	11b6 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    11ca:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    11ce:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    11d0:	6163      	str	r3, [r4, #20]
}
    11d2:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    11d4:	f7ff ff66 	bl	10a4 <TwoWire::force_clock()>
    11d8:	2800      	cmp	r0, #0
    11da:	d0fa      	beq.n	11d2 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    11dc:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    11e0:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    11e2:	6163      	str	r3, [r4, #20]
	return true;
    11e4:	e7f5      	b.n	11d2 <TwoWire::wait_idle()+0x26>
    11e6:	bf00      	nop
    11e8:	20004168 	.word	0x20004168

000011ec <TwoWire::endTransmission(unsigned char)>:
{
    11ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    11f0:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    11f4:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    11f6:	f1ba 0f00 	cmp.w	sl, #0
    11fa:	d04f      	beq.n	129c <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    11fc:	4681      	mov	r9, r0
    11fe:	4688      	mov	r8, r1
    1200:	f7ff ffd4 	bl	11ac <TwoWire::wait_idle()>
    1204:	2800      	cmp	r0, #0
    1206:	d049      	beq.n	129c <TwoWire::endTransmission(unsigned char)+0xb0>
    1208:	4e37      	ldr	r6, [pc, #220]	; (12e8 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    120a:	2400      	movs	r4, #0
    120c:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    120e:	e018      	b.n	1242 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1210:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    1212:	0519      	lsls	r1, r3, #20
    1214:	d451      	bmi.n	12ba <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    1216:	04da      	lsls	r2, r3, #19
    1218:	d455      	bmi.n	12c6 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    121a:	0558      	lsls	r0, r3, #21
    121c:	d459      	bmi.n	12d2 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    121e:	0499      	lsls	r1, r3, #18
    1220:	d441      	bmi.n	12a6 <TwoWire::endTransmission(unsigned char)+0xba>
    1222:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    1224:	1bd2      	subs	r2, r2, r7
    1226:	2a32      	cmp	r2, #50	; 0x32
    1228:	d83d      	bhi.n	12a6 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    122a:	4554      	cmp	r4, sl
    122c:	d907      	bls.n	123e <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    122e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1230:	0752      	lsls	r2, r2, #29
    1232:	d104      	bne.n	123e <TwoWire::endTransmission(unsigned char)+0x52>
    1234:	059b      	lsls	r3, r3, #22
    1236:	d455      	bmi.n	12e4 <TwoWire::endTransmission(unsigned char)+0xf8>
    1238:	f1b8 0f00 	cmp.w	r8, #0
    123c:	d052      	beq.n	12e4 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    123e:	f006 fba1 	bl	7984 <yield>
		if (tx_index <= tx_len) {
    1242:	4554      	cmp	r4, sl
    1244:	d8e4      	bhi.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1246:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    1248:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    124a:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    124e:	d4df      	bmi.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
    1250:	e013      	b.n	127a <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1252:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    1256:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    1258:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    125a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    125e:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1260:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    1262:	d01e      	beq.n	12a2 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    1264:	458a      	cmp	sl, r1
				fifo_used++;
    1266:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    126a:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    126e:	d90e      	bls.n	128e <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1270:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    1274:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1276:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    1278:	d0ca      	beq.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    127a:	2101      	movs	r1, #1
				if (tx_index == 0) {
    127c:	2c00      	cmp	r4, #0
    127e:	d0e8      	beq.n	1252 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1280:	4621      	mov	r1, r4
				fifo_used++;
    1282:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1284:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    1286:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1288:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    128c:	d8f0      	bhi.n	1270 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    128e:	f1b8 0f00 	cmp.w	r8, #0
    1292:	d0bd      	beq.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
    1294:	f44f 7300 	mov.w	r3, #512	; 0x200
    1298:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    129a:	e7b9      	b.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    129c:	2004      	movs	r0, #4
}
    129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    12a2:	2401      	movs	r4, #1
    12a4:	e7b4      	b.n	1210 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12a6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12a8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    12ac:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12b2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12b4:	662a      	str	r2, [r5, #96]	; 0x60
}
    12b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12ba:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    12bc:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12c2:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    12c4:	e7eb      	b.n	129e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12c6:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    12c8:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12ce:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    12d0:	e7e5      	b.n	129e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12d2:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    12d4:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    12d8:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12de:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    12e0:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    12e2:	e7dc      	b.n	129e <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    12e4:	2000      	movs	r0, #0
    12e6:	e7da      	b.n	129e <TwoWire::endTransmission(unsigned char)+0xb2>
    12e8:	20004168 	.word	0x20004168

000012ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    12ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f0:	4683      	mov	fp, r0
    12f2:	460c      	mov	r4, r1
    12f4:	4615      	mov	r5, r2
    12f6:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    12f8:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    12fc:	f7ff ff56 	bl	11ac <TwoWire::wait_idle()>
    1300:	2800      	cmp	r0, #0
    1302:	f000 809e 	beq.w	1442 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    1306:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    1308:	2d01      	cmp	r5, #1
    130a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1448 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    130e:	f240 4601 	movw	r6, #1025	; 0x401
    1312:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    1314:	f04f 0100 	mov.w	r1, #0
    1318:	bf38      	it	cc
    131a:	2501      	movcc	r5, #1
    131c:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    1320:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1322:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    1324:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1328:	e020      	b.n	136c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    132a:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    132e:	2b87      	cmp	r3, #135	; 0x87
    1330:	d93f      	bls.n	13b2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1332:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    1336:	0510      	lsls	r0, r2, #20
    1338:	d45a      	bmi.n	13f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    133a:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    133e:	d170      	bne.n	1422 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    1340:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    1344:	eba3 0309 	sub.w	r3, r3, r9
    1348:	2b32      	cmp	r3, #50	; 0x32
    134a:	d86a      	bhi.n	1422 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    134c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    1350:	42ab      	cmp	r3, r5
    1352:	d309      	bcc.n	1368 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    1354:	2c02      	cmp	r4, #2
    1356:	d907      	bls.n	1368 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1358:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    135c:	0759      	lsls	r1, r3, #29
    135e:	d103      	bne.n	1368 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    1360:	0593      	lsls	r3, r2, #22
    1362:	d44b      	bmi.n	13fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    1364:	2f00      	cmp	r7, #0
    1366:	d049      	beq.n	13fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    1368:	f006 fb0c 	bl	7984 <yield>
		if (tx_state < 3) {
    136c:	2c02      	cmp	r4, #2
    136e:	d8dc      	bhi.n	132a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1370:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    1374:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    1378:	075b      	lsls	r3, r3, #29
    137a:	d4d6      	bmi.n	132a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    137c:	1e68      	subs	r0, r5, #1
    137e:	4422      	add	r2, r4
    1380:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    1384:	b94c      	cbnz	r4, 139a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1386:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    138a:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    138c:	1b13      	subs	r3, r2, r4
    138e:	2b03      	cmp	r3, #3
    1390:	d8cb      	bhi.n	132a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    1392:	2c02      	cmp	r4, #2
    1394:	d8c9      	bhi.n	132a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    1396:	2c00      	cmp	r4, #0
    1398:	d0f5      	beq.n	1386 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    139a:	2c01      	cmp	r4, #1
    139c:	d037      	beq.n	140e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    139e:	b11f      	cbz	r7, 13a8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    13a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    13a4:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    13a8:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    13ac:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    13ae:	2b87      	cmp	r3, #135	; 0x87
    13b0:	d8bf      	bhi.n	1332 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13b2:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13b6:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13ba:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13be:	d0b8      	beq.n	1332 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    13c0:	1c59      	adds	r1, r3, #1
    13c2:	449c      	add	ip, r3
    13c4:	3319      	adds	r3, #25
    13c6:	b2c9      	uxtb	r1, r1
    13c8:	fa5f fc8c 	uxtb.w	ip, ip
    13cc:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    13d0:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13d4:	1c4a      	adds	r2, r1, #1
    13d6:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    13d8:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13dc:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    13de:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13e2:	d0a6      	beq.n	1332 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    13e4:	2989      	cmp	r1, #137	; 0x89
    13e6:	d1f3      	bne.n	13d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    13e8:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    13ec:	0510      	lsls	r0, r2, #20
    13ee:	d5a4      	bpl.n	133a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13f0:	f8da 3010 	ldr.w	r3, [sl, #16]
    13f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    13f8:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13fc:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1400:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    1404:	d106      	bne.n	1414 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    1406:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    140a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    140e:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    1412:	e7ba      	b.n	138a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1414:	f8da 3010 	ldr.w	r3, [sl, #16]
    1418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    141c:	f8ca 3010 	str.w	r3, [sl, #16]
    1420:	e7f1      	b.n	1406 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1422:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1426:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    142a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    142e:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1432:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1436:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    143a:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    143e:	d0e2      	beq.n	1406 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    1440:	e7e8      	b.n	1414 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    1442:	2004      	movs	r0, #4
}
    1444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1448:	20004168 	.word	0x20004168

0000144c <TwoWire::isr()>:
{
    144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    144e:	6906      	ldr	r6, [r0, #16]
{
    1450:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    1452:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    1456:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    145a:	d001      	beq.n	1460 <TwoWire::isr()+0x14>
    145c:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1460:	07a8      	lsls	r0, r5, #30
    1462:	d50b      	bpl.n	147c <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    1464:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    1468:	0411      	lsls	r1, r2, #16
    146a:	d53d      	bpl.n	14e8 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    146c:	2300      	movs	r3, #0
    146e:	2101      	movs	r1, #1
    1470:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    1474:	4423      	add	r3, r4
    1476:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    147a:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    147c:	07ea      	lsls	r2, r5, #31
    147e:	d510      	bpl.n	14a2 <TwoWire::isr()+0x56>
		if (!transmitting) {
    1480:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    1484:	b1f7      	cbz	r7, 14c4 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    1486:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    148a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    148e:	42bb      	cmp	r3, r7
    1490:	d926      	bls.n	14e0 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    1492:	1c7b      	adds	r3, r7, #1
    1494:	4427      	add	r7, r4
    1496:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    149a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    149e:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    14a2:	05ab      	lsls	r3, r5, #22
    14a4:	d50d      	bpl.n	14c2 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    14a6:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    14aa:	b118      	cbz	r0, 14b4 <TwoWire::isr()+0x68>
    14ac:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    14b0:	b103      	cbz	r3, 14b4 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    14b2:	4798      	blx	r3
		rxBufferIndex = 0;
    14b4:	2300      	movs	r3, #0
    14b6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    14ba:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    14be:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    14c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    14c4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    14c8:	b103      	cbz	r3, 14cc <TwoWire::isr()+0x80>
				(*user_onRequest)();
    14ca:	4798      	blx	r3
			txBufferIndex = 0;
    14cc:	2300      	movs	r3, #0
    14ce:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    14d2:	2301      	movs	r3, #1
    14d4:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    14d8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    14dc:	42bb      	cmp	r3, r7
    14de:	d8d8      	bhi.n	1492 <TwoWire::isr()+0x46>
			port->STDR = 0;
    14e0:	2300      	movs	r3, #0
    14e2:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    14e6:	e7dc      	b.n	14a2 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    14e8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    14ec:	2b87      	cmp	r3, #135	; 0x87
    14ee:	d8c5      	bhi.n	147c <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    14f0:	1c59      	adds	r1, r3, #1
    14f2:	b2c9      	uxtb	r1, r1
    14f4:	e7be      	b.n	1474 <TwoWire::isr()+0x28>
    14f6:	bf00      	nop

000014f8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    14f8:	4801      	ldr	r0, [pc, #4]	; (1500 <lpi2c1_isr()+0x8>)
    14fa:	f7ff bfa7 	b.w	144c <TwoWire::isr()>
    14fe:	bf00      	nop
    1500:	20002ab0 	.word	0x20002ab0

00001504 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    1504:	4801      	ldr	r0, [pc, #4]	; (150c <lpi2c3_isr()+0x8>)
    1506:	f7ff bfa1 	b.w	144c <TwoWire::isr()>
    150a:	bf00      	nop
    150c:	20002bf0 	.word	0x20002bf0

00001510 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    1510:	4801      	ldr	r0, [pc, #4]	; (1518 <lpi2c4_isr()+0x8>)
    1512:	f7ff bf9b 	b.w	144c <TwoWire::isr()>
    1516:	bf00      	nop
    1518:	20002d30 	.word	0x20002d30

0000151c <TwoWire::setClock(unsigned long)>:
{
    151c:	b410      	push	{r4}
	if (frequency < 400000) {
    151e:	4c14      	ldr	r4, [pc, #80]	; (1570 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    1520:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1522:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    1524:	42a1      	cmp	r1, r4
	port->MCR = 0;
    1526:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    1528:	d814      	bhi.n	1554 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    152a:	4c12      	ldr	r4, [pc, #72]	; (1574 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    152c:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    152e:	4912      	ldr	r1, [pc, #72]	; (1578 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1530:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    1534:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1536:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    1538:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    153a:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    153c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    153e:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    1544:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    1546:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    1548:	6218      	str	r0, [r3, #32]
}
    154a:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    154e:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1550:	611a      	str	r2, [r3, #16]
}
    1552:	4770      	bx	lr
	} else if (frequency < 1000000) {
    1554:	4809      	ldr	r0, [pc, #36]	; (157c <TwoWire::setClock(unsigned long)+0x60>)
    1556:	4281      	cmp	r1, r0
    1558:	d907      	bls.n	156a <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    155a:	4c09      	ldr	r4, [pc, #36]	; (1580 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    155c:	4809      	ldr	r0, [pc, #36]	; (1584 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    155e:	490a      	ldr	r1, [pc, #40]	; (1588 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    1560:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    1562:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    1564:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    1566:	62d9      	str	r1, [r3, #44]	; 0x2c
    1568:	e7e8      	b.n	153c <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    156a:	4c08      	ldr	r4, [pc, #32]	; (158c <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    156c:	4808      	ldr	r0, [pc, #32]	; (1590 <TwoWire::setClock(unsigned long)+0x74>)
    156e:	e7f6      	b.n	155e <TwoWire::setClock(unsigned long)+0x42>
    1570:	00061a7f 	.word	0x00061a7f
    1574:	1928373b 	.word	0x1928373b
    1578:	05050bb8 	.word	0x05050bb8
    157c:	000f423f 	.word	0x000f423f
    1580:	0407090a 	.word	0x0407090a
    1584:	01010960 	.word	0x01010960
    1588:	00057f00 	.word	0x00057f00
    158c:	0c121a1c 	.word	0x0c121a1c
    1590:	02020e10 	.word	0x02020e10

00001594 <ifx::tlx493d::initBoardSupport(TLx493D_t*, ifx::tlx493d::Kit2GoBoardSupport&)>:
#include "BoardSupportUsingKit2Go.hpp"


namespace ifx {
    namespace tlx493d {
        bool initBoardSupport(TLx493D_t *sensor, Kit2GoBoardSupport &bsc) {
    1594:	b538      	push	{r3, r4, r5, lr}
    1596:	4604      	mov	r4, r0
            sensor->boardSupportInterface.boardSupportObj.k2go_obj = (TLx493D_Kit2GoBoardSupportObject_t *) malloc(sizeof(TLx493D_Kit2GoBoardSupportObject_t));
    1598:	2004      	movs	r0, #4
        bool initBoardSupport(TLx493D_t *sensor, Kit2GoBoardSupport &bsc) {
    159a:	460d      	mov	r5, r1
            sensor->boardSupportInterface.boardSupportObj.k2go_obj = (TLx493D_Kit2GoBoardSupportObject_t *) malloc(sizeof(TLx493D_Kit2GoBoardSupportObject_t));
    159c:	f006 fb78 	bl	7c90 <malloc>
    15a0:	4603      	mov	r3, r0
    15a2:	61a0      	str	r0, [r4, #24]

            if( sensor->boardSupportInterface.boardSupportObj.k2go_obj == NULL ) {
    15a4:	b108      	cbz	r0, 15aa <ifx::tlx493d::initBoardSupport(TLx493D_t*, ifx::tlx493d::Kit2GoBoardSupport&)+0x16>
                return( false );
            }
            else {
                sensor->boardSupportInterface.boardSupportObj.k2go_obj->k2go = &bsc;
                return( true );
    15a6:	2001      	movs	r0, #1
                sensor->boardSupportInterface.boardSupportObj.k2go_obj->k2go = &bsc;
    15a8:	601d      	str	r5, [r3, #0]
            }
        }
    15aa:	bd38      	pop	{r3, r4, r5, pc}

000015ac <tlx493d_transfer>:
extern "C" bool tlx493d_transfer(TLx493D_t *sensor, uint8_t *txBuffer, uint8_t txLen, uint8_t *rxBuffer, uint8_t rxLen) {
    15ac:	b430      	push	{r4, r5}
    return sensor->comIFType == TLx493D_I2C_e ? sensor->comInterface.comLibFuncs->transfer.iic_transfer(sensor, txBuffer, txLen, rxBuffer, rxLen)
    15ae:	7f84      	ldrb	r4, [r0, #30]
extern "C" bool tlx493d_transfer(TLx493D_t *sensor, uint8_t *txBuffer, uint8_t txLen, uint8_t *rxBuffer, uint8_t rxLen) {
    15b0:	4684      	mov	ip, r0
    15b2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    return sensor->comIFType == TLx493D_I2C_e ? sensor->comInterface.comLibFuncs->transfer.iic_transfer(sensor, txBuffer, txLen, rxBuffer, rxLen)
    15b6:	b124      	cbz	r4, 15c2 <tlx493d_transfer+0x16>
                                              : (sensor->comIFType == TLx493D_SPI_e ? sensor->comInterface.comLibFuncs->transfer.spi_transfer(sensor, txBuffer, txLen, rxBuffer, rxLen)
    15b8:	2c01      	cmp	r4, #1
    15ba:	d002      	beq.n	15c2 <tlx493d_transfer+0x16>
}
    15bc:	2000      	movs	r0, #0
    15be:	bc30      	pop	{r4, r5}
    15c0:	4770      	bx	lr
                                              : (sensor->comIFType == TLx493D_SPI_e ? sensor->comInterface.comLibFuncs->transfer.spi_transfer(sensor, txBuffer, txLen, rxBuffer, rxLen)
    15c2:	9502      	str	r5, [sp, #8]
    15c4:	f8dc 400c 	ldr.w	r4, [ip, #12]
    15c8:	68a4      	ldr	r4, [r4, #8]
    15ca:	46a4      	mov	ip, r4
}
    15cc:	bc30      	pop	{r4, r5}
                                              : (sensor->comIFType == TLx493D_SPI_e ? sensor->comInterface.comLibFuncs->transfer.spi_transfer(sensor, txBuffer, txLen, rxBuffer, rxLen)
    15ce:	4760      	bx	ip

000015d0 <tlx493d_setReadAddress>:
    if( sensor->comIFType == TLx493D_I2C_e ) {
    15d0:	7f82      	ldrb	r2, [r0, #30]
extern "C" void tlx493d_setReadAddress(TLx493D_t *sensor, uint8_t address) {
    15d2:	4603      	mov	r3, r0
    if( sensor->comIFType == TLx493D_I2C_e ) {
    15d4:	b112      	cbz	r2, 15dc <tlx493d_setReadAddress+0xc>
    else if( sensor->comIFType == TLx493D_SPI_e ) {
    15d6:	2a01      	cmp	r2, #1
    15d8:	d000      	beq.n	15dc <tlx493d_setReadAddress+0xc>
}
    15da:	4770      	bx	lr
        sensor->comInterface.comLibFuncs->setReadAddress.spi_setReadAddress(sensor, address);
    15dc:	68db      	ldr	r3, [r3, #12]
    15de:	68db      	ldr	r3, [r3, #12]
    15e0:	4718      	bx	r3
    15e2:	bf00      	nop

000015e4 <ifx::tlx493d::setReadAddressIIC(TLx493D_t*, unsigned char)>:
            logWarn("Function 'setReadAddressIIC' not supported !");
    15e4:	4901      	ldr	r1, [pc, #4]	; (15ec <ifx::tlx493d::setReadAddressIIC(TLx493D_t*, unsigned char)+0x8>)
    15e6:	4802      	ldr	r0, [pc, #8]	; (15f0 <ifx::tlx493d::setReadAddressIIC(TLx493D_t*, unsigned char)+0xc>)
    15e8:	f000 b9c4 	b.w	1974 <logPrintln>
    15ec:	200010e4 	.word	0x200010e4
    15f0:	20001114 	.word	0x20001114

000015f4 <ifx::tlx493d::deinitIIC(TLx493D_t*)>:
        static bool deinitIIC(TLx493D_t *sensor) {
    15f4:	b508      	push	{r3, lr}
            sensor->comInterface.comLibObj.iic_obj->wire->deinit();
    15f6:	6943      	ldr	r3, [r0, #20]

                /**
                 * @brief The function `deinit` de-initializes the icc-object of the class. 
                 */
                void deinit() {
                    iic->end();
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	6818      	ldr	r0, [r3, #0]
    15fc:	f7ff fd50 	bl	10a0 <TwoWire::end()>
        }
    1600:	2001      	movs	r0, #1
    1602:	bd08      	pop	{r3, pc}

00001604 <ifx::tlx493d::initIIC(TLx493D_t*)>:
        static bool initIIC(TLx493D_t *sensor) {
    1604:	b508      	push	{r3, lr}
            sensor->comInterface.comLibObj.iic_obj->wire->init();
    1606:	6943      	ldr	r3, [r0, #20]
                    iic->begin();
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	6818      	ldr	r0, [r3, #0]
    160c:	f00c fcbc 	bl	df88 <___ZN7TwoWire5beginEv_veneer>
        }
    1610:	2001      	movs	r0, #1
    1612:	bd08      	pop	{r3, pc}

00001614 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)>:
        static bool transferIIC(TLx493D_t *sensor, uint8_t *txBuffer, uint8_t txLen, uint8_t *rxBuffer, uint8_t rxLen) {
    1614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1618:	461d      	mov	r5, r3
            return sensor->comInterface.comLibObj.iic_obj->wire->transfer(sensor->comInterface.comLibParams.iic_params.address >> 1, txBuffer, txLen, rxBuffer, rxLen);
    161a:	f890 8010 	ldrb.w	r8, [r0, #16]
    161e:	6943      	ldr	r3, [r0, #20]
    1620:	ea4f 0858 	mov.w	r8, r8, lsr #1
        static bool transferIIC(TLx493D_t *sensor, uint8_t *txBuffer, uint8_t txLen, uint8_t *rxBuffer, uint8_t rxLen) {
    1624:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
            return sensor->comInterface.comLibObj.iic_obj->wire->transfer(sensor->comInterface.comLibParams.iic_params.address >> 1, txBuffer, txLen, rxBuffer, rxLen);
    1628:	681e      	ldr	r6, [r3, #0]
                 * @return The functions returns a boolean to indicate if the the transfer was successful.
                 * @retval false Error.
                 * @retval true Success.
                 */
                bool transfer(uint8_t iicAddress, uint8_t *txBuffer, uint8_t txLen, uint8_t *rxBuffer, uint8_t rxLen) {
                    if( (txLen > 0) && (txBuffer != NULL) ) {
    162a:	b1e2      	cbz	r2, 1666 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0x52>
    162c:	b1d9      	cbz	r1, 1666 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0x52>
		transmitting = 1;
    162e:	f04f 0901 	mov.w	r9, #1
                        iic->beginTransmission(iicAddress);
    1632:	6833      	ldr	r3, [r6, #0]
		txBuffer[0] = (address << 1);
    1634:	4614      	mov	r4, r2
    1636:	fa08 f009 	lsl.w	r0, r8, r9
		transmitting = 1;
    163a:	f883 9130 	strb.w	r9, [r3, #304]	; 0x130
		txBufferLength = 1;
    163e:	f883 912f 	strb.w	r9, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1642:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5

                        uint8_t bytesWritten = (uint8_t) iic->write(txBuffer, txLen);
    1646:	6830      	ldr	r0, [r6, #0]
    1648:	6803      	ldr	r3, [r0, #0]
    164a:	685b      	ldr	r3, [r3, #4]
    164c:	4798      	blx	r3
                        iic->endTransmission(true);
    164e:	4649      	mov	r1, r9
                        uint8_t bytesWritten = (uint8_t) iic->write(txBuffer, txLen);
    1650:	4681      	mov	r9, r0
                        iic->endTransmission(true);
    1652:	6830      	ldr	r0, [r6, #0]
    1654:	f7ff fdca 	bl	11ec <TwoWire::endTransmission(unsigned char)>

                        if( bytesWritten != txLen ) {
    1658:	fa5f f989 	uxtb.w	r9, r9
    165c:	454c      	cmp	r4, r9
    165e:	d002      	beq.n	1666 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0x52>
                            return false;
    1660:	2000      	movs	r0, #0
        }
    1662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        }
                    }

                    if( (rxLen > 0)  && (rxBuffer != NULL) ) {
    1666:	2f00      	cmp	r7, #0
    1668:	d03d      	beq.n	16e6 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xd2>
    166a:	2d00      	cmp	r5, #0
    166c:	d03b      	beq.n	16e6 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xd2>
		return requestFrom(address, quantity, (uint8_t)1);
    166e:	4641      	mov	r1, r8
    1670:	2301      	movs	r3, #1
    1672:	463a      	mov	r2, r7
    1674:	6830      	ldr	r0, [r6, #0]
    1676:	f7ff fe39 	bl	12ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    167a:	3d01      	subs	r5, #1
                        uint8_t bytesRead = iic->requestFrom(iicAddress, rxLen);

                        for(uint16_t i = 0; (i < rxLen) && (iic->available() > 0); ++i) {
    167c:	fa1f fb87 	uxth.w	fp, r7
    1680:	4680      	mov	r8, r0
    1682:	2400      	movs	r4, #0
    1684:	f8df 9070 	ldr.w	r9, [pc, #112]	; 16f8 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xe4>
    1688:	f8df a070 	ldr.w	sl, [pc, #112]	; 16fc <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xe8>
    168c:	e01c      	b.n	16c8 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xb4>
		return rxBufferLength - rxBufferIndex;
    168e:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    1692:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    1696:	1a98      	subs	r0, r3, r2
    1698:	2800      	cmp	r0, #0
    169a:	dd1d      	ble.n	16d8 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xc4>
                            rxBuffer[i] = (uint8_t) iic->read();
    169c:	6830      	ldr	r0, [r6, #0]
    169e:	6803      	ldr	r3, [r0, #0]
    16a0:	695b      	ldr	r3, [r3, #20]
    16a2:	4553      	cmp	r3, sl
    16a4:	d122      	bne.n	16ec <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xd8>
		if (rxBufferIndex >= rxBufferLength) return -1;
    16a6:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    16aa:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
		return rxBuffer[rxBufferIndex++];
    16ae:	1c51      	adds	r1, r2, #1
		if (rxBufferIndex >= rxBufferLength) return -1;
    16b0:	4293      	cmp	r3, r2
		return rxBuffer[rxBufferIndex++];
    16b2:	4402      	add	r2, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    16b4:	d91d      	bls.n	16f2 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xde>
		return rxBuffer[rxBufferIndex++];
    16b6:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    16ba:	7e90      	ldrb	r0, [r2, #26]
                        for(uint16_t i = 0; (i < rxLen) && (iic->available() > 0); ++i) {
    16bc:	3401      	adds	r4, #1
                            rxBuffer[i] = (uint8_t) iic->read();
    16be:	f805 0f01 	strb.w	r0, [r5, #1]!
                        for(uint16_t i = 0; (i < rxLen) && (iic->available() > 0); ++i) {
    16c2:	b2a4      	uxth	r4, r4
    16c4:	45a3      	cmp	fp, r4
    16c6:	d907      	bls.n	16d8 <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xc4>
    16c8:	6830      	ldr	r0, [r6, #0]
    16ca:	6803      	ldr	r3, [r0, #0]
    16cc:	691b      	ldr	r3, [r3, #16]
    16ce:	454b      	cmp	r3, r9
    16d0:	d0dd      	beq.n	168e <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0x7a>
    16d2:	4798      	blx	r3
    16d4:	2800      	cmp	r0, #0
    16d6:	dce1      	bgt.n	169c <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0x88>
                        }

                        if( bytesRead != rxLen ) {
    16d8:	eba7 0008 	sub.w	r0, r7, r8
    16dc:	fab0 f080 	clz	r0, r0
    16e0:	0940      	lsrs	r0, r0, #5
    16e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            return false;
                        }
                    }

                    return true;
    16e6:	2001      	movs	r0, #1
    16e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rxBuffer[i] = (uint8_t) iic->read();
    16ec:	4798      	blx	r3
    16ee:	b2c0      	uxtb	r0, r0
    16f0:	e7e4      	b.n	16bc <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xa8>
    16f2:	20ff      	movs	r0, #255	; 0xff
    16f4:	e7e2      	b.n	16bc <ifx::tlx493d::transferIIC(TLx493D_t*, unsigned char*, unsigned char, unsigned char*, unsigned char)+0xa8>
    16f6:	bf00      	nop
    16f8:	00000ff1 	.word	0x00000ff1
    16fc:	00000ffd 	.word	0x00000ffd

00001700 <ifx::tlx493d::initCommunication(TLx493D_t*, ifx::tlx493d::TwoWireWrapper&, TLx493D_IICAddressType_t, bool)>:
        bool initCommunication(TLx493D_t *sensor, TwoWireWrapper &tw, TLx493D_IICAddressType_t iicAdr, bool executeInit) {
    1700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1702:	4604      	mov	r4, r0
            sensor->comInterface.comLibObj.iic_obj = (TLx493D_I2CObject_t *) malloc(sizeof(TLx493D_I2CObject_t));
    1704:	2008      	movs	r0, #8
        bool initCommunication(TLx493D_t *sensor, TwoWireWrapper &tw, TLx493D_IICAddressType_t iicAdr, bool executeInit) {
    1706:	460e      	mov	r6, r1
    1708:	4617      	mov	r7, r2
    170a:	461d      	mov	r5, r3
            sensor->comInterface.comLibObj.iic_obj = (TLx493D_I2CObject_t *) malloc(sizeof(TLx493D_I2CObject_t));
    170c:	f006 fac0 	bl	7c90 <malloc>
    1710:	6160      	str	r0, [r4, #20]
            if( sensor->comInterface.comLibObj.iic_obj == NULL ) {
    1712:	b188      	cbz	r0, 1738 <ifx::tlx493d::initCommunication(TLx493D_t*, ifx::tlx493d::TwoWireWrapper&, TLx493D_IICAddressType_t, bool)+0x38>
            sensor->comInterface.comLibObj.iic_obj->isToBeDeleted = false;
    1714:	2300      	movs	r3, #0
            sensor->comInterface.comLibFuncs                      = &comLibFuncs_iic;
    1716:	4a0a      	ldr	r2, [pc, #40]	; (1740 <ifx::tlx493d::initCommunication(TLx493D_t*, ifx::tlx493d::TwoWireWrapper&, TLx493D_IICAddressType_t, bool)+0x40>)
            sensor->comInterface.comLibObj.iic_obj->wire          = &tw;
    1718:	6006      	str	r6, [r0, #0]
            sensor->comInterface.comLibParams.iic_params.address  = sensor->functions->selectIICAddress(sensor, iicAdr);
    171a:	4639      	mov	r1, r7
            sensor->comInterface.comLibObj.iic_obj->isToBeDeleted = false;
    171c:	7103      	strb	r3, [r0, #4]
            sensor->comInterface.comLibParams.iic_params.address  = sensor->functions->selectIICAddress(sensor, iicAdr);
    171e:	4620      	mov	r0, r4
    1720:	68a3      	ldr	r3, [r4, #8]
    1722:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
            sensor->comInterface.comLibFuncs                      = &comLibFuncs_iic;
    1726:	60e2      	str	r2, [r4, #12]
            sensor->comInterface.comLibParams.iic_params.address  = sensor->functions->selectIICAddress(sensor, iicAdr);
    1728:	4798      	blx	r3
    172a:	7420      	strb	r0, [r4, #16]
            if( executeInit ) {
    172c:	b12d      	cbz	r5, 173a <ifx::tlx493d::initCommunication(TLx493D_t*, ifx::tlx493d::TwoWireWrapper&, TLx493D_IICAddressType_t, bool)+0x3a>
                sensor->comInterface.comLibFuncs->init.iic_init(sensor);
    172e:	68e3      	ldr	r3, [r4, #12]
    1730:	4620      	mov	r0, r4
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	4798      	blx	r3
            return true;
    1736:	4628      	mov	r0, r5
        }
    1738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return true;
    173a:	2001      	movs	r0, #1
        }
    173c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    173e:	bf00      	nop
    1740:	20002e70 	.word	0x20002e70

00001744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>:
            enablePower(false);
            enablePower(true);
        }


        void Kit2GoBoardSupport::enablePin(const pinCtrl &p, bool enable) {
    1744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t begin = ARM_DWT_CYCCNT;
    1746:	4c16      	ldr	r4, [pc, #88]	; (17a0 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x5c>)
    1748:	4607      	mov	r7, r0
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    174a:	4d16      	ldr	r5, [pc, #88]	; (17a4 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x60>)
            if( p.isSet ) {
                delayMicroseconds(enable ? p.delayBeforeEnable : p.delayBeforeDisable);
    174c:	2900      	cmp	r1, #0
    174e:	6903      	ldr	r3, [r0, #16]
	uint32_t begin = ARM_DWT_CYCCNT;
    1750:	6866      	ldr	r6, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1752:	4815      	ldr	r0, [pc, #84]	; (17a8 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x64>)
    1754:	682a      	ldr	r2, [r5, #0]
    1756:	fba0 0202 	umull	r0, r2, r0, r2
    175a:	6978      	ldr	r0, [r7, #20]
    175c:	bf18      	it	ne
    175e:	4618      	movne	r0, r3
    1760:	0c92      	lsrs	r2, r2, #18
    1762:	fb00 f202 	mul.w	r2, r0, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1766:	6863      	ldr	r3, [r4, #4]
    1768:	1b9b      	subs	r3, r3, r6
    176a:	429a      	cmp	r2, r3
    176c:	d8fb      	bhi.n	1766 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x22>
                digitalWrite(p.pinNumber, enable ? p.enableValue : p.disableValue);
    176e:	7878      	ldrb	r0, [r7, #1]
    1770:	b189      	cbz	r1, 1796 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x52>
    1772:	7939      	ldrb	r1, [r7, #4]
    1774:	f004 fbd8 	bl	5f28 <digitalWrite>
                delayMicroseconds(enable ? p.delayAfterEnable : p.delayAfterDisable);
    1778:	68bc      	ldr	r4, [r7, #8]
	uint32_t begin = ARM_DWT_CYCCNT;
    177a:	4909      	ldr	r1, [pc, #36]	; (17a0 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x5c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    177c:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x64>)
	uint32_t begin = ARM_DWT_CYCCNT;
    177e:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1780:	682a      	ldr	r2, [r5, #0]
    1782:	fba3 3202 	umull	r3, r2, r3, r2
    1786:	0c92      	lsrs	r2, r2, #18
    1788:	fb04 f202 	mul.w	r2, r4, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    178c:	684b      	ldr	r3, [r1, #4]
    178e:	1a1b      	subs	r3, r3, r0
    1790:	429a      	cmp	r2, r3
    1792:	d8fb      	bhi.n	178c <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x48>
            }
        }
    1794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                digitalWrite(p.pinNumber, enable ? p.enableValue : p.disableValue);
    1796:	7979      	ldrb	r1, [r7, #5]
    1798:	f004 fbc6 	bl	5f28 <digitalWrite>
                delayMicroseconds(enable ? p.delayAfterEnable : p.delayAfterDisable);
    179c:	68fc      	ldr	r4, [r7, #12]
    179e:	e7ec      	b.n	177a <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]+0x36>
    17a0:	e0001000 	.word	0xe0001000
    17a4:	20001dac 	.word	0x20001dac
    17a8:	431bde83 	.word	0x431bde83

000017ac <ifx::tlx493d::Kit2GoBoardSupport::Kit2GoBoardSupport()>:
        Kit2GoBoardSupport::Kit2GoBoardSupport() : powerPins{false, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    17ac:	2300      	movs	r3, #0
    17ae:	e9c0 3300 	strd	r3, r3, [r0]
    17b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
    17b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
                                                   selectPins{false, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    17ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
    17be:	e9c0 3308 	strd	r3, r3, [r0, #32]
    17c2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
                                                   addressPins{false, 0, 0, 0, 0, 0, 0, 0, 0, 0} {
    17c6:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    17ca:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
    17ce:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
        }
    17d2:	4770      	bx	lr

000017d4 <ifx::tlx493d::Kit2GoBoardSupport::~Kit2GoBoardSupport()>:
        }
    17d4:	4770      	bx	lr
    17d6:	bf00      	nop

000017d8 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)>:
        void Kit2GoBoardSupport::init(bool isEnablePower, bool isEnableSelect, bool isEnableExtendedAddress) {
    17d8:	b570      	push	{r4, r5, r6, lr}
    17da:	4604      	mov	r4, r0
    17dc:	460e      	mov	r6, r1
    17de:	461d      	mov	r5, r3
            if( isEnableSelect ) {
    17e0:	b10a      	cbz	r2, 17e6 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0xe>


        void Kit2GoBoardSupport::initPin(const pinCtrl &p) {
            if( p.isSet ) {
    17e2:	7e03      	ldrb	r3, [r0, #24]
    17e4:	bb8b      	cbnz	r3, 184a <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x72>
            if( isEnableExtendedAddress ) {
    17e6:	2d00      	cmp	r5, #0
    17e8:	d03d      	beq.n	1866 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x8e>
            if( p.isSet ) {
    17ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    17ee:	b9d3      	cbnz	r3, 1826 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x4e>
            if( isEnablePower ) {
    17f0:	b126      	cbz	r6, 17fc <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x24>
            if( p.isSet ) {
    17f2:	7823      	ldrb	r3, [r4, #0]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d13b      	bne.n	1870 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x98>
            if( isEnableExtendedAddress ) {
    17f8:	b905      	cbnz	r5, 17fc <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x24>
        }
    17fa:	bd70      	pop	{r4, r5, r6, pc}
            if( p.isSet ) {
    17fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    1800:	2b00      	cmp	r3, #0
    1802:	d0fa      	beq.n	17fa <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x22>
    1804:	2100      	movs	r1, #0
    1806:	f104 0030 	add.w	r0, r4, #48	; 0x30
    180a:	f7ff ff9b 	bl	1744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>
            }
        }


        void Kit2GoBoardSupport::setPinDirectionToTristate(pinCtrl &p) {
            if( p.isSet ) {
    180e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    1812:	2b00      	cmp	r3, #0
    1814:	d0f1      	beq.n	17fa <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x22>
                pinMode(p.pinNumber, p.tristateDirection);
    1816:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    181a:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
        }
    181e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pinMode(p.pinNumber, p.tristateDirection);
    1822:	f004 bbab 	b.w	5f7c <pinMode>
                pinMode(p.pinNumber, p.driveDirection);
    1826:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    182a:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    182e:	f004 fba5 	bl	5f7c <pinMode>
            if( p.isSet ) {
    1832:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            for(const auto &p : addressPins) {
    1836:	f104 0030 	add.w	r0, r4, #48	; 0x30
            if( p.isSet ) {
    183a:	2b00      	cmp	r3, #0
    183c:	d0d8      	beq.n	17f0 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x18>
    183e:	2101      	movs	r1, #1
    1840:	f7ff ff80 	bl	1744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>
            if( isEnablePower ) {
    1844:	2e00      	cmp	r6, #0
    1846:	d1d4      	bne.n	17f2 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x1a>
    1848:	e7d8      	b.n	17fc <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x24>
                pinMode(p.pinNumber, p.driveDirection);
    184a:	7e81      	ldrb	r1, [r0, #26]
    184c:	7e40      	ldrb	r0, [r0, #25]
    184e:	f004 fb95 	bl	5f7c <pinMode>
            if( p.isSet ) {
    1852:	7e23      	ldrb	r3, [r4, #24]
            for(const auto &p : selectPins) {
    1854:	f104 0018 	add.w	r0, r4, #24
            if( p.isSet ) {
    1858:	2b00      	cmp	r3, #0
    185a:	d0c4      	beq.n	17e6 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0xe>
    185c:	2100      	movs	r1, #0
    185e:	f7ff ff71 	bl	1744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>
            if( isEnableExtendedAddress ) {
    1862:	2d00      	cmp	r5, #0
    1864:	d1c1      	bne.n	17ea <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x12>
            if( isEnablePower ) {
    1866:	2e00      	cmp	r6, #0
    1868:	d0c7      	beq.n	17fa <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x22>
            if( p.isSet ) {
    186a:	7823      	ldrb	r3, [r4, #0]
    186c:	2b00      	cmp	r3, #0
    186e:	d0c3      	beq.n	17f8 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x20>
                pinMode(p.pinNumber, p.driveDirection);
    1870:	78a1      	ldrb	r1, [r4, #2]
    1872:	7860      	ldrb	r0, [r4, #1]
    1874:	f004 fb82 	bl	5f7c <pinMode>
            if( p.isSet ) {
    1878:	7823      	ldrb	r3, [r4, #0]
    187a:	2b00      	cmp	r3, #0
    187c:	d0bc      	beq.n	17f8 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x20>
    187e:	2100      	movs	r1, #0
    1880:	4620      	mov	r0, r4
    1882:	f7ff ff5f 	bl	1744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>
    1886:	7823      	ldrb	r3, [r4, #0]
    1888:	2b00      	cmp	r3, #0
    188a:	d0b5      	beq.n	17f8 <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x20>
    188c:	2101      	movs	r1, #1
    188e:	4620      	mov	r0, r4
    1890:	f7ff ff58 	bl	1744 <ifx::tlx493d::Kit2GoBoardSupport::enablePin(ifx::tlx493d::Kit2GoBoardSupport::pinCtrl const&, bool) [clone .part.0]>
            if( isEnableExtendedAddress ) {
    1894:	2d00      	cmp	r5, #0
    1896:	d0b0      	beq.n	17fa <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x22>
    1898:	e7b0      	b.n	17fc <ifx::tlx493d::Kit2GoBoardSupport::init(bool, bool, bool)+0x24>
    189a:	bf00      	nop

0000189c <logMessage(char const*, char const*, std::__va_list)>:


const uint16_t LOGGER_BUFFER_SIZE = 512U;


static void logMessage(const char *prefix, const char *format, va_list vaList) {
    189c:	b570      	push	{r4, r5, r6, lr}
    189e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    18a2:	460d      	mov	r5, r1
    18a4:	4616      	mov	r6, r2
    18a6:	9001      	str	r0, [sp, #4]
    char buffer[LOGGER_BUFFER_SIZE];

    size_t prefixSize = strlen(prefix);
    18a8:	f007 fa0a 	bl	8cc0 <strlen>
    18ac:	4604      	mov	r4, r0
    (void) memcpy(buffer, prefix, prefixSize);
    18ae:	9901      	ldr	r1, [sp, #4]
    18b0:	a802      	add	r0, sp, #8
    18b2:	4622      	mov	r2, r4
    18b4:	f004 fba2 	bl	5ffc <memcpy>
    int ret = vsprintf(buffer + prefixSize, format, vaList);
    18b8:	f104 0308 	add.w	r3, r4, #8
    18bc:	4632      	mov	r2, r6
    18be:	4629      	mov	r1, r5
    18c0:	eb0d 0003 	add.w	r0, sp, r3
    18c4:	f007 f800 	bl	88c8 <vsprintf>

    if( (ret + prefixSize) > LOGGER_BUFFER_SIZE ) {
    18c8:	4420      	add	r0, r4
    18ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    18ce:	d809      	bhi.n	18e4 <logMessage(char const*, char const*, std::__va_list)+0x48>
							  return write((const uint8_t *)str, strlen(str)); }
    18d0:	a802      	add	r0, sp, #8
    18d2:	f007 f9f5 	bl	8cc0 <strlen>
    18d6:	4601      	mov	r1, r0
    18d8:	a802      	add	r0, sp, #8
    18da:	f005 ffd5 	bl	7888 <usb_serial_write>
        Serial.print(LOGGER_BUFFER_SIZE);
        Serial.println(" characters) because message too long !\n");
    }

    Serial.print(buffer);
}
    18de:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	211b      	movs	r1, #27
    18e6:	4808      	ldr	r0, [pc, #32]	; (1908 <logMessage(char const*, char const*, std::__va_list)+0x6c>)
    18e8:	f005 ffce 	bl	7888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    18ec:	f44f 7100 	mov.w	r1, #512	; 0x200
    18f0:	4806      	ldr	r0, [pc, #24]	; (190c <logMessage(char const*, char const*, std::__va_list)+0x70>)
    18f2:	f003 ffb1 	bl	5858 <Print::print(long)>
    18f6:	2128      	movs	r1, #40	; 0x28
    18f8:	4805      	ldr	r0, [pc, #20]	; (1910 <logMessage(char const*, char const*, std::__va_list)+0x74>)
    18fa:	f005 ffc5 	bl	7888 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    18fe:	4803      	ldr	r0, [pc, #12]	; (190c <logMessage(char const*, char const*, std::__va_list)+0x70>)
    1900:	f003 ffb6 	bl	5870 <Print::println()>
    1904:	e7e4      	b.n	18d0 <logMessage(char const*, char const*, std::__va_list)+0x34>
    1906:	bf00      	nop
    1908:	2000109c 	.word	0x2000109c
    190c:	20001db0 	.word	0x20001db0
    1910:	200010b8 	.word	0x200010b8

00001914 <logPrint>:
    void logPrintDouble(double d) {
        Serial.print(d);
    }


    void logPrint(const char *format, ...) {
    1914:	b40f      	push	{r0, r1, r2, r3}
    1916:	b500      	push	{lr}
    1918:	b083      	sub	sp, #12
        va_list ap;
        va_start(ap, format);
        logMessage("", format, ap);
    191a:	4806      	ldr	r0, [pc, #24]	; (1934 <logPrint+0x20>)
    void logPrint(const char *format, ...) {
    191c:	aa04      	add	r2, sp, #16
    191e:	f852 1b04 	ldr.w	r1, [r2], #4
        va_start(ap, format);
    1922:	9201      	str	r2, [sp, #4]
        logMessage("", format, ap);
    1924:	f7ff ffba 	bl	189c <logMessage(char const*, char const*, std::__va_list)>
        va_end(ap);
    }
    1928:	b003      	add	sp, #12
    192a:	f85d eb04 	ldr.w	lr, [sp], #4
    192e:	b004      	add	sp, #16
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	200010e0 	.word	0x200010e0

00001938 <logPrintRegisters>:
    void logPrintRegisters(const TLx493D_t *sensor, const char *headLine = NULL) {
    1938:	b570      	push	{r4, r5, r6, lr}
    193a:	4605      	mov	r5, r0
        Serial.println();
    193c:	480b      	ldr	r0, [pc, #44]	; (196c <logPrintRegisters+0x34>)
    193e:	f003 ff97 	bl	5870 <Print::println()>
        for(uint8_t i = 0; i < sensor->regMapSize; ++i) {
    1942:	7f2b      	ldrb	r3, [r5, #28]
    1944:	b163      	cbz	r3, 1960 <logPrintRegisters+0x28>
    1946:	2400      	movs	r4, #0
            logPrint("    0x%02X", sensor->regMap[i]);
    1948:	4e09      	ldr	r6, [pc, #36]	; (1970 <logPrintRegisters+0x38>)
    194a:	4623      	mov	r3, r4
    194c:	682a      	ldr	r2, [r5, #0]
        for(uint8_t i = 0; i < sensor->regMapSize; ++i) {
    194e:	3401      	adds	r4, #1
            logPrint("    0x%02X", sensor->regMap[i]);
    1950:	4630      	mov	r0, r6
    1952:	5cd1      	ldrb	r1, [r2, r3]
    1954:	f7ff ffde 	bl	1914 <logPrint>
        for(uint8_t i = 0; i < sensor->regMapSize; ++i) {
    1958:	7f2a      	ldrb	r2, [r5, #28]
    195a:	b2e3      	uxtb	r3, r4
    195c:	429a      	cmp	r2, r3
    195e:	d8f5      	bhi.n	194c <logPrintRegisters+0x14>
        Serial.println();
    1960:	4802      	ldr	r0, [pc, #8]	; (196c <logPrintRegisters+0x34>)
    }
    1962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.println();
    1966:	f003 bf83 	b.w	5870 <Print::println()>
    196a:	bf00      	nop
    196c:	20001db0 	.word	0x20001db0
    1970:	20001760 	.word	0x20001760

00001974 <logPrintln>:


    void logPrintln(const char *prefix, const char *format, ...) {
    1974:	b40e      	push	{r1, r2, r3}
    1976:	b570      	push	{r4, r5, r6, lr}
    1978:	b085      	sub	sp, #20
        Serial.println();
    197a:	4e0b      	ldr	r6, [pc, #44]	; (19a8 <logPrintln+0x34>)
    void logPrintln(const char *prefix, const char *format, ...) {
    197c:	4605      	mov	r5, r0
    197e:	ac09      	add	r4, sp, #36	; 0x24
        Serial.println();
    1980:	4630      	mov	r0, r6
    void logPrintln(const char *prefix, const char *format, ...) {
    1982:	f854 1b04 	ldr.w	r1, [r4], #4
    1986:	9101      	str	r1, [sp, #4]
        Serial.println();
    1988:	f003 ff72 	bl	5870 <Print::println()>
        va_list ap;
        va_start(ap, format);
        logMessage(prefix, format, ap);
    198c:	4622      	mov	r2, r4
    198e:	9901      	ldr	r1, [sp, #4]
    1990:	4628      	mov	r0, r5
        va_start(ap, format);
    1992:	9403      	str	r4, [sp, #12]
        logMessage(prefix, format, ap);
    1994:	f7ff ff82 	bl	189c <logMessage(char const*, char const*, std::__va_list)>
        va_end(ap);
        Serial.println();
    1998:	4630      	mov	r0, r6
    199a:	f003 ff69 	bl	5870 <Print::println()>
    }
    199e:	b005      	add	sp, #20
    19a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    19a4:	b003      	add	sp, #12
    19a6:	4770      	bx	lr
    19a8:	20001db0 	.word	0x20001db0

000019ac <logFlush>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    19ac:	f005 bfa0 	b.w	78f0 <usb_serial_flush_output>

000019b0 <TLx493D_A1B6_hasValidData>:
    return ((sensor->regMap[bf->address] & bf->mask) == 0);
    19b0:	e9d0 2300 	ldrd	r2, r3, [r0]
    19b4:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    19b8:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
    19bc:	5c10      	ldrb	r0, [r2, r0]
    return TLx493D_A1B6_hasValidTBit(sensor) && TLx493D_A1B6_hasValidPDBit(sensor);
    19be:	4208      	tst	r0, r1
    19c0:	d109      	bne.n	19d6 <TLx493D_A1B6_hasValidData+0x26>
}

bool TLx493D_A1B6_hasValidPDBit(const TLx493D_t *sensor) {
    const TLx493D_Register_t *bf = &sensor->regDef[A1B6_PD_e];
    return ((sensor->regMap[bf->address] & bf->mask) != 0);
    19c2:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
    19c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    19ca:	5c52      	ldrb	r2, [r2, r1]
    return TLx493D_A1B6_hasValidTBit(sensor) && TLx493D_A1B6_hasValidPDBit(sensor);
    19cc:	421a      	tst	r2, r3
    19ce:	bf14      	ite	ne
    19d0:	2001      	movne	r0, #1
    19d2:	2000      	moveq	r0, #0
    19d4:	4770      	bx	lr
    19d6:	2000      	movs	r0, #0
}
    19d8:	4770      	bx	lr
    19da:	bf00      	nop

000019dc <TLx493D_A1B6_isFunctional>:
    return ((sensor->regMap[bf->address] & bf->mask) != 0);
    19dc:	e9d0 1300 	ldrd	r1, r3, [r0]
    19e0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    19e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    19e8:	5c8a      	ldrb	r2, [r1, r2]
    19ea:	421a      	tst	r2, r3
}
    19ec:	bf14      	ite	ne
    19ee:	2001      	movne	r0, #1
    19f0:	2000      	moveq	r0, #0
    19f2:	4770      	bx	lr

000019f4 <TLx493D_A1B6_hasValidTBit>:
    return ((sensor->regMap[bf->address] & bf->mask) == 0);
    19f4:	e9d0 1300 	ldrd	r1, r3, [r0]
    19f8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    19fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    1a00:	5c8a      	ldrb	r2, [r1, r2]
    1a02:	421a      	tst	r2, r3
}
    1a04:	bf0c      	ite	eq
    1a06:	2001      	moveq	r0, #1
    1a08:	2000      	movne	r0, #0
    1a0a:	4770      	bx	lr

00001a0c <TLx493D_A1B6_init>:
bool TLx493D_A1B6_init(TLx493D_t *sensor) {
    1a0c:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_1_REG_MAP_SIZE, TLx493D_A1B6_regDef, &TLx493D_A1B6_commonFunctions, TLx493D_A1B6_e, TLx493D_I2C_e);
    1a0e:	2400      	movs	r4, #0
bool TLx493D_A1B6_init(TLx493D_t *sensor) {
    1a10:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_1_REG_MAP_SIZE, TLx493D_A1B6_regDef, &TLx493D_A1B6_commonFunctions, TLx493D_A1B6_e, TLx493D_I2C_e);
    1a12:	4b04      	ldr	r3, [pc, #16]	; (1a24 <TLx493D_A1B6_init+0x18>)
    1a14:	210e      	movs	r1, #14
    1a16:	4a04      	ldr	r2, [pc, #16]	; (1a28 <TLx493D_A1B6_init+0x1c>)
    1a18:	e9cd 4400 	strd	r4, r4, [sp]
    1a1c:	f001 ffaa 	bl	3974 <tlx493d_common_init>
}
    1a20:	b002      	add	sp, #8
    1a22:	bd10      	pop	{r4, pc}
    1a24:	20001dc0 	.word	0x20001dc0
    1a28:	20001e8c 	.word	0x20001e8c

00001a2c <TLx493D_A1B6_deinit>:
    return tlx493d_common_deinit(sensor);
    1a2c:	f001 bfd2 	b.w	39d4 <tlx493d_common_deinit>

00001a30 <TLx493D_A1B6_readRegisters>:
bool TLx493D_A1B6_readRegisters(TLx493D_t *sensor) {
    1a30:	b500      	push	{lr}
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    1a32:	2200      	movs	r2, #0
bool TLx493D_A1B6_readRegisters(TLx493D_t *sensor) {
    1a34:	b083      	sub	sp, #12
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    1a36:	210a      	movs	r1, #10
    1a38:	6803      	ldr	r3, [r0, #0]
    1a3a:	9100      	str	r1, [sp, #0]
    1a3c:	4611      	mov	r1, r2
    1a3e:	f7ff fdb5 	bl	15ac <tlx493d_transfer>
}
    1a42:	b003      	add	sp, #12
    1a44:	f85d fb04 	ldr.w	pc, [sp], #4

00001a48 <TLx493D_A1B6_calculateRawTemperature>:
void TLx493D_A1B6_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    1a48:	460b      	mov	r3, r1
    tlx493d_common_calculateRawTemperature(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, temperature);
    1a4a:	220c      	movs	r2, #12
    1a4c:	2103      	movs	r1, #3
    1a4e:	f002 b859 	b.w	3b04 <tlx493d_common_calculateRawTemperature>
    1a52:	bf00      	nop

00001a54 <TLx493D_A1B6_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    1a54:	f002 b87e 	b.w	3b54 <tlx493d_common_getRawTemperature>

00001a58 <TLx493D_A1B6_calculateRawMagneticField>:
void TLx493D_A1B6_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    1a58:	b530      	push	{r4, r5, lr}
    1a5a:	b087      	sub	sp, #28
    tlx493d_common_calculateRawMagneticField(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, A1B6_BY_MSB_e, A1B6_BY_LSB_e, A1B6_BZ_MSB_e, A1B6_BZ_LSB_e, x, y, z);
    1a5c:	250b      	movs	r5, #11
    1a5e:	2407      	movs	r4, #7
    1a60:	9305      	str	r3, [sp, #20]
    1a62:	2301      	movs	r3, #1
    1a64:	9400      	str	r4, [sp, #0]
    1a66:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1a6a:	2202      	movs	r2, #2
    1a6c:	2100      	movs	r1, #0
    1a6e:	e9cd 2501 	strd	r2, r5, [sp, #4]
    1a72:	2206      	movs	r2, #6
    1a74:	f002 f9a8 	bl	3dc8 <tlx493d_common_calculateRawMagneticField>
}
    1a78:	b007      	add	sp, #28
    1a7a:	bd30      	pop	{r4, r5, pc}

00001a7c <TLx493D_A1B6_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    1a7c:	f002 b87a 	b.w	3b74 <tlx493d_common_getRawMagneticField>

00001a80 <TLx493D_A1B6_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    1a80:	f002 b88e 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>
    1a84:	0000      	movs	r0, r0
	...

00001a88 <TLx493D_A1B6_calculateTemperature>:
void TLx493D_A1B6_calculateTemperature(TLx493D_t *sensor, double *temp) {
    1a88:	b510      	push	{r4, lr}
    1a8a:	b082      	sub	sp, #8
    int16_t value = 0;
    1a8c:	f04f 0c00 	mov.w	ip, #0
void TLx493D_A1B6_calculateTemperature(TLx493D_t *sensor, double *temp) {
    1a90:	460c      	mov	r4, r1
    tlx493d_common_concatBytes(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, &value);
    1a92:	220c      	movs	r2, #12
    1a94:	f10d 0306 	add.w	r3, sp, #6
    1a98:	2103      	movs	r1, #3
    int16_t value = 0;
    1a9a:	f8ad c006 	strh.w	ip, [sp, #6]
    tlx493d_common_concatBytes(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, &value);
    1a9e:	f002 f96b 	bl	3d78 <tlx493d_common_concatBytes>
    *temp = (((double) value - GEN_1_TEMP_OFFSET) * GEN_1_TEMP_MULT) + GEN_1_REF_TEMP;
    1aa2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    1aa6:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
    1aaa:	ee07 3a10 	vmov	s14, r3
    1aae:	ed9f 4b08 	vldr	d4, [pc, #32]	; 1ad0 <TLx493D_A1B6_calculateTemperature+0x48>
    1ab2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    1ab6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 1ad8 <TLx493D_A1B6_calculateTemperature+0x50>
    1aba:	ee37 7b44 	vsub.f64	d7, d7, d4
    1abe:	eea7 6b05 	vfma.f64	d6, d7, d5
    1ac2:	ed84 6b00 	vstr	d6, [r4]
}
    1ac6:	b002      	add	sp, #8
    1ac8:	bd10      	pop	{r4, pc}
    1aca:	bf00      	nop
    1acc:	f3af 8000 	nop.w
    1ad0:	00000000 	.word	0x00000000
    1ad4:	40754000 	.word	0x40754000
    1ad8:	9999999a 	.word	0x9999999a
    1adc:	3ff19999 	.word	0x3ff19999

00001ae0 <TLx493D_A1B6_calculateMagneticField>:
void TLx493D_A1B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    1ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae2:	b083      	sub	sp, #12
    1ae4:	4604      	mov	r4, r0
    1ae6:	460f      	mov	r7, r1
    int16_t valueX = 0, valueY = 0, valueZ = 0;
    1ae8:	2100      	movs	r1, #0
void TLx493D_A1B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    1aea:	4616      	mov	r6, r2
    1aec:	461d      	mov	r5, r3
    tlx493d_common_concatBytes(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, &valueX);
    1aee:	2206      	movs	r2, #6
    1af0:	f10d 0302 	add.w	r3, sp, #2
    int16_t valueX = 0, valueY = 0, valueZ = 0;
    1af4:	f8ad 1002 	strh.w	r1, [sp, #2]
    1af8:	f8ad 1004 	strh.w	r1, [sp, #4]
    1afc:	f8ad 1006 	strh.w	r1, [sp, #6]
    tlx493d_common_concatBytes(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, &valueX);
    1b00:	f002 f93a 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, A1B6_BY_MSB_e, A1B6_BY_LSB_e, &valueY);
    1b04:	ab01      	add	r3, sp, #4
    1b06:	4620      	mov	r0, r4
    1b08:	2207      	movs	r2, #7
    1b0a:	2101      	movs	r1, #1
    1b0c:	f002 f934 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, A1B6_BZ_MSB_e, A1B6_BZ_LSB_e, &valueZ);
    1b10:	f10d 0306 	add.w	r3, sp, #6
    1b14:	4620      	mov	r0, r4
    1b16:	220b      	movs	r2, #11
    1b18:	2102      	movs	r1, #2
    1b1a:	f002 f92d 	bl	3d78 <tlx493d_common_concatBytes>
    *x = ((double) valueX) * GEN_1_MAG_FIELD_MULT;
    1b1e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    1b22:	ee05 3a10 	vmov	s10, r3
    *y = ((double) valueY) * GEN_1_MAG_FIELD_MULT;
    1b26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    1b2a:	ee06 3a10 	vmov	s12, r3
    *z = ((double) valueZ) * GEN_1_MAG_FIELD_MULT;
    1b2e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    *x = ((double) valueX) * GEN_1_MAG_FIELD_MULT;
    1b32:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    *z = ((double) valueZ) * GEN_1_MAG_FIELD_MULT;
    1b36:	ee07 3a10 	vmov	s14, r3
    *y = ((double) valueY) * GEN_1_MAG_FIELD_MULT;
    1b3a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    *x = ((double) valueX) * GEN_1_MAG_FIELD_MULT;
    1b3e:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 1b68 <TLx493D_A1B6_calculateMagneticField+0x88>
    *z = ((double) valueZ) * GEN_1_MAG_FIELD_MULT;
    1b42:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    *x = ((double) valueX) * GEN_1_MAG_FIELD_MULT;
    1b46:	ee25 5b04 	vmul.f64	d5, d5, d4
    *y = ((double) valueY) * GEN_1_MAG_FIELD_MULT;
    1b4a:	ee26 6b04 	vmul.f64	d6, d6, d4
    *z = ((double) valueZ) * GEN_1_MAG_FIELD_MULT;
    1b4e:	ee27 7b04 	vmul.f64	d7, d7, d4
    *x = ((double) valueX) * GEN_1_MAG_FIELD_MULT;
    1b52:	ed87 5b00 	vstr	d5, [r7]
    *y = ((double) valueY) * GEN_1_MAG_FIELD_MULT;
    1b56:	ed86 6b00 	vstr	d6, [r6]
    *z = ((double) valueZ) * GEN_1_MAG_FIELD_MULT;
    1b5a:	ed85 7b00 	vstr	d7, [r5]
}
    1b5e:	b003      	add	sp, #12
    1b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b62:	bf00      	nop
    1b64:	f3af 8000 	nop.w
    1b68:	2b020c4a 	.word	0x2b020c4a
    1b6c:	3fb91687 	.word	0x3fb91687

00001b70 <TLx493D_A1B6_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    1b70:	f002 b830 	b.w	3bd4 <tlx493d_common_getTemperature>

00001b74 <TLx493D_A1B6_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    1b74:	f002 b83e 	b.w	3bf4 <tlx493d_common_getMagneticField>

00001b78 <TLx493D_A1B6_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    1b78:	f002 b852 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

00001b7c <TLx493D_A1B6_selectIICAddress>:
    switch(addr) {
    1b7c:	2907      	cmp	r1, #7
uint8_t TLx493D_A1B6_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    1b7e:	b508      	push	{r3, lr}
    1b80:	d802      	bhi.n	1b88 <TLx493D_A1B6_selectIICAddress+0xc>
    1b82:	4a04      	ldr	r2, [pc, #16]	; (1b94 <TLx493D_A1B6_selectIICAddress+0x18>)
    1b84:	5c50      	ldrb	r0, [r2, r1]
}
    1b86:	bd08      	pop	{r3, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, addr, "TLx493D_IICAddressType_t");
    1b88:	4a03      	ldr	r2, [pc, #12]	; (1b98 <TLx493D_A1B6_selectIICAddress+0x1c>)
    1b8a:	f002 f9ab 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return 0;
    1b8e:	2000      	movs	r0, #0
}
    1b90:	bd08      	pop	{r3, pc}
    1b92:	bf00      	nop
    1b94:	200003e0 	.word	0x200003e0
    1b98:	20000630 	.word	0x20000630

00001b9c <TLx493D_A1B6_setTrigger>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setTrigger");
    1b9c:	4902      	ldr	r1, [pc, #8]	; (1ba8 <TLx493D_A1B6_setTrigger+0xc>)
bool TLx493D_A1B6_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t val) {
    1b9e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setTrigger");
    1ba0:	f002 f940 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1ba4:	2000      	movs	r0, #0
    1ba6:	bd08      	pop	{r3, pc}
    1ba8:	20000678 	.word	0x20000678

00001bac <TLx493D_A1B6_setSensitivity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setSensitivity");
    1bac:	4902      	ldr	r1, [pc, #8]	; (1bb8 <TLx493D_A1B6_setSensitivity+0xc>)
bool TLx493D_A1B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    1bae:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setSensitivity");
    1bb0:	f002 f938 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1bb4:	2000      	movs	r0, #0
    1bb6:	bd08      	pop	{r3, pc}
    1bb8:	20000668 	.word	0x20000668

00001bbc <TLx493D_A1B6_enable1ByteReadMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enable1ByteReadMode");
    1bbc:	4902      	ldr	r1, [pc, #8]	; (1bc8 <TLx493D_A1B6_enable1ByteReadMode+0xc>)
bool TLx493D_A1B6_enable1ByteReadMode(TLx493D_t *sensor) {
    1bbe:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enable1ByteReadMode");
    1bc0:	f002 f930 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1bc4:	2000      	movs	r0, #0
    1bc6:	bd08      	pop	{r3, pc}
    1bc8:	20000478 	.word	0x20000478

00001bcc <TLx493D_A1B6_enableCollisionAvoidance>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableCollisionAvoidance");
    1bcc:	4902      	ldr	r1, [pc, #8]	; (1bd8 <TLx493D_A1B6_enableCollisionAvoidance+0xc>)
bool TLx493D_A1B6_enableCollisionAvoidance(TLx493D_t *sensor) {
    1bce:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableCollisionAvoidance");
    1bd0:	f002 f928 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1bd4:	2000      	movs	r0, #0
    1bd6:	bd08      	pop	{r3, pc}
    1bd8:	2000048c 	.word	0x2000048c

00001bdc <TLx493D_A1B6_disableCollisionAvoidance>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableCollisionAvoidance");
    1bdc:	4902      	ldr	r1, [pc, #8]	; (1be8 <TLx493D_A1B6_disableCollisionAvoidance+0xc>)
bool TLx493D_A1B6_disableCollisionAvoidance(TLx493D_t *sensor) {
    1bde:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableCollisionAvoidance");
    1be0:	f002 f920 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1be4:	2000      	movs	r0, #0
    1be6:	bd08      	pop	{r3, pc}
    1be8:	20000448 	.word	0x20000448

00001bec <TLx493D_A1B6_setUpdateRate>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setUpdateRate");
    1bec:	4902      	ldr	r1, [pc, #8]	; (1bf8 <TLx493D_A1B6_setUpdateRate+0xc>)
bool TLx493D_A1B6_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    1bee:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setUpdateRate");
    1bf0:	f002 f918 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1bf4:	2000      	movs	r0, #0
    1bf6:	bd08      	pop	{r3, pc}
    1bf8:	20000684 	.word	0x20000684

00001bfc <TLx493D_A1B6_hasWakeUp>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    1bfc:	4902      	ldr	r1, [pc, #8]	; (1c08 <TLx493D_A1B6_hasWakeUp+0xc>)
bool TLx493D_A1B6_hasWakeUp(const TLx493D_t *sensor) {
    1bfe:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    1c00:	f002 f910 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c04:	2000      	movs	r0, #0
    1c06:	bd08      	pop	{r3, pc}
    1c08:	20000520 	.word	0x20000520

00001c0c <TLx493D_A1B6_isWakeUpEnabled>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    1c0c:	4902      	ldr	r1, [pc, #8]	; (1c18 <TLx493D_A1B6_isWakeUpEnabled+0xc>)
bool TLx493D_A1B6_isWakeUpEnabled(const TLx493D_t *sensor) {
    1c0e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    1c10:	f002 f908 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c14:	2000      	movs	r0, #0
    1c16:	bd08      	pop	{r3, pc}
    1c18:	2000053c 	.word	0x2000053c

00001c1c <TLx493D_A1B6_enableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    1c1c:	4902      	ldr	r1, [pc, #8]	; (1c28 <TLx493D_A1B6_enableWakeUpMode+0xc>)
bool TLx493D_A1B6_enableWakeUpMode(TLx493D_t *sensor) {
    1c1e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    1c20:	f002 f900 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c24:	2000      	movs	r0, #0
    1c26:	bd08      	pop	{r3, pc}
    1c28:	200004a8 	.word	0x200004a8

00001c2c <TLx493D_A1B6_disableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    1c2c:	4902      	ldr	r1, [pc, #8]	; (1c38 <TLx493D_A1B6_disableWakeUpMode+0xc>)
bool TLx493D_A1B6_disableWakeUpMode(TLx493D_t *sensor) {
    1c2e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    1c30:	f002 f8f8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c34:	2000      	movs	r0, #0
    1c36:	bd08      	pop	{r3, pc}
    1c38:	20000464 	.word	0x20000464

00001c3c <TLx493D_A1B6_setWakeUpThresholdsAsInteger>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    1c3c:	4902      	ldr	r1, [pc, #8]	; (1c48 <TLx493D_A1B6_setWakeUpThresholdsAsInteger+0xc>)
bool TLx493D_A1B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    1c3e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    1c40:	f002 f8f0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c44:	2000      	movs	r0, #0
    1c46:	bd08      	pop	{r3, pc}
    1c48:	200006a8 	.word	0x200006a8

00001c4c <TLx493D_A1B6_setWakeUpThresholds>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    1c4c:	4902      	ldr	r1, [pc, #8]	; (1c58 <TLx493D_A1B6_setWakeUpThresholds+0xc>)
bool TLx493D_A1B6_setWakeUpThresholds(TLx493D_t *sensor, double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    1c4e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    1c50:	f002 f8e8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c54:	2000      	movs	r0, #0
    1c56:	bd08      	pop	{r3, pc}
    1c58:	20000694 	.word	0x20000694

00001c5c <TLx493D_A1B6_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    1c5c:	4902      	ldr	r1, [pc, #8]	; (1c68 <TLx493D_A1B6_softwareReset+0xc>)
bool TLx493D_A1B6_softwareReset(TLx493D_t *sensor) {
    1c5e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    1c60:	f002 f8e0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c64:	2000      	movs	r0, #0
    1c66:	bd08      	pop	{r3, pc}
    1c68:	200006c8 	.word	0x200006c8

00001c6c <TLx493D_A1B6_calculateFuseParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "calculateFuseParity");
    1c6c:	4902      	ldr	r1, [pc, #8]	; (1c78 <TLx493D_A1B6_calculateFuseParity+0xc>)
uint8_t TLx493D_A1B6_calculateFuseParity(const TLx493D_t *sensor) {
    1c6e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "calculateFuseParity");
    1c70:	f002 f8d8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c74:	2000      	movs	r0, #0
    1c76:	bd08      	pop	{r3, pc}
    1c78:	20000434 	.word	0x20000434

00001c7c <TLx493D_A1B6_calculateBusParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "calculateBusParity");
    1c7c:	4902      	ldr	r1, [pc, #8]	; (1c88 <TLx493D_A1B6_calculateBusParity+0xc>)
uint8_t TLx493D_A1B6_calculateBusParity(const TLx493D_t *sensor) {
    1c7e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "calculateBusParity");
    1c80:	f002 f8d0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c84:	2000      	movs	r0, #0
    1c86:	bd08      	pop	{r3, pc}
    1c88:	20000420 	.word	0x20000420

00001c8c <TLx493D_A1B6_hasValidBusParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidBusParity");
    1c8c:	4902      	ldr	r1, [pc, #8]	; (1c98 <TLx493D_A1B6_hasValidBusParity+0xc>)
bool TLx493D_A1B6_hasValidBusParity(const TLx493D_t *sensor) {
    1c8e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidBusParity");
    1c90:	f002 f8c8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1c94:	2000      	movs	r0, #0
    1c96:	bd08      	pop	{r3, pc}
    1c98:	200004d8 	.word	0x200004d8

00001c9c <TLx493D_A1B6_hasValidConfigurationParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidConfigurationParity");
    1c9c:	4902      	ldr	r1, [pc, #8]	; (1ca8 <TLx493D_A1B6_hasValidConfigurationParity+0xc>)
bool TLx493D_A1B6_hasValidConfigurationParity(const TLx493D_t *sensor) {
    1c9e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidConfigurationParity");
    1ca0:	f002 f8c0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1ca4:	2000      	movs	r0, #0
    1ca6:	bd08      	pop	{r3, pc}
    1ca8:	200004ec 	.word	0x200004ec

00001cac <TLx493D_A1B6_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    1cac:	4902      	ldr	r1, [pc, #8]	; (1cb8 <TLx493D_A1B6_hasValidWakeUpParity+0xc>)
bool TLx493D_A1B6_hasValidWakeUpParity(const TLx493D_t *sensor) {
    1cae:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    1cb0:	f002 f8b8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1cb4:	2000      	movs	r0, #0
    1cb6:	bd08      	pop	{r3, pc}
    1cb8:	20000508 	.word	0x20000508

00001cbc <TLx493D_A1B6_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    1cbc:	4902      	ldr	r1, [pc, #8]	; (1cc8 <TLx493D_A1B6_isInTestMode+0xc>)
bool TLx493D_A1B6_isInTestMode(const TLx493D_t *sensor) {
    1cbe:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    1cc0:	f002 f8b0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1cc4:	2000      	movs	r0, #0
    1cc6:	bd08      	pop	{r3, pc}
    1cc8:	2000052c 	.word	0x2000052c
    1ccc:	00000000 	.word	0x00000000

00001cd0 <TLx493D_A1B6_getSensitivityScaleFactor>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "getSensitivityScaleFactor");
    1cd0:	4905      	ldr	r1, [pc, #20]	; (1ce8 <TLx493D_A1B6_getSensitivityScaleFactor+0x18>)
double TLx493D_A1B6_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    1cd2:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "getSensitivityScaleFactor");
    1cd4:	f002 f8a6 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    1cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1ce0 <TLx493D_A1B6_getSensitivityScaleFactor+0x10>
    1cdc:	bd08      	pop	{r3, pc}
    1cde:	bf00      	nop
	...
    1ce8:	200004bc 	.word	0x200004bc
    1cec:	00000000 	.word	0x00000000

00001cf0 <TLx493D_A1B6_calculateRawMagneticFieldAtTemperature>:
                                                         double xInmT, double yInmT, double zInmT, int16_t *x, int16_t *y, int16_t *z) {
    1cf0:	b510      	push	{r4, lr}
    1cf2:	ed2d 8b06 	vpush	{d8-d10}
    *x = (int16_t) lround(xInmT / GEN_1_MAG_FIELD_MULT);
    1cf6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 1d30 <TLx493D_A1B6_calculateRawMagneticFieldAtTemperature+0x40>
                                                         double xInmT, double yInmT, double zInmT, int16_t *x, int16_t *y, int16_t *z) {
    1cfa:	eeb0 ab41 	vmov.f64	d10, d1
    1cfe:	461c      	mov	r4, r3
    1d00:	eeb0 9b42 	vmov.f64	d9, d2
    *x = (int16_t) lround(xInmT / GEN_1_MAG_FIELD_MULT);
    1d04:	ee80 0b08 	vdiv.f64	d0, d0, d8
    1d08:	f005 ff22 	bl	7b50 <lround>
    1d0c:	8020      	strh	r0, [r4, #0]
    *y = (int16_t) lround(yInmT / GEN_1_MAG_FIELD_MULT);
    1d0e:	ee8a 0b08 	vdiv.f64	d0, d10, d8
    1d12:	f005 ff1d 	bl	7b50 <lround>
    1d16:	9b08      	ldr	r3, [sp, #32]
    1d18:	8018      	strh	r0, [r3, #0]
    *z = (int16_t) lround(zInmT / GEN_1_MAG_FIELD_MULT);
    1d1a:	ee89 0b08 	vdiv.f64	d0, d9, d8
    1d1e:	f005 ff17 	bl	7b50 <lround>
    1d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d24:	8018      	strh	r0, [r3, #0]
}
    1d26:	ecbd 8b06 	vpop	{d8-d10}
    1d2a:	bd10      	pop	{r4, pc}
    1d2c:	f3af 8000 	nop.w
    1d30:	2b020c4a 	.word	0x2b020c4a
    1d34:	3fb91687 	.word	0x3fb91687

00001d38 <TLx493D_A1B6_printRegisters>:
}


void TLx493D_A1B6_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_A1B6_REGISTER_HEADLINE); 
    1d38:	4901      	ldr	r1, [pc, #4]	; (1d40 <TLx493D_A1B6_printRegisters+0x8>)
    1d3a:	f7ff bdfd 	b.w	1938 <logPrintRegisters>
    1d3e:	bf00      	nop
    1d40:	2000054c 	.word	0x2000054c

00001d44 <TLx493D_A1B6_hasValidFuseParity>:
    1d44:	e9d0 1300 	ldrd	r1, r3, [r0]
    1d48:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    1d4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    1d50:	5c8a      	ldrb	r2, [r1, r2]
    1d52:	421a      	tst	r2, r3
    1d54:	bf14      	ite	ne
    1d56:	2001      	movne	r0, #1
    1d58:	2000      	moveq	r0, #0
    1d5a:	4770      	bx	lr

00001d5c <TLx493D_A1B6_calculateRawMagneticFieldAndTemperature>:
void TLx493D_A1B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    1d5c:	b530      	push	{r4, r5, lr}
    1d5e:	b087      	sub	sp, #28
    tlx493d_common_calculateRawMagneticField(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, A1B6_BY_MSB_e, A1B6_BY_LSB_e, A1B6_BZ_MSB_e, A1B6_BZ_LSB_e, x, y, z);
    1d60:	2507      	movs	r5, #7
void TLx493D_A1B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    1d62:	4604      	mov	r4, r0
    tlx493d_common_calculateRawMagneticField(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, A1B6_BY_MSB_e, A1B6_BY_LSB_e, A1B6_BZ_MSB_e, A1B6_BZ_LSB_e, x, y, z);
    1d64:	9305      	str	r3, [sp, #20]
    1d66:	2302      	movs	r3, #2
    1d68:	9500      	str	r5, [sp, #0]
void TLx493D_A1B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    1d6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_common_calculateRawMagneticField(sensor, A1B6_BX_MSB_e, A1B6_BX_LSB_e, A1B6_BY_MSB_e, A1B6_BY_LSB_e, A1B6_BZ_MSB_e, A1B6_BZ_LSB_e, x, y, z);
    1d6c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1d70:	220b      	movs	r2, #11
    1d72:	2100      	movs	r1, #0
    1d74:	e9cd 3201 	strd	r3, r2, [sp, #4]
    1d78:	2206      	movs	r2, #6
    1d7a:	2301      	movs	r3, #1
    1d7c:	f002 f824 	bl	3dc8 <tlx493d_common_calculateRawMagneticField>
    tlx493d_common_calculateRawTemperature(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, temperature);
    1d80:	462b      	mov	r3, r5
    1d82:	220c      	movs	r2, #12
    1d84:	2103      	movs	r1, #3
    1d86:	4620      	mov	r0, r4
}
    1d88:	b007      	add	sp, #28
    1d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_common_calculateRawTemperature(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, temperature);
    1d8e:	f001 beb9 	b.w	3b04 <tlx493d_common_calculateRawTemperature>
    1d92:	bf00      	nop

00001d94 <TLx493D_A1B6_readRegistersAndCheck>:
bool TLx493D_A1B6_readRegistersAndCheck(TLx493D_t *sensor) {
    1d94:	b500      	push	{lr}
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    1d96:	2200      	movs	r2, #0
bool TLx493D_A1B6_readRegistersAndCheck(TLx493D_t *sensor) {
    1d98:	b083      	sub	sp, #12
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    1d9a:	210a      	movs	r1, #10
    1d9c:	6803      	ldr	r3, [r0, #0]
    1d9e:	9100      	str	r1, [sp, #0]
    1da0:	4611      	mov	r1, r2
    1da2:	f7ff fc03 	bl	15ac <tlx493d_transfer>
}
    1da6:	b003      	add	sp, #12
    1da8:	f85d fb04 	ldr.w	pc, [sp], #4
    1dac:	0000      	movs	r0, r0
	...

00001db0 <TLx493D_A1B6_calculateMagneticFieldAndTemperature>:
void TLx493D_A1B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    1db0:	b510      	push	{r4, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	4604      	mov	r4, r0
    TLx493D_A1B6_calculateMagneticField(sensor, x, y, z);
    1db6:	f7ff fe93 	bl	1ae0 <TLx493D_A1B6_calculateMagneticField>
    int16_t value = 0;
    1dba:	2100      	movs	r1, #0
    tlx493d_common_concatBytes(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, &value);
    1dbc:	f10d 0306 	add.w	r3, sp, #6
    1dc0:	220c      	movs	r2, #12
    int16_t value = 0;
    1dc2:	f8ad 1006 	strh.w	r1, [sp, #6]
    tlx493d_common_concatBytes(sensor, A1B6_TEMP_MSB_e, A1B6_TEMP_LSB_e, &value);
    1dc6:	4620      	mov	r0, r4
    1dc8:	2103      	movs	r1, #3
    1dca:	f001 ffd5 	bl	3d78 <tlx493d_common_concatBytes>
    *temp = (((double) value - GEN_1_TEMP_OFFSET) * GEN_1_TEMP_MULT) + GEN_1_REF_TEMP;
    1dce:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    1dd2:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
    1dd6:	ee07 3a10 	vmov	s14, r3
    1dda:	9b04      	ldr	r3, [sp, #16]
    1ddc:	ed9f 4b06 	vldr	d4, [pc, #24]	; 1df8 <TLx493D_A1B6_calculateMagneticFieldAndTemperature+0x48>
    1de0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    1de4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 1e00 <TLx493D_A1B6_calculateMagneticFieldAndTemperature+0x50>
    1de8:	ee37 7b44 	vsub.f64	d7, d7, d4
    1dec:	eea7 6b05 	vfma.f64	d6, d7, d5
    1df0:	ed83 6b00 	vstr	d6, [r3]
}
    1df4:	b002      	add	sp, #8
    1df6:	bd10      	pop	{r4, pc}
    1df8:	00000000 	.word	0x00000000
    1dfc:	40754000 	.word	0x40754000
    1e00:	9999999a 	.word	0x9999999a
    1e04:	3ff19999 	.word	0x3ff19999

00001e08 <TLx493D_A1B6_setBitfield>:
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1e08:	eb01 0381 	add.w	r3, r1, r1, lsl #2
void TLx493D_A1B6_setBitfield(TLx493D_t *sensor, uint8_t bitField, uint8_t newBitFieldValue) {
    1e0c:	b510      	push	{r4, lr}
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1e0e:	6844      	ldr	r4, [r0, #4]
    if(bf->accessMode == TLx493D_WRITE_MODE_e) {
    1e10:	f814 e003 	ldrb.w	lr, [r4, r3]
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1e14:	441c      	add	r4, r3
    if(bf->accessMode == TLx493D_WRITE_MODE_e) {
    1e16:	f1be 0f01 	cmp.w	lr, #1
    1e1a:	d10d      	bne.n	1e38 <TLx493D_A1B6_setBitfield+0x30>
        sensor->regMap[bf->address + GEN_1_WRITE_REGISTERS_OFFSET] = (uint8_t) ((sensor->regMap[bf->address + GEN_1_WRITE_REGISTERS_OFFSET] & ((uint8_t) ~bf->mask)) | ((newBitFieldValue << bf->offset) & bf->mask));
    1e1c:	7863      	ldrb	r3, [r4, #1]
    1e1e:	f894 c003 	ldrb.w	ip, [r4, #3]
    1e22:	6800      	ldr	r0, [r0, #0]
    1e24:	330a      	adds	r3, #10
    1e26:	fa02 f20c 	lsl.w	r2, r2, ip
    1e2a:	78a4      	ldrb	r4, [r4, #2]
    1e2c:	5cc1      	ldrb	r1, [r0, r3]
    1e2e:	404a      	eors	r2, r1
    1e30:	4022      	ands	r2, r4
    1e32:	4051      	eors	r1, r2
    1e34:	54c1      	strb	r1, [r0, r3]
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tlx493d_errorBitfieldNotWritableForSensorType(sensor, bitField);
    1e3c:	f002 b822 	b.w	3e84 <tlx493d_errorBitfieldNotWritableForSensorType>

00001e40 <TLx493D_A1B6_calculateConfigurationParity>:
uint8_t TLx493D_A1B6_calculateConfigurationParity(TLx493D_t *sensor) {
    1e40:	b510      	push	{r4, lr}
    1e42:	4604      	mov	r4, r0
    TLx493D_A1B6_setBitfield(sensor, A1B6_P_e, TLx493D_A1B6_EVEN_PARITY); 
    1e44:	2111      	movs	r1, #17
    1e46:	2201      	movs	r2, #1
    1e48:	f7ff ffde 	bl	1e08 <TLx493D_A1B6_setBitfield>
        result ^= sensor->regMap[addr+GEN_1_WRITE_REGISTERS_OFFSET];
    1e4c:	6822      	ldr	r2, [r4, #0]
    1e4e:	f892 c00c 	ldrb.w	ip, [r2, #12]
    1e52:	7ad3      	ldrb	r3, [r2, #11]
    1e54:	7a91      	ldrb	r1, [r2, #10]
    1e56:	ea83 030c 	eor.w	r3, r3, ip
    1e5a:	7b50      	ldrb	r0, [r2, #13]
    1e5c:	404b      	eors	r3, r1
    TLx493D_A1B6_setBitfield(sensor, A1B6_P_e, tlx493d_common_calculateParity(result));
    1e5e:	4058      	eors	r0, r3
    1e60:	f001 ff78 	bl	3d54 <tlx493d_common_calculateParity>
    1e64:	2111      	movs	r1, #17
    1e66:	4602      	mov	r2, r0
    1e68:	4620      	mov	r0, r4
    1e6a:	f7ff ffcd 	bl	1e08 <TLx493D_A1B6_setBitfield>
}
    1e6e:	2001      	movs	r0, #1
    1e70:	bd10      	pop	{r4, pc}
    1e72:	bf00      	nop

00001e74 <TLx493D_A1B6_setReservedRegisterValues>:
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1e74:	6843      	ldr	r3, [r0, #4]
void TLx493D_A1B6_setReservedRegisterValues(TLx493D_t *sensor) {
    1e76:	b510      	push	{r4, lr}
    if(bf->accessMode == TLx493D_READ_MODE_e) {
    1e78:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
void TLx493D_A1B6_setReservedRegisterValues(TLx493D_t *sensor) {
    1e7c:	4604      	mov	r4, r0
    if(bf->accessMode == TLx493D_READ_MODE_e) {
    1e7e:	2a00      	cmp	r2, #0
    1e80:	d136      	bne.n	1ef0 <TLx493D_A1B6_setReservedRegisterValues+0x7c>
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1e82:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
    1e86:	6800      	ldr	r0, [r0, #0]
    1e88:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
    1e8c:	5c82      	ldrb	r2, [r0, r2]
    1e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1e92:	400a      	ands	r2, r1
    1e94:	411a      	asrs	r2, r3
    1e96:	b2d2      	uxtb	r2, r2
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_1_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_1_e));
    1e98:	2113      	movs	r1, #19
    1e9a:	4620      	mov	r0, r4
    1e9c:	f7ff ffb4 	bl	1e08 <TLx493D_A1B6_setBitfield>
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1ea0:	6863      	ldr	r3, [r4, #4]
    if(bf->accessMode == TLx493D_READ_MODE_e) {
    1ea2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    1ea6:	bb9a      	cbnz	r2, 1f10 <TLx493D_A1B6_setReservedRegisterValues+0x9c>
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1ea8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
    1eac:	6820      	ldr	r0, [r4, #0]
    1eae:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
    1eb2:	5c82      	ldrb	r2, [r0, r2]
    1eb4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    1eb8:	400a      	ands	r2, r1
    1eba:	411a      	asrs	r2, r3
    1ebc:	b2d2      	uxtb	r2, r2
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_2_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_2_e));
    1ebe:	2117      	movs	r1, #23
    1ec0:	4620      	mov	r0, r4
    1ec2:	f7ff ffa1 	bl	1e08 <TLx493D_A1B6_setBitfield>
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    1ec6:	6863      	ldr	r3, [r4, #4]
    if(bf->accessMode == TLx493D_READ_MODE_e) {
    1ec8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    1ecc:	b9aa      	cbnz	r2, 1efa <TLx493D_A1B6_setReservedRegisterValues+0x86>
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1ece:	6820      	ldr	r0, [r4, #0]
    1ed0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
    1ed4:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
    1ed8:	5c82      	ldrb	r2, [r0, r2]
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1eda:	4620      	mov	r0, r4
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1edc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    1ee0:	400a      	ands	r2, r1
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1ee2:	211b      	movs	r1, #27
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1ee4:	411a      	asrs	r2, r3
}
    1ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        bitFieldValue = (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    1eea:	b2d2      	uxtb	r2, r2
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1eec:	f7ff bf8c 	b.w	1e08 <TLx493D_A1B6_setBitfield>
        tlx493d_errorBitfieldNotReadableForSensorType(sensor, bitField);
    1ef0:	210d      	movs	r1, #13
    1ef2:	f001 ffaf 	bl	3e54 <tlx493d_errorBitfieldNotReadableForSensorType>
        return 0;
    1ef6:	2200      	movs	r2, #0
    1ef8:	e7ce      	b.n	1e98 <TLx493D_A1B6_setReservedRegisterValues+0x24>
        tlx493d_errorBitfieldNotReadableForSensorType(sensor, bitField);
    1efa:	4620      	mov	r0, r4
    1efc:	210f      	movs	r1, #15
    1efe:	f001 ffa9 	bl	3e54 <tlx493d_errorBitfieldNotReadableForSensorType>
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1f02:	4620      	mov	r0, r4
        return 0;
    1f04:	2200      	movs	r2, #0
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1f06:	211b      	movs	r1, #27
}
    1f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TLx493D_A1B6_setBitfield(sensor, A1B6_W_RES_3_e, TLx493D_A1B6_returnBitfield(sensor, A1B6_R_RES_3_e));
    1f0c:	f7ff bf7c 	b.w	1e08 <TLx493D_A1B6_setBitfield>
        tlx493d_errorBitfieldNotReadableForSensorType(sensor, bitField);
    1f10:	210e      	movs	r1, #14
    1f12:	4620      	mov	r0, r4
    1f14:	f001 ff9e 	bl	3e54 <tlx493d_errorBitfieldNotReadableForSensorType>
        return 0;
    1f18:	2200      	movs	r2, #0
    1f1a:	e7d0      	b.n	1ebe <TLx493D_A1B6_setReservedRegisterValues+0x4a>

00001f1c <TLx493D_A1B6_setResetValues>:
    TLx493D_A1B6_setReservedRegisterValues(sensor);
    1f1c:	f7ff bfaa 	b.w	1e74 <TLx493D_A1B6_setReservedRegisterValues>

00001f20 <TLx493D_A1B6_setMeasurement>:
bool TLx493D_A1B6_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    1f20:	b510      	push	{r4, lr}
    1f22:	4604      	mov	r4, r0
    1f24:	b082      	sub	sp, #8
    switch(val) {
    1f26:	b1c9      	cbz	r1, 1f5c <TLx493D_A1B6_setMeasurement+0x3c>
    1f28:	2901      	cmp	r1, #1
    1f2a:	d005      	beq.n	1f38 <TLx493D_A1B6_setMeasurement+0x18>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_MeasurementType_t");
    1f2c:	4a0c      	ldr	r2, [pc, #48]	; (1f60 <TLx493D_A1B6_setMeasurement+0x40>)
    1f2e:	f001 ffd9 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    1f32:	2000      	movs	r0, #0
}
    1f34:	b002      	add	sp, #8
    1f36:	bd10      	pop	{r4, pc}
        case TLx493D_BxByBzTemp_e : temp_nen = TLx493D_A1B6_Temp_ENABLE_default;
    1f38:	2200      	movs	r2, #0
    TLx493D_A1B6_setBitfield(sensor, A1B6_Temp_NEN_e, temp_nen);
    1f3a:	2118      	movs	r1, #24
    1f3c:	4620      	mov	r0, r4
    1f3e:	f7ff ff63 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    1f42:	4620      	mov	r0, r4
    1f44:	f7ff ff7c 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    1f48:	6821      	ldr	r1, [r4, #0]
    1f4a:	2300      	movs	r3, #0
    1f4c:	2204      	movs	r2, #4
    1f4e:	310a      	adds	r1, #10
    1f50:	4620      	mov	r0, r4
    1f52:	9300      	str	r3, [sp, #0]
    1f54:	f7ff fb2a 	bl	15ac <tlx493d_transfer>
}
    1f58:	b002      	add	sp, #8
    1f5a:	bd10      	pop	{r4, pc}
    switch(val) {
    1f5c:	2201      	movs	r2, #1
    1f5e:	e7ec      	b.n	1f3a <TLx493D_A1B6_setMeasurement+0x1a>
    1f60:	2000064c 	.word	0x2000064c

00001f64 <TLx493D_A1B6_setIICAddress>:
    switch (addr) {
    1f64:	2907      	cmp	r1, #7
bool TLx493D_A1B6_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    1f66:	b530      	push	{r4, r5, lr}
    1f68:	b083      	sub	sp, #12
    1f6a:	d903      	bls.n	1f74 <TLx493D_A1B6_setIICAddress+0x10>
            return false;
    1f6c:	2400      	movs	r4, #0
}
    1f6e:	4620      	mov	r0, r4
    1f70:	b003      	add	sp, #12
    1f72:	bd30      	pop	{r4, r5, pc}
    1f74:	4b0d      	ldr	r3, [pc, #52]	; (1fac <TLx493D_A1B6_setIICAddress+0x48>)
    1f76:	4604      	mov	r4, r0
    TLx493D_A1B6_setBitfield(sensor, A1B6_IICADR_e, bitfieldValue);
    1f78:	4a0d      	ldr	r2, [pc, #52]	; (1fb0 <TLx493D_A1B6_setIICAddress+0x4c>)
    1f7a:	5c5d      	ldrb	r5, [r3, r1]
    1f7c:	5c52      	ldrb	r2, [r2, r1]
    1f7e:	2112      	movs	r1, #18
    1f80:	f7ff ff42 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    1f84:	4620      	mov	r0, r4
    1f86:	f7ff ff5b 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    1f8a:	6821      	ldr	r1, [r4, #0]
    1f8c:	2300      	movs	r3, #0
    1f8e:	2204      	movs	r2, #4
    1f90:	310a      	adds	r1, #10
    1f92:	4620      	mov	r0, r4
    1f94:	9300      	str	r3, [sp, #0]
    1f96:	f7ff fb09 	bl	15ac <tlx493d_transfer>
    1f9a:	4603      	mov	r3, r0
    tlx493d_common_setIICAddress(sensor, deviceAddress);
    1f9c:	4620      	mov	r0, r4
    1f9e:	4629      	mov	r1, r5
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    1fa0:	461c      	mov	r4, r3
    tlx493d_common_setIICAddress(sensor, deviceAddress);
    1fa2:	f001 ff3d 	bl	3e20 <tlx493d_common_setIICAddress>
}
    1fa6:	4620      	mov	r0, r4
    1fa8:	b003      	add	sp, #12
    1faa:	bd30      	pop	{r4, r5, pc}
    1fac:	200003e0 	.word	0x200003e0
    1fb0:	200003f4 	.word	0x200003f4

00001fb4 <TLx493D_A1B6_enableInterrupt>:
bool TLx493D_A1B6_enableInterrupt(TLx493D_t *sensor) {
    1fb4:	b510      	push	{r4, lr}
    1fb6:	4604      	mov	r4, r0
    1fb8:	b082      	sub	sp, #8
    TLx493D_A1B6_setBitfield(sensor, A1B6_INT_e, TLx493D_A1B6_INT_ENABLE_default);
    1fba:	2200      	movs	r2, #0
    1fbc:	2114      	movs	r1, #20
    1fbe:	f7ff ff23 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    1fc2:	4620      	mov	r0, r4
    1fc4:	f7ff ff3c 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    1fc8:	6821      	ldr	r1, [r4, #0]
    1fca:	2300      	movs	r3, #0
    1fcc:	2204      	movs	r2, #4
    1fce:	310a      	adds	r1, #10
    1fd0:	4620      	mov	r0, r4
    1fd2:	9300      	str	r3, [sp, #0]
    1fd4:	f7ff faea 	bl	15ac <tlx493d_transfer>
}
    1fd8:	b002      	add	sp, #8
    1fda:	bd10      	pop	{r4, pc}

00001fdc <TLx493D_A1B6_disableInterrupt>:
bool TLx493D_A1B6_disableInterrupt(TLx493D_t *sensor) {
    1fdc:	b510      	push	{r4, lr}
    1fde:	4604      	mov	r4, r0
    1fe0:	b082      	sub	sp, #8
    TLx493D_A1B6_setBitfield(sensor, A1B6_INT_e, TLx493D_A1B6_INT_DISABLE);
    1fe2:	2201      	movs	r2, #1
    1fe4:	2114      	movs	r1, #20
    1fe6:	f7ff ff0f 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    1fea:	4620      	mov	r0, r4
    1fec:	f7ff ff28 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    1ff0:	6821      	ldr	r1, [r4, #0]
    1ff2:	2300      	movs	r3, #0
    1ff4:	2204      	movs	r2, #4
    1ff6:	310a      	adds	r1, #10
    1ff8:	4620      	mov	r0, r4
    1ffa:	9300      	str	r3, [sp, #0]
    1ffc:	f7ff fad6 	bl	15ac <tlx493d_transfer>
}
    2000:	b002      	add	sp, #8
    2002:	bd10      	pop	{r4, pc}

00002004 <TLx493D_A1B6_setPowerMode>:
    TLx493D_A1B6_setBitfield(sensor, A1B6_FAST_e, TLx493D_A1B6_PowerModeCombinations[mode].FAST);
    2004:	4b11      	ldr	r3, [pc, #68]	; (204c <TLx493D_A1B6_setPowerMode+0x48>)
    2006:	eb01 0141 	add.w	r1, r1, r1, lsl #1
bool TLx493D_A1B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    200a:	b530      	push	{r4, r5, lr}
    TLx493D_A1B6_setBitfield(sensor, A1B6_FAST_e, TLx493D_A1B6_PowerModeCombinations[mode].FAST);
    200c:	eb03 0541 	add.w	r5, r3, r1, lsl #1
bool TLx493D_A1B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    2010:	4604      	mov	r4, r0
    2012:	b083      	sub	sp, #12
    TLx493D_A1B6_setBitfield(sensor, A1B6_FAST_e, TLx493D_A1B6_PowerModeCombinations[mode].FAST);
    2014:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
    2018:	2115      	movs	r1, #21
    201a:	f7ff fef5 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_setBitfield(sensor, A1B6_LOW_POWER_e, TLx493D_A1B6_PowerModeCombinations[mode].LOW_POWER);
    201e:	786a      	ldrb	r2, [r5, #1]
    2020:	4620      	mov	r0, r4
    2022:	2116      	movs	r1, #22
    2024:	f7ff fef0 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_setBitfield(sensor, A1B6_LP_e, TLx493D_A1B6_PowerModeCombinations[mode].LP);
    2028:	78aa      	ldrb	r2, [r5, #2]
    202a:	2119      	movs	r1, #25
    202c:	4620      	mov	r0, r4
    202e:	f7ff feeb 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    2032:	4620      	mov	r0, r4
    2034:	f7ff ff04 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    2038:	6821      	ldr	r1, [r4, #0]
    203a:	2300      	movs	r3, #0
    203c:	2204      	movs	r2, #4
    203e:	310a      	adds	r1, #10
    2040:	4620      	mov	r0, r4
    2042:	9300      	str	r3, [sp, #0]
    2044:	f7ff fab2 	bl	15ac <tlx493d_transfer>
}
    2048:	b003      	add	sp, #12
    204a:	bd30      	pop	{r4, r5, pc}
    204c:	20000400 	.word	0x20000400

00002050 <TLx493D_A1B6_setDefaultConfig>:
bool TLx493D_A1B6_setDefaultConfig(TLx493D_t *sensor) {  
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    2052:	2200      	movs	r2, #0
bool TLx493D_A1B6_setDefaultConfig(TLx493D_t *sensor) {  
    2054:	b083      	sub	sp, #12
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    2056:	270a      	movs	r7, #10
bool TLx493D_A1B6_setDefaultConfig(TLx493D_t *sensor) {  
    2058:	4604      	mov	r4, r0
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    205a:	4611      	mov	r1, r2
    memset(sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, 0, GEN_1_WRITE_REGISTERS_MAX_COUNT);
    205c:	2600      	movs	r6, #0
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    205e:	9700      	str	r7, [sp, #0]
    2060:	6803      	ldr	r3, [r0, #0]
    2062:	f7ff faa3 	bl	15ac <tlx493d_transfer>
    memset(sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, 0, GEN_1_WRITE_REGISTERS_MAX_COUNT);
    2066:	6823      	ldr	r3, [r4, #0]
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    2068:	4605      	mov	r5, r0
    TLx493D_A1B6_setReservedRegisterValues(sensor);
    206a:	4620      	mov	r0, r4
    memset(sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, 0, GEN_1_WRITE_REGISTERS_MAX_COUNT);
    206c:	f8c3 600a 	str.w	r6, [r3, #10]
    TLx493D_A1B6_setReservedRegisterValues(sensor);
    2070:	f7ff ff00 	bl	1e74 <TLx493D_A1B6_setReservedRegisterValues>
    TLx493D_A1B6_setBitfield(sensor, A1B6_PT_e, TLx493D_A1B6_PARITY_TEST_ENABLE_default);
    2074:	2201      	movs	r2, #1
    2076:	211a      	movs	r1, #26
    2078:	4620      	mov	r0, r4
    207a:	f7ff fec5 	bl	1e08 <TLx493D_A1B6_setBitfield>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    207e:	4620      	mov	r0, r4
    2080:	f7ff fede 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    2084:	6821      	ldr	r1, [r4, #0]
    2086:	4633      	mov	r3, r6
    2088:	2204      	movs	r2, #4
    208a:	4439      	add	r1, r7
    208c:	4620      	mov	r0, r4
    208e:	9600      	str	r6, [sp, #0]
    2090:	f7ff fa8c 	bl	15ac <tlx493d_transfer>
    TLx493D_A1B6_setPowerMode(sensor, TLx493D_MASTER_CONTROLLED_MODE_e);
    2094:	2104      	movs	r1, #4
    2096:	4005      	ands	r5, r0
    2098:	4620      	mov	r0, r4
    209a:	f7ff ffb3 	bl	2004 <TLx493D_A1B6_setPowerMode>
    TLx493D_A1B6_calculateConfigurationParity(sensor);
    209e:	4620      	mov	r0, r4
    20a0:	f7ff fece 	bl	1e40 <TLx493D_A1B6_calculateConfigurationParity>
    return tlx493d_transfer(sensor, sensor->regMap + GEN_1_WRITE_REGISTERS_OFFSET, GEN_1_WRITE_REGISTERS_MAX_COUNT, NULL, 0);
    20a4:	6821      	ldr	r1, [r4, #0]
    20a6:	4633      	mov	r3, r6
    20a8:	2204      	movs	r2, #4
    20aa:	4439      	add	r1, r7
    20ac:	4620      	mov	r0, r4
    20ae:	9600      	str	r6, [sp, #0]
    20b0:	b2ed      	uxtb	r5, r5
    20b2:	f7ff fa7b 	bl	15ac <tlx493d_transfer>
    20b6:	4602      	mov	r2, r0
    return tlx493d_transfer(sensor, NULL, 0, sensor->regMap, GEN_1_READ_REGISTERS_MAX_COUNT);
    20b8:	9700      	str	r7, [sp, #0]
    20ba:	4620      	mov	r0, r4
    20bc:	4015      	ands	r5, r2
    20be:	6823      	ldr	r3, [r4, #0]
    20c0:	4632      	mov	r2, r6
    20c2:	4631      	mov	r1, r6
    20c4:	f7ff fa72 	bl	15ac <tlx493d_transfer>
}
    20c8:	4028      	ands	r0, r5
    20ca:	b003      	add	sp, #12
    20cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ce:	bf00      	nop

000020d0 <TLx493D_A2B6_setResetValues>:
}
*/


void TLx493D_A2B6_setResetValues(TLx493D_t *sensor) {
    sensor->regMap[0x10] = 0x00; /** CONFIG */
    20d0:	6802      	ldr	r2, [r0, #0]
    20d2:	2300      	movs	r3, #0
    20d4:	7413      	strb	r3, [r2, #16]
    sensor->regMap[0x11] = 0x00; /** MOD1 */
    20d6:	6802      	ldr	r2, [r0, #0]
    20d8:	7453      	strb	r3, [r2, #17]
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    20da:	6802      	ldr	r2, [r0, #0]
    20dc:	74d3      	strb	r3, [r2, #19]
}
    20de:	4770      	bx	lr

000020e0 <TLx493D_A2B6_init>:
bool TLx493D_A2B6_init(TLx493D_t *sensor) {
    20e0:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_A2B6_regDef, &TLx493D_A2B6_commonFunctions, TLx493D_A2B6_e, TLx493D_I2C_e);
    20e2:	2101      	movs	r1, #1
bool TLx493D_A2B6_init(TLx493D_t *sensor) {
    20e4:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_A2B6_regDef, &TLx493D_A2B6_commonFunctions, TLx493D_A2B6_e, TLx493D_I2C_e);
    20e6:	2400      	movs	r4, #0
    20e8:	4b04      	ldr	r3, [pc, #16]	; (20fc <TLx493D_A2B6_init+0x1c>)
    20ea:	4a05      	ldr	r2, [pc, #20]	; (2100 <TLx493D_A2B6_init+0x20>)
    20ec:	e9cd 1400 	strd	r1, r4, [sp]
    20f0:	2117      	movs	r1, #23
    20f2:	f001 fc3f 	bl	3974 <tlx493d_common_init>
}
    20f6:	b002      	add	sp, #8
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	20001f18 	.word	0x20001f18
    2100:	20001fe4 	.word	0x20001fe4

00002104 <TLx493D_A2B6_deinit>:
    return tlx493d_common_deinit(sensor);
    2104:	f001 bc66 	b.w	39d4 <tlx493d_common_deinit>

00002108 <TLx493D_A2B6_readRegisters>:
    return tlx493d_common_readRegisters(sensor);
    2108:	f001 bc72 	b.w	39f0 <tlx493d_common_readRegisters>

0000210c <TLx493D_A2B6_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    210c:	f001 bc90 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

00002110 <TLx493D_A2B6_calculateRawTemperature>:
void TLx493D_A2B6_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    2110:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateRawTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    2112:	2206      	movs	r2, #6
    2114:	2103      	movs	r1, #3
    2116:	f001 bf01 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    211a:	bf00      	nop

0000211c <TLx493D_A2B6_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    211c:	f001 bd1a 	b.w	3b54 <tlx493d_common_getRawTemperature>

00002120 <TLx493D_A2B6_calculateRawMagneticField>:
void TLx493D_A2B6_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    2120:	b530      	push	{r4, r5, lr}
    2122:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2124:	2508      	movs	r5, #8
    2126:	2405      	movs	r4, #5
    2128:	9305      	str	r3, [sp, #20]
    212a:	2301      	movs	r3, #1
    212c:	9400      	str	r4, [sp, #0]
    212e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2132:	2202      	movs	r2, #2
    2134:	2100      	movs	r1, #0
    2136:	e9cd 2501 	strd	r2, r5, [sp, #4]
    213a:	2204      	movs	r2, #4
    213c:	f001 fef0 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
}
    2140:	b007      	add	sp, #28
    2142:	bd30      	pop	{r4, r5, pc}

00002144 <TLx493D_A2B6_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    2144:	f001 bd16 	b.w	3b74 <tlx493d_common_getRawMagneticField>

00002148 <TLx493D_A2B6_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    2148:	f001 bd2a 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

0000214c <TLx493D_A2B6_calculateTemperature>:
void TLx493D_A2B6_calculateTemperature(TLx493D_t *sensor, double *temperature) {
    214c:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    214e:	2206      	movs	r2, #6
    2150:	2103      	movs	r1, #3
    2152:	f001 bef5 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    2156:	bf00      	nop

00002158 <TLx493D_A2B6_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temperature);
    2158:	f001 bd3c 	b.w	3bd4 <tlx493d_common_getTemperature>

0000215c <TLx493D_A2B6_calculateMagneticField>:
void TLx493D_A2B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    215c:	b530      	push	{r4, r5, lr}
    215e:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2160:	2508      	movs	r5, #8
    2162:	2405      	movs	r4, #5
    2164:	9305      	str	r3, [sp, #20]
    2166:	2301      	movs	r3, #1
    2168:	9400      	str	r4, [sp, #0]
    216a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    216e:	2202      	movs	r2, #2
    2170:	2100      	movs	r1, #0
    2172:	e9cd 2501 	strd	r2, r5, [sp, #4]
    2176:	2204      	movs	r2, #4
    2178:	f001 ff0e 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
}
    217c:	b007      	add	sp, #28
    217e:	bd30      	pop	{r4, r5, pc}

00002180 <TLx493D_A2B6_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    2180:	f001 bd38 	b.w	3bf4 <tlx493d_common_getMagneticField>

00002184 <TLx493D_A2B6_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    2184:	f001 bd4c 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

00002188 <TLx493D_A2B6_setMeasurement>:
bool TLx493D_A2B6_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    2188:	b510      	push	{r4, lr}
    218a:	460c      	mov	r4, r1
    218c:	b082      	sub	sp, #8
    return tlx493d_gen_2_setMeasurement(sensor, A2B6_DT_e, A2B6_AM_e, A2B6_CP_e, val);
    218e:	2315      	movs	r3, #21
    2190:	2211      	movs	r2, #17
    2192:	2110      	movs	r1, #16
    2194:	9400      	str	r4, [sp, #0]
    2196:	f001 ff89 	bl	40ac <tlx493d_gen_2_setMeasurement>
}
    219a:	b002      	add	sp, #8
    219c:	bd10      	pop	{r4, pc}
    219e:	bf00      	nop

000021a0 <TLx493D_A2B6_setTrigger>:
bool TLx493D_A2B6_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t val) {
    21a0:	460b      	mov	r3, r1
    return tlx493d_gen_2_setTrigger(sensor, A2B6_TRIG_e, A2B6_CP_e, val);
    21a2:	2215      	movs	r2, #21
    21a4:	2112      	movs	r1, #18
    21a6:	f001 bfa3 	b.w	40f0 <tlx493d_gen_2_setTrigger>
    21aa:	bf00      	nop

000021ac <TLx493D_A2B6_setSensitivity>:
bool TLx493D_A2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    21ac:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, A2B6_X2_e, 0, A2B6_CP_e, val);
    21ae:	2415      	movs	r4, #21
bool TLx493D_A2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    21b0:	b082      	sub	sp, #8
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, A2B6_X2_e, 0, A2B6_CP_e, val);
    21b2:	2300      	movs	r3, #0
    21b4:	2213      	movs	r2, #19
    21b6:	e9cd 4100 	strd	r4, r1, [sp]
    21ba:	2101      	movs	r1, #1
    21bc:	f001 ffb8 	bl	4130 <tlx493d_gen_2_setSensitivity>
}
    21c0:	b002      	add	sp, #8
    21c2:	bd10      	pop	{r4, pc}

000021c4 <TLx493D_A2B6_setDefaultConfig>:
    return tlx493d_gen_2_setDefaultConfig(sensor, A2B6_CP_e, A2B6_CA_e, A2B6_INT_e);
    21c4:	231a      	movs	r3, #26
    21c6:	2219      	movs	r2, #25
    21c8:	2115      	movs	r1, #21
    21ca:	f001 bfe1 	b.w	4190 <tlx493d_gen_2_setDefaultConfig>
    21ce:	bf00      	nop

000021d0 <TLx493D_A2B6_setIICAddress>:
bool TLx493D_A2B6_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    21d0:	460b      	mov	r3, r1
    return tlx493d_gen_2_setIICAddress(sensor, A2B6_IICADR_e, A2B6_FP_e, address);
    21d2:	2216      	movs	r2, #22
    21d4:	2117      	movs	r1, #23
    21d6:	f002 b81b 	b.w	4210 <tlx493d_gen_2_setIICAddress>
    21da:	bf00      	nop

000021dc <TLx493D_A2B6_enable1ByteReadMode>:
bool TLx493D_A2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    21dc:	b510      	push	{r4, lr}
    return tlx493d_gen_2_set1ByteReadMode(sensor, A2B6_PR_e, A2B6_FP_e, A2B6_PRD_e, 1);
    21de:	2401      	movs	r4, #1
bool TLx493D_A2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    21e0:	b082      	sub	sp, #8
    return tlx493d_gen_2_set1ByteReadMode(sensor, A2B6_PR_e, A2B6_FP_e, A2B6_PRD_e, 1);
    21e2:	231c      	movs	r3, #28
    21e4:	2216      	movs	r2, #22
    21e6:	2118      	movs	r1, #24
    21e8:	9400      	str	r4, [sp, #0]
    21ea:	f002 faa3 	bl	4734 <tlx493d_gen_2_set1ByteReadMode>
}
    21ee:	b002      	add	sp, #8
    21f0:	bd10      	pop	{r4, pc}
    21f2:	bf00      	nop

000021f4 <TLx493D_A2B6_enableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, A2B6_CA_e, A2B6_FP_e, 0);
    21f4:	2300      	movs	r3, #0
    21f6:	2216      	movs	r2, #22
    21f8:	2119      	movs	r1, #25
    21fa:	f002 b82f 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    21fe:	bf00      	nop

00002200 <TLx493D_A2B6_disableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, A2B6_CA_e, A2B6_FP_e, 1);
    2200:	2301      	movs	r3, #1
    2202:	2216      	movs	r2, #22
    2204:	2119      	movs	r1, #25
    2206:	f002 b829 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    220a:	bf00      	nop

0000220c <TLx493D_A2B6_enableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, A2B6_INT_e, A2B6_FP_e, 0);
    220c:	2300      	movs	r3, #0
    220e:	2216      	movs	r2, #22
    2210:	211a      	movs	r1, #26
    2212:	f002 b83b 	b.w	428c <tlx493d_gen_2_setInterrupt>
    2216:	bf00      	nop

00002218 <TLx493D_A2B6_disableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, A2B6_INT_e, A2B6_FP_e, 1);
    2218:	2301      	movs	r3, #1
    221a:	2216      	movs	r2, #22
    221c:	211a      	movs	r1, #26
    221e:	f002 b835 	b.w	428c <tlx493d_gen_2_setInterrupt>
    2222:	bf00      	nop

00002224 <TLx493D_A2B6_setPowerMode>:
bool TLx493D_A2B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    2224:	460b      	mov	r3, r1
    return tlx493d_gen_2_setPowerMode(sensor, A2B6_MODE_e, A2B6_FP_e, mode);
    2226:	2216      	movs	r2, #22
    2228:	211b      	movs	r1, #27
    222a:	f002 b847 	b.w	42bc <tlx493d_gen_2_setPowerMode>
    222e:	bf00      	nop

00002230 <TLx493D_A2B6_setUpdateRate>:
bool TLx493D_A2B6_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    2230:	460b      	mov	r3, r1
    return tlx493d_gen_2_setUpdateRateFastSlow(sensor, A2B6_FP_e, A2B6_PRD_e, val);
    2232:	221c      	movs	r2, #28
    2234:	2116      	movs	r1, #22
    2236:	f002 b881 	b.w	433c <tlx493d_gen_2_setUpdateRateFastSlow>
    223a:	bf00      	nop

0000223c <TLx493D_A2B6_hasValidData>:
    return tlx493d_gen_2_hasValidData(sensor, A2B6_MODE_e, A2B6_PD3_e, A2B6_PD0_e);
    223c:	230e      	movs	r3, #14
    223e:	220d      	movs	r2, #13
    2240:	211b      	movs	r1, #27
    2242:	f002 b8f5 	b.w	4430 <tlx493d_gen_2_hasValidData>
    2246:	bf00      	nop

00002248 <TLx493D_A2B6_isFunctional>:
    return tlx493d_gen_2_isFunctional(sensor);
    2248:	f002 b91e 	b.w	4488 <tlx493d_gen_2_isFunctional>

0000224c <TLx493D_A2B6_hasWakeUp>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    224c:	4902      	ldr	r1, [pc, #8]	; (2258 <TLx493D_A2B6_hasWakeUp+0xc>)
bool TLx493D_A2B6_hasWakeUp(const TLx493D_t *sensor) {
    224e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    2250:	f001 fde8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2254:	2000      	movs	r0, #0
    2256:	bd08      	pop	{r3, pc}
    2258:	20000520 	.word	0x20000520

0000225c <TLx493D_A2B6_isWakeUpEnabled>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    225c:	4902      	ldr	r1, [pc, #8]	; (2268 <TLx493D_A2B6_isWakeUpEnabled+0xc>)
bool TLx493D_A2B6_isWakeUpEnabled(const TLx493D_t *sensor) {
    225e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    2260:	f001 fde0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2264:	2000      	movs	r0, #0
    2266:	bd08      	pop	{r3, pc}
    2268:	2000053c 	.word	0x2000053c

0000226c <TLx493D_A2B6_enableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    226c:	4902      	ldr	r1, [pc, #8]	; (2278 <TLx493D_A2B6_enableWakeUpMode+0xc>)
bool TLx493D_A2B6_enableWakeUpMode(TLx493D_t *sensor) {
    226e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    2270:	f001 fdd8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2274:	2000      	movs	r0, #0
    2276:	bd08      	pop	{r3, pc}
    2278:	200004a8 	.word	0x200004a8

0000227c <TLx493D_A2B6_disableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    227c:	4902      	ldr	r1, [pc, #8]	; (2288 <TLx493D_A2B6_disableWakeUpMode+0xc>)
bool TLx493D_A2B6_disableWakeUpMode(TLx493D_t *sensor) {
    227e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    2280:	f001 fdd0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2284:	2000      	movs	r0, #0
    2286:	bd08      	pop	{r3, pc}
    2288:	20000464 	.word	0x20000464

0000228c <TLx493D_A2B6_setWakeUpThresholdsAsInteger>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    228c:	4902      	ldr	r1, [pc, #8]	; (2298 <TLx493D_A2B6_setWakeUpThresholdsAsInteger+0xc>)
bool TLx493D_A2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    228e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    2290:	f001 fdc8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2294:	2000      	movs	r0, #0
    2296:	bd08      	pop	{r3, pc}
    2298:	200006a8 	.word	0x200006a8

0000229c <TLx493D_A2B6_setWakeUpThresholds>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    229c:	4902      	ldr	r1, [pc, #8]	; (22a8 <TLx493D_A2B6_setWakeUpThresholds+0xc>)
bool TLx493D_A2B6_setWakeUpThresholds(TLx493D_t *sensor, double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    229e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    22a0:	f001 fdc0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    22a4:	2000      	movs	r0, #0
    22a6:	bd08      	pop	{r3, pc}
    22a8:	20000694 	.word	0x20000694

000022ac <TLx493D_A2B6_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    22ac:	4902      	ldr	r1, [pc, #8]	; (22b8 <TLx493D_A2B6_softwareReset+0xc>)
bool TLx493D_A2B6_softwareReset(TLx493D_t *sensor) {
    22ae:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    22b0:	f001 fdb8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    22b4:	2000      	movs	r0, #0
    22b6:	bd08      	pop	{r3, pc}
    22b8:	200006c8 	.word	0x200006c8

000022bc <TLx493D_A2B6_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    22bc:	4902      	ldr	r1, [pc, #8]	; (22c8 <TLx493D_A2B6_hasValidWakeUpParity+0xc>)
bool TLx493D_A2B6_hasValidWakeUpParity(const TLx493D_t *sensor) {
    22be:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    22c0:	f001 fdb0 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    22c4:	2000      	movs	r0, #0
    22c6:	bd08      	pop	{r3, pc}
    22c8:	20000508 	.word	0x20000508

000022cc <TLx493D_A2B6_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    22cc:	4902      	ldr	r1, [pc, #8]	; (22d8 <TLx493D_A2B6_isInTestMode+0xc>)
bool TLx493D_A2B6_isInTestMode(const TLx493D_t *sensor) {
    22ce:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    22d0:	f001 fda8 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    22d4:	2000      	movs	r0, #0
    22d6:	bd08      	pop	{r3, pc}
    22d8:	2000052c 	.word	0x2000052c

000022dc <TLx493D_A2B6_calculateFuseParity>:
    return tlx493d_gen_2_calculateFuseParity(sensor, A2B6_FP_e, A2B6_PRD_e);
    22dc:	221c      	movs	r2, #28
    22de:	2116      	movs	r1, #22
    22e0:	f002 ba0e 	b.w	4700 <tlx493d_gen_2_calculateFuseParity>

000022e4 <TLx493D_A2B6_calculateBusParity>:
    return tlx493d_gen_2_calculateBusParity(sensor, 5);
    22e4:	2105      	movs	r1, #5
    22e6:	f002 ba3f 	b.w	4768 <tlx493d_gen_2_calculateBusParity>
    22ea:	bf00      	nop

000022ec <TLx493D_A2B6_calculateConfigurationParity>:
    return tlx493d_gen_2_calculateConfigurationParity(sensor, A2B6_CP_e);
    22ec:	2115      	movs	r1, #21
    22ee:	f002 ba4f 	b.w	4790 <tlx493d_gen_2_calculateConfigurationParity>
    22f2:	bf00      	nop

000022f4 <TLx493D_A2B6_hasValidFuseParity>:
    return tlx493d_gen_2_hasValidFuseParity(sensor, A2B6_FF_e);
    22f4:	210a      	movs	r1, #10
    22f6:	f002 ba89 	b.w	480c <tlx493d_gen_2_hasValidFuseParity>
    22fa:	bf00      	nop

000022fc <TLx493D_A2B6_hasValidBusParity>:
    return tlx493d_gen_2_hasValidBusParity(sensor, A2B6_P_e);
    22fc:	2109      	movs	r1, #9
    22fe:	f002 ba8d 	b.w	481c <tlx493d_gen_2_hasValidBusParity>
    2302:	bf00      	nop

00002304 <TLx493D_A2B6_hasValidConfigurationParity>:
    return tlx493d_gen_2_hasValidConfigurationParity(sensor, A2B6_CF_e);
    2304:	210b      	movs	r1, #11
    2306:	f002 ba9d 	b.w	4844 <tlx493d_gen_2_hasValidConfigurationParity>
    230a:	bf00      	nop

0000230c <TLx493D_A2B6_hasValidTBit>:
    return tlx493d_gen_2_hasValidTBit(sensor, A2B6_T_e);
    230c:	210c      	movs	r1, #12
    230e:	f002 baa1 	b.w	4854 <tlx493d_gen_2_hasValidTBit>
    2312:	bf00      	nop

00002314 <TLx493D_A2B6_selectIICAddress>:


uint8_t TLx493D_A2B6_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_2_selectIICAddress(sensor, addr);
    2314:	f002 baa6 	b.w	4864 <tlx493d_gen_2_selectIICAddress>

00002318 <TLx493D_A2B6_calculateRawMagneticFieldAtTemperature>:


void TLx493D_A2B6_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_2_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    2318:	f002 bae6 	b.w	48e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>

0000231c <TLx493D_A2B6_getSensitivityScaleFactor>:
}


double TLx493D_A2B6_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_2_getSensitivityScaleFactor(sensor, TLx493D_HAS_X2_e, A2B6_X2_e, 0);
    231c:	2300      	movs	r3, #0
    231e:	2213      	movs	r2, #19
    2320:	2101      	movs	r1, #1
    2322:	f002 bab1 	b.w	4888 <tlx493d_gen_2_getSensitivityScaleFactor>
    2326:	bf00      	nop

00002328 <TLx493D_A2B6_printRegisters>:
}


void TLx493D_A2B6_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_A2B6_REGISTER_HEADLINE); 
    2328:	4901      	ldr	r1, [pc, #4]	; (2330 <TLx493D_A2B6_printRegisters+0x8>)
    232a:	f7ff bb05 	b.w	1938 <logPrintRegisters>
    232e:	bf00      	nop
    2330:	200006d8 	.word	0x200006d8

00002334 <TLx493D_A2B6_calculateMagneticFieldAndTemperature>:
void TLx493D_A2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    2334:	b530      	push	{r4, r5, lr}
    2336:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2338:	2505      	movs	r5, #5
void TLx493D_A2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    233a:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    233c:	9305      	str	r3, [sp, #20]
    233e:	2302      	movs	r3, #2
    2340:	9500      	str	r5, [sp, #0]
void TLx493D_A2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    2342:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2344:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2348:	2208      	movs	r2, #8
    234a:	2100      	movs	r1, #0
    234c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2350:	2204      	movs	r2, #4
    2352:	2301      	movs	r3, #1
    2354:	f001 fe20 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
    tlx493d_gen_2_calculateTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    2358:	462b      	mov	r3, r5
    235a:	2206      	movs	r2, #6
    235c:	2103      	movs	r1, #3
    235e:	4620      	mov	r0, r4
}
    2360:	b007      	add	sp, #28
    2362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    2366:	f001 bdeb 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    236a:	bf00      	nop

0000236c <TLx493D_A2B6_calculateRawMagneticFieldAndTemperature>:
void TLx493D_A2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    236c:	b530      	push	{r4, r5, lr}
    236e:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2370:	2505      	movs	r5, #5
void TLx493D_A2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2372:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    2374:	9305      	str	r3, [sp, #20]
    2376:	2302      	movs	r3, #2
    2378:	9500      	str	r5, [sp, #0]
void TLx493D_A2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    237a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2B6_BX_MSBS_e, A2B6_BX_LSBS_e, A2B6_BY_MSBS_e, A2B6_BY_LSBS_e, A2B6_BZ_MSBS_e, A2B6_BZ_LSBS_e, x, y, z);
    237c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2380:	2208      	movs	r2, #8
    2382:	2100      	movs	r1, #0
    2384:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2388:	2204      	movs	r2, #4
    238a:	2301      	movs	r3, #1
    238c:	f001 fdc8 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
    tlx493d_gen_2_calculateRawTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    2390:	462b      	mov	r3, r5
    2392:	2206      	movs	r2, #6
    2394:	2103      	movs	r1, #3
    2396:	4620      	mov	r0, r4
}
    2398:	b007      	add	sp, #28
    239a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateRawTemperature(sensor, A2B6_TEMP_MSBS_e, A2B6_TEMP_LSBS_e, temperature);
    239e:	f001 bdbd 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    23a2:	bf00      	nop

000023a4 <TLx493D_A2BW_setResetValues>:
    return tlx493d_gen_2_hasValidTBit(sensor, A2BW_T_e);
}


void TLx493D_A2BW_setResetValues(TLx493D_t *sensor) {
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    23a4:	6802      	ldr	r2, [r0, #0]
    23a6:	f04f 0c01 	mov.w	ip, #1
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    23aa:	2180      	movs	r1, #128	; 0x80
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    23ac:	2300      	movs	r3, #0
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    23ae:	f882 c010 	strb.w	ip, [r2, #16]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    23b2:	6802      	ldr	r2, [r0, #0]
    23b4:	7451      	strb	r1, [r2, #17]
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    23b6:	6802      	ldr	r2, [r0, #0]
    23b8:	74d3      	strb	r3, [r2, #19]
    sensor->regMap[0x14] = 0x00; /** CONFIG2 */
    23ba:	6802      	ldr	r2, [r0, #0]
    23bc:	7513      	strb	r3, [r2, #20]

    /** A2BW_X4_READWRITE_e */
    sensor->regMap[0x17] = 0x00;
    23be:	6802      	ldr	r2, [r0, #0]
    23c0:	75d3      	strb	r3, [r2, #23]
}
    23c2:	4770      	bx	lr

000023c4 <TLx493D_A2BW_init>:
bool TLx493D_A2BW_init(TLx493D_t *sensor) {
    23c4:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_A2BW_regDef, &TLx493D_A2BW_commonFunctions, TLx493D_A2BW_e, TLx493D_I2C_e);
    23c6:	2102      	movs	r1, #2
bool TLx493D_A2BW_init(TLx493D_t *sensor) {
    23c8:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_A2BW_regDef, &TLx493D_A2BW_commonFunctions, TLx493D_A2BW_e, TLx493D_I2C_e);
    23ca:	2400      	movs	r4, #0
    23cc:	4b04      	ldr	r3, [pc, #16]	; (23e0 <TLx493D_A2BW_init+0x1c>)
    23ce:	4a05      	ldr	r2, [pc, #20]	; (23e4 <TLx493D_A2BW_init+0x20>)
    23d0:	e9cd 1400 	strd	r1, r4, [sp]
    23d4:	2117      	movs	r1, #23
    23d6:	f001 facd 	bl	3974 <tlx493d_common_init>
}
    23da:	b002      	add	sp, #8
    23dc:	bd10      	pop	{r4, pc}
    23de:	bf00      	nop
    23e0:	20002080 	.word	0x20002080
    23e4:	2000214c 	.word	0x2000214c

000023e8 <TLx493D_A2BW_deinit>:
    return tlx493d_common_deinit(sensor);
    23e8:	f001 baf4 	b.w	39d4 <tlx493d_common_deinit>

000023ec <TLx493D_A2BW_readRegisters>:
    return tlx493d_common_readRegisters(sensor);
    23ec:	f001 bb00 	b.w	39f0 <tlx493d_common_readRegisters>

000023f0 <TLx493D_A2BW_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    23f0:	f001 bb1e 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

000023f4 <TLx493D_A2BW_calculateRawTemperature>:
void TLx493D_A2BW_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    23f4:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateRawTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temperature);
    23f6:	2206      	movs	r2, #6
    23f8:	2103      	movs	r1, #3
    23fa:	f001 bd8f 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    23fe:	bf00      	nop

00002400 <TLx493D_A2BW_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    2400:	f001 bba8 	b.w	3b54 <tlx493d_common_getRawTemperature>

00002404 <TLx493D_A2BW_calculateRawMagneticField>:
void TLx493D_A2BW_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    2404:	b530      	push	{r4, r5, lr}
    2406:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    2408:	2508      	movs	r5, #8
    240a:	2405      	movs	r4, #5
    240c:	9305      	str	r3, [sp, #20]
    240e:	2301      	movs	r3, #1
    2410:	9400      	str	r4, [sp, #0]
    2412:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2416:	2202      	movs	r2, #2
    2418:	2100      	movs	r1, #0
    241a:	e9cd 2501 	strd	r2, r5, [sp, #4]
    241e:	2204      	movs	r2, #4
    2420:	f001 fd7e 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
}
    2424:	b007      	add	sp, #28
    2426:	bd30      	pop	{r4, r5, pc}

00002428 <TLx493D_A2BW_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    2428:	f001 bba4 	b.w	3b74 <tlx493d_common_getRawMagneticField>

0000242c <TLx493D_A2BW_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    242c:	f001 bbb8 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00002430 <TLx493D_A2BW_calculateTemperature>:
void TLx493D_A2BW_calculateTemperature(TLx493D_t *sensor, double *temp) {
    2430:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temp);
    2432:	2206      	movs	r2, #6
    2434:	2103      	movs	r1, #3
    2436:	f001 bd83 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    243a:	bf00      	nop

0000243c <TLx493D_A2BW_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    243c:	f001 bbca 	b.w	3bd4 <tlx493d_common_getTemperature>

00002440 <TLx493D_A2BW_calculateMagneticField>:
void TLx493D_A2BW_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    2440:	b530      	push	{r4, r5, lr}
    2442:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    2444:	2508      	movs	r5, #8
    2446:	2405      	movs	r4, #5
    2448:	9305      	str	r3, [sp, #20]
    244a:	2301      	movs	r3, #1
    244c:	9400      	str	r4, [sp, #0]
    244e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2452:	2202      	movs	r2, #2
    2454:	2100      	movs	r1, #0
    2456:	e9cd 2501 	strd	r2, r5, [sp, #4]
    245a:	2204      	movs	r2, #4
    245c:	f001 fd9c 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
}
    2460:	b007      	add	sp, #28
    2462:	bd30      	pop	{r4, r5, pc}

00002464 <TLx493D_A2BW_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    2464:	f001 bbc6 	b.w	3bf4 <tlx493d_common_getMagneticField>

00002468 <TLx493D_A2BW_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    2468:	f001 bbda 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

0000246c <TLx493D_A2BW_setMeasurement>:
bool TLx493D_A2BW_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    246c:	b510      	push	{r4, lr}
    246e:	460c      	mov	r4, r1
    2470:	b082      	sub	sp, #8
    return tlx493d_gen_2_setMeasurement(sensor, A2BW_DT_e, A2BW_AM_e, A2BW_CP_e, val);
    2472:	2315      	movs	r3, #21
    2474:	2211      	movs	r2, #17
    2476:	2110      	movs	r1, #16
    2478:	9400      	str	r4, [sp, #0]
    247a:	f001 fe17 	bl	40ac <tlx493d_gen_2_setMeasurement>
}
    247e:	b002      	add	sp, #8
    2480:	bd10      	pop	{r4, pc}
    2482:	bf00      	nop

00002484 <TLx493D_A2BW_setTrigger>:
bool TLx493D_A2BW_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t trigger) {
    2484:	460b      	mov	r3, r1
    return tlx493d_gen_2_setTrigger(sensor, A2BW_TRIG_e, A2BW_CP_e, trigger);
    2486:	2215      	movs	r2, #21
    2488:	2112      	movs	r1, #18
    248a:	f001 be31 	b.w	40f0 <tlx493d_gen_2_setTrigger>
    248e:	bf00      	nop

00002490 <TLx493D_A2BW_setSensitivity>:
    switch(val) {
    2490:	2902      	cmp	r1, #2
bool TLx493D_A2BW_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    2492:	b530      	push	{r4, r5, lr}
    2494:	b083      	sub	sp, #12
    2496:	d814      	bhi.n	24c2 <TLx493D_A2BW_setSensitivity+0x32>
    2498:	460b      	mov	r3, r1
    249a:	4911      	ldr	r1, [pc, #68]	; (24e0 <TLx493D_A2BW_setSensitivity+0x50>)
    249c:	4a11      	ldr	r2, [pc, #68]	; (24e4 <TLx493D_A2BW_setSensitivity+0x54>)
    249e:	4604      	mov	r4, r0
    24a0:	5ccd      	ldrb	r5, [r1, r3]
    tlx493d_common_setBitfield(sensor, A2BW_X4_READWRITE_e, extraShortVal);
    24a2:	2120      	movs	r1, #32
    24a4:	5cd3      	ldrb	r3, [r2, r3]
    24a6:	462a      	mov	r2, r5
    24a8:	9301      	str	r3, [sp, #4]
    24aa:	f001 fc01 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X2_e, A2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X4_e, A2BW_CP_e, extraShortVal)
    24ae:	9b01      	ldr	r3, [sp, #4]
    24b0:	2215      	movs	r2, #21
    24b2:	2113      	movs	r1, #19
    24b4:	4620      	mov	r0, r4
    24b6:	f001 fdc3 	bl	4040 <tlx493d_gen_2_setOneConfigBitfield>
                                                                                      : false;
    24ba:	b940      	cbnz	r0, 24ce <TLx493D_A2BW_setSensitivity+0x3e>
}
    24bc:	2000      	movs	r0, #0
    24be:	b003      	add	sp, #12
    24c0:	bd30      	pop	{r4, r5, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_SensitivityType_t");
    24c2:	4a09      	ldr	r2, [pc, #36]	; (24e8 <TLx493D_A2BW_setSensitivity+0x58>)
    24c4:	f001 fd0e 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    24c8:	2000      	movs	r0, #0
    24ca:	b003      	add	sp, #12
    24cc:	bd30      	pop	{r4, r5, pc}
    return tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X2_e, A2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X4_e, A2BW_CP_e, extraShortVal)
    24ce:	462b      	mov	r3, r5
    24d0:	2215      	movs	r2, #21
    24d2:	211d      	movs	r1, #29
    24d4:	4620      	mov	r0, r4
}
    24d6:	b003      	add	sp, #12
    24d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X2_e, A2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, A2BW_X4_e, A2BW_CP_e, extraShortVal)
    24dc:	f001 bdb0 	b.w	4040 <tlx493d_gen_2_setOneConfigBitfield>
    24e0:	200003d0 	.word	0x200003d0
    24e4:	200003ac 	.word	0x200003ac
    24e8:	20000938 	.word	0x20000938

000024ec <TLx493D_A2BW_setDefaultConfig>:
    return tlx493d_gen_2_setDefaultConfig(sensor, A2BW_CP_e, A2BW_CA_e, A2BW_INT_e);
    24ec:	231a      	movs	r3, #26
    24ee:	2219      	movs	r2, #25
    24f0:	2115      	movs	r1, #21
    24f2:	f001 be4d 	b.w	4190 <tlx493d_gen_2_setDefaultConfig>
    24f6:	bf00      	nop

000024f8 <TLx493D_A2BW_setIICAddress>:
bool TLx493D_A2BW_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    24f8:	460b      	mov	r3, r1
    return tlx493d_gen_2_setIICAddress(sensor, A2BW_IICADR_e, A2BW_FP_e, address);
    24fa:	2216      	movs	r2, #22
    24fc:	2117      	movs	r1, #23
    24fe:	f001 be87 	b.w	4210 <tlx493d_gen_2_setIICAddress>
    2502:	bf00      	nop

00002504 <TLx493D_A2BW_enable1ByteReadMode>:
bool TLx493D_A2BW_enable1ByteReadMode(TLx493D_t *sensor) {
    2504:	b510      	push	{r4, lr}
    return tlx493d_gen_2_set1ByteReadMode(sensor, A2BW_PR_e, A2BW_FP_e, A2BW_PRD_e, 1);
    2506:	2401      	movs	r4, #1
bool TLx493D_A2BW_enable1ByteReadMode(TLx493D_t *sensor) {
    2508:	b082      	sub	sp, #8
    return tlx493d_gen_2_set1ByteReadMode(sensor, A2BW_PR_e, A2BW_FP_e, A2BW_PRD_e, 1);
    250a:	231c      	movs	r3, #28
    250c:	2216      	movs	r2, #22
    250e:	2118      	movs	r1, #24
    2510:	9400      	str	r4, [sp, #0]
    2512:	f002 f90f 	bl	4734 <tlx493d_gen_2_set1ByteReadMode>
}
    2516:	b002      	add	sp, #8
    2518:	bd10      	pop	{r4, pc}
    251a:	bf00      	nop

0000251c <TLx493D_A2BW_enableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, A2BW_CA_e, A2BW_FP_e, 0);
    251c:	2300      	movs	r3, #0
    251e:	2216      	movs	r2, #22
    2520:	2119      	movs	r1, #25
    2522:	f001 be9b 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    2526:	bf00      	nop

00002528 <TLx493D_A2BW_disableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, A2BW_CA_e, A2BW_FP_e, 1);
    2528:	2301      	movs	r3, #1
    252a:	2216      	movs	r2, #22
    252c:	2119      	movs	r1, #25
    252e:	f001 be95 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    2532:	bf00      	nop

00002534 <TLx493D_A2BW_enableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, A2BW_INT_e, A2BW_FP_e, 0);
    2534:	2300      	movs	r3, #0
    2536:	2216      	movs	r2, #22
    2538:	211a      	movs	r1, #26
    253a:	f001 bea7 	b.w	428c <tlx493d_gen_2_setInterrupt>
    253e:	bf00      	nop

00002540 <TLx493D_A2BW_disableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, A2BW_INT_e, A2BW_FP_e, 1);
    2540:	2301      	movs	r3, #1
    2542:	2216      	movs	r2, #22
    2544:	211a      	movs	r1, #26
    2546:	f001 bea1 	b.w	428c <tlx493d_gen_2_setInterrupt>
    254a:	bf00      	nop

0000254c <TLx493D_A2BW_setPowerMode>:
bool TLx493D_A2BW_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    254c:	460b      	mov	r3, r1
    return tlx493d_gen_2_setPowerMode(sensor, A2BW_MODE_e, A2BW_FP_e, mode);
    254e:	2216      	movs	r2, #22
    2550:	211b      	movs	r1, #27
    2552:	f001 beb3 	b.w	42bc <tlx493d_gen_2_setPowerMode>
    2556:	bf00      	nop

00002558 <TLx493D_A2BW_setUpdateRate>:
bool TLx493D_A2BW_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    2558:	460b      	mov	r3, r1
    return tlx493d_gen_2_setUpdateRateFastSlow(sensor, A2BW_FP_e, A2BW_PRD_e, val);
    255a:	221c      	movs	r2, #28
    255c:	2116      	movs	r1, #22
    255e:	f001 beed 	b.w	433c <tlx493d_gen_2_setUpdateRateFastSlow>
    2562:	bf00      	nop

00002564 <TLx493D_A2BW_hasValidData>:
    return tlx493d_gen_2_hasValidData(sensor, A2BW_MODE_e, A2BW_PD3_e, A2BW_PD0_e);
    2564:	230e      	movs	r3, #14
    2566:	220d      	movs	r2, #13
    2568:	211b      	movs	r1, #27
    256a:	f001 bf61 	b.w	4430 <tlx493d_gen_2_hasValidData>
    256e:	bf00      	nop

00002570 <TLx493D_A2BW_isFunctional>:
    return tlx493d_gen_2_isFunctional(sensor);
    2570:	f001 bf8a 	b.w	4488 <tlx493d_gen_2_isFunctional>

00002574 <TLx493D_A2BW_hasWakeUp>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    2574:	4902      	ldr	r1, [pc, #8]	; (2580 <TLx493D_A2BW_hasWakeUp+0xc>)
bool TLx493D_A2BW_hasWakeUp(const TLx493D_t *sensor) {
    2576:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasWakeUp");
    2578:	f001 fc54 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    257c:	2000      	movs	r0, #0
    257e:	bd08      	pop	{r3, pc}
    2580:	20000520 	.word	0x20000520

00002584 <TLx493D_A2BW_isWakeUpEnabled>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    2584:	4902      	ldr	r1, [pc, #8]	; (2590 <TLx493D_A2BW_isWakeUpEnabled+0xc>)
bool TLx493D_A2BW_isWakeUpEnabled(const TLx493D_t *sensor) {
    2586:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isWakeUpEnabled");
    2588:	f001 fc4c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    258c:	2000      	movs	r0, #0
    258e:	bd08      	pop	{r3, pc}
    2590:	2000053c 	.word	0x2000053c

00002594 <TLx493D_A2BW_enableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    2594:	4902      	ldr	r1, [pc, #8]	; (25a0 <TLx493D_A2BW_enableWakeUpMode+0xc>)
bool TLx493D_A2BW_enableWakeUpMode(TLx493D_t *sensor) {
    2596:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableWakeUpMode");
    2598:	f001 fc44 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    259c:	2000      	movs	r0, #0
    259e:	bd08      	pop	{r3, pc}
    25a0:	200004a8 	.word	0x200004a8

000025a4 <TLx493D_A2BW_disableWakeUpMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    25a4:	4902      	ldr	r1, [pc, #8]	; (25b0 <TLx493D_A2BW_disableWakeUpMode+0xc>)
bool TLx493D_A2BW_disableWakeUpMode(TLx493D_t *sensor) {
    25a6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableWakeUpMode");
    25a8:	f001 fc3c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25ac:	2000      	movs	r0, #0
    25ae:	bd08      	pop	{r3, pc}
    25b0:	20000464 	.word	0x20000464

000025b4 <TLx493D_A2BW_setWakeUpThresholdsAsInteger>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    25b4:	4902      	ldr	r1, [pc, #8]	; (25c0 <TLx493D_A2BW_setWakeUpThresholdsAsInteger+0xc>)
bool TLx493D_A2BW_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    25b6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholdsAsInteger");
    25b8:	f001 fc34 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25bc:	2000      	movs	r0, #0
    25be:	bd08      	pop	{r3, pc}
    25c0:	200006a8 	.word	0x200006a8

000025c4 <TLx493D_A2BW_setWakeUpThresholds>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    25c4:	4902      	ldr	r1, [pc, #8]	; (25d0 <TLx493D_A2BW_setWakeUpThresholds+0xc>)
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    25c6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setWakeUpThresholds");
    25c8:	f001 fc2c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25cc:	2000      	movs	r0, #0
    25ce:	bd08      	pop	{r3, pc}
    25d0:	20000694 	.word	0x20000694

000025d4 <TLx493D_A2BW_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    25d4:	4902      	ldr	r1, [pc, #8]	; (25e0 <TLx493D_A2BW_softwareReset+0xc>)
bool TLx493D_A2BW_softwareReset(TLx493D_t *sensor) {
    25d6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    25d8:	f001 fc24 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25dc:	2000      	movs	r0, #0
    25de:	bd08      	pop	{r3, pc}
    25e0:	200006c8 	.word	0x200006c8

000025e4 <TLx493D_A2BW_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    25e4:	4902      	ldr	r1, [pc, #8]	; (25f0 <TLx493D_A2BW_hasValidWakeUpParity+0xc>)
bool TLx493D_A2BW_hasValidWakeUpParity(const TLx493D_t *sensor) {
    25e6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    25e8:	f001 fc1c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25ec:	2000      	movs	r0, #0
    25ee:	bd08      	pop	{r3, pc}
    25f0:	20000508 	.word	0x20000508

000025f4 <TLx493D_A2BW_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    25f4:	4902      	ldr	r1, [pc, #8]	; (2600 <TLx493D_A2BW_isInTestMode+0xc>)
bool TLx493D_A2BW_isInTestMode(const TLx493D_t *sensor) {
    25f6:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    25f8:	f001 fc14 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    25fc:	2000      	movs	r0, #0
    25fe:	bd08      	pop	{r3, pc}
    2600:	2000052c 	.word	0x2000052c

00002604 <TLx493D_A2BW_calculateFuseParity>:
    return tlx493d_gen_2_calculateFuseParity(sensor, A2BW_FP_e, A2BW_PRD_e);
    2604:	221c      	movs	r2, #28
    2606:	2116      	movs	r1, #22
    2608:	f002 b87a 	b.w	4700 <tlx493d_gen_2_calculateFuseParity>

0000260c <TLx493D_A2BW_calculateBusParity>:
    return tlx493d_gen_2_calculateBusParity(sensor, 5);
    260c:	2105      	movs	r1, #5
    260e:	f002 b8ab 	b.w	4768 <tlx493d_gen_2_calculateBusParity>
    2612:	bf00      	nop

00002614 <TLx493D_A2BW_calculateConfigurationParity>:
    return tlx493d_gen_2_calculateConfigurationParity(sensor, A2BW_CP_e);
    2614:	2115      	movs	r1, #21
    2616:	f002 b8bb 	b.w	4790 <tlx493d_gen_2_calculateConfigurationParity>
    261a:	bf00      	nop

0000261c <TLx493D_A2BW_hasValidFuseParity>:
    return tlx493d_gen_2_hasValidFuseParity(sensor, A2BW_FF_e);
    261c:	210a      	movs	r1, #10
    261e:	f002 b8f5 	b.w	480c <tlx493d_gen_2_hasValidFuseParity>
    2622:	bf00      	nop

00002624 <TLx493D_A2BW_hasValidBusParity>:
    return tlx493d_gen_2_hasValidBusParity(sensor, A2BW_P_e);
    2624:	2109      	movs	r1, #9
    2626:	f002 b8f9 	b.w	481c <tlx493d_gen_2_hasValidBusParity>
    262a:	bf00      	nop

0000262c <TLx493D_A2BW_hasValidConfigurationParity>:
    return tlx493d_gen_2_hasValidConfigurationParity(sensor, A2BW_CF_e);
    262c:	210b      	movs	r1, #11
    262e:	f002 b909 	b.w	4844 <tlx493d_gen_2_hasValidConfigurationParity>
    2632:	bf00      	nop

00002634 <TLx493D_A2BW_hasValidTBit>:
    return tlx493d_gen_2_hasValidTBit(sensor, A2BW_T_e);
    2634:	210c      	movs	r1, #12
    2636:	f002 b90d 	b.w	4854 <tlx493d_gen_2_hasValidTBit>
    263a:	bf00      	nop

0000263c <TLx493D_A2BW_selectIICAddress>:


uint8_t TLx493D_A2BW_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_2_selectIICAddress(sensor, addr);
    263c:	f002 b912 	b.w	4864 <tlx493d_gen_2_selectIICAddress>

00002640 <TLx493D_A2BW_calculateRawMagneticFieldAtTemperature>:


void TLx493D_A2BW_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_2_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    2640:	f002 b952 	b.w	48e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>

00002644 <TLx493D_A2BW_getSensitivityScaleFactor>:
}


double TLx493D_A2BW_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_2_getSensitivityScaleFactor(sensor, TLx493D_HAS_X4_e, A2BW_X2_e, A2BW_X4_READWRITE_e);
    2644:	2320      	movs	r3, #32
    2646:	2213      	movs	r2, #19
    2648:	2102      	movs	r1, #2
    264a:	f002 b91d 	b.w	4888 <tlx493d_gen_2_getSensitivityScaleFactor>
    264e:	bf00      	nop

00002650 <TLx493D_A2BW_printRegisters>:
}


void TLx493D_A2BW_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_A2BW_REGISTER_HEADLINE); 
    2650:	4901      	ldr	r1, [pc, #4]	; (2658 <TLx493D_A2BW_printRegisters+0x8>)
    2652:	f7ff b971 	b.w	1938 <logPrintRegisters>
    2656:	bf00      	nop
    2658:	2000084c 	.word	0x2000084c

0000265c <TLx493D_A2BW_calculateMagneticFieldAndTemperature>:
void TLx493D_A2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    265c:	b530      	push	{r4, r5, lr}
    265e:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    2660:	2505      	movs	r5, #5
void TLx493D_A2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    2662:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    2664:	9305      	str	r3, [sp, #20]
    2666:	2302      	movs	r3, #2
    2668:	9500      	str	r5, [sp, #0]
void TLx493D_A2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    266a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    266c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2670:	2208      	movs	r2, #8
    2672:	2100      	movs	r1, #0
    2674:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2678:	2204      	movs	r2, #4
    267a:	2301      	movs	r3, #1
    267c:	f001 fc8c 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
    tlx493d_gen_2_calculateTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temp);
    2680:	462b      	mov	r3, r5
    2682:	2206      	movs	r2, #6
    2684:	2103      	movs	r1, #3
    2686:	4620      	mov	r0, r4
}
    2688:	b007      	add	sp, #28
    268a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temp);
    268e:	f001 bc57 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    2692:	bf00      	nop

00002694 <TLx493D_A2BW_calculateRawMagneticFieldAndTemperature>:
void TLx493D_A2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2694:	b530      	push	{r4, r5, lr}
    2696:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    2698:	2505      	movs	r5, #5
void TLx493D_A2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    269a:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    269c:	9305      	str	r3, [sp, #20]
    269e:	2302      	movs	r3, #2
    26a0:	9500      	str	r5, [sp, #0]
void TLx493D_A2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    26a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateRawMagneticField(sensor, A2BW_BX_MSBS_e, A2BW_BX_LSBS_e, A2BW_BY_MSBS_e, A2BW_BY_LSBS_e, A2BW_BZ_MSBS_e, A2BW_BZ_LSBS_e, x, y, z);
    26a4:	e9cd 1203 	strd	r1, r2, [sp, #12]
    26a8:	2208      	movs	r2, #8
    26aa:	2100      	movs	r1, #0
    26ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
    26b0:	2204      	movs	r2, #4
    26b2:	2301      	movs	r3, #1
    26b4:	f001 fc34 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
    tlx493d_gen_2_calculateRawTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temperature);
    26b8:	462b      	mov	r3, r5
    26ba:	2206      	movs	r2, #6
    26bc:	2103      	movs	r1, #3
    26be:	4620      	mov	r0, r4
}
    26c0:	b007      	add	sp, #28
    26c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateRawTemperature(sensor, A2BW_TEMP_MSBS_e, A2BW_TEMP_LSBS_e, temperature);
    26c6:	f001 bc29 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    26ca:	bf00      	nop

000026cc <TLx493D_P2B6_hasWakeUp>:


bool TLx493D_P2B6_hasWakeUp(const TLx493D_t *sensor) {
    (void) sensor;
    return true;
}
    26cc:	2001      	movs	r0, #1
    26ce:	4770      	bx	lr

000026d0 <TLx493D_P2B6_setResetValues>:
bool TLx493D_P2B6_hasValidTBit(const TLx493D_t *sensor) {
    return tlx493d_gen_2_hasValidTBit(sensor, P2B6_T_e);
}


void TLx493D_P2B6_setResetValues(TLx493D_t *sensor) {
    26d0:	b410      	push	{r4}
    sensor->regMap[0x07] = 0x80;
    26d2:	2380      	movs	r3, #128	; 0x80
    26d4:	6804      	ldr	r4, [r0, #0]
    sensor->regMap[0x08] = 0x7F;
    26d6:	217f      	movs	r1, #127	; 0x7f
    sensor->regMap[0x09] = 0x80;
    sensor->regMap[0x0A] = 0x7F;
    sensor->regMap[0x0B] = 0x80;
    sensor->regMap[0x0C] = 0x7F;
    sensor->regMap[0x0D] = 0x38;
    26d8:	2238      	movs	r2, #56	; 0x38
    sensor->regMap[0x07] = 0x80;
    26da:	71e3      	strb	r3, [r4, #7]
    sensor->regMap[0x0E] = 0x38;
    sensor->regMap[0x0F] = 0x38;  
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    26dc:	f04f 0c01 	mov.w	ip, #1
    sensor->regMap[0x08] = 0x7F;
    26e0:	6804      	ldr	r4, [r0, #0]
    26e2:	7221      	strb	r1, [r4, #8]
    sensor->regMap[0x09] = 0x80;
    26e4:	6804      	ldr	r4, [r0, #0]
    26e6:	7263      	strb	r3, [r4, #9]
    sensor->regMap[0x0A] = 0x7F;
    26e8:	6804      	ldr	r4, [r0, #0]
    26ea:	72a1      	strb	r1, [r4, #10]
    sensor->regMap[0x0B] = 0x80;
    26ec:	6804      	ldr	r4, [r0, #0]
    26ee:	72e3      	strb	r3, [r4, #11]
    sensor->regMap[0x0C] = 0x7F;
    26f0:	6804      	ldr	r4, [r0, #0]
    26f2:	7321      	strb	r1, [r4, #12]
    sensor->regMap[0x0D] = 0x38;
    26f4:	6801      	ldr	r1, [r0, #0]
    26f6:	734a      	strb	r2, [r1, #13]
    sensor->regMap[0x0E] = 0x38;
    26f8:	6801      	ldr	r1, [r0, #0]
    26fa:	738a      	strb	r2, [r1, #14]
    sensor->regMap[0x0F] = 0x38;  
    26fc:	6801      	ldr	r1, [r0, #0]
    26fe:	73ca      	strb	r2, [r1, #15]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    2700:	2200      	movs	r2, #0
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    2702:	6801      	ldr	r1, [r0, #0]
    2704:	f881 c010 	strb.w	ip, [r1, #16]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    2708:	6801      	ldr	r1, [r0, #0]
    270a:	744b      	strb	r3, [r1, #17]
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    270c:	6803      	ldr	r3, [r0, #0]
    270e:	74da      	strb	r2, [r3, #19]
}
    2710:	f85d 4b04 	ldr.w	r4, [sp], #4
    2714:	4770      	bx	lr
    2716:	bf00      	nop

00002718 <TLx493D_P2B6_init>:
bool TLx493D_P2B6_init(TLx493D_t *sensor) {
    2718:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_P2B6_regDef, &TLx493D_P2B6_commonFunctions, TLx493D_P2B6_e, TLx493D_I2C_e);
    271a:	2103      	movs	r1, #3
bool TLx493D_P2B6_init(TLx493D_t *sensor) {
    271c:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_P2B6_regDef, &TLx493D_P2B6_commonFunctions, TLx493D_P2B6_e, TLx493D_I2C_e);
    271e:	2400      	movs	r4, #0
    2720:	4b04      	ldr	r3, [pc, #16]	; (2734 <TLx493D_P2B6_init+0x1c>)
    2722:	4a05      	ldr	r2, [pc, #20]	; (2738 <TLx493D_P2B6_init+0x20>)
    2724:	e9cd 1400 	strd	r1, r4, [sp]
    2728:	2117      	movs	r1, #23
    272a:	f001 f923 	bl	3974 <tlx493d_common_init>
}
    272e:	b002      	add	sp, #8
    2730:	bd10      	pop	{r4, pc}
    2732:	bf00      	nop
    2734:	200021f4 	.word	0x200021f4
    2738:	200022c0 	.word	0x200022c0

0000273c <TLx493D_P2B6_deinit>:
    return tlx493d_common_deinit(sensor);
    273c:	f001 b94a 	b.w	39d4 <tlx493d_common_deinit>

00002740 <TLx493D_P2B6_readRegisters>:
    return tlx493d_common_readRegisters(sensor);
    2740:	f001 b956 	b.w	39f0 <tlx493d_common_readRegisters>

00002744 <TLx493D_P2B6_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    2744:	f001 b974 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

00002748 <TLx493D_P2B6_calculateRawTemperature>:
void TLx493D_P2B6_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    2748:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateRawTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temperature);
    274a:	2206      	movs	r2, #6
    274c:	2103      	movs	r1, #3
    274e:	f001 bbe5 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    2752:	bf00      	nop

00002754 <TLx493D_P2B6_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    2754:	f001 b9fe 	b.w	3b54 <tlx493d_common_getRawTemperature>

00002758 <TLx493D_P2B6_calculateRawMagneticField>:
void TLx493D_P2B6_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    2758:	b530      	push	{r4, r5, lr}
    275a:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    275c:	2508      	movs	r5, #8
    275e:	2405      	movs	r4, #5
    2760:	9305      	str	r3, [sp, #20]
    2762:	2301      	movs	r3, #1
    2764:	9400      	str	r4, [sp, #0]
    2766:	e9cd 1203 	strd	r1, r2, [sp, #12]
    276a:	2202      	movs	r2, #2
    276c:	2100      	movs	r1, #0
    276e:	e9cd 2501 	strd	r2, r5, [sp, #4]
    2772:	2204      	movs	r2, #4
    2774:	f001 fbd4 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
}
    2778:	b007      	add	sp, #28
    277a:	bd30      	pop	{r4, r5, pc}

0000277c <TLx493D_P2B6_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    277c:	f001 b9fa 	b.w	3b74 <tlx493d_common_getRawMagneticField>

00002780 <TLx493D_P2B6_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    2780:	f001 ba0e 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00002784 <TLx493D_P2B6_calculateTemperature>:
void TLx493D_P2B6_calculateTemperature(TLx493D_t *sensor, double *temp) {
    2784:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temp);
    2786:	2206      	movs	r2, #6
    2788:	2103      	movs	r1, #3
    278a:	f001 bbd9 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    278e:	bf00      	nop

00002790 <TLx493D_P2B6_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    2790:	f001 ba20 	b.w	3bd4 <tlx493d_common_getTemperature>

00002794 <TLx493D_P2B6_calculateMagneticField>:
void TLx493D_P2B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    2794:	b530      	push	{r4, r5, lr}
    2796:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    2798:	2508      	movs	r5, #8
    279a:	2405      	movs	r4, #5
    279c:	9305      	str	r3, [sp, #20]
    279e:	2301      	movs	r3, #1
    27a0:	9400      	str	r4, [sp, #0]
    27a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    27a6:	2202      	movs	r2, #2
    27a8:	2100      	movs	r1, #0
    27aa:	e9cd 2501 	strd	r2, r5, [sp, #4]
    27ae:	2204      	movs	r2, #4
    27b0:	f001 fbf2 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
}
    27b4:	b007      	add	sp, #28
    27b6:	bd30      	pop	{r4, r5, pc}

000027b8 <TLx493D_P2B6_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    27b8:	f001 ba1c 	b.w	3bf4 <tlx493d_common_getMagneticField>

000027bc <TLx493D_P2B6_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    27bc:	f001 ba30 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

000027c0 <TLx493D_P2B6_setMeasurement>:
bool TLx493D_P2B6_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    27c0:	b510      	push	{r4, lr}
    27c2:	460c      	mov	r4, r1
    27c4:	b082      	sub	sp, #8
    return tlx493d_gen_2_setMeasurement(sensor, P2B6_DT_e, P2B6_AM_e, P2B6_CP_e, val);
    27c6:	2325      	movs	r3, #37	; 0x25
    27c8:	2221      	movs	r2, #33	; 0x21
    27ca:	2120      	movs	r1, #32
    27cc:	9400      	str	r4, [sp, #0]
    27ce:	f001 fc6d 	bl	40ac <tlx493d_gen_2_setMeasurement>
}
    27d2:	b002      	add	sp, #8
    27d4:	bd10      	pop	{r4, pc}
    27d6:	bf00      	nop

000027d8 <TLx493D_P2B6_setTrigger>:
bool TLx493D_P2B6_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t val) {
    27d8:	460b      	mov	r3, r1
    return tlx493d_gen_2_setTrigger(sensor, P2B6_TRIG_e, P2B6_CP_e, val);
    27da:	2225      	movs	r2, #37	; 0x25
    27dc:	2122      	movs	r1, #34	; 0x22
    27de:	f001 bc87 	b.w	40f0 <tlx493d_gen_2_setTrigger>
    27e2:	bf00      	nop

000027e4 <TLx493D_P2B6_setSensitivity>:
bool TLx493D_P2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    27e4:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, P2B6_X2_e, 0, P2B6_CP_e, val);
    27e6:	2425      	movs	r4, #37	; 0x25
bool TLx493D_P2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    27e8:	b082      	sub	sp, #8
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, P2B6_X2_e, 0, P2B6_CP_e, val);
    27ea:	2300      	movs	r3, #0
    27ec:	2223      	movs	r2, #35	; 0x23
    27ee:	e9cd 4100 	strd	r4, r1, [sp]
    27f2:	2101      	movs	r1, #1
    27f4:	f001 fc9c 	bl	4130 <tlx493d_gen_2_setSensitivity>
}
    27f8:	b002      	add	sp, #8
    27fa:	bd10      	pop	{r4, pc}

000027fc <TLx493D_P2B6_setDefaultConfig>:
    return tlx493d_gen_2_setDefaultConfig(sensor, P2B6_CP_e, P2B6_CA_e, P2B6_INT_e);
    27fc:	232a      	movs	r3, #42	; 0x2a
    27fe:	2229      	movs	r2, #41	; 0x29
    2800:	2125      	movs	r1, #37	; 0x25
    2802:	f001 bcc5 	b.w	4190 <tlx493d_gen_2_setDefaultConfig>
    2806:	bf00      	nop

00002808 <TLx493D_P2B6_setIICAddress>:
bool TLx493D_P2B6_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    2808:	460b      	mov	r3, r1
    return tlx493d_gen_2_setIICAddress(sensor, P2B6_IICADR_e, P2B6_FP_e, address);
    280a:	2226      	movs	r2, #38	; 0x26
    280c:	2127      	movs	r1, #39	; 0x27
    280e:	f001 bcff 	b.w	4210 <tlx493d_gen_2_setIICAddress>
    2812:	bf00      	nop

00002814 <TLx493D_P2B6_enable1ByteReadMode>:
bool TLx493D_P2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    2814:	b510      	push	{r4, lr}
    return tlx493d_gen_2_set1ByteReadMode(sensor, P2B6_PR_e, P2B6_FP_e, P2B6_PRD_e, 1);
    2816:	2401      	movs	r4, #1
bool TLx493D_P2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    2818:	b082      	sub	sp, #8
    return tlx493d_gen_2_set1ByteReadMode(sensor, P2B6_PR_e, P2B6_FP_e, P2B6_PRD_e, 1);
    281a:	232c      	movs	r3, #44	; 0x2c
    281c:	2226      	movs	r2, #38	; 0x26
    281e:	2128      	movs	r1, #40	; 0x28
    2820:	9400      	str	r4, [sp, #0]
    2822:	f001 ff87 	bl	4734 <tlx493d_gen_2_set1ByteReadMode>
}
    2826:	b002      	add	sp, #8
    2828:	bd10      	pop	{r4, pc}
    282a:	bf00      	nop

0000282c <TLx493D_P2B6_enableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, P2B6_CA_e, P2B6_FP_e, 0);
    282c:	2300      	movs	r3, #0
    282e:	2226      	movs	r2, #38	; 0x26
    2830:	2129      	movs	r1, #41	; 0x29
    2832:	f001 bd13 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    2836:	bf00      	nop

00002838 <TLx493D_P2B6_disableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, P2B6_CA_e, P2B6_FP_e, 1);
    2838:	2301      	movs	r3, #1
    283a:	2226      	movs	r2, #38	; 0x26
    283c:	2129      	movs	r1, #41	; 0x29
    283e:	f001 bd0d 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    2842:	bf00      	nop

00002844 <TLx493D_P2B6_enableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, P2B6_INT_e, P2B6_FP_e, 0);
    2844:	2300      	movs	r3, #0
    2846:	2226      	movs	r2, #38	; 0x26
    2848:	212a      	movs	r1, #42	; 0x2a
    284a:	f001 bd1f 	b.w	428c <tlx493d_gen_2_setInterrupt>
    284e:	bf00      	nop

00002850 <TLx493D_P2B6_disableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, P2B6_INT_e, P2B6_FP_e, 1);
    2850:	2301      	movs	r3, #1
    2852:	2226      	movs	r2, #38	; 0x26
    2854:	212a      	movs	r1, #42	; 0x2a
    2856:	f001 bd19 	b.w	428c <tlx493d_gen_2_setInterrupt>
    285a:	bf00      	nop

0000285c <TLx493D_P2B6_setPowerMode>:
bool TLx493D_P2B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    285c:	460b      	mov	r3, r1
    return tlx493d_gen_2_setPowerMode(sensor, P2B6_MODE_e, P2B6_FP_e, mode);
    285e:	2226      	movs	r2, #38	; 0x26
    2860:	212b      	movs	r1, #43	; 0x2b
    2862:	f001 bd2b 	b.w	42bc <tlx493d_gen_2_setPowerMode>
    2866:	bf00      	nop

00002868 <TLx493D_P2B6_setUpdateRate>:
bool TLx493D_P2B6_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    2868:	460b      	mov	r3, r1
    return tlx493d_gen_2_setUpdateRate(sensor, P2B6_FP_e, P2B6_PRD_e, val);
    286a:	222c      	movs	r2, #44	; 0x2c
    286c:	2126      	movs	r1, #38	; 0x26
    286e:	f001 bda1 	b.w	43b4 <tlx493d_gen_2_setUpdateRate>
    2872:	bf00      	nop

00002874 <TLx493D_P2B6_hasValidData>:
    return( tlx493d_gen_2_hasValidData(sensor, P2B6_MODE_e, P2B6_PD3_e, P2B6_PD0_e) );
    2874:	230e      	movs	r3, #14
    2876:	220d      	movs	r2, #13
    2878:	212b      	movs	r1, #43	; 0x2b
    287a:	f001 bdd9 	b.w	4430 <tlx493d_gen_2_hasValidData>
    287e:	bf00      	nop

00002880 <TLx493D_P2B6_isFunctional>:
    return tlx493d_gen_2_isFunctional(sensor);
    2880:	f001 be02 	b.w	4488 <tlx493d_gen_2_isFunctional>

00002884 <TLx493D_P2B6_isWakeUpEnabled>:
    return tlx493d_gen_2_isWakeUpEnabled(sensor, P2B6_WA_e);
    2884:	2116      	movs	r1, #22
    2886:	f001 be0f 	b.w	44a8 <tlx493d_gen_2_isWakeUpEnabled>
    288a:	bf00      	nop

0000288c <TLx493D_P2B6_enableWakeUpMode>:
    return tlx493d_gen_2_enableWakeUpMode(sensor, P2B6_TST_e, P2B6_WU_e, P2B6_CP_e);
    288c:	2325      	movs	r3, #37	; 0x25
    288e:	2217      	movs	r2, #23
    2890:	211a      	movs	r1, #26
    2892:	f001 be47 	b.w	4524 <tlx493d_gen_2_enableWakeUpMode>
    2896:	bf00      	nop

00002898 <TLx493D_P2B6_disableWakeUpMode>:
    return tlx493d_gen_2_disableWakeUpMode(sensor, P2B6_WU_e, P2B6_CP_e);
    2898:	2225      	movs	r2, #37	; 0x25
    289a:	2117      	movs	r1, #23
    289c:	f001 be7a 	b.w	4594 <tlx493d_gen_2_disableWakeUpMode>

000028a0 <TLx493D_P2B6_setWakeUpThresholdsAsInteger>:
bool TLx493D_P2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    28a0:	b530      	push	{r4, r5, lr}
    28a2:	b091      	sub	sp, #68	; 0x44
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, P2B6_CP_e,
    28a4:	251e      	movs	r5, #30
bool TLx493D_P2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    28a6:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, P2B6_CP_e,
    28aa:	930c      	str	r3, [sp, #48]	; 0x30
    28ac:	2314      	movs	r3, #20
    28ae:	940d      	str	r4, [sp, #52]	; 0x34
    28b0:	241b      	movs	r4, #27
    28b2:	9509      	str	r5, [sp, #36]	; 0x24
    28b4:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
    28b8:	2115      	movs	r1, #21
    28ba:	221f      	movs	r2, #31
    28bc:	9108      	str	r1, [sp, #32]
    28be:	2113      	movs	r1, #19
    28c0:	e9cd 1404 	strd	r1, r4, [sp, #16]
    28c4:	2418      	movs	r4, #24
    28c6:	2111      	movs	r1, #17
    28c8:	e9cd 3206 	strd	r3, r2, [sp, #24]
    28cc:	e9cd 1400 	strd	r1, r4, [sp]
    28d0:	221c      	movs	r2, #28
bool TLx493D_P2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    28d2:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, P2B6_CP_e,
    28d6:	2312      	movs	r3, #18
    28d8:	2125      	movs	r1, #37	; 0x25
    28da:	940e      	str	r4, [sp, #56]	; 0x38
bool TLx493D_P2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    28dc:	f9bd 4058 	ldrsh.w	r4, [sp, #88]	; 0x58
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, P2B6_CP_e,
    28e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    28e4:	2319      	movs	r3, #25
    28e6:	2210      	movs	r2, #16
    28e8:	940f      	str	r4, [sp, #60]	; 0x3c
    28ea:	f001 fe97 	bl	461c <tlx493d_gen_2_setWakeUpThresholdsAsInteger>
}
    28ee:	b011      	add	sp, #68	; 0x44
    28f0:	bd30      	pop	{r4, r5, pc}
    28f2:	bf00      	nop

000028f4 <TLx493D_P2B6_setWakeUpThresholds>:
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    28f4:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setWakeUpThresholds(sensor, P2B6_CP_e,
    28f6:	2323      	movs	r3, #35	; 0x23
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    28f8:	b08e      	sub	sp, #56	; 0x38
    return tlx493d_gen_2_setWakeUpThresholds(sensor, P2B6_CP_e,
    28fa:	2400      	movs	r4, #0
    28fc:	2101      	movs	r1, #1
    28fe:	221e      	movs	r2, #30
    2900:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
    2904:	2415      	movs	r4, #21
    2906:	231f      	movs	r3, #31
    2908:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
    290c:	2114      	movs	r1, #20
    290e:	221b      	movs	r2, #27
    2910:	e9cd 3407 	strd	r3, r4, [sp, #28]
    2914:	2413      	movs	r4, #19
    2916:	231c      	movs	r3, #28
    2918:	e9cd 2105 	strd	r2, r1, [sp, #20]
    291c:	2112      	movs	r1, #18
    291e:	2218      	movs	r2, #24
    2920:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2924:	2411      	movs	r4, #17
    2926:	2319      	movs	r3, #25
    2928:	e9cd 2101 	strd	r2, r1, [sp, #4]
    292c:	2210      	movs	r2, #16
    292e:	2125      	movs	r1, #37	; 0x25
    2930:	9400      	str	r4, [sp, #0]
    2932:	f002 f839 	bl	49a8 <tlx493d_gen_2_setWakeUpThresholds>
}
    2936:	b00e      	add	sp, #56	; 0x38
    2938:	bd10      	pop	{r4, pc}
    293a:	bf00      	nop

0000293c <TLx493D_P2B6_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    293c:	4902      	ldr	r1, [pc, #8]	; (2948 <TLx493D_P2B6_softwareReset+0xc>)
bool TLx493D_P2B6_softwareReset(TLx493D_t *sensor) {
    293e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    2940:	f001 fa70 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2944:	2000      	movs	r0, #0
    2946:	bd08      	pop	{r3, pc}
    2948:	200006c8 	.word	0x200006c8

0000294c <TLx493D_P2B6_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    294c:	4902      	ldr	r1, [pc, #8]	; (2958 <TLx493D_P2B6_hasValidWakeUpParity+0xc>)
bool TLx493D_P2B6_hasValidWakeUpParity(const TLx493D_t *sensor) {
    294e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    2950:	f001 fa68 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2954:	2000      	movs	r0, #0
    2956:	bd08      	pop	{r3, pc}
    2958:	20000508 	.word	0x20000508

0000295c <TLx493D_P2B6_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    295c:	4902      	ldr	r1, [pc, #8]	; (2968 <TLx493D_P2B6_isInTestMode+0xc>)
bool TLx493D_P2B6_isInTestMode(const TLx493D_t *sensor) {
    295e:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    2960:	f001 fa60 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2964:	2000      	movs	r0, #0
    2966:	bd08      	pop	{r3, pc}
    2968:	2000052c 	.word	0x2000052c

0000296c <TLx493D_P2B6_calculateFuseParity>:
    return tlx493d_gen_2_calculateFuseParity(sensor, P2B6_FP_e, P2B6_PRD_e);
    296c:	222c      	movs	r2, #44	; 0x2c
    296e:	2126      	movs	r1, #38	; 0x26
    2970:	f001 bec6 	b.w	4700 <tlx493d_gen_2_calculateFuseParity>

00002974 <TLx493D_P2B6_calculateBusParity>:
    return tlx493d_gen_2_calculateBusParity(sensor, 5);
    2974:	2105      	movs	r1, #5
    2976:	f001 bef7 	b.w	4768 <tlx493d_gen_2_calculateBusParity>
    297a:	bf00      	nop

0000297c <TLx493D_P2B6_calculateConfigurationParity>:
    return tlx493d_gen_2_calculateConfigurationParityWakeUp(sensor, P2B6_CP_e);
    297c:	2125      	movs	r1, #37	; 0x25
    297e:	f001 bf19 	b.w	47b4 <tlx493d_gen_2_calculateConfigurationParityWakeUp>
    2982:	bf00      	nop

00002984 <TLx493D_P2B6_hasValidFuseParity>:
    return tlx493d_gen_2_hasValidFuseParity(sensor, P2B6_FF_e);
    2984:	210a      	movs	r1, #10
    2986:	f001 bf41 	b.w	480c <tlx493d_gen_2_hasValidFuseParity>
    298a:	bf00      	nop

0000298c <TLx493D_P2B6_hasValidBusParity>:
    return tlx493d_gen_2_hasValidBusParity(sensor, P2B6_P_e);
    298c:	2109      	movs	r1, #9
    298e:	f001 bf45 	b.w	481c <tlx493d_gen_2_hasValidBusParity>
    2992:	bf00      	nop

00002994 <TLx493D_P2B6_hasValidConfigurationParity>:
    return tlx493d_gen_2_hasValidConfigurationParity(sensor, P2B6_CF_e);
    2994:	210b      	movs	r1, #11
    2996:	f001 bf55 	b.w	4844 <tlx493d_gen_2_hasValidConfigurationParity>
    299a:	bf00      	nop

0000299c <TLx493D_P2B6_hasValidTBit>:
    return tlx493d_gen_2_hasValidTBit(sensor, P2B6_T_e);
    299c:	210c      	movs	r1, #12
    299e:	f001 bf59 	b.w	4854 <tlx493d_gen_2_hasValidTBit>
    29a2:	bf00      	nop

000029a4 <TLx493D_P2B6_selectIICAddress>:


uint8_t TLx493D_P2B6_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_2_selectIICAddress(sensor, addr);
    29a4:	f001 bf5e 	b.w	4864 <tlx493d_gen_2_selectIICAddress>

000029a8 <TLx493D_P2B6_calculateRawMagneticFieldAtTemperature>:


void TLx493D_P2B6_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_2_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    29a8:	f001 bf9e 	b.w	48e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>

000029ac <TLx493D_P2B6_getSensitivityScaleFactor>:
}


double TLx493D_P2B6_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_2_getSensitivityScaleFactor(sensor, TLx493D_HAS_X2_e, P2B6_X2_e, 0);
    29ac:	2300      	movs	r3, #0
    29ae:	2223      	movs	r2, #35	; 0x23
    29b0:	2101      	movs	r1, #1
    29b2:	f001 bf69 	b.w	4888 <tlx493d_gen_2_getSensitivityScaleFactor>
    29b6:	bf00      	nop

000029b8 <TLx493D_P2B6_printRegisters>:
}


void TLx493D_P2B6_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_P2B6_REGISTER_HEADLINE); 
    29b8:	4901      	ldr	r1, [pc, #4]	; (29c0 <TLx493D_P2B6_printRegisters+0x8>)
    29ba:	f7fe bfbd 	b.w	1938 <logPrintRegisters>
    29be:	bf00      	nop
    29c0:	20000954 	.word	0x20000954

000029c4 <TLx493D_P2B6_calculateMagneticFieldAndTemperature>:
void TLx493D_P2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    29c4:	b530      	push	{r4, r5, lr}
    29c6:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    29c8:	2505      	movs	r5, #5
void TLx493D_P2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    29ca:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    29cc:	9305      	str	r3, [sp, #20]
    29ce:	2302      	movs	r3, #2
    29d0:	9500      	str	r5, [sp, #0]
void TLx493D_P2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    29d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    29d4:	e9cd 1203 	strd	r1, r2, [sp, #12]
    29d8:	2208      	movs	r2, #8
    29da:	2100      	movs	r1, #0
    29dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
    29e0:	2204      	movs	r2, #4
    29e2:	2301      	movs	r3, #1
    29e4:	f001 fad8 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
    tlx493d_gen_2_calculateTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temp);
    29e8:	462b      	mov	r3, r5
    29ea:	2206      	movs	r2, #6
    29ec:	2103      	movs	r1, #3
    29ee:	4620      	mov	r0, r4
}
    29f0:	b007      	add	sp, #28
    29f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temp);
    29f6:	f001 baa3 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    29fa:	bf00      	nop

000029fc <TLx493D_P2B6_calculateRawMagneticFieldAndTemperature>:
void TLx493D_P2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    29fc:	b530      	push	{r4, r5, lr}
    29fe:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    2a00:	2505      	movs	r5, #5
void TLx493D_P2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2a02:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateRawMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    2a04:	9305      	str	r3, [sp, #20]
    2a06:	2302      	movs	r3, #2
    2a08:	9500      	str	r5, [sp, #0]
void TLx493D_P2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2a0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateRawMagneticField(sensor, P2B6_BX_MSBS_e, P2B6_BX_LSBS_e, P2B6_BY_MSBS_e, P2B6_BY_LSBS_e, P2B6_BZ_MSBS_e, P2B6_BZ_LSBS_e, x, y, z);
    2a0c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2a10:	2208      	movs	r2, #8
    2a12:	2100      	movs	r1, #0
    2a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2a18:	2204      	movs	r2, #4
    2a1a:	2301      	movs	r3, #1
    2a1c:	f001 fa80 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
    tlx493d_gen_2_calculateRawTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temperature);
    2a20:	462b      	mov	r3, r5
    2a22:	2206      	movs	r2, #6
    2a24:	2103      	movs	r1, #3
    2a26:	4620      	mov	r0, r4
}
    2a28:	b007      	add	sp, #28
    2a2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateRawTemperature(sensor, P2B6_TEMP_MSBS_e, P2B6_TEMP_LSBS_e, temperature);
    2a2e:	f001 ba75 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    2a32:	bf00      	nop

00002a34 <TLx493D_P3B6_hasWakeUp>:


bool TLx493D_P3B6_hasWakeUp(const TLx493D_t *sensor) {
    (void) sensor;
    return true;
}
    2a34:	2001      	movs	r0, #1
    2a36:	4770      	bx	lr

00002a38 <TLx493D_P3B6_setResetValues>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    return false;
}


void TLx493D_P3B6_setResetValues(TLx493D_t *sensor) {
    2a38:	b410      	push	{r4}
    sensor->regMap[0x0A] = 0x62; /** MOD1 */
    2a3a:	f04f 0c62 	mov.w	ip, #98	; 0x62
    2a3e:	6804      	ldr	r4, [r0, #0]
    sensor->regMap[0x0B] = 0x00; /** MOD2 */
    2a40:	2100      	movs	r1, #0

    /** for wake-up parity calculation. */
    sensor->regMap[0x0C] = 0x7F;
    2a42:	227f      	movs	r2, #127	; 0x7f
    sensor->regMap[0x0A] = 0x62; /** MOD1 */
    2a44:	f884 c00a 	strb.w	ip, [r4, #10]
    sensor->regMap[0x0D] = 0x80;
    2a48:	2380      	movs	r3, #128	; 0x80
    sensor->regMap[0x0B] = 0x00; /** MOD2 */
    2a4a:	6804      	ldr	r4, [r0, #0]
    2a4c:	72e1      	strb	r1, [r4, #11]
    sensor->regMap[0x0C] = 0x7F;
    2a4e:	6804      	ldr	r4, [r0, #0]
    2a50:	7322      	strb	r2, [r4, #12]
    sensor->regMap[0x0D] = 0x80;
    2a52:	6804      	ldr	r4, [r0, #0]
    2a54:	7363      	strb	r3, [r4, #13]
    sensor->regMap[0x0E] = 0x7F;
    2a56:	6804      	ldr	r4, [r0, #0]
    2a58:	73a2      	strb	r2, [r4, #14]
    sensor->regMap[0x0F] = 0x80;  
    2a5a:	6804      	ldr	r4, [r0, #0]
    2a5c:	73e3      	strb	r3, [r4, #15]
    sensor->regMap[0x10] = 0x7F;
    2a5e:	6804      	ldr	r4, [r0, #0]
    2a60:	7422      	strb	r2, [r4, #16]
    sensor->regMap[0x11] = 0x80;
    sensor->regMap[0x12] = 0xCC;
    2a62:	22cc      	movs	r2, #204	; 0xcc
    sensor->regMap[0x11] = 0x80;
    2a64:	6804      	ldr	r4, [r0, #0]
    2a66:	7463      	strb	r3, [r4, #17]
    sensor->regMap[0x12] = 0xCC;
    2a68:	6803      	ldr	r3, [r0, #0]
    2a6a:	749a      	strb	r2, [r3, #18]
    sensor->regMap[0x13] = 0x2C;
    2a6c:	222c      	movs	r2, #44	; 0x2c
    2a6e:	6803      	ldr	r3, [r0, #0]
    2a70:	74da      	strb	r2, [r3, #19]

    /** P3B6_CHANNEL_SEL_SAVE_e */
    sensor->regMap[0x1B] = 0x00;
    2a72:	6803      	ldr	r3, [r0, #0]
    2a74:	76d9      	strb	r1, [r3, #27]
}
    2a76:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a7a:	4770      	bx	lr

00002a7c <TLx493D_P3B6_init>:
bool TLx493D_P3B6_init(TLx493D_t *sensor) {
    2a7c:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_3_REG_MAP_SIZE, TLx493D_P3B6_regDef, &TLx493D_P3B6_commonFunctions, TLx493D_P3B6_e, TLx493D_I2C_e);
    2a7e:	2106      	movs	r1, #6
bool TLx493D_P3B6_init(TLx493D_t *sensor) {
    2a80:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_3_REG_MAP_SIZE, TLx493D_P3B6_regDef, &TLx493D_P3B6_commonFunctions, TLx493D_P3B6_e, TLx493D_I2C_e);
    2a82:	2400      	movs	r4, #0
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <TLx493D_P3B6_init+0x1c>)
    2a86:	4a05      	ldr	r2, [pc, #20]	; (2a9c <TLx493D_P3B6_init+0x20>)
    2a88:	e9cd 1400 	strd	r1, r4, [sp]
    2a8c:	211b      	movs	r1, #27
    2a8e:	f000 ff71 	bl	3974 <tlx493d_common_init>
}
    2a92:	b002      	add	sp, #8
    2a94:	bd10      	pop	{r4, pc}
    2a96:	bf00      	nop
    2a98:	200023ac 	.word	0x200023ac
    2a9c:	20002478 	.word	0x20002478

00002aa0 <TLx493D_P3B6_deinit>:
    return tlx493d_common_deinit(sensor);
    2aa0:	f000 bf98 	b.w	39d4 <tlx493d_common_deinit>

00002aa4 <TLx493D_P3B6_readRegisters>:
    return tlx493d_gen_3_readRegisters(sensor, P3B6_CHANNEL_SEL_SAVE_e);
    2aa4:	2133      	movs	r1, #51	; 0x33
    2aa6:	f002 b863 	b.w	4b70 <tlx493d_gen_3_readRegisters>
    2aaa:	bf00      	nop

00002aac <TLx493D_P3B6_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    2aac:	f000 bfc0 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

00002ab0 <TLx493D_P3B6_calculateRawTemperature>:
void TLx493D_P3B6_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    2ab0:	460b      	mov	r3, r1
    tlx493d_gen_3_calculateRawTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temperature);
    2ab2:	2208      	movs	r2, #8
    2ab4:	2107      	movs	r1, #7
    2ab6:	f002 b877 	b.w	4ba8 <tlx493d_gen_3_calculateRawTemperature>
    2aba:	bf00      	nop

00002abc <TLx493D_P3B6_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    2abc:	f001 b84a 	b.w	3b54 <tlx493d_common_getRawTemperature>

00002ac0 <TLx493D_P3B6_calculateRawMagneticField>:
void TLx493D_P3B6_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    2ac0:	b530      	push	{r4, r5, lr}
    2ac2:	b087      	sub	sp, #28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, x, y, z);
    2ac4:	2506      	movs	r5, #6
    2ac6:	2404      	movs	r4, #4
    2ac8:	9305      	str	r3, [sp, #20]
    2aca:	2303      	movs	r3, #3
    2acc:	9400      	str	r4, [sp, #0]
    2ace:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2ad2:	2205      	movs	r2, #5
    2ad4:	2100      	movs	r1, #0
    2ad6:	e9cd 2501 	strd	r2, r5, [sp, #4]
    2ada:	2202      	movs	r2, #2
    2adc:	f002 f866 	bl	4bac <tlx493d_gen_3_calculateRawMagneticField>
}
    2ae0:	b007      	add	sp, #28
    2ae2:	bd30      	pop	{r4, r5, pc}

00002ae4 <TLx493D_P3B6_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    2ae4:	f001 b846 	b.w	3b74 <tlx493d_common_getRawMagneticField>

00002ae8 <TLx493D_P3B6_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    2ae8:	f001 b85a 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00002aec <TLx493D_P3B6_calculateTemperature>:
void TLx493D_P3B6_calculateTemperature(TLx493D_t *sensor, double *temp) {
    2aec:	460b      	mov	r3, r1
    tlx493d_gen_3_calculateTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temp);
    2aee:	2208      	movs	r2, #8
    2af0:	2107      	movs	r1, #7
    2af2:	f002 b869 	b.w	4bc8 <tlx493d_gen_3_calculateTemperature>
    2af6:	bf00      	nop

00002af8 <TLx493D_P3B6_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    2af8:	f001 b86c 	b.w	3bd4 <tlx493d_common_getTemperature>

00002afc <TLx493D_P3B6_calculateMagneticField>:
void TLx493D_P3B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    2afc:	b510      	push	{r4, lr}
    2afe:	b088      	sub	sp, #32
    tlx493d_gen_3_calculateMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, x, y, z);
    2b00:	2408      	movs	r4, #8
    2b02:	e9cd 1205 	strd	r1, r2, [sp, #20]
    2b06:	2207      	movs	r2, #7
    2b08:	2106      	movs	r1, #6
    2b0a:	9307      	str	r3, [sp, #28]
    2b0c:	2303      	movs	r3, #3
    2b0e:	e9cd 2403 	strd	r2, r4, [sp, #12]
    2b12:	2205      	movs	r2, #5
    2b14:	2404      	movs	r4, #4
    2b16:	e9cd 2101 	strd	r2, r1, [sp, #4]
    2b1a:	2202      	movs	r2, #2
    2b1c:	2100      	movs	r1, #0
    2b1e:	9400      	str	r4, [sp, #0]
    2b20:	f002 f87e 	bl	4c20 <tlx493d_gen_3_calculateMagneticField>
}
    2b24:	b008      	add	sp, #32
    2b26:	bd10      	pop	{r4, pc}

00002b28 <TLx493D_P3B6_getMagneticField>:
     return tlx493d_common_getMagneticField(sensor, x, y, z);
    2b28:	f001 b864 	b.w	3bf4 <tlx493d_common_getMagneticField>

00002b2c <TLx493D_P3B6_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    2b2c:	f001 b878 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

00002b30 <TLx493D_P3B6_setMeasurement>:
bool TLx493D_P3B6_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    2b30:	460b      	mov	r3, r1
    return tlx493d_gen_3_setMeasurement(sensor, P3B6_CHANNEL_SEL_e, P3B6_CHANNEL_SEL_SAVE_e, val);
    2b32:	2233      	movs	r2, #51	; 0x33
    2b34:	2118      	movs	r1, #24
    2b36:	f002 b9a3 	b.w	4e80 <tlx493d_gen_3_setMeasurement>
    2b3a:	bf00      	nop

00002b3c <TLx493D_P3B6_setTrigger>:
bool TLx493D_P3B6_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t val) {
    2b3c:	460a      	mov	r2, r1
    return tlx493d_gen_3_setTrigger(sensor, P3B6_TRIGGER_SEL_e, val);
    2b3e:	2115      	movs	r1, #21
    2b40:	f002 b9cc 	b.w	4edc <tlx493d_gen_3_setTrigger>

00002b44 <TLx493D_P3B6_setSensitivity>:
bool TLx493D_P3B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    2b44:	460b      	mov	r3, r1
    return tlx493d_gen_3_setSensitivity(sensor, P3B6_SHORT_EN_e, P3B6_XTR_SHORT_EN_e, val);
    2b46:	221a      	movs	r2, #26
    2b48:	211b      	movs	r1, #27
    2b4a:	f002 b9df 	b.w	4f0c <tlx493d_gen_3_setSensitivity>
    2b4e:	bf00      	nop

00002b50 <TLx493D_P3B6_setDefaultConfig>:
bool TLx493D_P3B6_setDefaultConfig(TLx493D_t *sensor) {
    2b50:	b538      	push	{r3, r4, r5, lr}
    2b52:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, P3B6_MODE_SEL_e, 1);
    2b54:	2201      	movs	r2, #1
    2b56:	2111      	movs	r1, #17
    2b58:	f001 f8aa 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, P3B6_INT_DIS_e, 1);
    2b5c:	4620      	mov	r0, r4
    2b5e:	2201      	movs	r2, #1
    2b60:	2112      	movs	r1, #18
    2b62:	f001 f8a5 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, P3B6_COLLISION_DIS_e, 1);
    2b66:	4620      	mov	r0, r4
    2b68:	2201      	movs	r2, #1
    2b6a:	2113      	movs	r1, #19
    2b6c:	f001 f8a0 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, P3B6_TRIGGER_SEL_e, 2);
    2b70:	4620      	mov	r0, r4
    2b72:	2202      	movs	r2, #2
    2b74:	2115      	movs	r1, #21
    2b76:	f001 f89b 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, P3B6_PROT_SEL_e, 1);
    2b7a:	2201      	movs	r2, #1
    2b7c:	4620      	mov	r0, r4
    2b7e:	2116      	movs	r1, #22
    2b80:	f001 f896 	bl	3cb0 <tlx493d_common_setBitfield>
    bool b = tlx493d_common_writeRegister(sensor, P3B6_MODE_SEL_e);
    2b84:	2111      	movs	r1, #17
    2b86:	4620      	mov	r0, r4
    2b88:	f001 f8c6 	bl	3d18 <tlx493d_common_writeRegister>
    tlx493d_common_setBitfield(sensor, P3B6_CHANNEL_SEL_e, 0);
    2b8c:	2200      	movs	r2, #0
    bool b = tlx493d_common_writeRegister(sensor, P3B6_MODE_SEL_e);
    2b8e:	4605      	mov	r5, r0
    tlx493d_common_setBitfield(sensor, P3B6_CHANNEL_SEL_e, 0);
    2b90:	2118      	movs	r1, #24
    2b92:	4620      	mov	r0, r4
    2b94:	f001 f88c 	bl	3cb0 <tlx493d_common_setBitfield>
    b |= tlx493d_common_writeRegister(sensor, P3B6_CHANNEL_SEL_e);
    2b98:	2118      	movs	r1, #24
    2b9a:	4620      	mov	r0, r4
    2b9c:	f001 f8bc 	bl	3d18 <tlx493d_common_writeRegister>
    2ba0:	4328      	orrs	r0, r5
}
    2ba2:	b2c0      	uxtb	r0, r0
    2ba4:	bd38      	pop	{r3, r4, r5, pc}
    2ba6:	bf00      	nop

00002ba8 <TLx493D_P3B6_setIICAddress>:
bool TLx493D_P3B6_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    2ba8:	460a      	mov	r2, r1
    return tlx493d_gen_3_setIICAddress(sensor, 0, address);
    2baa:	2100      	movs	r1, #0
    2bac:	f002 b9d2 	b.w	4f54 <tlx493d_gen_3_setIICAddress>

00002bb0 <TLx493D_P3B6_enable1ByteReadMode>:
    return tlx493d_gen_3_set1ByteReadMode(sensor, P3B6_PROT_SEL_e, 1);
    2bb0:	2201      	movs	r2, #1
    2bb2:	2116      	movs	r1, #22
    2bb4:	f002 b9d6 	b.w	4f64 <tlx493d_gen_3_set1ByteReadMode>

00002bb8 <TLx493D_P3B6_enableCollisionAvoidance>:
    return tlx493d_gen_3_setCollisionAvoidance(sensor, P3B6_COLLISION_DIS_e, 0);
    2bb8:	2200      	movs	r2, #0
    2bba:	2113      	movs	r1, #19
    2bbc:	f002 b9de 	b.w	4f7c <tlx493d_gen_3_setCollisionAvoidance>

00002bc0 <TLx493D_P3B6_disableCollisionAvoidance>:
    return tlx493d_gen_3_setCollisionAvoidance(sensor, P3B6_COLLISION_DIS_e, 1);
    2bc0:	2201      	movs	r2, #1
    2bc2:	2113      	movs	r1, #19
    2bc4:	f002 b9da 	b.w	4f7c <tlx493d_gen_3_setCollisionAvoidance>

00002bc8 <TLx493D_P3B6_enableInterrupt>:
    return tlx493d_gen_3_setInterrupt(sensor, P3B6_INT_DIS_e, 0);
    2bc8:	2200      	movs	r2, #0
    2bca:	2112      	movs	r1, #18
    2bcc:	f002 b9e2 	b.w	4f94 <tlx493d_gen_3_setInterrupt>

00002bd0 <TLx493D_P3B6_disableInterrupt>:
    return tlx493d_gen_3_setInterrupt(sensor, P3B6_INT_DIS_e, 1);
    2bd0:	2201      	movs	r2, #1
    2bd2:	2112      	movs	r1, #18
    2bd4:	f002 b9de 	b.w	4f94 <tlx493d_gen_3_setInterrupt>

00002bd8 <TLx493D_P3B6_setPowerMode>:
bool TLx493D_P3B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    2bd8:	460a      	mov	r2, r1
    return tlx493d_gen_3_setPowerMode(sensor, P3B6_MODE_SEL_e, mode);
    2bda:	2111      	movs	r1, #17
    2bdc:	f002 b9e6 	b.w	4fac <tlx493d_gen_3_setPowerMode>

00002be0 <TLx493D_P3B6_setUpdateRate>:
bool TLx493D_P3B6_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    2be0:	460a      	mov	r2, r1
    return tlx493d_gen_3_setUpdateRate(sensor, P3B6_F_UPDATE_SEL_e, val);
    2be2:	2119      	movs	r1, #25
    2be4:	f002 ba02 	b.w	4fec <tlx493d_gen_3_setUpdateRate>

00002be8 <TLx493D_P3B6_hasValidData>:
    return tlx493d_gen_3_hasValidData(sensor, P3B6_MEAS_FLG_e);
    2be8:	210a      	movs	r1, #10
    2bea:	f002 ba17 	b.w	501c <tlx493d_gen_3_hasValidData>
    2bee:	bf00      	nop

00002bf0 <TLx493D_P3B6_isFunctional>:
    return tlx493d_gen_3_isFunctional(sensor);
    2bf0:	f002 ba1c 	b.w	502c <tlx493d_gen_3_isFunctional>

00002bf4 <TLx493D_P3B6_isWakeUpEnabled>:
    return tlx493d_gen_3_isWakeUpEnabled(sensor, P3B6_WU_EN_e);
    2bf4:	2114      	movs	r1, #20
    2bf6:	f002 ba1d 	b.w	5034 <tlx493d_gen_3_isWakeUpEnabled>
    2bfa:	bf00      	nop

00002bfc <TLx493D_P3B6_enableWakeUpMode>:
    return tlx493d_gen_3_enableWakeUpMode(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e);
    2bfc:	2326      	movs	r3, #38	; 0x26
    2bfe:	2227      	movs	r2, #39	; 0x27
    2c00:	2114      	movs	r1, #20
    2c02:	f002 bc11 	b.w	5428 <tlx493d_gen_3_enableWakeUpMode>
    2c06:	bf00      	nop

00002c08 <TLx493D_P3B6_disableWakeUpMode>:
bool TLx493D_P3B6_disableWakeUpMode(TLx493D_t *sensor) {
    2c08:	b510      	push	{r4, lr}
    return tlx493d_gen_3_disableWakeUpMode(sensor, P3B6_INT_DIS_e, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e);
    2c0a:	2426      	movs	r4, #38	; 0x26
bool TLx493D_P3B6_disableWakeUpMode(TLx493D_t *sensor) {
    2c0c:	b082      	sub	sp, #8
    return tlx493d_gen_3_disableWakeUpMode(sensor, P3B6_INT_DIS_e, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e);
    2c0e:	2327      	movs	r3, #39	; 0x27
    2c10:	2214      	movs	r2, #20
    2c12:	2112      	movs	r1, #18
    2c14:	9400      	str	r4, [sp, #0]
    2c16:	f002 fbdb 	bl	53d0 <tlx493d_gen_3_disableWakeUpMode>
}
    2c1a:	b002      	add	sp, #8
    2c1c:	bd10      	pop	{r4, pc}
    2c1e:	bf00      	nop

00002c20 <TLx493D_P3B6_setWakeUpThresholdsAsInteger>:
bool TLx493D_P3B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    2c20:	b530      	push	{r4, r5, lr}
    2c22:	b093      	sub	sp, #76	; 0x4c
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c24:	2421      	movs	r4, #33	; 0x21
    2c26:	2520      	movs	r5, #32
    2c28:	910c      	str	r1, [sp, #48]	; 0x30
    2c2a:	2129      	movs	r1, #41	; 0x29
    2c2c:	950a      	str	r5, [sp, #40]	; 0x28
    2c2e:	9109      	str	r1, [sp, #36]	; 0x24
    2c30:	211e      	movs	r1, #30
    2c32:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    2c36:	2324      	movs	r3, #36	; 0x24
bool TLx493D_P3B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    2c38:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c3c:	9106      	str	r1, [sp, #24]
    2c3e:	211c      	movs	r1, #28
    2c40:	920f      	str	r2, [sp, #60]	; 0x3c
    2c42:	2228      	movs	r2, #40	; 0x28
    2c44:	e9cd 3407 	strd	r3, r4, [sp, #28]
    2c48:	2325      	movs	r3, #37	; 0x25
    2c4a:	241f      	movs	r4, #31
    2c4c:	920b      	str	r2, [sp, #44]	; 0x2c
    2c4e:	2223      	movs	r2, #35	; 0x23
    2c50:	9305      	str	r3, [sp, #20]
    2c52:	2322      	movs	r3, #34	; 0x22
    2c54:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2c58:	241d      	movs	r4, #29
    2c5a:	2326      	movs	r3, #38	; 0x26
    2c5c:	9400      	str	r4, [sp, #0]
bool TLx493D_P3B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    2c5e:	f9bd 405c 	ldrsh.w	r4, [sp, #92]	; 0x5c
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c62:	e9cd 2101 	strd	r2, r1, [sp, #4]
    2c66:	9410      	str	r4, [sp, #64]	; 0x40
    2c68:	2227      	movs	r2, #39	; 0x27
bool TLx493D_P3B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    2c6a:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c6e:	2114      	movs	r1, #20
    2c70:	9411      	str	r4, [sp, #68]	; 0x44
    2c72:	f002 fa75 	bl	5160 <tlx493d_gen_3_setWakeUpThresholdsAsInteger>
}
    2c76:	b013      	add	sp, #76	; 0x4c
    2c78:	bd30      	pop	{r4, r5, pc}
    2c7a:	bf00      	nop

00002c7c <TLx493D_P3B6_setWakeUpThresholds>:
                                      double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    2c7c:	b510      	push	{r4, lr}
    return tlx493d_gen_3_setWakeUpThresholds(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c7e:	211b      	movs	r1, #27
                                      double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    2c80:	b08e      	sub	sp, #56	; 0x38
    return tlx493d_gen_3_setWakeUpThresholds(sensor, P3B6_WU_EN_e, P3B6_WU_EN_CP_e, P3B6_WU_PAR_e,
    2c82:	241a      	movs	r4, #26
    2c84:	2228      	movs	r2, #40	; 0x28
    2c86:	2320      	movs	r3, #32
    2c88:	e9cd 140c 	strd	r1, r4, [sp, #48]	; 0x30
    2c8c:	2429      	movs	r4, #41	; 0x29
    2c8e:	2121      	movs	r1, #33	; 0x21
    2c90:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    2c94:	e9cd 1408 	strd	r1, r4, [sp, #32]
    2c98:	2224      	movs	r2, #36	; 0x24
    2c9a:	231e      	movs	r3, #30
    2c9c:	2425      	movs	r4, #37	; 0x25
    2c9e:	211f      	movs	r1, #31
    2ca0:	e9cd 3206 	strd	r3, r2, [sp, #24]
    2ca4:	e9cd 1404 	strd	r1, r4, [sp, #16]
    2ca8:	2222      	movs	r2, #34	; 0x22
    2caa:	231c      	movs	r3, #28
    2cac:	2423      	movs	r4, #35	; 0x23
    2cae:	211d      	movs	r1, #29
    2cb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2cb4:	e9cd 1400 	strd	r1, r4, [sp]
    2cb8:	2326      	movs	r3, #38	; 0x26
    2cba:	2227      	movs	r2, #39	; 0x27
    2cbc:	2114      	movs	r1, #20
    2cbe:	f002 fac7 	bl	5250 <tlx493d_gen_3_setWakeUpThresholds>
}
    2cc2:	b00e      	add	sp, #56	; 0x38
    2cc4:	bd10      	pop	{r4, pc}
    2cc6:	bf00      	nop

00002cc8 <TLx493D_P3B6_softwareReset>:
bool TLx493D_P3B6_softwareReset(TLx493D_t *sensor) {
    2cc8:	b510      	push	{r4, lr}
    2cca:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, P3B6_RST_FLG_CLR_e, 1);
    2ccc:	212a      	movs	r1, #42	; 0x2a
    2cce:	2201      	movs	r2, #1
    2cd0:	f000 ffee 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_3_softwareReset(sensor, P3B6_SOFT_RST_e);
    2cd4:	4620      	mov	r0, r4
    2cd6:	212b      	movs	r1, #43	; 0x2b
}
    2cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tlx493d_gen_3_softwareReset(sensor, P3B6_SOFT_RST_e);
    2cdc:	f002 b9d8 	b.w	5090 <tlx493d_gen_3_softwareReset>

00002ce0 <TLx493D_P3B6_calculateFuseParity>:
     tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateFuseParity");
    2ce0:	4902      	ldr	r1, [pc, #8]	; (2cec <TLx493D_P3B6_calculateFuseParity+0xc>)
uint8_t TLx493D_P3B6_calculateFuseParity(const TLx493D_t *sensor) {
    2ce2:	b508      	push	{r3, lr}
     tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateFuseParity");
    2ce4:	f001 f8e6 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2ce8:	2000      	movs	r0, #0
    2cea:	bd08      	pop	{r3, pc}
    2cec:	20000434 	.word	0x20000434

00002cf0 <TLx493D_P3B6_calculateBusParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateBusParity");
    2cf0:	4902      	ldr	r1, [pc, #8]	; (2cfc <TLx493D_P3B6_calculateBusParity+0xc>)
uint8_t TLx493D_P3B6_calculateBusParity(const TLx493D_t *sensor) {
    2cf2:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateBusParity");
    2cf4:	f001 f8de 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2cf8:	2000      	movs	r0, #0
    2cfa:	bd08      	pop	{r3, pc}
    2cfc:	20000420 	.word	0x20000420

00002d00 <TLx493D_P3B6_calculateConfigurationParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateConfigurationParity");
    2d00:	4902      	ldr	r1, [pc, #8]	; (2d0c <TLx493D_P3B6_calculateConfigurationParity+0xc>)
uint8_t TLx493D_P3B6_calculateConfigurationParity(TLx493D_t *sensor) {
    2d02:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateConfigurationParity");
    2d04:	f001 f8d6 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2d08:	2000      	movs	r0, #0
    2d0a:	bd08      	pop	{r3, pc}
    2d0c:	20000ac8 	.word	0x20000ac8

00002d10 <TLx493D_P3B6_hasValidBusParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidBusParity");
    2d10:	4902      	ldr	r1, [pc, #8]	; (2d1c <TLx493D_P3B6_hasValidBusParity+0xc>)
bool TLx493D_P3B6_hasValidBusParity(const TLx493D_t *sensor) {
    2d12:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidBusParity");
    2d14:	f001 f8ce 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2d18:	2000      	movs	r0, #0
    2d1a:	bd08      	pop	{r3, pc}
    2d1c:	200004d8 	.word	0x200004d8

00002d20 <TLx493D_P3B6_hasValidConfigurationParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidConfigurationParity");
    2d20:	4902      	ldr	r1, [pc, #8]	; (2d2c <TLx493D_P3B6_hasValidConfigurationParity+0xc>)
bool TLx493D_P3B6_hasValidConfigurationParity(const TLx493D_t *sensor) {
    2d22:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidConfigurationParity");
    2d24:	f001 f8c6 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2d28:	2000      	movs	r0, #0
    2d2a:	bd08      	pop	{r3, pc}
    2d2c:	200004ec 	.word	0x200004ec

00002d30 <TLx493D_P3B6_hasValidTBit>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    2d30:	4902      	ldr	r1, [pc, #8]	; (2d3c <TLx493D_P3B6_hasValidTBit+0xc>)
bool TLx493D_P3B6_hasValidTBit(const TLx493D_t *sensor) {
    2d32:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    2d34:	f001 f8be 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    2d38:	2000      	movs	r0, #0
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	20000ae8 	.word	0x20000ae8

00002d40 <TLx493D_P3B6_hasValidFuseParity>:
    return tlx493d_gen_3_hasValidFuseParity(sensor, P3B6_FUSE_PAR_FLG_e);
    2d40:	2110      	movs	r1, #16
    2d42:	f002 bbcb 	b.w	54dc <tlx493d_gen_3_hasValidFuseParity>
    2d46:	bf00      	nop

00002d48 <TLx493D_P3B6_hasValidWakeUpParity>:
    return tlx493d_gen_3_hasValidWakeUpParity(sensor, P3B6_WU_PAR_FLG_e );
    2d48:	210e      	movs	r1, #14
    2d4a:	f002 bbcf 	b.w	54ec <tlx493d_gen_3_hasValidWakeUpParity>
    2d4e:	bf00      	nop

00002d50 <TLx493D_P3B6_isInTestMode>:
    return tlx493d_gen_3_isInTestMode(sensor, P3B6_TEST_FLG_e );
    2d50:	210b      	movs	r1, #11
    2d52:	f002 bbd3 	b.w	54fc <tlx493d_gen_3_isInTestMode>
    2d56:	bf00      	nop

00002d58 <TLx493D_P3B6_selectIICAddress>:


uint8_t TLx493D_P3B6_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_3_selectIICAddress(sensor, addr);
    2d58:	f002 bbd8 	b.w	550c <tlx493d_gen_3_selectIICAddress>

00002d5c <TLx493D_P3B6_calculateRawMagneticFieldAtTemperature>:


void TLx493D_P3B6_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_3_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    2d5c:	f002 bc10 	b.w	5580 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature>

00002d60 <TLx493D_P3B6_getSensitivityScaleFactor>:
}


double TLx493D_P3B6_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_3_getSensitivityScaleFactor(sensor, TLx493D_HAS_X4_e, P3B6_SHORT_EN_e, P3B6_XTR_SHORT_EN_e);
    2d60:	231a      	movs	r3, #26
    2d62:	221b      	movs	r2, #27
    2d64:	2102      	movs	r1, #2
    2d66:	f002 bbe3 	b.w	5530 <tlx493d_gen_3_getSensitivityScaleFactor>
    2d6a:	bf00      	nop

00002d6c <TLx493D_P3B6_printRegisters>:
}


void TLx493D_P3B6_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_P3B6_REGISTER_HEADLINE); 
    2d6c:	4901      	ldr	r1, [pc, #4]	; (2d74 <TLx493D_P3B6_printRegisters+0x8>)
    2d6e:	f7fe bde3 	b.w	1938 <logPrintRegisters>
    2d72:	bf00      	nop
    2d74:	20000af8 	.word	0x20000af8

00002d78 <TLx493D_P3B6_calculateRawMagneticFieldAndTemperature>:
void TLx493D_P3B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2d78:	b530      	push	{r4, r5, lr}
    2d7a:	b087      	sub	sp, #28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, x, y, z);
    2d7c:	2504      	movs	r5, #4
void TLx493D_P3B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2d7e:	4604      	mov	r4, r0
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, x, y, z);
    2d80:	9305      	str	r3, [sp, #20]
    2d82:	2305      	movs	r3, #5
    2d84:	9500      	str	r5, [sp, #0]
void TLx493D_P3B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    2d86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, x, y, z);
    2d88:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2d8c:	2206      	movs	r2, #6
    2d8e:	2100      	movs	r1, #0
    2d90:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2d94:	2202      	movs	r2, #2
    2d96:	2303      	movs	r3, #3
    2d98:	f001 ff08 	bl	4bac <tlx493d_gen_3_calculateRawMagneticField>
    tlx493d_gen_3_calculateRawTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temperature);
    2d9c:	462b      	mov	r3, r5
    2d9e:	2208      	movs	r2, #8
    2da0:	2107      	movs	r1, #7
    2da2:	4620      	mov	r0, r4
}
    2da4:	b007      	add	sp, #28
    2da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_3_calculateRawTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temperature);
    2daa:	f001 befd 	b.w	4ba8 <tlx493d_gen_3_calculateRawTemperature>
    2dae:	bf00      	nop

00002db0 <TLx493D_P3B6_calculateMagneticFieldAndTemperature>:
void TLx493D_P3B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    2db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2db2:	b089      	sub	sp, #36	; 0x24
    tlx493d_gen_3_calculateMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, x, y, z);
    2db4:	2608      	movs	r6, #8
    2db6:	2507      	movs	r5, #7
void TLx493D_P3B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    2db8:	4604      	mov	r4, r0
    tlx493d_gen_3_calculateMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, x, y, z);
    2dba:	9307      	str	r3, [sp, #28]
    2dbc:	2306      	movs	r3, #6
void TLx493D_P3B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    2dbe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    tlx493d_gen_3_calculateMagneticField(sensor, P3B6_BX_MSBS_e, P3B6_BX_LSBS_e, P3B6_BY_MSBS_e, P3B6_BY_LSBS_e, P3B6_BZ_MSBS_e, P3B6_BZ_LSBS_e, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, x, y, z);
    2dc0:	9302      	str	r3, [sp, #8]
    2dc2:	2304      	movs	r3, #4
    2dc4:	e9cd 1205 	strd	r1, r2, [sp, #20]
    2dc8:	2205      	movs	r2, #5
    2dca:	2100      	movs	r1, #0
    2dcc:	e9cd 3200 	strd	r3, r2, [sp]
    2dd0:	e9cd 5603 	strd	r5, r6, [sp, #12]
    2dd4:	2303      	movs	r3, #3
    2dd6:	2202      	movs	r2, #2
    2dd8:	f001 ff22 	bl	4c20 <tlx493d_gen_3_calculateMagneticField>
    tlx493d_gen_3_calculateTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temp);
    2ddc:	463b      	mov	r3, r7
    2dde:	4632      	mov	r2, r6
    2de0:	4629      	mov	r1, r5
    2de2:	4620      	mov	r0, r4
}
    2de4:	b009      	add	sp, #36	; 0x24
    2de6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tlx493d_gen_3_calculateTemperature(sensor, P3B6_TEMP_MSBS_e, P3B6_TEMP_LSBS_e, temp);
    2dea:	f001 beed 	b.w	4bc8 <tlx493d_gen_3_calculateTemperature>
    2dee:	bf00      	nop

00002df0 <TLx493D_P3I8_hasWakeUp>:

bool TLx493D_P3I8_hasWakeUp(const TLx493D_t *sensor) {
    (void) sensor;

    return true;
}
    2df0:	2001      	movs	r0, #1
    2df2:	4770      	bx	lr

00002df4 <TLx493D_P3I8_setResetValues>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    return false;
}


void TLx493D_P3I8_setResetValues(TLx493D_t *sensor) {
    2df4:	b410      	push	{r4}
    sensor->regMap[0x0A] = 0x62; /** MOD1 */
    2df6:	f04f 0c62 	mov.w	ip, #98	; 0x62
    2dfa:	6804      	ldr	r4, [r0, #0]
    sensor->regMap[0x0B] = 0x00; /** MOD2 */
    2dfc:	2100      	movs	r1, #0

    /** for wake-up parity calculation. */
    sensor->regMap[0x0C] = 0x7F;
    2dfe:	227f      	movs	r2, #127	; 0x7f
    sensor->regMap[0x0A] = 0x62; /** MOD1 */
    2e00:	f884 c00a 	strb.w	ip, [r4, #10]
    sensor->regMap[0x0D] = 0x80;
    2e04:	2380      	movs	r3, #128	; 0x80
    sensor->regMap[0x0B] = 0x00; /** MOD2 */
    2e06:	6804      	ldr	r4, [r0, #0]
    2e08:	72e1      	strb	r1, [r4, #11]
    sensor->regMap[0x0C] = 0x7F;
    2e0a:	6804      	ldr	r4, [r0, #0]
    2e0c:	7322      	strb	r2, [r4, #12]
    sensor->regMap[0x0D] = 0x80;
    2e0e:	6804      	ldr	r4, [r0, #0]
    2e10:	7363      	strb	r3, [r4, #13]
    sensor->regMap[0x0E] = 0x7F;
    2e12:	6804      	ldr	r4, [r0, #0]
    2e14:	73a2      	strb	r2, [r4, #14]
    sensor->regMap[0x0F] = 0x80;  
    2e16:	6804      	ldr	r4, [r0, #0]
    2e18:	73e3      	strb	r3, [r4, #15]
    sensor->regMap[0x10] = 0x7F;
    2e1a:	6804      	ldr	r4, [r0, #0]
    2e1c:	7422      	strb	r2, [r4, #16]
    sensor->regMap[0x11] = 0x80;
    sensor->regMap[0x12] = 0xCC;
    2e1e:	22cc      	movs	r2, #204	; 0xcc
    sensor->regMap[0x11] = 0x80;
    2e20:	6804      	ldr	r4, [r0, #0]
    2e22:	7463      	strb	r3, [r4, #17]
    sensor->regMap[0x12] = 0xCC;
    2e24:	6803      	ldr	r3, [r0, #0]
    2e26:	749a      	strb	r2, [r3, #18]
    sensor->regMap[0x13] = 0x2C;
    2e28:	222c      	movs	r2, #44	; 0x2c
    2e2a:	6803      	ldr	r3, [r0, #0]
    2e2c:	74da      	strb	r2, [r3, #19]

    /** P3I8_CHANNEL_SEL_SAVE_e */
    sensor->regMap[0x1B] = 0x00;
    2e2e:	6803      	ldr	r3, [r0, #0]
    2e30:	76d9      	strb	r1, [r3, #27]
}
    2e32:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e36:	4770      	bx	lr

00002e38 <TLx493D_P3I8_init>:
bool TLx493D_P3I8_init(TLx493D_t *sensor) {
    2e38:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_3_REG_MAP_SIZE, TLx493D_P3I8_regDef, &TLx493D_P3I8_commonFunctions, TLx493D_P3I8_e, TLx493D_SPI_e);
    2e3a:	2107      	movs	r1, #7
bool TLx493D_P3I8_init(TLx493D_t *sensor) {
    2e3c:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_3_REG_MAP_SIZE, TLx493D_P3I8_regDef, &TLx493D_P3I8_commonFunctions, TLx493D_P3I8_e, TLx493D_SPI_e);
    2e3e:	2401      	movs	r4, #1
    2e40:	4b04      	ldr	r3, [pc, #16]	; (2e54 <TLx493D_P3I8_init+0x1c>)
    2e42:	4a05      	ldr	r2, [pc, #20]	; (2e58 <TLx493D_P3I8_init+0x20>)
    2e44:	e9cd 1400 	strd	r1, r4, [sp]
    2e48:	211b      	movs	r1, #27
    2e4a:	f000 fd93 	bl	3974 <tlx493d_common_init>
}
    2e4e:	b002      	add	sp, #8
    2e50:	bd10      	pop	{r4, pc}
    2e52:	bf00      	nop
    2e54:	2000257c 	.word	0x2000257c
    2e58:	20002648 	.word	0x20002648

00002e5c <TLx493D_P3I8_deinit>:
    return tlx493d_common_deinit(sensor);
    2e5c:	f000 bdba 	b.w	39d4 <tlx493d_common_deinit>

00002e60 <TLx493D_P3I8_readRegisters>:
    return tlx493d_gen_3_readRegisters(sensor, P3I8_CHANNEL_SEL_SAVE_e);
    2e60:	2130      	movs	r1, #48	; 0x30
    2e62:	f001 be85 	b.w	4b70 <tlx493d_gen_3_readRegisters>
    2e66:	bf00      	nop

00002e68 <TLx493D_P3I8_readRegistersAndCheck>:
    return tlx493d_gen_3_readRegistersAndCheck(sensor, P3I8_CHANNEL_SEL_SAVE_e);
    2e68:	2130      	movs	r1, #48	; 0x30
    2e6a:	f001 be8f 	b.w	4b8c <tlx493d_gen_3_readRegistersAndCheck>
    2e6e:	bf00      	nop

00002e70 <TLx493D_P3I8_calculateRawTemperature>:
void TLx493D_P3I8_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    2e70:	460b      	mov	r3, r1
    tlx493d_gen_3_calculateRawTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temperature);
    2e72:	2207      	movs	r2, #7
    2e74:	2106      	movs	r1, #6
    2e76:	f001 be97 	b.w	4ba8 <tlx493d_gen_3_calculateRawTemperature>
    2e7a:	bf00      	nop

00002e7c <TLx493D_P3I8_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    2e7c:	f000 be6a 	b.w	3b54 <tlx493d_common_getRawTemperature>

00002e80 <TLx493D_P3I8_calculateRawMagneticField>:
void TLx493D_P3I8_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    2e80:	b530      	push	{r4, r5, lr}
    2e82:	b087      	sub	sp, #28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, x, y, z);
    2e84:	2505      	movs	r5, #5
    2e86:	2403      	movs	r4, #3
    2e88:	9305      	str	r3, [sp, #20]
    2e8a:	2302      	movs	r3, #2
    2e8c:	9400      	str	r4, [sp, #0]
    2e8e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2e92:	2204      	movs	r2, #4
    2e94:	2100      	movs	r1, #0
    2e96:	e9cd 2501 	strd	r2, r5, [sp, #4]
    2e9a:	2201      	movs	r2, #1
    2e9c:	f001 fe86 	bl	4bac <tlx493d_gen_3_calculateRawMagneticField>
}
    2ea0:	b007      	add	sp, #28
    2ea2:	bd30      	pop	{r4, r5, pc}

00002ea4 <TLx493D_P3I8_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    2ea4:	f000 be66 	b.w	3b74 <tlx493d_common_getRawMagneticField>

00002ea8 <TLx493D_P3I8_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    2ea8:	f000 be7a 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00002eac <TLx493D_P3I8_calculateTemperature>:
void TLx493D_P3I8_calculateTemperature(TLx493D_t *sensor, double *temp) {
    2eac:	460b      	mov	r3, r1
    tlx493d_gen_3_calculateTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temp);
    2eae:	2207      	movs	r2, #7
    2eb0:	2106      	movs	r1, #6
    2eb2:	f001 be89 	b.w	4bc8 <tlx493d_gen_3_calculateTemperature>
    2eb6:	bf00      	nop

00002eb8 <TLx493D_P3I8_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    2eb8:	f000 be8c 	b.w	3bd4 <tlx493d_common_getTemperature>

00002ebc <TLx493D_P3I8_calculateMagneticField>:
void TLx493D_P3I8_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    2ebc:	b510      	push	{r4, lr}
    2ebe:	b088      	sub	sp, #32
    tlx493d_gen_3_calculateMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, x, y, z);
    2ec0:	2407      	movs	r4, #7
    2ec2:	e9cd 1205 	strd	r1, r2, [sp, #20]
    2ec6:	2206      	movs	r2, #6
    2ec8:	2105      	movs	r1, #5
    2eca:	9307      	str	r3, [sp, #28]
    2ecc:	2302      	movs	r3, #2
    2ece:	e9cd 2403 	strd	r2, r4, [sp, #12]
    2ed2:	2204      	movs	r2, #4
    2ed4:	2403      	movs	r4, #3
    2ed6:	e9cd 2101 	strd	r2, r1, [sp, #4]
    2eda:	2201      	movs	r2, #1
    2edc:	2100      	movs	r1, #0
    2ede:	9400      	str	r4, [sp, #0]
    2ee0:	f001 fe9e 	bl	4c20 <tlx493d_gen_3_calculateMagneticField>
}
    2ee4:	b008      	add	sp, #32
    2ee6:	bd10      	pop	{r4, pc}

00002ee8 <TLx493D_P3I8_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    2ee8:	f000 be84 	b.w	3bf4 <tlx493d_common_getMagneticField>

00002eec <TLx493D_P3I8_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    2eec:	f000 be98 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

00002ef0 <TLx493D_P3I8_setMeasurement>:
bool TLx493D_P3I8_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    2ef0:	b570      	push	{r4, r5, r6, lr}
    2ef2:	460c      	mov	r4, r1
    tlx493d_setReadAddress(sensor, (val == TLx493D_BzTemp_e) ? 0x04 : 0x00);
    2ef4:	f1a1 0107 	sub.w	r1, r1, #7
bool TLx493D_P3I8_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    2ef8:	4605      	mov	r5, r0
    tlx493d_setReadAddress(sensor, (val == TLx493D_BzTemp_e) ? 0x04 : 0x00);
    2efa:	fab1 f181 	clz	r1, r1
    2efe:	0949      	lsrs	r1, r1, #5
    2f00:	0089      	lsls	r1, r1, #2
    2f02:	f7fe fb65 	bl	15d0 <tlx493d_setReadAddress>
    return tlx493d_gen_3_setMeasurement(sensor, P3I8_CHANNEL_SEL_e, P3I8_CHANNEL_SEL_SAVE_e, val);
    2f06:	4623      	mov	r3, r4
    2f08:	4628      	mov	r0, r5
    2f0a:	2230      	movs	r2, #48	; 0x30
    2f0c:	2115      	movs	r1, #21
}
    2f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return tlx493d_gen_3_setMeasurement(sensor, P3I8_CHANNEL_SEL_e, P3I8_CHANNEL_SEL_SAVE_e, val);
    2f12:	f001 bfb5 	b.w	4e80 <tlx493d_gen_3_setMeasurement>
    2f16:	bf00      	nop

00002f18 <TLx493D_P3I8_setSensitivity>:
bool TLx493D_P3I8_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    2f18:	460b      	mov	r3, r1
    return tlx493d_gen_3_setSensitivity(sensor, P3I8_SHORT_EN_e, P3I8_XTR_SHORT_EN_e, val);
    2f1a:	2217      	movs	r2, #23
    2f1c:	2118      	movs	r1, #24
    2f1e:	f001 bff5 	b.w	4f0c <tlx493d_gen_3_setSensitivity>
    2f22:	bf00      	nop

00002f24 <TLx493D_P3I8_setDefaultConfig>:
bool TLx493D_P3I8_setDefaultConfig(TLx493D_t *sensor) {
    2f24:	b538      	push	{r3, r4, r5, lr}
    2f26:	4605      	mov	r5, r0
    tlx493d_common_setBitfield(sensor, P3I8_INT_DIS_e, 1);
    2f28:	2201      	movs	r2, #1
    2f2a:	2111      	movs	r1, #17
    2f2c:	f000 fec0 	bl	3cb0 <tlx493d_common_setBitfield>
    bool b = tlx493d_common_writeRegister(sensor, P3I8_MODE_SEL_e);
    2f30:	2110      	movs	r1, #16
    2f32:	4628      	mov	r0, r5
    2f34:	f000 fef0 	bl	3d18 <tlx493d_common_writeRegister>
    tlx493d_common_setBitfield(sensor, P3I8_RST_FLG_CLR_e, 1);
    2f38:	2201      	movs	r2, #1
    bool b = tlx493d_common_writeRegister(sensor, P3I8_MODE_SEL_e);
    2f3a:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, P3I8_RST_FLG_CLR_e, 1);
    2f3c:	2127      	movs	r1, #39	; 0x27
    2f3e:	4628      	mov	r0, r5
    2f40:	f000 feb6 	bl	3cb0 <tlx493d_common_setBitfield>
    b &= tlx493d_common_writeRegister(sensor, P3I8_RST_FLG_CLR_e);
    2f44:	2127      	movs	r1, #39	; 0x27
    2f46:	4628      	mov	r0, r5
    2f48:	f000 fee6 	bl	3d18 <tlx493d_common_writeRegister>
    return b;
    2f4c:	4020      	ands	r0, r4
}
    2f4e:	b2c0      	uxtb	r0, r0
    2f50:	bd38      	pop	{r3, r4, r5, pc}
    2f52:	bf00      	nop

00002f54 <TLx493D_P3I8_setIICAddress>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setIICAddress");
    2f54:	4902      	ldr	r1, [pc, #8]	; (2f60 <TLx493D_P3I8_setIICAddress+0xc>)
bool TLx493D_P3I8_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    2f56:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setIICAddress");
    2f58:	f000 ff64 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2f5c:	2000      	movs	r0, #0
    2f5e:	bd08      	pop	{r3, pc}
    2f60:	20000cd4 	.word	0x20000cd4

00002f64 <TLx493D_P3I8_enable1ByteReadMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "set1ByteReadMode");
    2f64:	4902      	ldr	r1, [pc, #8]	; (2f70 <TLx493D_P3I8_enable1ByteReadMode+0xc>)
bool TLx493D_P3I8_enable1ByteReadMode(TLx493D_t *sensor) {
    2f66:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "set1ByteReadMode");
    2f68:	f000 ff5c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2f6c:	2000      	movs	r0, #0
    2f6e:	bd08      	pop	{r3, pc}
    2f70:	20000cac 	.word	0x20000cac

00002f74 <TLx493D_P3I8_enableCollisionAvoidance>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableCollisionAvoidance");
    2f74:	4902      	ldr	r1, [pc, #8]	; (2f80 <TLx493D_P3I8_enableCollisionAvoidance+0xc>)
bool TLx493D_P3I8_enableCollisionAvoidance(TLx493D_t *sensor) {
    2f76:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "enableCollisionAvoidance");
    2f78:	f000 ff54 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2f7c:	2000      	movs	r0, #0
    2f7e:	bd08      	pop	{r3, pc}
    2f80:	2000048c 	.word	0x2000048c

00002f84 <TLx493D_P3I8_disableCollisionAvoidance>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableCollisionAvoidance");
    2f84:	4902      	ldr	r1, [pc, #8]	; (2f90 <TLx493D_P3I8_disableCollisionAvoidance+0xc>)
bool TLx493D_P3I8_disableCollisionAvoidance(TLx493D_t *sensor) {
    2f86:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "disableCollisionAvoidance");
    2f88:	f000 ff4c 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    2f8c:	2000      	movs	r0, #0
    2f8e:	bd08      	pop	{r3, pc}
    2f90:	20000448 	.word	0x20000448

00002f94 <TLx493D_P3I8_enableInterrupt>:
    return tlx493d_gen_3_setInterrupt(sensor, P3I8_INT_DIS_e, 0);
    2f94:	2200      	movs	r2, #0
    2f96:	2111      	movs	r1, #17
    2f98:	f001 bffc 	b.w	4f94 <tlx493d_gen_3_setInterrupt>

00002f9c <TLx493D_P3I8_disableInterrupt>:
    return tlx493d_gen_3_setInterrupt(sensor, P3I8_INT_DIS_e, 1);
    2f9c:	2201      	movs	r2, #1
    2f9e:	2111      	movs	r1, #17
    2fa0:	f001 bff8 	b.w	4f94 <tlx493d_gen_3_setInterrupt>

00002fa4 <TLx493D_P3I8_setPowerMode>:
bool TLx493D_P3I8_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    2fa4:	460a      	mov	r2, r1
    return tlx493d_gen_3_setPowerMode(sensor, P3I8_MODE_SEL_e, mode);
    2fa6:	2110      	movs	r1, #16
    2fa8:	f002 b800 	b.w	4fac <tlx493d_gen_3_setPowerMode>

00002fac <TLx493D_P3I8_setUpdateRate>:
bool TLx493D_P3I8_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    2fac:	460a      	mov	r2, r1
    return tlx493d_gen_3_setUpdateRate(sensor, P3I8_F_UPDATE_SEL_e, val);
    2fae:	2116      	movs	r1, #22
    2fb0:	f002 b81c 	b.w	4fec <tlx493d_gen_3_setUpdateRate>

00002fb4 <TLx493D_P3I8_hasValidData>:
    return tlx493d_gen_3_hasValidData(sensor, P3I8_MEAS_FLG_e);
    2fb4:	2109      	movs	r1, #9
    2fb6:	f002 b831 	b.w	501c <tlx493d_gen_3_hasValidData>
    2fba:	bf00      	nop

00002fbc <TLx493D_P3I8_isFunctional>:
    return tlx493d_gen_3_isFunctional(sensor);
    2fbc:	f002 b836 	b.w	502c <tlx493d_gen_3_isFunctional>

00002fc0 <TLx493D_P3I8_isWakeUpEnabled>:
    return tlx493d_gen_3_isWakeUpEnabled(sensor, P3I8_WU_EN_e);
    2fc0:	2112      	movs	r1, #18
    2fc2:	f002 b837 	b.w	5034 <tlx493d_gen_3_isWakeUpEnabled>
    2fc6:	bf00      	nop

00002fc8 <TLx493D_P3I8_enableWakeUpMode>:
    return tlx493d_gen_3_enableWakeUpMode(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e);
    2fc8:	2323      	movs	r3, #35	; 0x23
    2fca:	2224      	movs	r2, #36	; 0x24
    2fcc:	2112      	movs	r1, #18
    2fce:	f002 ba2b 	b.w	5428 <tlx493d_gen_3_enableWakeUpMode>
    2fd2:	bf00      	nop

00002fd4 <TLx493D_P3I8_disableWakeUpMode>:
bool TLx493D_P3I8_disableWakeUpMode(TLx493D_t *sensor) {
    2fd4:	b510      	push	{r4, lr}
    return tlx493d_gen_3_disableWakeUpMode(sensor, P3I8_INT_DIS_e, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e);
    2fd6:	2423      	movs	r4, #35	; 0x23
bool TLx493D_P3I8_disableWakeUpMode(TLx493D_t *sensor) {
    2fd8:	b082      	sub	sp, #8
    return tlx493d_gen_3_disableWakeUpMode(sensor, P3I8_INT_DIS_e, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e);
    2fda:	2324      	movs	r3, #36	; 0x24
    2fdc:	2212      	movs	r2, #18
    2fde:	2111      	movs	r1, #17
    2fe0:	9400      	str	r4, [sp, #0]
    2fe2:	f002 f9f5 	bl	53d0 <tlx493d_gen_3_disableWakeUpMode>
}
    2fe6:	b002      	add	sp, #8
    2fe8:	bd10      	pop	{r4, pc}
    2fea:	bf00      	nop

00002fec <TLx493D_P3I8_setWakeUpThresholdsAsInteger>:
                                               int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    2fec:	b530      	push	{r4, r5, lr}
    2fee:	b093      	sub	sp, #76	; 0x4c
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    2ff0:	241e      	movs	r4, #30
    2ff2:	251d      	movs	r5, #29
    2ff4:	910c      	str	r1, [sp, #48]	; 0x30
    2ff6:	2126      	movs	r1, #38	; 0x26
    2ff8:	950a      	str	r5, [sp, #40]	; 0x28
    2ffa:	9109      	str	r1, [sp, #36]	; 0x24
    2ffc:	211b      	movs	r1, #27
    2ffe:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    3002:	2321      	movs	r3, #33	; 0x21
                                               int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    3004:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    3008:	9106      	str	r1, [sp, #24]
    300a:	2119      	movs	r1, #25
    300c:	920f      	str	r2, [sp, #60]	; 0x3c
    300e:	2225      	movs	r2, #37	; 0x25
    3010:	e9cd 3407 	strd	r3, r4, [sp, #28]
    3014:	2322      	movs	r3, #34	; 0x22
    3016:	241c      	movs	r4, #28
    3018:	920b      	str	r2, [sp, #44]	; 0x2c
    301a:	2220      	movs	r2, #32
    301c:	9305      	str	r3, [sp, #20]
    301e:	231f      	movs	r3, #31
    3020:	e9cd 3403 	strd	r3, r4, [sp, #12]
    3024:	241a      	movs	r4, #26
    3026:	2323      	movs	r3, #35	; 0x23
    3028:	9400      	str	r4, [sp, #0]
                                               int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    302a:	f9bd 405c 	ldrsh.w	r4, [sp, #92]	; 0x5c
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    302e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    3032:	9410      	str	r4, [sp, #64]	; 0x40
    3034:	2224      	movs	r2, #36	; 0x24
                                               int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    3036:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    303a:	2112      	movs	r1, #18
    303c:	9411      	str	r4, [sp, #68]	; 0x44
    303e:	f002 f88f 	bl	5160 <tlx493d_gen_3_setWakeUpThresholdsAsInteger>
}
    3042:	b013      	add	sp, #76	; 0x4c
    3044:	bd30      	pop	{r4, r5, pc}
    3046:	bf00      	nop

00003048 <TLx493D_P3I8_setWakeUpThresholds>:
                                      double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    3048:	b510      	push	{r4, lr}
    return tlx493d_gen_3_setWakeUpThresholds(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    304a:	2118      	movs	r1, #24
                                      double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    304c:	b08e      	sub	sp, #56	; 0x38
    return tlx493d_gen_3_setWakeUpThresholds(sensor, P3I8_WU_EN_e, P3I8_WU_EN_CP_e, P3I8_WU_PAR_e,
    304e:	2417      	movs	r4, #23
    3050:	2225      	movs	r2, #37	; 0x25
    3052:	231d      	movs	r3, #29
    3054:	e9cd 140c 	strd	r1, r4, [sp, #48]	; 0x30
    3058:	2426      	movs	r4, #38	; 0x26
    305a:	211e      	movs	r1, #30
    305c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    3060:	e9cd 1408 	strd	r1, r4, [sp, #32]
    3064:	2221      	movs	r2, #33	; 0x21
    3066:	231b      	movs	r3, #27
    3068:	2422      	movs	r4, #34	; 0x22
    306a:	211c      	movs	r1, #28
    306c:	e9cd 3206 	strd	r3, r2, [sp, #24]
    3070:	e9cd 1404 	strd	r1, r4, [sp, #16]
    3074:	221f      	movs	r2, #31
    3076:	2319      	movs	r3, #25
    3078:	2420      	movs	r4, #32
    307a:	211a      	movs	r1, #26
    307c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3080:	e9cd 1400 	strd	r1, r4, [sp]
    3084:	2323      	movs	r3, #35	; 0x23
    3086:	2224      	movs	r2, #36	; 0x24
    3088:	2112      	movs	r1, #18
    308a:	f002 f8e1 	bl	5250 <tlx493d_gen_3_setWakeUpThresholds>
}
    308e:	b00e      	add	sp, #56	; 0x38
    3090:	bd10      	pop	{r4, pc}
    3092:	bf00      	nop

00003094 <TLx493D_P3I8_softwareReset>:
bool TLx493D_P3I8_softwareReset(TLx493D_t *sensor) {
    3094:	b510      	push	{r4, lr}
    3096:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, P3I8_RST_FLG_CLR_e, 1);
    3098:	2127      	movs	r1, #39	; 0x27
    309a:	2201      	movs	r2, #1
    309c:	f000 fe08 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_3_softwareReset(sensor, P3I8_SOFT_RST_e);
    30a0:	4620      	mov	r0, r4
    30a2:	2128      	movs	r1, #40	; 0x28
}
    30a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tlx493d_gen_3_softwareReset(sensor, P3I8_SOFT_RST_e);
    30a8:	f001 bff2 	b.w	5090 <tlx493d_gen_3_softwareReset>

000030ac <TLx493D_P3I8_calculateFuseParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateFuseParity");
    30ac:	4902      	ldr	r1, [pc, #8]	; (30b8 <TLx493D_P3I8_calculateFuseParity+0xc>)
uint8_t TLx493D_P3I8_calculateFuseParity(const TLx493D_t *sensor) {
    30ae:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateFuseParity");
    30b0:	f000 ff00 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    30b4:	2000      	movs	r0, #0
    30b6:	bd08      	pop	{r3, pc}
    30b8:	20000434 	.word	0x20000434

000030bc <TLx493D_P3I8_calculateBusParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateBusParity");
    30bc:	4902      	ldr	r1, [pc, #8]	; (30c8 <TLx493D_P3I8_calculateBusParity+0xc>)
uint8_t TLx493D_P3I8_calculateBusParity(const TLx493D_t *sensor) {
    30be:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateBusParity");
    30c0:	f000 fef8 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    30c4:	2000      	movs	r0, #0
    30c6:	bd08      	pop	{r3, pc}
    30c8:	20000420 	.word	0x20000420

000030cc <TLx493D_P3I8_calculateConfigurationParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateConfigurationParity");
    30cc:	4902      	ldr	r1, [pc, #8]	; (30d8 <TLx493D_P3I8_calculateConfigurationParity+0xc>)
uint8_t TLx493D_P3I8_calculateConfigurationParity(TLx493D_t *sensor) {
    30ce:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "calculateConfigurationParity");
    30d0:	f000 fef0 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    30d4:	2000      	movs	r0, #0
    30d6:	bd08      	pop	{r3, pc}
    30d8:	20000ac8 	.word	0x20000ac8

000030dc <TLx493D_P3I8_hasValidBusParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidBusParity");
    30dc:	4902      	ldr	r1, [pc, #8]	; (30e8 <TLx493D_P3I8_hasValidBusParity+0xc>)
bool TLx493D_P3I8_hasValidBusParity(const TLx493D_t *sensor) {
    30de:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidBusParity");
    30e0:	f000 fee8 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    30e4:	2000      	movs	r0, #0
    30e6:	bd08      	pop	{r3, pc}
    30e8:	200004d8 	.word	0x200004d8

000030ec <TLx493D_P3I8_hasValidConfigurationParity>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidConfigurationParity");
    30ec:	4902      	ldr	r1, [pc, #8]	; (30f8 <TLx493D_P3I8_hasValidConfigurationParity+0xc>)
bool TLx493D_P3I8_hasValidConfigurationParity(const TLx493D_t *sensor) {
    30ee:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidConfigurationParity");
    30f0:	f000 fee0 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    30f4:	2000      	movs	r0, #0
    30f6:	bd08      	pop	{r3, pc}
    30f8:	200004ec 	.word	0x200004ec

000030fc <TLx493D_P3I8_hasValidTBit>:
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    30fc:	4902      	ldr	r1, [pc, #8]	; (3108 <TLx493D_P3I8_hasValidTBit+0xc>)
bool TLx493D_P3I8_hasValidTBit(const TLx493D_t *sensor) {
    30fe:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "hasValidTBit");
    3100:	f000 fed8 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
}
    3104:	2000      	movs	r0, #0
    3106:	bd08      	pop	{r3, pc}
    3108:	20000ae8 	.word	0x20000ae8

0000310c <TLx493D_P3I8_selectIICAddress>:


uint8_t TLx493D_P3I8_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    (void) addr;
    
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "selectIICAddress");
    310c:	4902      	ldr	r1, [pc, #8]	; (3118 <TLx493D_P3I8_selectIICAddress+0xc>)
uint8_t TLx493D_P3I8_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    310e:	b508      	push	{r3, lr}
    tlx493d_errorFunctionNotSupportedForSensorType(sensor, "selectIICAddress");
    3110:	f000 fed0 	bl	3eb4 <tlx493d_errorFunctionNotSupportedForSensorType>
    return 0;
}
    3114:	2000      	movs	r0, #0
    3116:	bd08      	pop	{r3, pc}
    3118:	20000cc0 	.word	0x20000cc0

0000311c <TLx493D_P3I8_hasValidFuseParity>:
    return tlx493d_gen_3_hasValidFuseParity(sensor, P3I8_FUSE_PAR_FLG_e);
    311c:	210f      	movs	r1, #15
    311e:	f002 b9dd 	b.w	54dc <tlx493d_gen_3_hasValidFuseParity>
    3122:	bf00      	nop

00003124 <TLx493D_P3I8_hasValidWakeUpParity>:
    return tlx493d_gen_3_hasValidWakeUpParity(sensor, P3I8_WU_PAR_FLG_e );
    3124:	210d      	movs	r1, #13
    3126:	f002 b9e1 	b.w	54ec <tlx493d_gen_3_hasValidWakeUpParity>
    312a:	bf00      	nop

0000312c <TLx493D_P3I8_isInTestMode>:
    return tlx493d_gen_3_isInTestMode(sensor, P3I8_TEST_FLG_e );
    312c:	210a      	movs	r1, #10
    312e:	f002 b9e5 	b.w	54fc <tlx493d_gen_3_isInTestMode>
    3132:	bf00      	nop

00003134 <TLx493D_P3I8_calculateRawMagneticFieldAtTemperature>:


void TLx493D_P3I8_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_3_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    3134:	f002 ba24 	b.w	5580 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature>

00003138 <TLx493D_P3I8_getSensitivityScaleFactor>:
}


double TLx493D_P3I8_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_3_getSensitivityScaleFactor(sensor, TLx493D_HAS_X4_e, P3I8_SHORT_EN_e, P3I8_XTR_SHORT_EN_e);
    3138:	2317      	movs	r3, #23
    313a:	2218      	movs	r2, #24
    313c:	2102      	movs	r1, #2
    313e:	f002 b9f7 	b.w	5530 <tlx493d_gen_3_getSensitivityScaleFactor>
    3142:	bf00      	nop

00003144 <TLx493D_P3I8_printRegisters>:
}


void TLx493D_P3I8_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_P3I8_REGISTER_HEADLINE); 
    3144:	4901      	ldr	r1, [pc, #4]	; (314c <TLx493D_P3I8_printRegisters+0x8>)
    3146:	f7fe bbf7 	b.w	1938 <logPrintRegisters>
    314a:	bf00      	nop
    314c:	20000af8 	.word	0x20000af8

00003150 <TLx493D_P3I8_setTrigger>:
                                                    : tlx493d_gen_3_setTrigger(sensor, P3I8_TRIGGER_SEL_e, val);
    3150:	2905      	cmp	r1, #5
    3152:	d101      	bne.n	3158 <TLx493D_P3I8_setTrigger+0x8>
}
    3154:	2000      	movs	r0, #0
    3156:	4770      	bx	lr
                                                    : tlx493d_gen_3_setTrigger(sensor, P3I8_TRIGGER_SEL_e, val);
    3158:	460a      	mov	r2, r1
    315a:	2113      	movs	r1, #19
    315c:	f001 bebe 	b.w	4edc <tlx493d_gen_3_setTrigger>

00003160 <TLx493D_P3I8_calculateRawMagneticFieldAndTemperature>:
void TLx493D_P3I8_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    3160:	b530      	push	{r4, r5, lr}
    3162:	b087      	sub	sp, #28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, x, y, z);
    3164:	2503      	movs	r5, #3
void TLx493D_P3I8_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    3166:	4604      	mov	r4, r0
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, x, y, z);
    3168:	9305      	str	r3, [sp, #20]
    316a:	2304      	movs	r3, #4
    316c:	9500      	str	r5, [sp, #0]
void TLx493D_P3I8_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    316e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_3_calculateRawMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, x, y, z);
    3170:	e9cd 1203 	strd	r1, r2, [sp, #12]
    3174:	2205      	movs	r2, #5
    3176:	2100      	movs	r1, #0
    3178:	e9cd 3201 	strd	r3, r2, [sp, #4]
    317c:	2201      	movs	r2, #1
    317e:	2302      	movs	r3, #2
    3180:	f001 fd14 	bl	4bac <tlx493d_gen_3_calculateRawMagneticField>
    tlx493d_gen_3_calculateRawTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temperature);
    3184:	462b      	mov	r3, r5
    3186:	2207      	movs	r2, #7
    3188:	2106      	movs	r1, #6
    318a:	4620      	mov	r0, r4
}
    318c:	b007      	add	sp, #28
    318e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_3_calculateRawTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temperature);
    3192:	f001 bd09 	b.w	4ba8 <tlx493d_gen_3_calculateRawTemperature>
    3196:	bf00      	nop

00003198 <TLx493D_P3I8_calculateMagneticFieldAndTemperature>:
void TLx493D_P3I8_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	b089      	sub	sp, #36	; 0x24
    tlx493d_gen_3_calculateMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, x, y, z);
    319c:	2607      	movs	r6, #7
    319e:	2506      	movs	r5, #6
void TLx493D_P3I8_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    31a0:	4604      	mov	r4, r0
    tlx493d_gen_3_calculateMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, x, y, z);
    31a2:	9307      	str	r3, [sp, #28]
    31a4:	2305      	movs	r3, #5
void TLx493D_P3I8_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    31a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    tlx493d_gen_3_calculateMagneticField(sensor, P3I8_BX_MSBS_e, P3I8_BX_LSBS_e, P3I8_BY_MSBS_e, P3I8_BY_LSBS_e, P3I8_BZ_MSBS_e, P3I8_BZ_LSBS_e, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, x, y, z);
    31a8:	9302      	str	r3, [sp, #8]
    31aa:	2303      	movs	r3, #3
    31ac:	e9cd 1205 	strd	r1, r2, [sp, #20]
    31b0:	2204      	movs	r2, #4
    31b2:	2100      	movs	r1, #0
    31b4:	e9cd 3200 	strd	r3, r2, [sp]
    31b8:	e9cd 5603 	strd	r5, r6, [sp, #12]
    31bc:	2302      	movs	r3, #2
    31be:	2201      	movs	r2, #1
    31c0:	f001 fd2e 	bl	4c20 <tlx493d_gen_3_calculateMagneticField>
    tlx493d_gen_3_calculateTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temp);
    31c4:	463b      	mov	r3, r7
    31c6:	4632      	mov	r2, r6
    31c8:	4629      	mov	r1, r5
    31ca:	4620      	mov	r0, r4
}
    31cc:	b009      	add	sp, #36	; 0x24
    31ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tlx493d_gen_3_calculateTemperature(sensor, P3I8_TEMP_MSBS_e, P3I8_TEMP_LSBS_e, temp);
    31d2:	f001 bcf9 	b.w	4bc8 <tlx493d_gen_3_calculateTemperature>
    31d6:	bf00      	nop

000031d8 <TLx493D_W2B6_hasWakeUp>:


bool TLx493D_W2B6_hasWakeUp(const TLx493D_t *sensor) {
    (void) sensor;
    return true;
}
    31d8:	2001      	movs	r0, #1
    31da:	4770      	bx	lr

000031dc <TLx493D_W2B6_setResetValues>:
bool TLx493D_W2B6_hasValidTBit(const TLx493D_t *sensor) {
    return tlx493d_gen_2_hasValidTBit(sensor, W2B6_T_e);
}


void TLx493D_W2B6_setResetValues(TLx493D_t *sensor) {
    31dc:	b410      	push	{r4}
    sensor->regMap[0x07] = 0x80;
    31de:	2380      	movs	r3, #128	; 0x80
    31e0:	6804      	ldr	r4, [r0, #0]
    sensor->regMap[0x08] = 0x7F;
    31e2:	217f      	movs	r1, #127	; 0x7f
    sensor->regMap[0x09] = 0x80;
    sensor->regMap[0x0A] = 0x7F;
    sensor->regMap[0x0B] = 0x80;
    sensor->regMap[0x0C] = 0x7F;
    sensor->regMap[0x0D] = 0x38;
    31e4:	2238      	movs	r2, #56	; 0x38
    sensor->regMap[0x07] = 0x80;
    31e6:	71e3      	strb	r3, [r4, #7]
    sensor->regMap[0x0E] = 0x38;
    sensor->regMap[0x0F] = 0x38;  
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    31e8:	f04f 0c01 	mov.w	ip, #1
    sensor->regMap[0x08] = 0x7F;
    31ec:	6804      	ldr	r4, [r0, #0]
    31ee:	7221      	strb	r1, [r4, #8]
    sensor->regMap[0x09] = 0x80;
    31f0:	6804      	ldr	r4, [r0, #0]
    31f2:	7263      	strb	r3, [r4, #9]
    sensor->regMap[0x0A] = 0x7F;
    31f4:	6804      	ldr	r4, [r0, #0]
    31f6:	72a1      	strb	r1, [r4, #10]
    sensor->regMap[0x0B] = 0x80;
    31f8:	6804      	ldr	r4, [r0, #0]
    31fa:	72e3      	strb	r3, [r4, #11]
    sensor->regMap[0x0C] = 0x7F;
    31fc:	6804      	ldr	r4, [r0, #0]
    31fe:	7321      	strb	r1, [r4, #12]
    sensor->regMap[0x0D] = 0x38;
    3200:	6801      	ldr	r1, [r0, #0]
    3202:	734a      	strb	r2, [r1, #13]
    sensor->regMap[0x0E] = 0x38;
    3204:	6801      	ldr	r1, [r0, #0]
    3206:	738a      	strb	r2, [r1, #14]
    sensor->regMap[0x0F] = 0x38;  
    3208:	6801      	ldr	r1, [r0, #0]
    320a:	73ca      	strb	r2, [r1, #15]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    320c:	2200      	movs	r2, #0
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    320e:	6801      	ldr	r1, [r0, #0]
    3210:	f881 c010 	strb.w	ip, [r1, #16]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    3214:	6801      	ldr	r1, [r0, #0]
    3216:	744b      	strb	r3, [r1, #17]
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    3218:	6803      	ldr	r3, [r0, #0]
    321a:	74da      	strb	r2, [r3, #19]
}
    321c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3220:	4770      	bx	lr
    3222:	bf00      	nop

00003224 <TLx493D_W2B6_init>:
bool TLx493D_W2B6_init(TLx493D_t *sensor) {
    3224:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_W2B6_regDef, &TLx493D_W2B6_commonFunctions, TLx493D_W2B6_e, TLx493D_I2C_e);
    3226:	2104      	movs	r1, #4
bool TLx493D_W2B6_init(TLx493D_t *sensor) {
    3228:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_W2B6_regDef, &TLx493D_W2B6_commonFunctions, TLx493D_W2B6_e, TLx493D_I2C_e);
    322a:	2400      	movs	r4, #0
    322c:	4b04      	ldr	r3, [pc, #16]	; (3240 <TLx493D_W2B6_init+0x1c>)
    322e:	4a05      	ldr	r2, [pc, #20]	; (3244 <TLx493D_W2B6_init+0x20>)
    3230:	e9cd 1400 	strd	r1, r4, [sp]
    3234:	2117      	movs	r1, #23
    3236:	f000 fb9d 	bl	3974 <tlx493d_common_init>
}
    323a:	b002      	add	sp, #8
    323c:	bd10      	pop	{r4, pc}
    323e:	bf00      	nop
    3240:	20002740 	.word	0x20002740
    3244:	2000280c 	.word	0x2000280c

00003248 <TLx493D_W2B6_deinit>:
    return tlx493d_common_deinit(sensor);
    3248:	f000 bbc4 	b.w	39d4 <tlx493d_common_deinit>

0000324c <TLx493D_W2B6_readRegisters>:
    return tlx493d_common_readRegisters(sensor);
    324c:	f000 bbd0 	b.w	39f0 <tlx493d_common_readRegisters>

00003250 <TLx493D_W2B6_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    3250:	f000 bbee 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

00003254 <TLx493D_W2B6_calculateRawTemperature>:
void TLx493D_W2B6_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    3254:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateRawTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temperature);
    3256:	2206      	movs	r2, #6
    3258:	2103      	movs	r1, #3
    325a:	f000 be5f 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    325e:	bf00      	nop

00003260 <TLx493D_W2B6_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    3260:	f000 bc78 	b.w	3b54 <tlx493d_common_getRawTemperature>

00003264 <TLx493D_W2B6_calculateRawMagneticField>:
void TLx493D_W2B6_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    3264:	b530      	push	{r4, r5, lr}
    3266:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    3268:	2508      	movs	r5, #8
    326a:	2405      	movs	r4, #5
    326c:	9305      	str	r3, [sp, #20]
    326e:	2301      	movs	r3, #1
    3270:	9400      	str	r4, [sp, #0]
    3272:	e9cd 1203 	strd	r1, r2, [sp, #12]
    3276:	2202      	movs	r2, #2
    3278:	2100      	movs	r1, #0
    327a:	e9cd 2501 	strd	r2, r5, [sp, #4]
    327e:	2204      	movs	r2, #4
    3280:	f000 fe4e 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
}
    3284:	b007      	add	sp, #28
    3286:	bd30      	pop	{r4, r5, pc}

00003288 <TLx493D_W2B6_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    3288:	f000 bc74 	b.w	3b74 <tlx493d_common_getRawMagneticField>

0000328c <TLx493D_W2B6_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    328c:	f000 bc88 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00003290 <TLx493D_W2B6_calculateTemperature>:
void TLx493D_W2B6_calculateTemperature(TLx493D_t *sensor, double *temp) {
    3290:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temp);
    3292:	2206      	movs	r2, #6
    3294:	2103      	movs	r1, #3
    3296:	f000 be53 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    329a:	bf00      	nop

0000329c <TLx493D_W2B6_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    329c:	f000 bc9a 	b.w	3bd4 <tlx493d_common_getTemperature>

000032a0 <TLx493D_W2B6_calculateMagneticField>:
void TLx493D_W2B6_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    32a0:	b530      	push	{r4, r5, lr}
    32a2:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    32a4:	2508      	movs	r5, #8
    32a6:	2405      	movs	r4, #5
    32a8:	9305      	str	r3, [sp, #20]
    32aa:	2301      	movs	r3, #1
    32ac:	9400      	str	r4, [sp, #0]
    32ae:	e9cd 1203 	strd	r1, r2, [sp, #12]
    32b2:	2202      	movs	r2, #2
    32b4:	2100      	movs	r1, #0
    32b6:	e9cd 2501 	strd	r2, r5, [sp, #4]
    32ba:	2204      	movs	r2, #4
    32bc:	f000 fe6c 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
}
    32c0:	b007      	add	sp, #28
    32c2:	bd30      	pop	{r4, r5, pc}

000032c4 <TLx493D_W2B6_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    32c4:	f000 bc96 	b.w	3bf4 <tlx493d_common_getMagneticField>

000032c8 <TLx493D_W2B6_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    32c8:	f000 bcaa 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

000032cc <TLx493D_W2B6_setMeasurement>:
bool TLx493D_W2B6_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    32cc:	b510      	push	{r4, lr}
    32ce:	460c      	mov	r4, r1
    32d0:	b082      	sub	sp, #8
    return tlx493d_gen_2_setMeasurement(sensor, W2B6_DT_e, W2B6_AM_e, W2B6_CP_e, val);
    32d2:	2325      	movs	r3, #37	; 0x25
    32d4:	2221      	movs	r2, #33	; 0x21
    32d6:	2120      	movs	r1, #32
    32d8:	9400      	str	r4, [sp, #0]
    32da:	f000 fee7 	bl	40ac <tlx493d_gen_2_setMeasurement>
}
    32de:	b002      	add	sp, #8
    32e0:	bd10      	pop	{r4, pc}
    32e2:	bf00      	nop

000032e4 <TLx493D_W2B6_setTrigger>:
bool TLx493D_W2B6_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t val) {
    32e4:	460b      	mov	r3, r1
    return tlx493d_gen_2_setTrigger(sensor, W2B6_TRIG_e, W2B6_CP_e, val);
    32e6:	2225      	movs	r2, #37	; 0x25
    32e8:	2122      	movs	r1, #34	; 0x22
    32ea:	f000 bf01 	b.w	40f0 <tlx493d_gen_2_setTrigger>
    32ee:	bf00      	nop

000032f0 <TLx493D_W2B6_setSensitivity>:
bool TLx493D_W2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    32f0:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, W2B6_X2_e, 0, W2B6_CP_e, val);
    32f2:	2425      	movs	r4, #37	; 0x25
bool TLx493D_W2B6_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    32f4:	b082      	sub	sp, #8
    return tlx493d_gen_2_setSensitivity(sensor, TLx493D_HAS_X2_e, W2B6_X2_e, 0, W2B6_CP_e, val);
    32f6:	2300      	movs	r3, #0
    32f8:	2223      	movs	r2, #35	; 0x23
    32fa:	e9cd 4100 	strd	r4, r1, [sp]
    32fe:	2101      	movs	r1, #1
    3300:	f000 ff16 	bl	4130 <tlx493d_gen_2_setSensitivity>
}
    3304:	b002      	add	sp, #8
    3306:	bd10      	pop	{r4, pc}

00003308 <TLx493D_W2B6_setDefaultConfig>:
    return tlx493d_gen_2_setDefaultConfig(sensor, W2B6_CP_e, W2B6_CA_e, W2B6_INT_e);
    3308:	232a      	movs	r3, #42	; 0x2a
    330a:	2229      	movs	r2, #41	; 0x29
    330c:	2125      	movs	r1, #37	; 0x25
    330e:	f000 bf3f 	b.w	4190 <tlx493d_gen_2_setDefaultConfig>
    3312:	bf00      	nop

00003314 <TLx493D_W2B6_setIICAddress>:
bool TLx493D_W2B6_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    3314:	460b      	mov	r3, r1
    return tlx493d_gen_2_setIICAddress(sensor, W2B6_IICADR_e, W2B6_FP_e, address);
    3316:	2226      	movs	r2, #38	; 0x26
    3318:	2127      	movs	r1, #39	; 0x27
    331a:	f000 bf79 	b.w	4210 <tlx493d_gen_2_setIICAddress>
    331e:	bf00      	nop

00003320 <TLx493D_W2B6_enable1ByteReadMode>:
bool TLx493D_W2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    3320:	b510      	push	{r4, lr}
    return tlx493d_gen_2_set1ByteReadMode(sensor, W2B6_PR_e, W2B6_FP_e, W2B6_PRD_e, 1);
    3322:	2401      	movs	r4, #1
bool TLx493D_W2B6_enable1ByteReadMode(TLx493D_t *sensor) {
    3324:	b082      	sub	sp, #8
    return tlx493d_gen_2_set1ByteReadMode(sensor, W2B6_PR_e, W2B6_FP_e, W2B6_PRD_e, 1);
    3326:	232c      	movs	r3, #44	; 0x2c
    3328:	2226      	movs	r2, #38	; 0x26
    332a:	2128      	movs	r1, #40	; 0x28
    332c:	9400      	str	r4, [sp, #0]
    332e:	f001 fa01 	bl	4734 <tlx493d_gen_2_set1ByteReadMode>
}
    3332:	b002      	add	sp, #8
    3334:	bd10      	pop	{r4, pc}
    3336:	bf00      	nop

00003338 <TLx493D_W2B6_enableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, W2B6_CA_e, W2B6_FP_e, 0);
    3338:	2300      	movs	r3, #0
    333a:	2226      	movs	r2, #38	; 0x26
    333c:	2129      	movs	r1, #41	; 0x29
    333e:	f000 bf8d 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    3342:	bf00      	nop

00003344 <TLx493D_W2B6_disableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, W2B6_CA_e, W2B6_FP_e, 1);
    3344:	2301      	movs	r3, #1
    3346:	2226      	movs	r2, #38	; 0x26
    3348:	2129      	movs	r1, #41	; 0x29
    334a:	f000 bf87 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    334e:	bf00      	nop

00003350 <TLx493D_W2B6_enableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, W2B6_INT_e, W2B6_FP_e, 0);
    3350:	2300      	movs	r3, #0
    3352:	2226      	movs	r2, #38	; 0x26
    3354:	212a      	movs	r1, #42	; 0x2a
    3356:	f000 bf99 	b.w	428c <tlx493d_gen_2_setInterrupt>
    335a:	bf00      	nop

0000335c <TLx493D_W2B6_disableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, W2B6_INT_e, W2B6_FP_e, 1);
    335c:	2301      	movs	r3, #1
    335e:	2226      	movs	r2, #38	; 0x26
    3360:	212a      	movs	r1, #42	; 0x2a
    3362:	f000 bf93 	b.w	428c <tlx493d_gen_2_setInterrupt>
    3366:	bf00      	nop

00003368 <TLx493D_W2B6_setPowerMode>:
bool TLx493D_W2B6_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    3368:	460b      	mov	r3, r1
    return tlx493d_gen_2_setPowerMode(sensor, W2B6_MODE_e, W2B6_FP_e, mode);
    336a:	2226      	movs	r2, #38	; 0x26
    336c:	212b      	movs	r1, #43	; 0x2b
    336e:	f000 bfa5 	b.w	42bc <tlx493d_gen_2_setPowerMode>
    3372:	bf00      	nop

00003374 <TLx493D_W2B6_setUpdateRate>:
bool TLx493D_W2B6_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    3374:	460b      	mov	r3, r1
    return tlx493d_gen_2_setUpdateRate(sensor, W2B6_FP_e, W2B6_PRD_e, val);
    3376:	222c      	movs	r2, #44	; 0x2c
    3378:	2126      	movs	r1, #38	; 0x26
    337a:	f001 b81b 	b.w	43b4 <tlx493d_gen_2_setUpdateRate>
    337e:	bf00      	nop

00003380 <TLx493D_W2B6_hasValidData>:
    return tlx493d_gen_2_hasValidData(sensor, W2B6_MODE_e, W2B6_PD3_e, W2B6_PD0_e);
    3380:	230e      	movs	r3, #14
    3382:	220d      	movs	r2, #13
    3384:	212b      	movs	r1, #43	; 0x2b
    3386:	f001 b853 	b.w	4430 <tlx493d_gen_2_hasValidData>
    338a:	bf00      	nop

0000338c <TLx493D_W2B6_isFunctional>:
    return tlx493d_gen_2_isFunctional(sensor);
    338c:	f001 b87c 	b.w	4488 <tlx493d_gen_2_isFunctional>

00003390 <TLx493D_W2B6_isWakeUpEnabled>:
    return tlx493d_gen_2_isWakeUpEnabled(sensor, W2B6_WA_e);
    3390:	2116      	movs	r1, #22
    3392:	f001 b889 	b.w	44a8 <tlx493d_gen_2_isWakeUpEnabled>
    3396:	bf00      	nop

00003398 <TLx493D_W2B6_enableWakeUpMode>:
    return tlx493d_gen_2_enableWakeUpMode(sensor, W2B6_TST_e, W2B6_WU_e, W2B6_CP_e);
    3398:	2325      	movs	r3, #37	; 0x25
    339a:	2217      	movs	r2, #23
    339c:	211a      	movs	r1, #26
    339e:	f001 b8c1 	b.w	4524 <tlx493d_gen_2_enableWakeUpMode>
    33a2:	bf00      	nop

000033a4 <TLx493D_W2B6_disableWakeUpMode>:
    return tlx493d_gen_2_disableWakeUpMode(sensor, W2B6_WU_e, W2B6_CP_e);
    33a4:	2225      	movs	r2, #37	; 0x25
    33a6:	2117      	movs	r1, #23
    33a8:	f001 b8f4 	b.w	4594 <tlx493d_gen_2_disableWakeUpMode>

000033ac <TLx493D_W2B6_setWakeUpThresholdsAsInteger>:
bool TLx493D_W2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    33ac:	b530      	push	{r4, r5, lr}
    33ae:	b091      	sub	sp, #68	; 0x44
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2B6_CP_e,
    33b0:	251e      	movs	r5, #30
bool TLx493D_W2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    33b2:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2B6_CP_e,
    33b6:	930c      	str	r3, [sp, #48]	; 0x30
    33b8:	2314      	movs	r3, #20
    33ba:	940d      	str	r4, [sp, #52]	; 0x34
    33bc:	241b      	movs	r4, #27
    33be:	9509      	str	r5, [sp, #36]	; 0x24
    33c0:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
    33c4:	2115      	movs	r1, #21
    33c6:	221f      	movs	r2, #31
    33c8:	9108      	str	r1, [sp, #32]
    33ca:	2113      	movs	r1, #19
    33cc:	e9cd 1404 	strd	r1, r4, [sp, #16]
    33d0:	2418      	movs	r4, #24
    33d2:	2111      	movs	r1, #17
    33d4:	e9cd 3206 	strd	r3, r2, [sp, #24]
    33d8:	e9cd 1400 	strd	r1, r4, [sp]
    33dc:	221c      	movs	r2, #28
bool TLx493D_W2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    33de:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2B6_CP_e,
    33e2:	2312      	movs	r3, #18
    33e4:	2125      	movs	r1, #37	; 0x25
    33e6:	940e      	str	r4, [sp, #56]	; 0x38
bool TLx493D_W2B6_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    33e8:	f9bd 4058 	ldrsh.w	r4, [sp, #88]	; 0x58
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2B6_CP_e,
    33ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
    33f0:	2319      	movs	r3, #25
    33f2:	2210      	movs	r2, #16
    33f4:	940f      	str	r4, [sp, #60]	; 0x3c
    33f6:	f001 f911 	bl	461c <tlx493d_gen_2_setWakeUpThresholdsAsInteger>
}
    33fa:	b011      	add	sp, #68	; 0x44
    33fc:	bd30      	pop	{r4, r5, pc}
    33fe:	bf00      	nop

00003400 <TLx493D_W2B6_setWakeUpThresholds>:
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    3400:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setWakeUpThresholds(sensor, W2B6_CP_e,
    3402:	2323      	movs	r3, #35	; 0x23
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    3404:	b08e      	sub	sp, #56	; 0x38
    return tlx493d_gen_2_setWakeUpThresholds(sensor, W2B6_CP_e,
    3406:	2400      	movs	r4, #0
    3408:	2101      	movs	r1, #1
    340a:	221e      	movs	r2, #30
    340c:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
    3410:	2415      	movs	r4, #21
    3412:	231f      	movs	r3, #31
    3414:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
    3418:	2114      	movs	r1, #20
    341a:	221b      	movs	r2, #27
    341c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    3420:	2413      	movs	r4, #19
    3422:	231c      	movs	r3, #28
    3424:	e9cd 2105 	strd	r2, r1, [sp, #20]
    3428:	2112      	movs	r1, #18
    342a:	2218      	movs	r2, #24
    342c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    3430:	2411      	movs	r4, #17
    3432:	2319      	movs	r3, #25
    3434:	e9cd 2101 	strd	r2, r1, [sp, #4]
    3438:	2210      	movs	r2, #16
    343a:	2125      	movs	r1, #37	; 0x25
    343c:	9400      	str	r4, [sp, #0]
    343e:	f001 fab3 	bl	49a8 <tlx493d_gen_2_setWakeUpThresholds>
}
    3442:	b00e      	add	sp, #56	; 0x38
    3444:	bd10      	pop	{r4, pc}
    3446:	bf00      	nop

00003448 <TLx493D_W2B6_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    3448:	4902      	ldr	r1, [pc, #8]	; (3454 <TLx493D_W2B6_softwareReset+0xc>)
bool TLx493D_W2B6_softwareReset(TLx493D_t *sensor) {
    344a:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    344c:	f000 fcea 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    3450:	2000      	movs	r0, #0
    3452:	bd08      	pop	{r3, pc}
    3454:	200006c8 	.word	0x200006c8

00003458 <TLx493D_W2B6_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    3458:	4902      	ldr	r1, [pc, #8]	; (3464 <TLx493D_W2B6_hasValidWakeUpParity+0xc>)
bool TLx493D_W2B6_hasValidWakeUpParity(const TLx493D_t *sensor) {
    345a:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    345c:	f000 fce2 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    3460:	2000      	movs	r0, #0
    3462:	bd08      	pop	{r3, pc}
    3464:	20000508 	.word	0x20000508

00003468 <TLx493D_W2B6_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    3468:	4902      	ldr	r1, [pc, #8]	; (3474 <TLx493D_W2B6_isInTestMode+0xc>)
bool TLx493D_W2B6_isInTestMode(const TLx493D_t *sensor) {
    346a:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    346c:	f000 fcda 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    3470:	2000      	movs	r0, #0
    3472:	bd08      	pop	{r3, pc}
    3474:	2000052c 	.word	0x2000052c

00003478 <TLx493D_W2B6_calculateFuseParity>:
    return tlx493d_gen_2_calculateFuseParity(sensor, W2B6_FP_e, W2B6_PRD_e);
    3478:	222c      	movs	r2, #44	; 0x2c
    347a:	2126      	movs	r1, #38	; 0x26
    347c:	f001 b940 	b.w	4700 <tlx493d_gen_2_calculateFuseParity>

00003480 <TLx493D_W2B6_calculateBusParity>:
    return tlx493d_gen_2_calculateBusParity(sensor, 5);
    3480:	2105      	movs	r1, #5
    3482:	f001 b971 	b.w	4768 <tlx493d_gen_2_calculateBusParity>
    3486:	bf00      	nop

00003488 <TLx493D_W2B6_calculateConfigurationParity>:
    return tlx493d_gen_2_calculateConfigurationParityWakeUp(sensor, W2B6_CP_e);
    3488:	2125      	movs	r1, #37	; 0x25
    348a:	f001 b993 	b.w	47b4 <tlx493d_gen_2_calculateConfigurationParityWakeUp>
    348e:	bf00      	nop

00003490 <TLx493D_W2B6_hasValidFuseParity>:
    return tlx493d_gen_2_hasValidFuseParity(sensor, W2B6_FF_e);
    3490:	210a      	movs	r1, #10
    3492:	f001 b9bb 	b.w	480c <tlx493d_gen_2_hasValidFuseParity>
    3496:	bf00      	nop

00003498 <TLx493D_W2B6_hasValidBusParity>:
    return tlx493d_gen_2_hasValidBusParity(sensor, W2B6_P_e);
    3498:	2109      	movs	r1, #9
    349a:	f001 b9bf 	b.w	481c <tlx493d_gen_2_hasValidBusParity>
    349e:	bf00      	nop

000034a0 <TLx493D_W2B6_hasValidConfigurationParity>:
    return tlx493d_gen_2_hasValidConfigurationParity(sensor, W2B6_CF_e);
    34a0:	210b      	movs	r1, #11
    34a2:	f001 b9cf 	b.w	4844 <tlx493d_gen_2_hasValidConfigurationParity>
    34a6:	bf00      	nop

000034a8 <TLx493D_W2B6_hasValidTBit>:
    return tlx493d_gen_2_hasValidTBit(sensor, W2B6_T_e);
    34a8:	210c      	movs	r1, #12
    34aa:	f001 b9d3 	b.w	4854 <tlx493d_gen_2_hasValidTBit>
    34ae:	bf00      	nop

000034b0 <TLx493D_W2B6_selectIICAddress>:


uint8_t TLx493D_W2B6_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_2_selectIICAddress(sensor, addr);
    34b0:	f001 b9d8 	b.w	4864 <tlx493d_gen_2_selectIICAddress>

000034b4 <TLx493D_W2B6_calculateRawMagneticFieldAtTemperature>:


void TLx493D_W2B6_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_2_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    34b4:	f001 ba18 	b.w	48e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>

000034b8 <TLx493D_W2B6_getSensitivityScaleFactor>:
}


double TLx493D_W2B6_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_2_getSensitivityScaleFactor(sensor, TLx493D_HAS_X2_e, W2B6_X2_e, 0);
    34b8:	2300      	movs	r3, #0
    34ba:	2223      	movs	r2, #35	; 0x23
    34bc:	2101      	movs	r1, #1
    34be:	f001 b9e3 	b.w	4888 <tlx493d_gen_2_getSensitivityScaleFactor>
    34c2:	bf00      	nop

000034c4 <TLx493D_W2B6_printRegisters>:
}


void TLx493D_W2B6_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_W2B6_REGISTER_HEADLINE); 
    34c4:	4901      	ldr	r1, [pc, #4]	; (34cc <TLx493D_W2B6_printRegisters+0x8>)
    34c6:	f7fe ba37 	b.w	1938 <logPrintRegisters>
    34ca:	bf00      	nop
    34cc:	20000954 	.word	0x20000954

000034d0 <TLx493D_W2B6_calculateMagneticFieldAndTemperature>:
void TLx493D_W2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    34d0:	b530      	push	{r4, r5, lr}
    34d2:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    34d4:	2505      	movs	r5, #5
void TLx493D_W2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    34d6:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    34d8:	9305      	str	r3, [sp, #20]
    34da:	2302      	movs	r3, #2
    34dc:	9500      	str	r5, [sp, #0]
void TLx493D_W2B6_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    34de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    34e0:	e9cd 1203 	strd	r1, r2, [sp, #12]
    34e4:	2208      	movs	r2, #8
    34e6:	2100      	movs	r1, #0
    34e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    34ec:	2204      	movs	r2, #4
    34ee:	2301      	movs	r3, #1
    34f0:	f000 fd52 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
    tlx493d_gen_2_calculateTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temp);
    34f4:	462b      	mov	r3, r5
    34f6:	2206      	movs	r2, #6
    34f8:	2103      	movs	r1, #3
    34fa:	4620      	mov	r0, r4
}
    34fc:	b007      	add	sp, #28
    34fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temp);
    3502:	f000 bd1d 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    3506:	bf00      	nop

00003508 <TLx493D_W2B6_calculateRawMagneticFieldAndTemperature>:
void TLx493D_W2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    3508:	b530      	push	{r4, r5, lr}
    350a:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    350c:	2505      	movs	r5, #5
void TLx493D_W2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    350e:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    3510:	9305      	str	r3, [sp, #20]
    3512:	2302      	movs	r3, #2
    3514:	9500      	str	r5, [sp, #0]
void TLx493D_W2B6_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    3516:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2B6_BX_MSBS_e, W2B6_BX_LSBS_e, W2B6_BY_MSBS_e, W2B6_BY_LSBS_e, W2B6_BZ_MSBS_e, W2B6_BZ_LSBS_e, x, y, z);
    3518:	e9cd 1203 	strd	r1, r2, [sp, #12]
    351c:	2208      	movs	r2, #8
    351e:	2100      	movs	r1, #0
    3520:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3524:	2204      	movs	r2, #4
    3526:	2301      	movs	r3, #1
    3528:	f000 fcfa 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
    tlx493d_gen_2_calculateRawTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temperature);
    352c:	462b      	mov	r3, r5
    352e:	2206      	movs	r2, #6
    3530:	2103      	movs	r1, #3
    3532:	4620      	mov	r0, r4
}
    3534:	b007      	add	sp, #28
    3536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateRawTemperature(sensor, W2B6_TEMP_MSBS_e, W2B6_TEMP_LSBS_e, temperature);
    353a:	f000 bcef 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    353e:	bf00      	nop

00003540 <TLx493D_W2BW_hasWakeUp>:


bool TLx493D_W2BW_hasWakeUp(const TLx493D_t *sensor) {
    (void) sensor;
    return true;
}
    3540:	2001      	movs	r0, #1
    3542:	4770      	bx	lr

00003544 <TLx493D_W2BW_setResetValues>:
bool TLx493D_W2BW_hasValidTBit(const TLx493D_t *sensor) {
    return tlx493d_gen_2_hasValidTBit(sensor, W2BW_T_e);
}


void TLx493D_W2BW_setResetValues(TLx493D_t *sensor) {
    3544:	b410      	push	{r4}
    sensor->regMap[0x07] = 0x80;
    3546:	2380      	movs	r3, #128	; 0x80
    3548:	6804      	ldr	r4, [r0, #0]
    sensor->regMap[0x08] = 0x7F;
    354a:	217f      	movs	r1, #127	; 0x7f
    sensor->regMap[0x09] = 0x80;
    sensor->regMap[0x0A] = 0x7F;
    sensor->regMap[0x0B] = 0x80;
    sensor->regMap[0x0C] = 0x7F;
    sensor->regMap[0x0D] = 0x38;
    354c:	2238      	movs	r2, #56	; 0x38
    sensor->regMap[0x07] = 0x80;
    354e:	71e3      	strb	r3, [r4, #7]
    sensor->regMap[0x0E] = 0x38;
    sensor->regMap[0x0F] = 0x38;  
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    3550:	f04f 0c01 	mov.w	ip, #1
    sensor->regMap[0x08] = 0x7F;
    3554:	6804      	ldr	r4, [r0, #0]
    3556:	7221      	strb	r1, [r4, #8]
    sensor->regMap[0x09] = 0x80;
    3558:	6804      	ldr	r4, [r0, #0]
    355a:	7263      	strb	r3, [r4, #9]
    sensor->regMap[0x0A] = 0x7F;
    355c:	6804      	ldr	r4, [r0, #0]
    355e:	72a1      	strb	r1, [r4, #10]
    sensor->regMap[0x0B] = 0x80;
    3560:	6804      	ldr	r4, [r0, #0]
    3562:	72e3      	strb	r3, [r4, #11]
    sensor->regMap[0x0C] = 0x7F;
    3564:	6804      	ldr	r4, [r0, #0]
    3566:	7321      	strb	r1, [r4, #12]
    sensor->regMap[0x0D] = 0x38;
    3568:	6801      	ldr	r1, [r0, #0]
    356a:	734a      	strb	r2, [r1, #13]
    sensor->regMap[0x0E] = 0x38;
    356c:	6801      	ldr	r1, [r0, #0]
    356e:	738a      	strb	r2, [r1, #14]
    sensor->regMap[0x0F] = 0x38;  
    3570:	6801      	ldr	r1, [r0, #0]
    3572:	73ca      	strb	r2, [r1, #15]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    3574:	2200      	movs	r2, #0
    sensor->regMap[0x10] = 0x01; /** CONFIG */
    3576:	6801      	ldr	r1, [r0, #0]
    3578:	f881 c010 	strb.w	ip, [r1, #16]
    sensor->regMap[0x11] = 0x80; /** MOD1 : A0 : 0x80, A1 : 0x20, A2 : 0x40, A3 : 0xE0 */
    357c:	6801      	ldr	r1, [r0, #0]
    357e:	744b      	strb	r3, [r1, #17]
    sensor->regMap[0x13] = 0x00; /** MOD2 */
    3580:	6803      	ldr	r3, [r0, #0]
    3582:	74da      	strb	r2, [r3, #19]
    sensor->regMap[0x14] = 0x00; /** CONFIG2 */
    3584:	6803      	ldr	r3, [r0, #0]
    3586:	751a      	strb	r2, [r3, #20]

    /** W2BW_X4_READWRITE_e */
    sensor->regMap[0x17] = 0x00;
    3588:	6803      	ldr	r3, [r0, #0]
    358a:	75da      	strb	r2, [r3, #23]
}
    358c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3590:	4770      	bx	lr
    3592:	bf00      	nop

00003594 <TLx493D_W2BW_init>:
bool TLx493D_W2BW_init(TLx493D_t *sensor) {
    3594:	b510      	push	{r4, lr}
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_W2BW_regDef, &TLx493D_W2BW_commonFunctions, TLx493D_W2BW_e, TLx493D_I2C_e);
    3596:	2105      	movs	r1, #5
bool TLx493D_W2BW_init(TLx493D_t *sensor) {
    3598:	b082      	sub	sp, #8
    return tlx493d_common_init(sensor, GEN_2_REG_MAP_SIZE, TLx493D_W2BW_regDef, &TLx493D_W2BW_commonFunctions, TLx493D_W2BW_e, TLx493D_I2C_e);
    359a:	2400      	movs	r4, #0
    359c:	4b04      	ldr	r3, [pc, #16]	; (35b0 <TLx493D_W2BW_init+0x1c>)
    359e:	4a05      	ldr	r2, [pc, #20]	; (35b4 <TLx493D_W2BW_init+0x20>)
    35a0:	e9cd 1400 	strd	r1, r4, [sp]
    35a4:	2117      	movs	r1, #23
    35a6:	f000 f9e5 	bl	3974 <tlx493d_common_init>
}
    35aa:	b002      	add	sp, #8
    35ac:	bd10      	pop	{r4, pc}
    35ae:	bf00      	nop
    35b0:	200028f8 	.word	0x200028f8
    35b4:	200029c4 	.word	0x200029c4

000035b8 <TLx493D_W2BW_deinit>:
    return tlx493d_common_deinit(sensor);
    35b8:	f000 ba0c 	b.w	39d4 <tlx493d_common_deinit>

000035bc <TLx493D_W2BW_readRegisters>:
    return tlx493d_common_readRegisters(sensor);
    35bc:	f000 ba18 	b.w	39f0 <tlx493d_common_readRegisters>

000035c0 <TLx493D_W2BW_readRegistersAndCheck>:
    return tlx493d_common_readRegistersAndCheck(sensor);
    35c0:	f000 ba36 	b.w	3a30 <tlx493d_common_readRegistersAndCheck>

000035c4 <TLx493D_W2BW_calculateRawTemperature>:
void TLx493D_W2BW_calculateRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    35c4:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateRawTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temperature);
    35c6:	2206      	movs	r2, #6
    35c8:	2103      	movs	r1, #3
    35ca:	f000 bca7 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    35ce:	bf00      	nop

000035d0 <TLx493D_W2BW_getRawTemperature>:
    return tlx493d_common_getRawTemperature(sensor, temperature);
    35d0:	f000 bac0 	b.w	3b54 <tlx493d_common_getRawTemperature>

000035d4 <TLx493D_W2BW_calculateRawMagneticField>:
void TLx493D_W2BW_calculateRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    35d4:	b530      	push	{r4, r5, lr}
    35d6:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    35d8:	2508      	movs	r5, #8
    35da:	2405      	movs	r4, #5
    35dc:	9305      	str	r3, [sp, #20]
    35de:	2301      	movs	r3, #1
    35e0:	9400      	str	r4, [sp, #0]
    35e2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    35e6:	2202      	movs	r2, #2
    35e8:	2100      	movs	r1, #0
    35ea:	e9cd 2501 	strd	r2, r5, [sp, #4]
    35ee:	2204      	movs	r2, #4
    35f0:	f000 fc96 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
}
    35f4:	b007      	add	sp, #28
    35f6:	bd30      	pop	{r4, r5, pc}

000035f8 <TLx493D_W2BW_getRawMagneticField>:
    return tlx493d_common_getRawMagneticField(sensor, x, y, z);
    35f8:	f000 babc 	b.w	3b74 <tlx493d_common_getRawMagneticField>

000035fc <TLx493D_W2BW_getRawMagneticFieldAndTemperature>:
    return tlx493d_common_getRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    35fc:	f000 bad0 	b.w	3ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>

00003600 <TLx493D_W2BW_calculateTemperature>:
void TLx493D_W2BW_calculateTemperature(TLx493D_t *sensor, double *temp) {
    3600:	460b      	mov	r3, r1
    tlx493d_gen_2_calculateTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temp);
    3602:	2206      	movs	r2, #6
    3604:	2103      	movs	r1, #3
    3606:	f000 bc9b 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    360a:	bf00      	nop

0000360c <TLx493D_W2BW_getTemperature>:
    return tlx493d_common_getTemperature(sensor, temp);
    360c:	f000 bae2 	b.w	3bd4 <tlx493d_common_getTemperature>

00003610 <TLx493D_W2BW_calculateMagneticField>:
void TLx493D_W2BW_calculateMagneticField(TLx493D_t *sensor, double *x, double *y, double *z) {
    3610:	b530      	push	{r4, r5, lr}
    3612:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    3614:	2508      	movs	r5, #8
    3616:	2405      	movs	r4, #5
    3618:	9305      	str	r3, [sp, #20]
    361a:	2301      	movs	r3, #1
    361c:	9400      	str	r4, [sp, #0]
    361e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    3622:	2202      	movs	r2, #2
    3624:	2100      	movs	r1, #0
    3626:	e9cd 2501 	strd	r2, r5, [sp, #4]
    362a:	2204      	movs	r2, #4
    362c:	f000 fcb4 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
}
    3630:	b007      	add	sp, #28
    3632:	bd30      	pop	{r4, r5, pc}

00003634 <TLx493D_W2BW_getMagneticField>:
    return tlx493d_common_getMagneticField(sensor, x, y, z);
    3634:	f000 bade 	b.w	3bf4 <tlx493d_common_getMagneticField>

00003638 <TLx493D_W2BW_getMagneticFieldAndTemperature>:
    return tlx493d_common_getMagneticFieldAndTemperature(sensor, x, y, z, temp);
    3638:	f000 baf2 	b.w	3c20 <tlx493d_common_getMagneticFieldAndTemperature>

0000363c <TLx493D_W2BW_setMeasurement>:
bool TLx493D_W2BW_setMeasurement(TLx493D_t *sensor, TLx493D_MeasurementType_t val) {
    363c:	b510      	push	{r4, lr}
    363e:	460c      	mov	r4, r1
    3640:	b082      	sub	sp, #8
    return tlx493d_gen_2_setMeasurement(sensor, W2BW_DT_e, W2BW_AM_e, W2BW_CP_e, val);
    3642:	2323      	movs	r3, #35	; 0x23
    3644:	221f      	movs	r2, #31
    3646:	211e      	movs	r1, #30
    3648:	9400      	str	r4, [sp, #0]
    364a:	f000 fd2f 	bl	40ac <tlx493d_gen_2_setMeasurement>
}
    364e:	b002      	add	sp, #8
    3650:	bd10      	pop	{r4, pc}
    3652:	bf00      	nop

00003654 <TLx493D_W2BW_setTrigger>:
bool TLx493D_W2BW_setTrigger(TLx493D_t *sensor, TLx493D_TriggerType_t trigger) {
    3654:	460b      	mov	r3, r1
    return tlx493d_gen_2_setTrigger(sensor, W2BW_TRIG_e, W2BW_CP_e, trigger);
    3656:	2223      	movs	r2, #35	; 0x23
    3658:	2120      	movs	r1, #32
    365a:	f000 bd49 	b.w	40f0 <tlx493d_gen_2_setTrigger>
    365e:	bf00      	nop

00003660 <TLx493D_W2BW_setSensitivity>:
    switch(val) {
    3660:	2902      	cmp	r1, #2
bool TLx493D_W2BW_setSensitivity(TLx493D_t *sensor, TLx493D_SensitivityType_t val) {
    3662:	b530      	push	{r4, r5, lr}
    3664:	b083      	sub	sp, #12
    3666:	d814      	bhi.n	3692 <TLx493D_W2BW_setSensitivity+0x32>
    3668:	460b      	mov	r3, r1
    366a:	4911      	ldr	r1, [pc, #68]	; (36b0 <TLx493D_W2BW_setSensitivity+0x50>)
    366c:	4a11      	ldr	r2, [pc, #68]	; (36b4 <TLx493D_W2BW_setSensitivity+0x54>)
    366e:	4604      	mov	r4, r0
    3670:	5ccd      	ldrb	r5, [r1, r3]
    tlx493d_common_setBitfield(sensor, W2BW_X4_READWRITE_e, extraShortVal);
    3672:	212e      	movs	r1, #46	; 0x2e
    3674:	5cd3      	ldrb	r3, [r2, r3]
    3676:	462a      	mov	r2, r5
    3678:	9301      	str	r3, [sp, #4]
    367a:	f000 fb19 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X2_e, W2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X4_e, W2BW_CP_e, extraShortVal)
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	2223      	movs	r2, #35	; 0x23
    3682:	2121      	movs	r1, #33	; 0x21
    3684:	4620      	mov	r0, r4
    3686:	f000 fcdb 	bl	4040 <tlx493d_gen_2_setOneConfigBitfield>
                                                                                      : false;
    368a:	b940      	cbnz	r0, 369e <TLx493D_W2BW_setSensitivity+0x3e>
}
    368c:	2000      	movs	r0, #0
    368e:	b003      	add	sp, #12
    3690:	bd30      	pop	{r4, r5, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_SensitivityType_t");
    3692:	4a09      	ldr	r2, [pc, #36]	; (36b8 <TLx493D_W2BW_setSensitivity+0x58>)
    3694:	f000 fc26 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    3698:	2000      	movs	r0, #0
    369a:	b003      	add	sp, #12
    369c:	bd30      	pop	{r4, r5, pc}
    return tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X2_e, W2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X4_e, W2BW_CP_e, extraShortVal)
    369e:	462b      	mov	r3, r5
    36a0:	2223      	movs	r2, #35	; 0x23
    36a2:	212b      	movs	r1, #43	; 0x2b
    36a4:	4620      	mov	r0, r4
}
    36a6:	b003      	add	sp, #12
    36a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X2_e, W2BW_CP_e, shortVal) ? tlx493d_gen_2_setOneConfigBitfield(sensor, W2BW_X4_e, W2BW_CP_e, extraShortVal)
    36ac:	f000 bcc8 	b.w	4040 <tlx493d_gen_2_setOneConfigBitfield>
    36b0:	200003d8 	.word	0x200003d8
    36b4:	200003d4 	.word	0x200003d4
    36b8:	20000938 	.word	0x20000938

000036bc <TLx493D_W2BW_setDefaultConfig>:
    return tlx493d_gen_2_setDefaultConfig(sensor, W2BW_CP_e, W2BW_CA_e, W2BW_INT_e);
    36bc:	2328      	movs	r3, #40	; 0x28
    36be:	2227      	movs	r2, #39	; 0x27
    36c0:	2123      	movs	r1, #35	; 0x23
    36c2:	f000 bd65 	b.w	4190 <tlx493d_gen_2_setDefaultConfig>
    36c6:	bf00      	nop

000036c8 <TLx493D_W2BW_setIICAddress>:
bool TLx493D_W2BW_setIICAddress(TLx493D_t *sensor, TLx493D_IICAddressType_t address) {
    36c8:	460b      	mov	r3, r1
    return tlx493d_gen_2_setIICAddress(sensor, W2BW_IICADR_e, W2BW_FP_e, address);
    36ca:	2224      	movs	r2, #36	; 0x24
    36cc:	2125      	movs	r1, #37	; 0x25
    36ce:	f000 bd9f 	b.w	4210 <tlx493d_gen_2_setIICAddress>
    36d2:	bf00      	nop

000036d4 <TLx493D_W2BW_enable1ByteReadMode>:
bool TLx493D_W2BW_enable1ByteReadMode(TLx493D_t *sensor) {
    36d4:	b510      	push	{r4, lr}
    return tlx493d_gen_2_set1ByteReadMode(sensor, W2BW_PR_e, W2BW_FP_e, W2BW_PRD_e, 1);
    36d6:	2401      	movs	r4, #1
bool TLx493D_W2BW_enable1ByteReadMode(TLx493D_t *sensor) {
    36d8:	b082      	sub	sp, #8
    return tlx493d_gen_2_set1ByteReadMode(sensor, W2BW_PR_e, W2BW_FP_e, W2BW_PRD_e, 1);
    36da:	232a      	movs	r3, #42	; 0x2a
    36dc:	2224      	movs	r2, #36	; 0x24
    36de:	2126      	movs	r1, #38	; 0x26
    36e0:	9400      	str	r4, [sp, #0]
    36e2:	f001 f827 	bl	4734 <tlx493d_gen_2_set1ByteReadMode>
}
    36e6:	b002      	add	sp, #8
    36e8:	bd10      	pop	{r4, pc}
    36ea:	bf00      	nop

000036ec <TLx493D_W2BW_enableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, W2BW_CA_e, W2BW_FP_e, 0);
    36ec:	2300      	movs	r3, #0
    36ee:	2224      	movs	r2, #36	; 0x24
    36f0:	2127      	movs	r1, #39	; 0x27
    36f2:	f000 bdb3 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    36f6:	bf00      	nop

000036f8 <TLx493D_W2BW_disableCollisionAvoidance>:
    return tlx493d_gen_2_setCollisionAvoidance(sensor, W2BW_CA_e, W2BW_FP_e, 1);
    36f8:	2301      	movs	r3, #1
    36fa:	2224      	movs	r2, #36	; 0x24
    36fc:	2127      	movs	r1, #39	; 0x27
    36fe:	f000 bdad 	b.w	425c <tlx493d_gen_2_setCollisionAvoidance>
    3702:	bf00      	nop

00003704 <TLx493D_W2BW_enableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, W2BW_INT_e, W2BW_FP_e, 0);
    3704:	2300      	movs	r3, #0
    3706:	2224      	movs	r2, #36	; 0x24
    3708:	2128      	movs	r1, #40	; 0x28
    370a:	f000 bdbf 	b.w	428c <tlx493d_gen_2_setInterrupt>
    370e:	bf00      	nop

00003710 <TLx493D_W2BW_disableInterrupt>:
    return tlx493d_gen_2_setInterrupt(sensor, W2BW_INT_e, W2BW_FP_e, 1);
    3710:	2301      	movs	r3, #1
    3712:	2224      	movs	r2, #36	; 0x24
    3714:	2128      	movs	r1, #40	; 0x28
    3716:	f000 bdb9 	b.w	428c <tlx493d_gen_2_setInterrupt>
    371a:	bf00      	nop

0000371c <TLx493D_W2BW_setPowerMode>:
bool TLx493D_W2BW_setPowerMode(TLx493D_t *sensor, TLx493D_PowerModeType_t mode) {
    371c:	460b      	mov	r3, r1
    return tlx493d_gen_2_setPowerMode(sensor, W2BW_MODE_e, W2BW_FP_e, mode);
    371e:	2224      	movs	r2, #36	; 0x24
    3720:	2129      	movs	r1, #41	; 0x29
    3722:	f000 bdcb 	b.w	42bc <tlx493d_gen_2_setPowerMode>
    3726:	bf00      	nop

00003728 <TLx493D_W2BW_setUpdateRate>:
bool TLx493D_W2BW_setUpdateRate(TLx493D_t *sensor, TLx493D_UpdateRateType_t val) {
    3728:	460b      	mov	r3, r1
    return tlx493d_gen_2_setUpdateRate(sensor, W2BW_FP_e, W2BW_PRD_e, val);
    372a:	222a      	movs	r2, #42	; 0x2a
    372c:	2124      	movs	r1, #36	; 0x24
    372e:	f000 be41 	b.w	43b4 <tlx493d_gen_2_setUpdateRate>
    3732:	bf00      	nop

00003734 <TLx493D_W2BW_hasValidData>:
    return tlx493d_gen_2_hasValidData(sensor, W2BW_MODE_e, W2BW_PD3_e, W2BW_PD0_e);
    3734:	230e      	movs	r3, #14
    3736:	220d      	movs	r2, #13
    3738:	2129      	movs	r1, #41	; 0x29
    373a:	f000 be79 	b.w	4430 <tlx493d_gen_2_hasValidData>
    373e:	bf00      	nop

00003740 <TLx493D_W2BW_isFunctional>:
    return tlx493d_gen_2_isFunctional(sensor);
    3740:	f000 bea2 	b.w	4488 <tlx493d_gen_2_isFunctional>

00003744 <TLx493D_W2BW_isWakeUpEnabled>:
    return tlx493d_gen_2_isWakeUpEnabled(sensor, W2BW_WA_e);
    3744:	2116      	movs	r1, #22
    3746:	f000 beaf 	b.w	44a8 <tlx493d_gen_2_isWakeUpEnabled>
    374a:	bf00      	nop

0000374c <TLx493D_W2BW_disableWakeUpMode>:
    return tlx493d_gen_2_disableWakeUpMode(sensor, W2BW_WU_e, W2BW_CP_e);
    374c:	2223      	movs	r2, #35	; 0x23
    374e:	2117      	movs	r1, #23
    3750:	f000 bf20 	b.w	4594 <tlx493d_gen_2_disableWakeUpMode>

00003754 <TLx493D_W2BW_setWakeUpThresholdsAsInteger>:
bool TLx493D_W2BW_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    3754:	b530      	push	{r4, r5, lr}
    3756:	b091      	sub	sp, #68	; 0x44
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2BW_CP_e,
    3758:	251c      	movs	r5, #28
bool TLx493D_W2BW_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    375a:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2BW_CP_e,
    375e:	930c      	str	r3, [sp, #48]	; 0x30
    3760:	2314      	movs	r3, #20
    3762:	940d      	str	r4, [sp, #52]	; 0x34
    3764:	241a      	movs	r4, #26
    3766:	9509      	str	r5, [sp, #36]	; 0x24
    3768:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
    376c:	2115      	movs	r1, #21
    376e:	221d      	movs	r2, #29
    3770:	9108      	str	r1, [sp, #32]
    3772:	2113      	movs	r1, #19
    3774:	e9cd 1404 	strd	r1, r4, [sp, #16]
    3778:	2418      	movs	r4, #24
    377a:	2111      	movs	r1, #17
    377c:	e9cd 3206 	strd	r3, r2, [sp, #24]
    3780:	e9cd 1400 	strd	r1, r4, [sp]
    3784:	221b      	movs	r2, #27
bool TLx493D_W2BW_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    3786:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2BW_CP_e,
    378a:	2312      	movs	r3, #18
    378c:	2123      	movs	r1, #35	; 0x23
    378e:	940e      	str	r4, [sp, #56]	; 0x38
bool TLx493D_W2BW_setWakeUpThresholdsAsInteger(TLx493D_t *sensor, int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    3790:	f9bd 4058 	ldrsh.w	r4, [sp, #88]	; 0x58
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, W2BW_CP_e,
    3794:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3798:	2319      	movs	r3, #25
    379a:	2210      	movs	r2, #16
    379c:	940f      	str	r4, [sp, #60]	; 0x3c
    379e:	f000 ff3d 	bl	461c <tlx493d_gen_2_setWakeUpThresholdsAsInteger>
}
    37a2:	b011      	add	sp, #68	; 0x44
    37a4:	bd30      	pop	{r4, r5, pc}
    37a6:	bf00      	nop

000037a8 <TLx493D_W2BW_setWakeUpThresholds>:
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    37a8:	b510      	push	{r4, lr}
    return tlx493d_gen_2_setWakeUpThresholds(sensor, W2BW_CP_e,
    37aa:	2321      	movs	r3, #33	; 0x21
                                      double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    37ac:	b08e      	sub	sp, #56	; 0x38
    return tlx493d_gen_2_setWakeUpThresholds(sensor, W2BW_CP_e,
    37ae:	242e      	movs	r4, #46	; 0x2e
    37b0:	2102      	movs	r1, #2
    37b2:	221c      	movs	r2, #28
    37b4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
    37b8:	2415      	movs	r4, #21
    37ba:	231d      	movs	r3, #29
    37bc:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
    37c0:	2114      	movs	r1, #20
    37c2:	221a      	movs	r2, #26
    37c4:	e9cd 3407 	strd	r3, r4, [sp, #28]
    37c8:	2413      	movs	r4, #19
    37ca:	231b      	movs	r3, #27
    37cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
    37d0:	2112      	movs	r1, #18
    37d2:	2218      	movs	r2, #24
    37d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    37d8:	2411      	movs	r4, #17
    37da:	2319      	movs	r3, #25
    37dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
    37e0:	2210      	movs	r2, #16
    37e2:	2123      	movs	r1, #35	; 0x23
    37e4:	9400      	str	r4, [sp, #0]
    37e6:	f001 f8df 	bl	49a8 <tlx493d_gen_2_setWakeUpThresholds>
}
    37ea:	b00e      	add	sp, #56	; 0x38
    37ec:	bd10      	pop	{r4, pc}
    37ee:	bf00      	nop

000037f0 <TLx493D_W2BW_softwareReset>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    37f0:	4902      	ldr	r1, [pc, #8]	; (37fc <TLx493D_W2BW_softwareReset+0xc>)
bool TLx493D_W2BW_softwareReset(TLx493D_t *sensor) {
    37f2:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "softwareReset");
    37f4:	f000 fb16 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    37f8:	2000      	movs	r0, #0
    37fa:	bd08      	pop	{r3, pc}
    37fc:	200006c8 	.word	0x200006c8

00003800 <TLx493D_W2BW_hasValidWakeUpParity>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    3800:	4902      	ldr	r1, [pc, #8]	; (380c <TLx493D_W2BW_hasValidWakeUpParity+0xc>)
bool TLx493D_W2BW_hasValidWakeUpParity(const TLx493D_t *sensor) {
    3802:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "hasValidWakeUpParity");
    3804:	f000 fb0e 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    3808:	2000      	movs	r0, #0
    380a:	bd08      	pop	{r3, pc}
    380c:	20000508 	.word	0x20000508

00003810 <TLx493D_W2BW_isInTestMode>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    3810:	4902      	ldr	r1, [pc, #8]	; (381c <TLx493D_W2BW_isInTestMode+0xc>)
bool TLx493D_W2BW_isInTestMode(const TLx493D_t *sensor) {
    3812:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "isInTestMode");
    3814:	f000 fb06 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    3818:	2000      	movs	r0, #0
    381a:	bd08      	pop	{r3, pc}
    381c:	2000052c 	.word	0x2000052c

00003820 <TLx493D_W2BW_calculateFuseParity>:
    return tlx493d_gen_2_calculateFuseParity(sensor, W2BW_FP_e, W2BW_PRD_e);
    3820:	222a      	movs	r2, #42	; 0x2a
    3822:	2124      	movs	r1, #36	; 0x24
    3824:	f000 bf6c 	b.w	4700 <tlx493d_gen_2_calculateFuseParity>

00003828 <TLx493D_W2BW_calculateBusParity>:
    return tlx493d_gen_2_calculateBusParity(sensor, 5);
    3828:	2105      	movs	r1, #5
    382a:	f000 bf9d 	b.w	4768 <tlx493d_gen_2_calculateBusParity>
    382e:	bf00      	nop

00003830 <TLx493D_W2BW_calculateConfigurationParity>:
    return tlx493d_gen_2_calculateConfigurationParityWakeUp(sensor, W2BW_CP_e);
    3830:	2123      	movs	r1, #35	; 0x23
    3832:	f000 bfbf 	b.w	47b4 <tlx493d_gen_2_calculateConfigurationParityWakeUp>
    3836:	bf00      	nop

00003838 <TLx493D_W2BW_hasValidFuseParity>:
    return tlx493d_gen_2_hasValidFuseParity(sensor, W2BW_FF_e);
    3838:	210a      	movs	r1, #10
    383a:	f000 bfe7 	b.w	480c <tlx493d_gen_2_hasValidFuseParity>
    383e:	bf00      	nop

00003840 <TLx493D_W2BW_hasValidBusParity>:
    return tlx493d_gen_2_hasValidBusParity(sensor, W2BW_P_e);
    3840:	2109      	movs	r1, #9
    3842:	f000 bfeb 	b.w	481c <tlx493d_gen_2_hasValidBusParity>
    3846:	bf00      	nop

00003848 <TLx493D_W2BW_hasValidConfigurationParity>:
    return tlx493d_gen_2_hasValidConfigurationParity(sensor, W2BW_CF_e);
    3848:	210b      	movs	r1, #11
    384a:	f000 bffb 	b.w	4844 <tlx493d_gen_2_hasValidConfigurationParity>
    384e:	bf00      	nop

00003850 <TLx493D_W2BW_hasValidTBit>:
    return tlx493d_gen_2_hasValidTBit(sensor, W2BW_T_e);
    3850:	210c      	movs	r1, #12
    3852:	f000 bfff 	b.w	4854 <tlx493d_gen_2_hasValidTBit>
    3856:	bf00      	nop

00003858 <TLx493D_W2BW_selectIICAddress>:


uint8_t TLx493D_W2BW_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    return tlx493d_gen_2_selectIICAddress(sensor, addr);
    3858:	f001 b804 	b.w	4864 <tlx493d_gen_2_selectIICAddress>

0000385c <TLx493D_W2BW_calculateRawMagneticFieldAtTemperature>:


void TLx493D_W2BW_calculateRawMagneticFieldAtTemperature(const TLx493D_t *sensor, int16_t rawTemp, TLx493D_SensitivityType_t sens,
                                                         double xInmT, double yInmT, double zInmT,
                                                         int16_t *x, int16_t *y, int16_t *z) {
    tlx493d_gen_2_calculateRawMagneticFieldAtTemperature(sensor, rawTemp, sens, xInmT, yInmT, zInmT, x, y, z);
    385c:	f001 b844 	b.w	48e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>

00003860 <TLx493D_W2BW_getSensitivityScaleFactor>:
}


double TLx493D_W2BW_getSensitivityScaleFactor(const TLx493D_t *sensor) {
    return tlx493d_gen_2_getSensitivityScaleFactor(sensor, TLx493D_HAS_X4_e, W2BW_X2_e, W2BW_X4_READWRITE_e);
    3860:	232e      	movs	r3, #46	; 0x2e
    3862:	2221      	movs	r2, #33	; 0x21
    3864:	2102      	movs	r1, #2
    3866:	f001 b80f 	b.w	4888 <tlx493d_gen_2_getSensitivityScaleFactor>
    386a:	bf00      	nop

0000386c <TLx493D_W2BW_printRegisters>:
}


void TLx493D_W2BW_printRegisters(const TLx493D_t *sensor) {
    logPrintRegisters(sensor, TLX493D_W2BW_REGISTER_HEADLINE); 
    386c:	4901      	ldr	r1, [pc, #4]	; (3874 <TLx493D_W2BW_printRegisters+0x8>)
    386e:	f7fe b863 	b.w	1938 <logPrintRegisters>
    3872:	bf00      	nop
    3874:	20000ce4 	.word	0x20000ce4

00003878 <TLx493D_W2BW_enableWakeUpMode>:
bool TLx493D_W2BW_enableWakeUpMode(TLx493D_t *sensor) {
    3878:	b510      	push	{r4, lr}
    387a:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, W2BW_WU_e, 1);
    387c:	2117      	movs	r1, #23
    387e:	2201      	movs	r2, #1
    3880:	f000 fa16 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, W2BW_CP_e, sensor->functions->calculateConfigurationParity(sensor));
    3884:	68a3      	ldr	r3, [r4, #8]
    3886:	4620      	mov	r0, r4
    3888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    388c:	4798      	blx	r3
    388e:	2123      	movs	r1, #35	; 0x23
    3890:	4602      	mov	r2, r0
    3892:	4620      	mov	r0, r4
    3894:	f000 fa0c 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    3898:	4620      	mov	r0, r4
    389a:	f000 fe0d 	bl	44b8 <tlx493d_gen_2_writeConfigurationRegisters>
    389e:	b128      	cbz	r0, 38ac <TLx493D_W2BW_enableWakeUpMode+0x34>
    38a0:	68a3      	ldr	r3, [r4, #8]
    38a2:	4620      	mov	r0, r4
    38a4:	689b      	ldr	r3, [r3, #8]
}
    38a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    38aa:	4718      	bx	r3
}
    38ac:	bd10      	pop	{r4, pc}
    38ae:	bf00      	nop

000038b0 <TLx493D_W2BW_calculateRawMagneticFieldAndTemperature>:
void TLx493D_W2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    38b0:	b530      	push	{r4, r5, lr}
    38b2:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38b4:	2505      	movs	r5, #5
void TLx493D_W2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    38b6:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38b8:	9305      	str	r3, [sp, #20]
    38ba:	2302      	movs	r3, #2
    38bc:	9500      	str	r5, [sp, #0]
void TLx493D_W2BW_calculateRawMagneticFieldAndTemperature(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z, int16_t *temperature) {
    38be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateRawMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38c0:	e9cd 1203 	strd	r1, r2, [sp, #12]
    38c4:	2208      	movs	r2, #8
    38c6:	2100      	movs	r1, #0
    38c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    38cc:	2204      	movs	r2, #4
    38ce:	2301      	movs	r3, #1
    38d0:	f000 fb26 	bl	3f20 <tlx493d_gen_2_calculateRawMagneticField>
    tlx493d_gen_2_calculateRawTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temperature);
    38d4:	462b      	mov	r3, r5
    38d6:	2206      	movs	r2, #6
    38d8:	2103      	movs	r1, #3
    38da:	4620      	mov	r0, r4
}
    38dc:	b007      	add	sp, #28
    38de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateRawTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temperature);
    38e2:	f000 bb1b 	b.w	3f1c <tlx493d_gen_2_calculateRawTemperature>
    38e6:	bf00      	nop

000038e8 <TLx493D_W2BW_calculateMagneticFieldAndTemperature>:
void TLx493D_W2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    38e8:	b530      	push	{r4, r5, lr}
    38ea:	b087      	sub	sp, #28
    tlx493d_gen_2_calculateMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38ec:	2505      	movs	r5, #5
void TLx493D_W2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    38ee:	4604      	mov	r4, r0
    tlx493d_gen_2_calculateMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38f0:	9305      	str	r3, [sp, #20]
    38f2:	2302      	movs	r3, #2
    38f4:	9500      	str	r5, [sp, #0]
void TLx493D_W2BW_calculateMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temp) {
    38f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    tlx493d_gen_2_calculateMagneticField(sensor, W2BW_BX_MSBS_e, W2BW_BX_LSBS_e, W2BW_BY_MSBS_e, W2BW_BY_LSBS_e, W2BW_BZ_MSBS_e, W2BW_BZ_LSBS_e, x, y, z);
    38f8:	e9cd 1203 	strd	r1, r2, [sp, #12]
    38fc:	2208      	movs	r2, #8
    38fe:	2100      	movs	r1, #0
    3900:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3904:	2204      	movs	r2, #4
    3906:	2301      	movs	r3, #1
    3908:	f000 fb46 	bl	3f98 <tlx493d_gen_2_calculateMagneticField>
    tlx493d_gen_2_calculateTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temp);
    390c:	462b      	mov	r3, r5
    390e:	2206      	movs	r2, #6
    3910:	2103      	movs	r1, #3
    3912:	4620      	mov	r0, r4
}
    3914:	b007      	add	sp, #28
    3916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tlx493d_gen_2_calculateTemperature(sensor, W2BW_TEMP_MSBS_e, W2BW_TEMP_LSBS_e, temp);
    391a:	f000 bb11 	b.w	3f40 <tlx493d_gen_2_calculateTemperature>
    391e:	bf00      	nop

00003920 <tlx493d_init>:
#include "TLx493D_P3I8.h"


/** functions common to all sensors. */
bool tlx493d_init(TLx493D_t *sensor, TLx493D_SupportedSensorType_t sensorType) {
   switch(sensorType) {
    3920:	2907      	cmp	r1, #7
    3922:	d815      	bhi.n	3950 <tlx493d_init+0x30>
    3924:	e8df f001 	tbb	[pc, r1]
    3928:	0c0a0806 	.word	0x0c0a0806
    392c:	0412100e 	.word	0x0412100e

      case TLx493D_P3B6_e : return TLx493D_P3B6_init(sensor);
                            break;


      case TLx493D_P3I8_e : return TLx493D_P3I8_init(sensor);
    3930:	f7ff ba82 	b.w	2e38 <TLx493D_P3I8_init>
      case TLx493D_A1B6_e : return TLx493D_A1B6_init(sensor);
    3934:	f7fe b86a 	b.w	1a0c <TLx493D_A1B6_init>
      case TLx493D_A2B6_e : return TLx493D_A2B6_init(sensor);
    3938:	f7fe bbd2 	b.w	20e0 <TLx493D_A2B6_init>
      case TLx493D_A2BW_e : return TLx493D_A2BW_init(sensor);
    393c:	f7fe bd42 	b.w	23c4 <TLx493D_A2BW_init>
      case TLx493D_P2B6_e : return TLx493D_P2B6_init(sensor);
    3940:	f7fe beea 	b.w	2718 <TLx493D_P2B6_init>
      case TLx493D_W2B6_e : return TLx493D_W2B6_init(sensor);
    3944:	f7ff bc6e 	b.w	3224 <TLx493D_W2B6_init>
      case TLx493D_W2BW_e : return TLx493D_W2BW_init(sensor);
    3948:	f7ff be24 	b.w	3594 <TLx493D_W2BW_init>
      case TLx493D_P3B6_e : return TLx493D_P3B6_init(sensor);
    394c:	f7ff b896 	b.w	2a7c <TLx493D_P3B6_init>
                            break;


      default : return false;
   }
}
    3950:	2000      	movs	r0, #0
    3952:	4770      	bx	lr

00003954 <tlx493d_getMagneticField>:
bool tlx493d_getTemperature(TLx493D_t *sensor, double *temperature) {
   return sensor->functions->getTemperature(sensor, temperature);
}


bool tlx493d_getMagneticField(TLx493D_t *sensor, double *x, double *y, double *z ) {
    3954:	b410      	push	{r4}
   return sensor->functions->getMagneticField(sensor, x, y, z);
    3956:	6884      	ldr	r4, [r0, #8]
    3958:	6b64      	ldr	r4, [r4, #52]	; 0x34
    395a:	46a4      	mov	ip, r4
}
    395c:	f85d 4b04 	ldr.w	r4, [sp], #4
   return sensor->functions->getMagneticField(sensor, x, y, z);
    3960:	4760      	bx	ip
    3962:	bf00      	nop

00003964 <tlx493d_setDefaultConfig>:
   return sensor->functions->setSensitivity(sensor, range);
}


bool tlx493d_setDefaultConfig(TLx493D_t *sensor) {
   return sensor->functions->setDefaultConfig(sensor);
    3964:	6883      	ldr	r3, [r0, #8]
    3966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3968:	4718      	bx	r3
    396a:	bf00      	nop

0000396c <tlx493d_isFunctional>:
   return sensor->functions->hasValidData(sensor);
}


bool tlx493d_isFunctional(TLx493D_t *sensor) {
   return sensor->functions->isFunctional(sensor);
    396c:	6883      	ldr	r3, [r0, #8]
    396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3970:	4718      	bx	r3
    3972:	bf00      	nop

00003974 <tlx493d_common_init>:


/***
*/
bool tlx493d_common_init(TLx493D_t *sensor, uint8_t regMapSize, TLx493D_Register_t *regDef, TLx493D_CommonFunctions_t *commonFuncs,
                         TLx493D_SupportedSensorType_t sensorType, TLx493D_SupportedComLibraryInterfaceType_t comIFType) {
    3974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3978:	460e      	mov	r6, r1
    397a:	4604      	mov	r4, r0
    sensor->regMap     = (uint8_t*) malloc(sizeof(uint8_t) * regMapSize);
    397c:	2101      	movs	r1, #1
                         TLx493D_SupportedSensorType_t sensorType, TLx493D_SupportedComLibraryInterfaceType_t comIFType) {
    397e:	4690      	mov	r8, r2
    sensor->regMap     = (uint8_t*) malloc(sizeof(uint8_t) * regMapSize);
    3980:	4630      	mov	r0, r6
                         TLx493D_SupportedSensorType_t sensorType, TLx493D_SupportedComLibraryInterfaceType_t comIFType) {
    3982:	461f      	mov	r7, r3
    3984:	f89d a020 	ldrb.w	sl, [sp, #32]
    3988:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    sensor->regMap     = (uint8_t*) malloc(sizeof(uint8_t) * regMapSize);
    398c:	f004 f938 	bl	7c00 <calloc>
    3990:	6020      	str	r0, [r4, #0]

    if( sensor->regMap == NULL ) {
    3992:	b190      	cbz	r0, 39ba <tlx493d_common_init+0x46>
        sensor->functions  = commonFuncs;
        sensor->regMapSize = regMapSize;
        sensor->sensorType = sensorType;
        sensor->comIFType  = comIFType;

        sensor->comInterface.comLibFuncs                       = NULL;
    3994:	2300      	movs	r3, #0
        sensor->regMapSize = regMapSize;
    3996:	7726      	strb	r6, [r4, #28]
        sensor->sensorType = sensorType;
    3998:	f884 a01d 	strb.w	sl, [r4, #29]
        sensor->comInterface.comLibObj.iic_obj                 = NULL;

        sensor->boardSupportInterface.boardSupportObj.k2go_obj = NULL;

        (void) memset(sensor->regMap, 0, sensor->regMapSize);
        sensor->functions->setResetValues(sensor);
    399c:	4620      	mov	r0, r4
        sensor->comIFType  = comIFType;
    399e:	f884 901e 	strb.w	r9, [r4, #30]
        sensor->functions->setResetValues(sensor);
    39a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
        sensor->regDef     = regDef;
    39a6:	f8c4 8004 	str.w	r8, [r4, #4]
        sensor->comInterface.comLibFuncs                       = NULL;
    39aa:	e9c4 7302 	strd	r7, r3, [r4, #8]
        sensor->boardSupportInterface.boardSupportObj.k2go_obj = NULL;
    39ae:	e9c4 3305 	strd	r3, r3, [r4, #20]
        sensor->functions->setResetValues(sensor);
    39b2:	4790      	blx	r2
    }

    return true;
    39b4:	2001      	movs	r0, #1
}
    39b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39ba:	4605      	mov	r5, r0
        logError("Malloc regMap failed !");
    39bc:	4903      	ldr	r1, [pc, #12]	; (39cc <tlx493d_common_init+0x58>)
    39be:	4804      	ldr	r0, [pc, #16]	; (39d0 <tlx493d_common_init+0x5c>)
    39c0:	f7fd ffd8 	bl	1974 <logPrintln>
        logFlush();
    39c4:	f7fd fff2 	bl	19ac <logFlush>
        return false;
    39c8:	4628      	mov	r0, r5
    39ca:	e7f4      	b.n	39b6 <tlx493d_common_init+0x42>
    39cc:	20001944 	.word	0x20001944
    39d0:	20000f30 	.word	0x20000f30

000039d4 <tlx493d_common_deinit>:


/***
 * 
*/
bool tlx493d_common_deinit(TLx493D_t *sensor) {
    39d4:	b510      	push	{r4, lr}
    39d6:	4604      	mov	r4, r0
    if( sensor->regMap != NULL ) {
    39d8:	6800      	ldr	r0, [r0, #0]
    39da:	b118      	cbz	r0, 39e4 <tlx493d_common_deinit+0x10>
        free(sensor->regMap);
    39dc:	f004 f960 	bl	7ca0 <free>
        sensor->regMap = NULL;
    39e0:	2300      	movs	r3, #0
    39e2:	6023      	str	r3, [r4, #0]
    }

    sensor->comInterface.comLibFuncs                       = NULL;
    39e4:	2300      	movs	r3, #0
    sensor->comInterface.comLibObj.iic_obj                 = NULL;

    sensor->boardSupportInterface.boardSupportObj.k2go_obj = NULL;
    
    return true;
}
    39e6:	2001      	movs	r0, #1
    sensor->comInterface.comLibFuncs                       = NULL;
    39e8:	60e3      	str	r3, [r4, #12]
    sensor->boardSupportInterface.boardSupportObj.k2go_obj = NULL;
    39ea:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
    39ee:	bd10      	pop	{r4, pc}

000039f0 <tlx493d_common_readRegisters>:
}

/***
 * Generations 2 and 3, not 1.
*/
bool tlx493d_common_readRegisters(TLx493D_t *sensor) {
    39f0:	b510      	push	{r4, lr}
    bool isOk  = tlx493d_transfer(sensor, NULL, 0, sensor->regMap, sensor->regMapSize);
    39f2:	2200      	movs	r2, #0
    39f4:	7f03      	ldrb	r3, [r0, #28]
bool tlx493d_common_readRegisters(TLx493D_t *sensor) {
    39f6:	b082      	sub	sp, #8
    39f8:	4604      	mov	r4, r0
    bool isOk  = tlx493d_transfer(sensor, NULL, 0, sensor->regMap, sensor->regMapSize);
    39fa:	4611      	mov	r1, r2
    39fc:	9300      	str	r3, [sp, #0]
    39fe:	6803      	ldr	r3, [r0, #0]
    3a00:	f7fd fdd4 	bl	15ac <tlx493d_transfer>
    for(uint8_t i = 1; i < sensor->regMapSize; ++i) {
    3a04:	7f21      	ldrb	r1, [r4, #28]
    3a06:	2901      	cmp	r1, #1
    3a08:	d90e      	bls.n	3a28 <tlx493d_common_readRegisters+0x38>
    3a0a:	6823      	ldr	r3, [r4, #0]
    3a0c:	3902      	subs	r1, #2
    3a0e:	3301      	adds	r3, #1
    3a10:	fa53 f181 	uxtab	r1, r3, r1
    3a14:	e003      	b.n	3a1e <tlx493d_common_readRegisters+0x2e>
    3a16:	428b      	cmp	r3, r1
    3a18:	f103 0301 	add.w	r3, r3, #1
    3a1c:	d004      	beq.n	3a28 <tlx493d_common_readRegisters+0x38>
        if( sensor->regMap[i] != 0xFFU ) {
    3a1e:	781a      	ldrb	r2, [r3, #0]
    3a20:	2aff      	cmp	r2, #255	; 0xff
    3a22:	d0f8      	beq.n	3a16 <tlx493d_common_readRegisters+0x26>
        tlx493d_printRegisters(sensor);
    }
*/

    return isOk;
}
    3a24:	b002      	add	sp, #8
    3a26:	bd10      	pop	{r4, pc}
    for(uint8_t i = 1; i < sensor->regMapSize; ++i) {
    3a28:	2000      	movs	r0, #0
}
    3a2a:	b002      	add	sp, #8
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	bf00      	nop

00003a30 <tlx493d_common_readRegistersAndCheck>:


/***
 * Generations 2 and 3, not 1.
*/
bool tlx493d_common_readRegistersAndCheck(TLx493D_t *sensor) {
    3a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a34:	b084      	sub	sp, #16
    3a36:	4604      	mov	r4, r0
    uint8_t buf[sensor->regMapSize];
    int8_t  loops = 10;

    (void) memcpy(buf, sensor->regMap, sensor->regMapSize);
    3a38:	250b      	movs	r5, #11
    uint8_t buf[sensor->regMapSize];
    3a3a:	f890 801c 	ldrb.w	r8, [r0, #28]
    (void) memcpy(buf, sensor->regMap, sensor->regMapSize);
    3a3e:	6803      	ldr	r3, [r0, #0]
bool tlx493d_common_readRegistersAndCheck(TLx493D_t *sensor) {
    3a40:	af02      	add	r7, sp, #8
    uint8_t buf[sensor->regMapSize];
    3a42:	f108 0007 	add.w	r0, r8, #7
    (void) memcpy(buf, sensor->regMap, sensor->regMapSize);
    3a46:	4642      	mov	r2, r8
    3a48:	4619      	mov	r1, r3
    3a4a:	607b      	str	r3, [r7, #4]
    uint8_t buf[sensor->regMapSize];
    3a4c:	f400 70fc 	and.w	r0, r0, #504	; 0x1f8
    3a50:	ebad 0d00 	sub.w	sp, sp, r0
    3a54:	ae02      	add	r6, sp, #8
    (void) memcpy(buf, sensor->regMap, sensor->regMapSize);
    3a56:	4630      	mov	r0, r6
    3a58:	f002 fad0 	bl	5ffc <memcpy>
    3a5c:	687b      	ldr	r3, [r7, #4]

    do {
        bool isOk  = tlx493d_transfer(sensor, NULL, 0, sensor->regMap, sensor->regMapSize);
    3a5e:	2200      	movs	r2, #0
    3a60:	4620      	mov	r0, r4
    3a62:	f8cd 8000 	str.w	r8, [sp]
    3a66:	4611      	mov	r1, r2
    3a68:	f7fd fda0 	bl	15ac <tlx493d_transfer>
    for(uint8_t i = 1; i < sensor->regMapSize; ++i) {
    3a6c:	7f22      	ldrb	r2, [r4, #28]
        bool isOk  = tlx493d_transfer(sensor, NULL, 0, sensor->regMap, sensor->regMapSize);
    3a6e:	4686      	mov	lr, r0
        if( sensor->regMap[i] != 0xFFU ) {
    3a70:	6820      	ldr	r0, [r4, #0]
    for(uint8_t i = 1; i < sensor->regMapSize; ++i) {
    3a72:	2a01      	cmp	r2, #1
    3a74:	d91c      	bls.n	3ab0 <tlx493d_common_readRegistersAndCheck+0x80>
    3a76:	f1a2 0c02 	sub.w	ip, r2, #2
    3a7a:	1c41      	adds	r1, r0, #1
    3a7c:	4603      	mov	r3, r0
    3a7e:	fa51 fc8c 	uxtab	ip, r1, ip
    3a82:	e001      	b.n	3a88 <tlx493d_common_readRegistersAndCheck+0x58>
    3a84:	4563      	cmp	r3, ip
    3a86:	d013      	beq.n	3ab0 <tlx493d_common_readRegistersAndCheck+0x80>
        if( sensor->regMap[i] != 0xFFU ) {
    3a88:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    3a8c:	29ff      	cmp	r1, #255	; 0xff
    3a8e:	d0f9      	beq.n	3a84 <tlx493d_common_readRegistersAndCheck+0x54>
        logInfo("isOk && hasValidData && hasValidFuseParity = %d", isOk && hasValidData && hasValidFuseParity);

        sensor->functions->printRegisters(sensor);
        */

        if( ! (isOk && sensor->functions->hasValidData(sensor) && sensor->functions->hasValidFuseParity(sensor)) ) {
    3a90:	f1be 0f00 	cmp.w	lr, #0
    3a94:	d00c      	beq.n	3ab0 <tlx493d_common_readRegistersAndCheck+0x80>
    3a96:	68a3      	ldr	r3, [r4, #8]
    3a98:	4620      	mov	r0, r4
    3a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3a9c:	4798      	blx	r3
    3a9e:	b128      	cbz	r0, 3aac <tlx493d_common_readRegistersAndCheck+0x7c>
    3aa0:	68a3      	ldr	r3, [r4, #8]
    3aa2:	4620      	mov	r0, r4
    3aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3aa8:	4798      	blx	r3
    3aaa:	b9d8      	cbnz	r0, 3ae4 <tlx493d_common_readRegistersAndCheck+0xb4>
        // if( ! (isOk && sensor->functions->hasValidFuseParity(sensor)) ) {
            (void) memcpy(sensor->regMap, buf, sensor->regMapSize);
    3aac:	6820      	ldr	r0, [r4, #0]
    3aae:	7f22      	ldrb	r2, [r4, #28]
        }
        else {
          return true;
          // break;
        }
    } while( --loops >= 0 );
    3ab0:	3d01      	subs	r5, #1
            (void) memcpy(sensor->regMap, buf, sensor->regMapSize);
    3ab2:	4631      	mov	r1, r6
    3ab4:	f002 faa2 	bl	5ffc <memcpy>
    } while( --loops >= 0 );
    3ab8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3abc:	d003      	beq.n	3ac6 <tlx493d_common_readRegistersAndCheck+0x96>
        bool isOk  = tlx493d_transfer(sensor, NULL, 0, sensor->regMap, sensor->regMapSize);
    3abe:	6823      	ldr	r3, [r4, #0]
    3ac0:	f894 801c 	ldrb.w	r8, [r4, #28]
    3ac4:	e7cb      	b.n	3a5e <tlx493d_common_readRegistersAndCheck+0x2e>

    if( ! sensor->functions->hasValidData(sensor) ) {
    3ac6:	68a3      	ldr	r3, [r4, #8]
    3ac8:	4620      	mov	r0, r4
    3aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3acc:	4798      	blx	r3
    3ace:	b948      	cbnz	r0, 3ae4 <tlx493d_common_readRegistersAndCheck+0xb4>
    *result  |= ((int16_t) ((sensor->regMap[lsb->address] & lsb->mask) >> lsb->offset)); /** OR with LSB */
}


const char *tlx493d_common_getTypeAsString(const TLx493D_t *sensor) {
    switch(sensor->sensorType) {
    3ad0:	7f63      	ldrb	r3, [r4, #29]
    3ad2:	2b07      	cmp	r3, #7
    3ad4:	d80b      	bhi.n	3aee <tlx493d_common_readRegistersAndCheck+0xbe>
    3ad6:	4a07      	ldr	r2, [pc, #28]	; (3af4 <tlx493d_common_readRegistersAndCheck+0xc4>)
    3ad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        logError("Cannot read consistent data from device '%s' !", tlx493d_common_getTypeAsString(sensor));
    3adc:	4906      	ldr	r1, [pc, #24]	; (3af8 <tlx493d_common_readRegistersAndCheck+0xc8>)
    3ade:	4807      	ldr	r0, [pc, #28]	; (3afc <tlx493d_common_readRegistersAndCheck+0xcc>)
    3ae0:	f7fd ff48 	bl	1974 <logPrintln>
}
    3ae4:	2001      	movs	r0, #1
    3ae6:	3708      	adds	r7, #8
    3ae8:	46bd      	mov	sp, r7
    3aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch(sensor->sensorType) {
    3aee:	4a04      	ldr	r2, [pc, #16]	; (3b00 <tlx493d_common_readRegistersAndCheck+0xd0>)
    3af0:	e7f4      	b.n	3adc <tlx493d_common_readRegistersAndCheck+0xac>
    3af2:	bf00      	nop
    3af4:	200003b0 	.word	0x200003b0
    3af8:	2000197c 	.word	0x2000197c
    3afc:	20000f30 	.word	0x20000f30
    3b00:	2000195c 	.word	0x2000195c

00003b04 <tlx493d_common_calculateRawTemperature>:
void tlx493d_common_calculateRawTemperature(TLx493D_t *sensor, uint8_t tempMSBBF, uint8_t tempLSBBF, int16_t *temperature) {
    3b04:	b530      	push	{r4, r5, lr}
    const TLx493D_Register_t *msb = &sensor->regDef[msbBitfield];
    3b06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    const TLx493D_Register_t *lsb = &sensor->regDef[lsbBitfield];
    3b0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    *result   = ((sensor->regMap[msb->address] & msb->mask) << (16U - msb->numBits - msb->offset)); /** Set minus flag if highest bit is set */
    3b0e:	e9d0 4500 	ldrd	r4, r5, [r0]
    const TLx493D_Register_t *msb = &sensor->regDef[msbBitfield];
    3b12:	1868      	adds	r0, r5, r1
    const TLx493D_Register_t *lsb = &sensor->regDef[lsbBitfield];
    3b14:	442a      	add	r2, r5
    *result   = ((sensor->regMap[msb->address] & msb->mask) << (16U - msb->numBits - msb->offset)); /** Set minus flag if highest bit is set */
    3b16:	7841      	ldrb	r1, [r0, #1]
    3b18:	f890 e004 	ldrb.w	lr, [r0, #4]
    3b1c:	5c61      	ldrb	r1, [r4, r1]
    3b1e:	f890 c003 	ldrb.w	ip, [r0, #3]
    3b22:	7880      	ldrb	r0, [r0, #2]
    3b24:	4001      	ands	r1, r0
    3b26:	eb0c 000e 	add.w	r0, ip, lr
    3b2a:	f1c0 0010 	rsb	r0, r0, #16
    3b2e:	4081      	lsls	r1, r0
    *result >>= (16U - msb->numBits - lsb->numBits); /** shift back and make space for LSB */
    3b30:	7910      	ldrb	r0, [r2, #4]
    3b32:	4470      	add	r0, lr
    3b34:	b209      	sxth	r1, r1
    3b36:	f1c0 0010 	rsb	r0, r0, #16
    3b3a:	4101      	asrs	r1, r0
    3b3c:	8019      	strh	r1, [r3, #0]
    *result  |= ((int16_t) ((sensor->regMap[lsb->address] & lsb->mask) >> lsb->offset)); /** OR with LSB */
    3b3e:	7850      	ldrb	r0, [r2, #1]
    3b40:	7895      	ldrb	r5, [r2, #2]
    3b42:	5c20      	ldrb	r0, [r4, r0]
    3b44:	78d4      	ldrb	r4, [r2, #3]
    3b46:	ea00 0205 	and.w	r2, r0, r5
    3b4a:	4122      	asrs	r2, r4
    3b4c:	4311      	orrs	r1, r2
    3b4e:	8019      	strh	r1, [r3, #0]
}
    3b50:	bd30      	pop	{r4, r5, pc}
    3b52:	bf00      	nop

00003b54 <tlx493d_common_getRawTemperature>:
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b54:	6883      	ldr	r3, [r0, #8]
bool tlx493d_common_getRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    3b56:	b570      	push	{r4, r5, r6, lr}
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b58:	68db      	ldr	r3, [r3, #12]
bool tlx493d_common_getRawTemperature(TLx493D_t *sensor, int16_t *temperature) {
    3b5a:	4605      	mov	r5, r0
    3b5c:	460e      	mov	r6, r1
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b5e:	4798      	blx	r3
    3b60:	4604      	mov	r4, r0
    3b62:	b120      	cbz	r0, 3b6e <tlx493d_common_getRawTemperature+0x1a>
        sensor->functions->calculateRawTemperature(sensor, temperature);
    3b64:	68ab      	ldr	r3, [r5, #8]
    3b66:	4631      	mov	r1, r6
    3b68:	4628      	mov	r0, r5
    3b6a:	691b      	ldr	r3, [r3, #16]
    3b6c:	4798      	blx	r3
}
    3b6e:	4620      	mov	r0, r4
    3b70:	bd70      	pop	{r4, r5, r6, pc}
    3b72:	bf00      	nop

00003b74 <tlx493d_common_getRawMagneticField>:
bool tlx493d_common_getRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    3b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b78:	4698      	mov	r8, r3
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b7a:	6883      	ldr	r3, [r0, #8]
bool tlx493d_common_getRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    3b7c:	4605      	mov	r5, r0
    3b7e:	460e      	mov	r6, r1
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b80:	68db      	ldr	r3, [r3, #12]
bool tlx493d_common_getRawMagneticField(TLx493D_t *sensor, int16_t *x, int16_t *y, int16_t *z) {
    3b82:	4617      	mov	r7, r2
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3b84:	4798      	blx	r3
    3b86:	4604      	mov	r4, r0
    3b88:	b130      	cbz	r0, 3b98 <tlx493d_common_getRawMagneticField+0x24>
        sensor->functions->calculateRawMagneticField(sensor, x, y, z);
    3b8a:	4631      	mov	r1, r6
    3b8c:	68ae      	ldr	r6, [r5, #8]
    3b8e:	4628      	mov	r0, r5
    3b90:	4643      	mov	r3, r8
    3b92:	463a      	mov	r2, r7
    3b94:	69b5      	ldr	r5, [r6, #24]
    3b96:	47a8      	blx	r5
}
    3b98:	4620      	mov	r0, r4
    3b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b9e:	bf00      	nop

00003ba0 <tlx493d_common_getRawMagneticFieldAndTemperature>:
                                                     int16_t *temperature) {
    3ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ba4:	4698      	mov	r8, r3
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3ba6:	6883      	ldr	r3, [r0, #8]
                                                     int16_t *temperature) {
    3ba8:	b082      	sub	sp, #8
    3baa:	4605      	mov	r5, r0
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bac:	68db      	ldr	r3, [r3, #12]
                                                     int16_t *temperature) {
    3bae:	460e      	mov	r6, r1
    3bb0:	4617      	mov	r7, r2
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bb2:	4798      	blx	r3
    3bb4:	4604      	mov	r4, r0
    3bb6:	b140      	cbz	r0, 3bca <tlx493d_common_getRawMagneticFieldAndTemperature+0x2a>
        sensor->functions->calculateRawMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    3bb8:	9b08      	ldr	r3, [sp, #32]
    3bba:	4631      	mov	r1, r6
    3bbc:	4628      	mov	r0, r5
    3bbe:	463a      	mov	r2, r7
    3bc0:	9300      	str	r3, [sp, #0]
    3bc2:	4643      	mov	r3, r8
    3bc4:	68ae      	ldr	r6, [r5, #8]
    3bc6:	6a35      	ldr	r5, [r6, #32]
    3bc8:	47a8      	blx	r5
}
    3bca:	4620      	mov	r0, r4
    3bcc:	b002      	add	sp, #8
    3bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bd2:	bf00      	nop

00003bd4 <tlx493d_common_getTemperature>:
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bd4:	6883      	ldr	r3, [r0, #8]
bool tlx493d_common_getTemperature(TLx493D_t *sensor, double *temperature) {
    3bd6:	b570      	push	{r4, r5, r6, lr}
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bd8:	68db      	ldr	r3, [r3, #12]
bool tlx493d_common_getTemperature(TLx493D_t *sensor, double *temperature) {
    3bda:	4605      	mov	r5, r0
    3bdc:	460e      	mov	r6, r1
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bde:	4798      	blx	r3
    3be0:	4604      	mov	r4, r0
    3be2:	b120      	cbz	r0, 3bee <tlx493d_common_getTemperature+0x1a>
        sensor->functions->calculateTemperature(sensor, temperature);
    3be4:	68ab      	ldr	r3, [r5, #8]
    3be6:	4631      	mov	r1, r6
    3be8:	4628      	mov	r0, r5
    3bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bec:	4798      	blx	r3
}
    3bee:	4620      	mov	r0, r4
    3bf0:	bd70      	pop	{r4, r5, r6, pc}
    3bf2:	bf00      	nop

00003bf4 <tlx493d_common_getMagneticField>:
bool tlx493d_common_getMagneticField(TLx493D_t *sensor, double *x, double *y, double *z ) {
    3bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bf8:	4698      	mov	r8, r3
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3bfa:	6883      	ldr	r3, [r0, #8]
bool tlx493d_common_getMagneticField(TLx493D_t *sensor, double *x, double *y, double *z ) {
    3bfc:	4605      	mov	r5, r0
    3bfe:	460e      	mov	r6, r1
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3c00:	68db      	ldr	r3, [r3, #12]
bool tlx493d_common_getMagneticField(TLx493D_t *sensor, double *x, double *y, double *z ) {
    3c02:	4617      	mov	r7, r2
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3c04:	4798      	blx	r3
    3c06:	4604      	mov	r4, r0
    3c08:	b130      	cbz	r0, 3c18 <tlx493d_common_getMagneticField+0x24>
        sensor->functions->calculateMagneticField(sensor, x, y, z);
    3c0a:	4631      	mov	r1, r6
    3c0c:	68ae      	ldr	r6, [r5, #8]
    3c0e:	4628      	mov	r0, r5
    3c10:	4643      	mov	r3, r8
    3c12:	463a      	mov	r2, r7
    3c14:	6b35      	ldr	r5, [r6, #48]	; 0x30
    3c16:	47a8      	blx	r5
}
    3c18:	4620      	mov	r0, r4
    3c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c1e:	bf00      	nop

00003c20 <tlx493d_common_getMagneticFieldAndTemperature>:
bool tlx493d_common_getMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    3c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c24:	4698      	mov	r8, r3
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3c26:	6883      	ldr	r3, [r0, #8]
bool tlx493d_common_getMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    3c28:	b082      	sub	sp, #8
    3c2a:	4605      	mov	r5, r0
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3c2c:	68db      	ldr	r3, [r3, #12]
bool tlx493d_common_getMagneticFieldAndTemperature(TLx493D_t *sensor, double *x, double *y, double *z, double *temperature) {
    3c2e:	460e      	mov	r6, r1
    3c30:	4617      	mov	r7, r2
    if( sensor->functions->readRegistersAndCheck(sensor) ) {
    3c32:	4798      	blx	r3
    3c34:	4604      	mov	r4, r0
    3c36:	b140      	cbz	r0, 3c4a <tlx493d_common_getMagneticFieldAndTemperature+0x2a>
        sensor->functions->calculateMagneticFieldAndTemperature(sensor, x, y, z, temperature);
    3c38:	9b08      	ldr	r3, [sp, #32]
    3c3a:	4631      	mov	r1, r6
    3c3c:	4628      	mov	r0, r5
    3c3e:	463a      	mov	r2, r7
    3c40:	9300      	str	r3, [sp, #0]
    3c42:	4643      	mov	r3, r8
    3c44:	68ae      	ldr	r6, [r5, #8]
    3c46:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    3c48:	47a8      	blx	r5
}
    3c4a:	4620      	mov	r0, r4
    3c4c:	b002      	add	sp, #8
    3c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c52:	bf00      	nop

00003c54 <tlx493d_common_returnBitfield>:
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3c54:	6842      	ldr	r2, [r0, #4]
uint8_t tlx493d_common_returnBitfield(const TLx493D_t *sensor, uint8_t bitField) {
    3c56:	b508      	push	{r3, lr}
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3c58:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    3c5c:	eb02 0c03 	add.w	ip, r2, r3
    if((bf->accessMode == TLx493D_READ_MODE_e) || (bf->accessMode == TLx493D_READ_WRITE_MODE_e)) {
    3c60:	5cd3      	ldrb	r3, [r2, r3]
    3c62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    3c66:	d10b      	bne.n	3c80 <tlx493d_common_returnBitfield+0x2c>
        return (sensor->regMap[bf->address] & bf->mask) >> bf->offset;
    3c68:	f89c 1001 	ldrb.w	r1, [ip, #1]
    3c6c:	6800      	ldr	r0, [r0, #0]
    3c6e:	f89c 2002 	ldrb.w	r2, [ip, #2]
    3c72:	5c40      	ldrb	r0, [r0, r1]
    3c74:	f89c 3003 	ldrb.w	r3, [ip, #3]
    3c78:	4010      	ands	r0, r2
    3c7a:	4118      	asrs	r0, r3
    3c7c:	b2c0      	uxtb	r0, r0
}
    3c7e:	bd08      	pop	{r3, pc}
    switch(sensor->sensorType) {
    3c80:	7f43      	ldrb	r3, [r0, #29]
    3c82:	2b07      	cmp	r3, #7
    3c84:	d809      	bhi.n	3c9a <tlx493d_common_returnBitfield+0x46>
    3c86:	4a06      	ldr	r2, [pc, #24]	; (3ca0 <tlx493d_common_returnBitfield+0x4c>)
    3c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    logWarn("Feature '%s' not available for sensor type '%s' !", featureName, tlx493d_common_getTypeAsString(sensor));
}


void tlx493d_errorBitfieldNotReadableForSensorType(const TLx493D_t *sensor, uint8_t bf) {
    logError("Bitfield '%d' not readable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3c8c:	460a      	mov	r2, r1
    3c8e:	4805      	ldr	r0, [pc, #20]	; (3ca4 <tlx493d_common_returnBitfield+0x50>)
    3c90:	4905      	ldr	r1, [pc, #20]	; (3ca8 <tlx493d_common_returnBitfield+0x54>)
    3c92:	f7fd fe6f 	bl	1974 <logPrintln>
    return 0U;
    3c96:	2000      	movs	r0, #0
}
    3c98:	bd08      	pop	{r3, pc}
    switch(sensor->sensorType) {
    3c9a:	4b04      	ldr	r3, [pc, #16]	; (3cac <tlx493d_common_returnBitfield+0x58>)
    3c9c:	e7f6      	b.n	3c8c <tlx493d_common_returnBitfield+0x38>
    3c9e:	bf00      	nop
    3ca0:	200003b0 	.word	0x200003b0
    3ca4:	20000f30 	.word	0x20000f30
    3ca8:	200019ac 	.word	0x200019ac
    3cac:	2000195c 	.word	0x2000195c

00003cb0 <tlx493d_common_setBitfield>:
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3cb0:	6843      	ldr	r3, [r0, #4]
void tlx493d_common_setBitfield(TLx493D_t *sensor, uint8_t bitField, uint8_t newBitFieldValue) {
    3cb2:	b500      	push	{lr}
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3cb4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
    if((bf->accessMode == TLx493D_WRITE_MODE_e) || (bf->accessMode == TLx493D_READ_WRITE_MODE_e)) {
    3cb8:	f813 c00e 	ldrb.w	ip, [r3, lr]
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3cbc:	4473      	add	r3, lr
    if((bf->accessMode == TLx493D_WRITE_MODE_e) || (bf->accessMode == TLx493D_READ_WRITE_MODE_e)) {
    3cbe:	f10c 3cff 	add.w	ip, ip, #4294967295
    3cc2:	f1bc 0f01 	cmp.w	ip, #1
    3cc6:	d810      	bhi.n	3cea <tlx493d_common_setBitfield+0x3a>
       sensor->regMap[bf->address] = (uint8_t) ((sensor->regMap[bf->address] & ((uint8_t) ~bf->mask)) | ((newBitFieldValue << bf->offset) & bf->mask));
    3cc8:	f893 c001 	ldrb.w	ip, [r3, #1]
    3ccc:	f893 e003 	ldrb.w	lr, [r3, #3]
    3cd0:	6800      	ldr	r0, [r0, #0]
    3cd2:	fa02 f20e 	lsl.w	r2, r2, lr
    3cd6:	789b      	ldrb	r3, [r3, #2]
    3cd8:	f810 100c 	ldrb.w	r1, [r0, ip]
    3cdc:	404a      	eors	r2, r1
    3cde:	401a      	ands	r2, r3
    3ce0:	4051      	eors	r1, r2
    3ce2:	f800 100c 	strb.w	r1, [r0, ip]
}
    3ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    switch(sensor->sensorType) {
    3cea:	7f43      	ldrb	r3, [r0, #29]
    3cec:	2b07      	cmp	r3, #7
    3cee:	d809      	bhi.n	3d04 <tlx493d_common_setBitfield+0x54>
    3cf0:	4a05      	ldr	r2, [pc, #20]	; (3d08 <tlx493d_common_setBitfield+0x58>)
    3cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}


void tlx493d_errorBitfieldNotWritableForSensorType(const TLx493D_t *sensor, uint8_t bf) {
    logError("Bitfield '%d' not writable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3cf6:	460a      	mov	r2, r1
    3cf8:	4804      	ldr	r0, [pc, #16]	; (3d0c <tlx493d_common_setBitfield+0x5c>)
    3cfa:	4905      	ldr	r1, [pc, #20]	; (3d10 <tlx493d_common_setBitfield+0x60>)
}
    3cfc:	f85d eb04 	ldr.w	lr, [sp], #4
    logError("Bitfield '%d' not writable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3d00:	f7fd be38 	b.w	1974 <logPrintln>
    switch(sensor->sensorType) {
    3d04:	4b03      	ldr	r3, [pc, #12]	; (3d14 <tlx493d_common_setBitfield+0x64>)
    3d06:	e7f6      	b.n	3cf6 <tlx493d_common_setBitfield+0x46>
    3d08:	200003b0 	.word	0x200003b0
    3d0c:	20000f30 	.word	0x20000f30
    3d10:	200019e0 	.word	0x200019e0
    3d14:	2000195c 	.word	0x2000195c

00003d18 <tlx493d_common_writeRegister>:
    const TLx493D_Register_t *bf = &sensor->regDef[bitField];
    3d18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3d1c:	6842      	ldr	r2, [r0, #4]
    3d1e:	eb02 0c01 	add.w	ip, r2, r1
    if((bf->accessMode == TLx493D_WRITE_MODE_e) || (bf->accessMode == TLx493D_READ_WRITE_MODE_e)) {
    3d22:	5c52      	ldrb	r2, [r2, r1]
    3d24:	3a01      	subs	r2, #1
    3d26:	2a01      	cmp	r2, #1
    3d28:	d901      	bls.n	3d2e <tlx493d_common_writeRegister+0x16>
    return false;
    3d2a:	2000      	movs	r0, #0
}
    3d2c:	4770      	bx	lr
bool tlx493d_common_writeRegister(TLx493D_t* sensor, uint8_t bitField) {
    3d2e:	b500      	push	{lr}
        uint8_t transBuffer[2] = { bf->address, sensor->regMap[bf->address] };
    3d30:	6801      	ldr	r1, [r0, #0]
bool tlx493d_common_writeRegister(TLx493D_t* sensor, uint8_t bitField) {
    3d32:	b085      	sub	sp, #20
        uint8_t transBuffer[2] = { bf->address, sensor->regMap[bf->address] };
    3d34:	f89c 2001 	ldrb.w	r2, [ip, #1]
        return tlx493d_transfer(sensor, transBuffer, sizeof(transBuffer), NULL, 0);
    3d38:	2300      	movs	r3, #0
        uint8_t transBuffer[2] = { bf->address, sensor->regMap[bf->address] };
    3d3a:	f88d 200c 	strb.w	r2, [sp, #12]
    3d3e:	5c89      	ldrb	r1, [r1, r2]
        return tlx493d_transfer(sensor, transBuffer, sizeof(transBuffer), NULL, 0);
    3d40:	2202      	movs	r2, #2
    3d42:	9300      	str	r3, [sp, #0]
        uint8_t transBuffer[2] = { bf->address, sensor->regMap[bf->address] };
    3d44:	f88d 100d 	strb.w	r1, [sp, #13]
        return tlx493d_transfer(sensor, transBuffer, sizeof(transBuffer), NULL, 0);
    3d48:	a903      	add	r1, sp, #12
    3d4a:	f7fd fc2f 	bl	15ac <tlx493d_transfer>
}
    3d4e:	b005      	add	sp, #20
    3d50:	f85d fb04 	ldr.w	pc, [sp], #4

00003d54 <tlx493d_common_calculateParity>:
	data ^= data >> 4;
    3d54:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
	data ^= data >> 2;
    3d58:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
	data ^= data >> 1;
    3d5c:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
}
    3d60:	f000 0001 	and.w	r0, r0, #1
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop

00003d68 <tlx493d_common_getOddParity>:
    return (parity ^ 1U) & 1U;
    3d68:	43c0      	mvns	r0, r0
}
    3d6a:	f000 0001 	and.w	r0, r0, #1
    3d6e:	4770      	bx	lr

00003d70 <tlx493d_common_getEvenParity>:
}
    3d70:	f000 0001 	and.w	r0, r0, #1
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop

00003d78 <tlx493d_common_concatBytes>:
void tlx493d_common_concatBytes(TLx493D_t *sensor, uint8_t msbBitfield, uint8_t lsbBitfield, int16_t *result) {
    3d78:	b530      	push	{r4, r5, lr}
    const TLx493D_Register_t *msb = &sensor->regDef[msbBitfield];
    3d7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    const TLx493D_Register_t *lsb = &sensor->regDef[lsbBitfield];
    3d7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    *result   = ((sensor->regMap[msb->address] & msb->mask) << (16U - msb->numBits - msb->offset)); /** Set minus flag if highest bit is set */
    3d82:	e9d0 4500 	ldrd	r4, r5, [r0]
    const TLx493D_Register_t *msb = &sensor->regDef[msbBitfield];
    3d86:	1868      	adds	r0, r5, r1
    const TLx493D_Register_t *lsb = &sensor->regDef[lsbBitfield];
    3d88:	442a      	add	r2, r5
    *result   = ((sensor->regMap[msb->address] & msb->mask) << (16U - msb->numBits - msb->offset)); /** Set minus flag if highest bit is set */
    3d8a:	7841      	ldrb	r1, [r0, #1]
    3d8c:	f890 e004 	ldrb.w	lr, [r0, #4]
    3d90:	5c61      	ldrb	r1, [r4, r1]
    3d92:	f890 c003 	ldrb.w	ip, [r0, #3]
    3d96:	7880      	ldrb	r0, [r0, #2]
    3d98:	4001      	ands	r1, r0
    3d9a:	eb0c 000e 	add.w	r0, ip, lr
    3d9e:	f1c0 0010 	rsb	r0, r0, #16
    3da2:	4081      	lsls	r1, r0
    *result >>= (16U - msb->numBits - lsb->numBits); /** shift back and make space for LSB */
    3da4:	7910      	ldrb	r0, [r2, #4]
    3da6:	4470      	add	r0, lr
    3da8:	b209      	sxth	r1, r1
    3daa:	f1c0 0010 	rsb	r0, r0, #16
    3dae:	4101      	asrs	r1, r0
    3db0:	8019      	strh	r1, [r3, #0]
    *result  |= ((int16_t) ((sensor->regMap[lsb->address] & lsb->mask) >> lsb->offset)); /** OR with LSB */
    3db2:	7850      	ldrb	r0, [r2, #1]
    3db4:	7895      	ldrb	r5, [r2, #2]
    3db6:	5c20      	ldrb	r0, [r4, r0]
    3db8:	78d4      	ldrb	r4, [r2, #3]
    3dba:	ea00 0205 	and.w	r2, r0, r5
    3dbe:	4122      	asrs	r2, r4
    3dc0:	4311      	orrs	r1, r2
    3dc2:	8019      	strh	r1, [r3, #0]
}
    3dc4:	bd30      	pop	{r4, r5, pc}
    3dc6:	bf00      	nop

00003dc8 <tlx493d_common_calculateRawMagneticField>:
                                              int16_t *x, int16_t *y, int16_t *z) {
    3dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3dcc:	4604      	mov	r4, r0
    3dce:	461d      	mov	r5, r3
    3dd0:	f89d 9020 	ldrb.w	r9, [sp, #32]
    3dd4:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    3dd8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    3ddc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    tlx493d_common_concatBytes(sensor, bxMSBBF, bxLSBBF, x);
    3de0:	e9dd 3a0b 	ldrd	r3, sl, [sp, #44]	; 0x2c
    3de4:	f7ff ffc8 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, byMSBBF, byLSBBF, y);
    3de8:	464a      	mov	r2, r9
    3dea:	4653      	mov	r3, sl
    3dec:	4629      	mov	r1, r5
    3dee:	4620      	mov	r0, r4
    3df0:	f7ff ffc2 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, bzMSBBF, bzLSBBF, z);
    3df4:	4643      	mov	r3, r8
    3df6:	463a      	mov	r2, r7
    3df8:	4631      	mov	r1, r6
    3dfa:	4620      	mov	r0, r4
}
    3dfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tlx493d_common_concatBytes(sensor, bzMSBBF, bzLSBBF, z);
    3e00:	f7ff bfba 	b.w	3d78 <tlx493d_common_concatBytes>

00003e04 <tlx493d_common_getTypeAsString>:
    switch(sensor->sensorType) {
    3e04:	7f43      	ldrb	r3, [r0, #29]
    3e06:	2b07      	cmp	r3, #7
    3e08:	d803      	bhi.n	3e12 <tlx493d_common_getTypeAsString+0xe>
    3e0a:	4a03      	ldr	r2, [pc, #12]	; (3e18 <tlx493d_common_getTypeAsString+0x14>)
    3e0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3e10:	4770      	bx	lr
    3e12:	4802      	ldr	r0, [pc, #8]	; (3e1c <tlx493d_common_getTypeAsString+0x18>)
}
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
    3e18:	200003b0 	.word	0x200003b0
    3e1c:	2000195c 	.word	0x2000195c

00003e20 <tlx493d_common_setIICAddress>:
    sensor->comInterface.comLibParams.iic_params.address = addr;
    3e20:	7401      	strb	r1, [r0, #16]
}
    3e22:	4770      	bx	lr

00003e24 <tlx493d_warnFeatureNotAvailableForSensorType>:
    switch(sensor->sensorType) {
    3e24:	7f43      	ldrb	r3, [r0, #29]
void tlx493d_warnFeatureNotAvailableForSensorType(const TLx493D_t *sensor, const char *featureName) {
    3e26:	460a      	mov	r2, r1
    3e28:	2b07      	cmp	r3, #7
    3e2a:	d806      	bhi.n	3e3a <tlx493d_warnFeatureNotAvailableForSensorType+0x16>
    3e2c:	4905      	ldr	r1, [pc, #20]	; (3e44 <tlx493d_warnFeatureNotAvailableForSensorType+0x20>)
    logWarn("Feature '%s' not available for sensor type '%s' !", featureName, tlx493d_common_getTypeAsString(sensor));
    3e2e:	4806      	ldr	r0, [pc, #24]	; (3e48 <tlx493d_warnFeatureNotAvailableForSensorType+0x24>)
    3e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3e34:	4905      	ldr	r1, [pc, #20]	; (3e4c <tlx493d_warnFeatureNotAvailableForSensorType+0x28>)
    3e36:	f7fd bd9d 	b.w	1974 <logPrintln>
    switch(sensor->sensorType) {
    3e3a:	4b05      	ldr	r3, [pc, #20]	; (3e50 <tlx493d_warnFeatureNotAvailableForSensorType+0x2c>)
    logWarn("Feature '%s' not available for sensor type '%s' !", featureName, tlx493d_common_getTypeAsString(sensor));
    3e3c:	4903      	ldr	r1, [pc, #12]	; (3e4c <tlx493d_warnFeatureNotAvailableForSensorType+0x28>)
    3e3e:	4802      	ldr	r0, [pc, #8]	; (3e48 <tlx493d_warnFeatureNotAvailableForSensorType+0x24>)
    3e40:	f7fd bd98 	b.w	1974 <logPrintln>
    3e44:	200003b0 	.word	0x200003b0
    3e48:	20001114 	.word	0x20001114
    3e4c:	20001bb0 	.word	0x20001bb0
    3e50:	2000195c 	.word	0x2000195c

00003e54 <tlx493d_errorBitfieldNotReadableForSensorType>:
    switch(sensor->sensorType) {
    3e54:	7f43      	ldrb	r3, [r0, #29]
void tlx493d_errorBitfieldNotReadableForSensorType(const TLx493D_t *sensor, uint8_t bf) {
    3e56:	460a      	mov	r2, r1
    3e58:	2b07      	cmp	r3, #7
    3e5a:	d806      	bhi.n	3e6a <tlx493d_errorBitfieldNotReadableForSensorType+0x16>
    3e5c:	4905      	ldr	r1, [pc, #20]	; (3e74 <tlx493d_errorBitfieldNotReadableForSensorType+0x20>)
    logError("Bitfield '%d' not readable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3e5e:	4806      	ldr	r0, [pc, #24]	; (3e78 <tlx493d_errorBitfieldNotReadableForSensorType+0x24>)
    3e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3e64:	4905      	ldr	r1, [pc, #20]	; (3e7c <tlx493d_errorBitfieldNotReadableForSensorType+0x28>)
    3e66:	f7fd bd85 	b.w	1974 <logPrintln>
    switch(sensor->sensorType) {
    3e6a:	4b05      	ldr	r3, [pc, #20]	; (3e80 <tlx493d_errorBitfieldNotReadableForSensorType+0x2c>)
    logError("Bitfield '%d' not readable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3e6c:	4903      	ldr	r1, [pc, #12]	; (3e7c <tlx493d_errorBitfieldNotReadableForSensorType+0x28>)
    3e6e:	4802      	ldr	r0, [pc, #8]	; (3e78 <tlx493d_errorBitfieldNotReadableForSensorType+0x24>)
    3e70:	f7fd bd80 	b.w	1974 <logPrintln>
    3e74:	200003b0 	.word	0x200003b0
    3e78:	20000f30 	.word	0x20000f30
    3e7c:	200019ac 	.word	0x200019ac
    3e80:	2000195c 	.word	0x2000195c

00003e84 <tlx493d_errorBitfieldNotWritableForSensorType>:
    switch(sensor->sensorType) {
    3e84:	7f43      	ldrb	r3, [r0, #29]
void tlx493d_errorBitfieldNotWritableForSensorType(const TLx493D_t *sensor, uint8_t bf) {
    3e86:	460a      	mov	r2, r1
    3e88:	2b07      	cmp	r3, #7
    3e8a:	d806      	bhi.n	3e9a <tlx493d_errorBitfieldNotWritableForSensorType+0x16>
    3e8c:	4905      	ldr	r1, [pc, #20]	; (3ea4 <tlx493d_errorBitfieldNotWritableForSensorType+0x20>)
    logError("Bitfield '%d' not writable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3e8e:	4806      	ldr	r0, [pc, #24]	; (3ea8 <tlx493d_errorBitfieldNotWritableForSensorType+0x24>)
    3e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3e94:	4905      	ldr	r1, [pc, #20]	; (3eac <tlx493d_errorBitfieldNotWritableForSensorType+0x28>)
    3e96:	f7fd bd6d 	b.w	1974 <logPrintln>
    switch(sensor->sensorType) {
    3e9a:	4b05      	ldr	r3, [pc, #20]	; (3eb0 <tlx493d_errorBitfieldNotWritableForSensorType+0x2c>)
    logError("Bitfield '%d' not writable for sensor type '%s' !", bf, tlx493d_common_getTypeAsString(sensor));
    3e9c:	4903      	ldr	r1, [pc, #12]	; (3eac <tlx493d_errorBitfieldNotWritableForSensorType+0x28>)
    3e9e:	4802      	ldr	r0, [pc, #8]	; (3ea8 <tlx493d_errorBitfieldNotWritableForSensorType+0x24>)
    3ea0:	f7fd bd68 	b.w	1974 <logPrintln>
    3ea4:	200003b0 	.word	0x200003b0
    3ea8:	20000f30 	.word	0x20000f30
    3eac:	200019e0 	.word	0x200019e0
    3eb0:	2000195c 	.word	0x2000195c

00003eb4 <tlx493d_errorFunctionNotSupportedForSensorType>:
    switch(sensor->sensorType) {
    3eb4:	7f43      	ldrb	r3, [r0, #29]
}


void tlx493d_errorFunctionNotSupportedForSensorType(const TLx493D_t *sensor, const char *func) {
    3eb6:	460a      	mov	r2, r1
    3eb8:	2b07      	cmp	r3, #7
    3eba:	d806      	bhi.n	3eca <tlx493d_errorFunctionNotSupportedForSensorType+0x16>
    3ebc:	4905      	ldr	r1, [pc, #20]	; (3ed4 <tlx493d_errorFunctionNotSupportedForSensorType+0x20>)
    logError("Function '%s' not supported for sensor type '%s' !", func, tlx493d_common_getTypeAsString(sensor));
    3ebe:	4806      	ldr	r0, [pc, #24]	; (3ed8 <tlx493d_errorFunctionNotSupportedForSensorType+0x24>)
    3ec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3ec4:	4905      	ldr	r1, [pc, #20]	; (3edc <tlx493d_errorFunctionNotSupportedForSensorType+0x28>)
    3ec6:	f7fd bd55 	b.w	1974 <logPrintln>
    switch(sensor->sensorType) {
    3eca:	4b05      	ldr	r3, [pc, #20]	; (3ee0 <tlx493d_errorFunctionNotSupportedForSensorType+0x2c>)
    logError("Function '%s' not supported for sensor type '%s' !", func, tlx493d_common_getTypeAsString(sensor));
    3ecc:	4903      	ldr	r1, [pc, #12]	; (3edc <tlx493d_errorFunctionNotSupportedForSensorType+0x28>)
    3ece:	4802      	ldr	r0, [pc, #8]	; (3ed8 <tlx493d_errorFunctionNotSupportedForSensorType+0x24>)
    3ed0:	f7fd bd50 	b.w	1974 <logPrintln>
    3ed4:	200003b0 	.word	0x200003b0
    3ed8:	20000f30 	.word	0x20000f30
    3edc:	20001a14 	.word	0x20001a14
    3ee0:	2000195c 	.word	0x2000195c

00003ee4 <tlx493d_errorSelectionNotSupportedForSensorType>:
}


void tlx493d_errorSelectionNotSupportedForSensorType(const TLx493D_t *sensor, uint8_t sel, const char *selType) {
    3ee4:	b510      	push	{r4, lr}
    switch(sensor->sensorType) {
    3ee6:	7f40      	ldrb	r0, [r0, #29]
void tlx493d_errorSelectionNotSupportedForSensorType(const TLx493D_t *sensor, uint8_t sel, const char *selType) {
    3ee8:	b082      	sub	sp, #8
    3eea:	4613      	mov	r3, r2
    3eec:	2807      	cmp	r0, #7
    3eee:	d80a      	bhi.n	3f06 <tlx493d_errorSelectionNotSupportedForSensorType+0x22>
    3ef0:	4a06      	ldr	r2, [pc, #24]	; (3f0c <tlx493d_errorSelectionNotSupportedForSensorType+0x28>)
    3ef2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
    logError("Selection '%d' for type '%s' not supported for sensor type '%s' !", sel, selType, tlx493d_common_getTypeAsString(sensor));
    3ef6:	460a      	mov	r2, r1
    3ef8:	4805      	ldr	r0, [pc, #20]	; (3f10 <tlx493d_errorSelectionNotSupportedForSensorType+0x2c>)
    3efa:	4906      	ldr	r1, [pc, #24]	; (3f14 <tlx493d_errorSelectionNotSupportedForSensorType+0x30>)
    3efc:	9400      	str	r4, [sp, #0]
    3efe:	f7fd fd39 	bl	1974 <logPrintln>
}
    3f02:	b002      	add	sp, #8
    3f04:	bd10      	pop	{r4, pc}
    switch(sensor->sensorType) {
    3f06:	4c04      	ldr	r4, [pc, #16]	; (3f18 <tlx493d_errorSelectionNotSupportedForSensorType+0x34>)
    3f08:	e7f5      	b.n	3ef6 <tlx493d_errorSelectionNotSupportedForSensorType+0x12>
    3f0a:	bf00      	nop
    3f0c:	200003b0 	.word	0x200003b0
    3f10:	20000f30 	.word	0x20000f30
    3f14:	20001a48 	.word	0x20001a48
    3f18:	2000195c 	.word	0x2000195c

00003f1c <tlx493d_gen_2_calculateRawTemperature>:
    tlx493d_common_calculateRawTemperature(sensor, tempMSBBF, tempLSBBF, temperature);
    3f1c:	f7ff bdf2 	b.w	3b04 <tlx493d_common_calculateRawTemperature>

00003f20 <tlx493d_gen_2_calculateRawMagneticField>:
                                          uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    3f20:	b410      	push	{r4}
    3f22:	f89d 4004 	ldrb.w	r4, [sp, #4]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    3f26:	9401      	str	r4, [sp, #4]
                                          uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    3f28:	f89d 4008 	ldrb.w	r4, [sp, #8]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    3f2c:	9402      	str	r4, [sp, #8]
                                          uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    3f2e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    3f32:	9403      	str	r4, [sp, #12]
}
    3f34:	f85d 4b04 	ldr.w	r4, [sp], #4
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    3f38:	f7ff bf46 	b.w	3dc8 <tlx493d_common_calculateRawMagneticField>
    3f3c:	0000      	movs	r0, r0
	...

00003f40 <tlx493d_gen_2_calculateTemperature>:
void tlx493d_gen_2_calculateTemperature(TLx493D_t *sensor, uint8_t tempMSBBF, uint8_t tempLSBBF, double *temperature) {
    3f40:	b510      	push	{r4, lr}
    3f42:	b082      	sub	sp, #8
    int16_t value = 0;
    3f44:	f04f 0c00 	mov.w	ip, #0
void tlx493d_gen_2_calculateTemperature(TLx493D_t *sensor, uint8_t tempMSBBF, uint8_t tempLSBBF, double *temperature) {
    3f48:	461c      	mov	r4, r3
    tlx493d_common_concatBytes(sensor, tempMSBBF, tempLSBBF, &value);
    3f4a:	f10d 0306 	add.w	r3, sp, #6
    int16_t value = 0;
    3f4e:	f8ad c006 	strh.w	ip, [sp, #6]
    tlx493d_common_concatBytes(sensor, tempMSBBF, tempLSBBF, &value);
    3f52:	f7ff ff11 	bl	3d78 <tlx493d_common_concatBytes>
    value <<= 2; /** least significant 2 bits are implicit, therefore shift by 2 ! */
    3f56:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
    *temperature = (((double) value - GEN_2_TEMP_OFFSET) * GEN_2_TEMP_RESOLUTION) + GEN_2_TEMP_REF;
    3f5a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
    value <<= 2; /** least significant 2 bits are implicit, therefore shift by 2 ! */
    3f5e:	0092      	lsls	r2, r2, #2
    *temperature = (((double) value - GEN_2_TEMP_OFFSET) * GEN_2_TEMP_RESOLUTION) + GEN_2_TEMP_REF;
    3f60:	b213      	sxth	r3, r2
    3f62:	ee07 3a10 	vmov	s14, r3
    3f66:	ed9f 4b08 	vldr	d4, [pc, #32]	; 3f88 <tlx493d_gen_2_calculateTemperature+0x48>
    3f6a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    3f6e:	ed9f 5b08 	vldr	d5, [pc, #32]	; 3f90 <tlx493d_gen_2_calculateTemperature+0x50>
    3f72:	ee37 7b44 	vsub.f64	d7, d7, d4
    3f76:	eea7 6b05 	vfma.f64	d6, d7, d5
    3f7a:	ed84 6b00 	vstr	d6, [r4]
}
    3f7e:	b002      	add	sp, #8
    3f80:	bd10      	pop	{r4, pc}
    3f82:	bf00      	nop
    3f84:	f3af 8000 	nop.w
    3f88:	00000000 	.word	0x00000000
    3f8c:	40927000 	.word	0x40927000
    3f90:	eb851eb8 	.word	0xeb851eb8
    3f94:	3fceb851 	.word	0x3fceb851

00003f98 <tlx493d_gen_2_calculateMagneticField>:
                                          uint8_t bzMSBBF, uint8_t bzLSBBF, double *x, double *y, double *z) {
    3f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f9c:	b082      	sub	sp, #8
    3f9e:	461d      	mov	r5, r3
    int16_t valueX = 0;
    3fa0:	2300      	movs	r3, #0
                                          uint8_t bzMSBBF, uint8_t bzLSBBF, double *x, double *y, double *z) {
    3fa2:	4604      	mov	r4, r0
    3fa4:	f89d 8020 	ldrb.w	r8, [sp, #32]
    3fa8:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    3fac:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    int16_t valueX = 0;
    3fb0:	f8ad 3002 	strh.w	r3, [sp, #2]
    int16_t valueY = 0;
    3fb4:	f8ad 3004 	strh.w	r3, [sp, #4]
    int16_t valueZ = 0;
    3fb8:	f8ad 3006 	strh.w	r3, [sp, #6]
    tlx493d_common_concatBytes(sensor, bxMSBBF, bxLSBBF, &valueX);
    3fbc:	f10d 0302 	add.w	r3, sp, #2
    3fc0:	f7ff feda 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, byMSBBF, byLSBBF, &valueY);
    3fc4:	4642      	mov	r2, r8
    3fc6:	4629      	mov	r1, r5
    3fc8:	ab01      	add	r3, sp, #4
    3fca:	4620      	mov	r0, r4
    3fcc:	f7ff fed4 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, bzMSBBF, bzLSBBF, &valueZ);
    3fd0:	463a      	mov	r2, r7
    3fd2:	4631      	mov	r1, r6
    3fd4:	f10d 0306 	add.w	r3, sp, #6
    3fd8:	4620      	mov	r0, r4
    3fda:	f7ff fecd 	bl	3d78 <tlx493d_common_concatBytes>
    double scaledSensitivity = GEN_2_FULL_RANGE_FIELD_SENSITIVITY * sensor->functions->getSensitivityScaleFactor(sensor);
    3fde:	68a3      	ldr	r3, [r4, #8]
    3fe0:	4620      	mov	r0, r4
    3fe2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3fe6:	4798      	blx	r3
    *x = ((double) valueX) / scaledSensitivity;
    3fe8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    double scaledSensitivity = GEN_2_FULL_RANGE_FIELD_SENSITIVITY * sensor->functions->getSensitivityScaleFactor(sensor);
    3fec:	ed9f 7b12 	vldr	d7, [pc, #72]	; 4038 <tlx493d_gen_2_calculateMagneticField+0xa0>
    *x = ((double) valueX) / scaledSensitivity;
    3ff0:	ee05 3a10 	vmov	s10, r3
    *y = ((double) valueY) / scaledSensitivity;
    3ff4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    double scaledSensitivity = GEN_2_FULL_RANGE_FIELD_SENSITIVITY * sensor->functions->getSensitivityScaleFactor(sensor);
    3ff8:	ee20 0b07 	vmul.f64	d0, d0, d7
    *y = ((double) valueY) / scaledSensitivity;
    3ffc:	ee06 3a10 	vmov	s12, r3
    *z = ((double) valueZ) / scaledSensitivity;                           
    4000:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    *x = ((double) valueX) / scaledSensitivity;
    4004:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    *z = ((double) valueZ) / scaledSensitivity;                           
    4008:	ee07 3a10 	vmov	s14, r3
    *y = ((double) valueY) / scaledSensitivity;
    400c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    *x = ((double) valueX) / scaledSensitivity;
    4010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    *z = ((double) valueZ) / scaledSensitivity;                           
    4012:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    *x = ((double) valueX) / scaledSensitivity;
    4016:	ee85 4b00 	vdiv.f64	d4, d5, d0
    *y = ((double) valueY) / scaledSensitivity;
    401a:	ee86 5b00 	vdiv.f64	d5, d6, d0
    *z = ((double) valueZ) / scaledSensitivity;                           
    401e:	ee87 6b00 	vdiv.f64	d6, d7, d0
    *x = ((double) valueX) / scaledSensitivity;
    4022:	ed83 4b00 	vstr	d4, [r3]
    *y = ((double) valueY) / scaledSensitivity;
    4026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4028:	ed83 5b00 	vstr	d5, [r3]
    *z = ((double) valueZ) / scaledSensitivity;                           
    402c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    402e:	ed83 6b00 	vstr	d6, [r3]
}
    4032:	b002      	add	sp, #8
    4034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4038:	cccccccd 	.word	0xcccccccd
    403c:	401ecccc 	.word	0x401ecccc

00004040 <tlx493d_gen_2_setOneConfigBitfield>:
bool tlx493d_gen_2_setOneConfigBitfield(TLx493D_t *sensor, uint8_t bfBF, uint8_t cpBF, uint8_t bfVal) {
    4040:	b538      	push	{r3, r4, r5, lr}
    4042:	4604      	mov	r4, r0
    4044:	4615      	mov	r5, r2
    tlx493d_common_setBitfield(sensor, bfBF, bfVal);
    4046:	461a      	mov	r2, r3
    4048:	f7ff fe32 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    404c:	68a3      	ldr	r3, [r4, #8]
    404e:	4620      	mov	r0, r4
    4050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    4054:	4798      	blx	r3
    4056:	4629      	mov	r1, r5
    4058:	4602      	mov	r2, r0
    405a:	4620      	mov	r0, r4
    405c:	f7ff fe28 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, cpBF);
    4060:	4629      	mov	r1, r5
    4062:	4620      	mov	r0, r4
}
    4064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, cpBF);
    4068:	f7ff be56 	b.w	3d18 <tlx493d_common_writeRegister>

0000406c <tlx493d_gen_2_setTwoConfigBitfields>:
bool tlx493d_gen_2_setTwoConfigBitfields(TLx493D_t *sensor, uint8_t firstBF, uint8_t secondBF, uint8_t cpBF, uint8_t firstVal, uint8_t secondVal) {
    406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    406e:	4604      	mov	r4, r0
    4070:	4616      	mov	r6, r2
    4072:	f89d 701c 	ldrb.w	r7, [sp, #28]
    4076:	461d      	mov	r5, r3
    tlx493d_common_setBitfield(sensor, firstBF, firstVal);
    4078:	f89d 2018 	ldrb.w	r2, [sp, #24]
    407c:	f7ff fe18 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, secondBF, secondVal);
    4080:	463a      	mov	r2, r7
    4082:	4631      	mov	r1, r6
    4084:	4620      	mov	r0, r4
    4086:	f7ff fe13 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    408a:	68a3      	ldr	r3, [r4, #8]
    408c:	4620      	mov	r0, r4
    408e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    4092:	4798      	blx	r3
    4094:	4629      	mov	r1, r5
    4096:	4602      	mov	r2, r0
    4098:	4620      	mov	r0, r4
    409a:	f7ff fe09 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, cpBF);
    409e:	4629      	mov	r1, r5
    40a0:	4620      	mov	r0, r4
}
    40a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return tlx493d_common_writeRegister(sensor, cpBF);
    40a6:	f7ff be37 	b.w	3d18 <tlx493d_common_writeRegister>
    40aa:	bf00      	nop

000040ac <tlx493d_gen_2_setMeasurement>:
bool tlx493d_gen_2_setMeasurement(TLx493D_t *sensor, uint8_t dtBF, uint8_t amBF, uint8_t cpBF, TLx493D_MeasurementType_t val) {
    40ac:	b530      	push	{r4, r5, lr}
    40ae:	b083      	sub	sp, #12
    40b0:	4684      	mov	ip, r0
    40b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
    switch(val) {
    40b6:	2c01      	cmp	r4, #1
    40b8:	d014      	beq.n	40e4 <tlx493d_gen_2_setMeasurement+0x38>
    40ba:	2c06      	cmp	r4, #6
    40bc:	d007      	beq.n	40ce <tlx493d_gen_2_setMeasurement+0x22>
    40be:	b17c      	cbz	r4, 40e0 <tlx493d_gen_2_setMeasurement+0x34>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_MeasurementType_t");
    40c0:	4a0a      	ldr	r2, [pc, #40]	; (40ec <tlx493d_gen_2_setMeasurement+0x40>)
    40c2:	4621      	mov	r1, r4
    40c4:	f7ff ff0e 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    40c8:	2000      	movs	r0, #0
}
    40ca:	b003      	add	sp, #12
    40cc:	bd30      	pop	{r4, r5, pc}
                              am = 1;
    40ce:	2401      	movs	r4, #1
        case TLx493D_BxBy_e : dt = 1;
    40d0:	4625      	mov	r5, r4
    return tlx493d_gen_2_setTwoConfigBitfields(sensor, dtBF, amBF, cpBF, dt, am);
    40d2:	4660      	mov	r0, ip
    40d4:	9401      	str	r4, [sp, #4]
    40d6:	9500      	str	r5, [sp, #0]
    40d8:	f7ff ffc8 	bl	406c <tlx493d_gen_2_setTwoConfigBitfields>
}
    40dc:	b003      	add	sp, #12
    40de:	bd30      	pop	{r4, r5, pc}
    switch(val) {
    40e0:	2501      	movs	r5, #1
    40e2:	e7f6      	b.n	40d2 <tlx493d_gen_2_setMeasurement+0x26>
                                    am = 0;
    40e4:	2400      	movs	r4, #0
        case TLx493D_BxByBzTemp_e : dt = 0;
    40e6:	4625      	mov	r5, r4
    40e8:	e7f3      	b.n	40d2 <tlx493d_gen_2_setMeasurement+0x26>
    40ea:	bf00      	nop
    40ec:	2000064c 	.word	0x2000064c

000040f0 <tlx493d_gen_2_setTrigger>:
    switch(val) {
    40f0:	2b02      	cmp	r3, #2
bool tlx493d_gen_2_setTrigger(TLx493D_t *sensor, uint8_t trigBF, uint8_t cpBF, TLx493D_TriggerType_t val) {
    40f2:	b538      	push	{r3, r4, r5, lr}
    40f4:	d814      	bhi.n	4120 <tlx493d_gen_2_setTrigger+0x30>
    return tlx493d_gen_2_setOneConfigBitfield(sensor, trigBF, cpBF, trig);
    40f6:	4604      	mov	r4, r0
    40f8:	4615      	mov	r5, r2
    tlx493d_common_setBitfield(sensor, bfBF, bfVal);
    40fa:	461a      	mov	r2, r3
    40fc:	f7ff fdd8 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    4100:	68a3      	ldr	r3, [r4, #8]
    4102:	4620      	mov	r0, r4
    4104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    4108:	4798      	blx	r3
    410a:	4629      	mov	r1, r5
    410c:	4602      	mov	r2, r0
    410e:	4620      	mov	r0, r4
    4110:	f7ff fdce 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, cpBF);
    4114:	4629      	mov	r1, r5
    4116:	4620      	mov	r0, r4
}
    4118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, cpBF);
    411c:	f7ff bdfc 	b.w	3d18 <tlx493d_common_writeRegister>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_TriggerType_t");
    4120:	4a02      	ldr	r2, [pc, #8]	; (412c <tlx493d_gen_2_setTrigger+0x3c>)
    4122:	4619      	mov	r1, r3
    4124:	f7ff fede 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    4128:	2000      	movs	r0, #0
    412a:	bd38      	pop	{r3, r4, r5, pc}
    412c:	20001ae0 	.word	0x20001ae0

00004130 <tlx493d_gen_2_setSensitivity>:
                                  TLx493D_SensitivityType_t val) {
    4130:	b538      	push	{r3, r4, r5, lr}
    4132:	4696      	mov	lr, r2
    4134:	f89d 5010 	ldrb.w	r5, [sp, #16]
    4138:	f89d 2014 	ldrb.w	r2, [sp, #20]
    switch(availSens) {
    413c:	b131      	cbz	r1, 414c <tlx493d_gen_2_setSensitivity+0x1c>
    413e:	2901      	cmp	r1, #1
    4140:	d008      	beq.n	4154 <tlx493d_gen_2_setSensitivity+0x24>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, availSens, "TLx493D_AvailableSensitivityType_t");
    4142:	4a12      	ldr	r2, [pc, #72]	; (418c <tlx493d_gen_2_setSensitivity+0x5c>)
    4144:	f7ff fece 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    4148:	2000      	movs	r0, #0
}
    414a:	bd38      	pop	{r3, r4, r5, pc}
        case TLx493D_HAS_X1_e : return( val == TLx493D_FULL_RANGE_e );
    414c:	fab2 f082 	clz	r0, r2
    4150:	0940      	lsrs	r0, r0, #5
}
    4152:	bd38      	pop	{r3, r4, r5, pc}
                                                                            : tlx493d_gen_2_setOneConfigBitfield(sensor, x2BF, cpBF, (val == TLx493D_FULL_RANGE_e) ? 0 : 1);
    4154:	2a02      	cmp	r2, #2
    4156:	d101      	bne.n	415c <tlx493d_gen_2_setSensitivity+0x2c>
    4158:	2000      	movs	r0, #0
}
    415a:	bd38      	pop	{r3, r4, r5, pc}
    tlx493d_common_setBitfield(sensor, bfBF, bfVal);
    415c:	3a00      	subs	r2, #0
    415e:	4604      	mov	r4, r0
    4160:	4671      	mov	r1, lr
    4162:	bf18      	it	ne
    4164:	2201      	movne	r2, #1
    4166:	f7ff fda3 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    416a:	68a3      	ldr	r3, [r4, #8]
    416c:	4620      	mov	r0, r4
    416e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    4172:	4798      	blx	r3
    4174:	4629      	mov	r1, r5
    4176:	4602      	mov	r2, r0
    4178:	4620      	mov	r0, r4
    417a:	f7ff fd99 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, cpBF);
    417e:	4629      	mov	r1, r5
    4180:	4620      	mov	r0, r4
}
    4182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, cpBF);
    4186:	f7ff bdc7 	b.w	3d18 <tlx493d_common_writeRegister>
    418a:	bf00      	nop
    418c:	20001abc 	.word	0x20001abc

00004190 <tlx493d_gen_2_setDefaultConfig>:
bool tlx493d_gen_2_setDefaultConfig(TLx493D_t *sensor, uint8_t cpBF, uint8_t caBF, uint8_t intBF) {
    4190:	b570      	push	{r4, r5, r6, lr}
    4192:	4604      	mov	r4, r0
    4194:	461e      	mov	r6, r3
    4196:	460d      	mov	r5, r1
    tlx493d_common_setBitfield(sensor, caBF, 0);
    4198:	4611      	mov	r1, r2
    419a:	2200      	movs	r2, #0
    419c:	f7ff fd88 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, intBF, 1);
    41a0:	4620      	mov	r0, r4
    41a2:	2201      	movs	r2, #1
    41a4:	4631      	mov	r1, r6
    41a6:	f7ff fd83 	bl	3cb0 <tlx493d_common_setBitfield>
    if( sensor->functions->enable1ByteReadMode(sensor) ) {
    41aa:	68a3      	ldr	r3, [r4, #8]
    41ac:	4620      	mov	r0, r4
    41ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    41b0:	4798      	blx	r3
    41b2:	b900      	cbnz	r0, 41b6 <tlx493d_gen_2_setDefaultConfig+0x26>
}
    41b4:	bd70      	pop	{r4, r5, r6, pc}
        if( ! sensor->functions->readRegisters(sensor) ) {
    41b6:	68a3      	ldr	r3, [r4, #8]
    41b8:	4620      	mov	r0, r4
    41ba:	689b      	ldr	r3, [r3, #8]
    41bc:	4798      	blx	r3
    41be:	b1e8      	cbz	r0, 41fc <tlx493d_gen_2_setDefaultConfig+0x6c>
        if( (tlx493d_common_returnBitfield(sensor, cpBF) == 0x01U) && !sensor->functions->hasValidConfigurationParity(sensor) ) {
    41c0:	4629      	mov	r1, r5
    41c2:	4620      	mov	r0, r4
    41c4:	f7ff fd46 	bl	3c54 <tlx493d_common_returnBitfield>
    41c8:	2801      	cmp	r0, #1
    41ca:	d00f      	beq.n	41ec <tlx493d_gen_2_setDefaultConfig+0x5c>
            tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    41cc:	68a3      	ldr	r3, [r4, #8]
    41ce:	4620      	mov	r0, r4
    41d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    41d4:	4798      	blx	r3
    41d6:	4629      	mov	r1, r5
    41d8:	4602      	mov	r2, r0
    41da:	4620      	mov	r0, r4
    41dc:	f7ff fd68 	bl	3cb0 <tlx493d_common_setBitfield>
        return tlx493d_common_writeRegister(sensor, cpBF);
    41e0:	4629      	mov	r1, r5
    41e2:	4620      	mov	r0, r4
}
    41e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tlx493d_common_writeRegister(sensor, cpBF);
    41e8:	f7ff bd96 	b.w	3d18 <tlx493d_common_writeRegister>
        if( (tlx493d_common_returnBitfield(sensor, cpBF) == 0x01U) && !sensor->functions->hasValidConfigurationParity(sensor) ) {
    41ec:	68a3      	ldr	r3, [r4, #8]
    41ee:	4620      	mov	r0, r4
    41f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    41f4:	4798      	blx	r3
    41f6:	2800      	cmp	r0, #0
    41f8:	d1e8      	bne.n	41cc <tlx493d_gen_2_setDefaultConfig+0x3c>
    41fa:	e7ec      	b.n	41d6 <tlx493d_gen_2_setDefaultConfig+0x46>
            logError("readRegisters failed !");
    41fc:	4902      	ldr	r1, [pc, #8]	; (4208 <tlx493d_gen_2_setDefaultConfig+0x78>)
    41fe:	4803      	ldr	r0, [pc, #12]	; (420c <tlx493d_gen_2_setDefaultConfig+0x7c>)
    4200:	f7fd fbb8 	bl	1974 <logPrintln>
    4204:	e7dc      	b.n	41c0 <tlx493d_gen_2_setDefaultConfig+0x30>
    4206:	bf00      	nop
    4208:	20001a8c 	.word	0x20001a8c
    420c:	20000f30 	.word	0x20000f30

00004210 <tlx493d_gen_2_setIICAddress>:
    switch (addr) {
    4210:	2b03      	cmp	r3, #3
bool tlx493d_gen_2_setIICAddress(TLx493D_t *sensor, uint8_t iicadrBF, uint8_t fpBF, TLx493D_IICAddressType_t addr) {
    4212:	b570      	push	{r4, r5, r6, lr}
    4214:	d902      	bls.n	421c <tlx493d_gen_2_setIICAddress+0xc>
            return false;
    4216:	2400      	movs	r4, #0
}
    4218:	4620      	mov	r0, r4
    421a:	bd70      	pop	{r4, r5, r6, pc}
    421c:	4615      	mov	r5, r2
    421e:	4a0e      	ldr	r2, [pc, #56]	; (4258 <tlx493d_gen_2_setIICAddress+0x48>)
    4220:	4604      	mov	r4, r0
    4222:	5cd6      	ldrb	r6, [r2, r3]
    tlx493d_common_setBitfield(sensor, iicadrBF, bitfieldValue);
    4224:	461a      	mov	r2, r3
    4226:	f7ff fd43 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, sensor->functions->calculateFuseParity(sensor));
    422a:	68a3      	ldr	r3, [r4, #8]
    422c:	4620      	mov	r0, r4
    422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4232:	4798      	blx	r3
    4234:	4629      	mov	r1, r5
    4236:	4602      	mov	r2, r0
    4238:	4620      	mov	r0, r4
    423a:	f7ff fd39 	bl	3cb0 <tlx493d_common_setBitfield>
    bool b = tlx493d_common_writeRegister(sensor, fpBF);
    423e:	4629      	mov	r1, r5
    4240:	4620      	mov	r0, r4
    4242:	f7ff fd69 	bl	3d18 <tlx493d_common_writeRegister>
    4246:	4603      	mov	r3, r0
    tlx493d_common_setIICAddress(sensor, deviceAddress);
    4248:	4620      	mov	r0, r4
    424a:	4631      	mov	r1, r6
    bool b = tlx493d_common_writeRegister(sensor, fpBF);
    424c:	461c      	mov	r4, r3
    tlx493d_common_setIICAddress(sensor, deviceAddress);
    424e:	f7ff fde7 	bl	3e20 <tlx493d_common_setIICAddress>
}
    4252:	4620      	mov	r0, r4
    4254:	bd70      	pop	{r4, r5, r6, pc}
    4256:	bf00      	nop
    4258:	200003f0 	.word	0x200003f0

0000425c <tlx493d_gen_2_setCollisionAvoidance>:
bool tlx493d_gen_2_setCollisionAvoidance(TLx493D_t *sensor, uint8_t caBF, uint8_t fpBF, uint8_t ca) {
    425c:	b570      	push	{r4, r5, r6, lr}
    425e:	4604      	mov	r4, r0
    4260:	4616      	mov	r6, r2
    tlx493d_common_setBitfield(sensor, caBF, ca);
    4262:	461a      	mov	r2, r3
bool tlx493d_gen_2_setCollisionAvoidance(TLx493D_t *sensor, uint8_t caBF, uint8_t fpBF, uint8_t ca) {
    4264:	460d      	mov	r5, r1
    tlx493d_common_setBitfield(sensor, caBF, ca);
    4266:	f7ff fd23 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, sensor->functions->calculateFuseParity(sensor));
    426a:	68a3      	ldr	r3, [r4, #8]
    426c:	4620      	mov	r0, r4
    426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4272:	4798      	blx	r3
    4274:	4631      	mov	r1, r6
    4276:	4602      	mov	r2, r0
    4278:	4620      	mov	r0, r4
    427a:	f7ff fd19 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, caBF);
    427e:	4629      	mov	r1, r5
    4280:	4620      	mov	r0, r4
}
    4282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return tlx493d_common_writeRegister(sensor, caBF);
    4286:	f7ff bd47 	b.w	3d18 <tlx493d_common_writeRegister>
    428a:	bf00      	nop

0000428c <tlx493d_gen_2_setInterrupt>:
    428c:	b570      	push	{r4, r5, r6, lr}
    428e:	4604      	mov	r4, r0
    4290:	4616      	mov	r6, r2
    4292:	461a      	mov	r2, r3
    4294:	460d      	mov	r5, r1
    4296:	f7ff fd0b 	bl	3cb0 <tlx493d_common_setBitfield>
    429a:	68a3      	ldr	r3, [r4, #8]
    429c:	4620      	mov	r0, r4
    429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    42a2:	4798      	blx	r3
    42a4:	4631      	mov	r1, r6
    42a6:	4602      	mov	r2, r0
    42a8:	4620      	mov	r0, r4
    42aa:	f7ff fd01 	bl	3cb0 <tlx493d_common_setBitfield>
    42ae:	4629      	mov	r1, r5
    42b0:	4620      	mov	r0, r4
    42b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42b6:	f7ff bd2f 	b.w	3d18 <tlx493d_common_writeRegister>
    42ba:	bf00      	nop

000042bc <tlx493d_gen_2_setPowerMode>:
bool tlx493d_gen_2_setPowerMode(TLx493D_t *sensor, uint8_t modeBF, uint8_t fpBF, TLx493D_PowerModeType_t val) {
    42bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t mod1 = sensor->regDef[fpBF].address;
    42be:	eb02 0682 	add.w	r6, r2, r2, lsl #2
bool tlx493d_gen_2_setPowerMode(TLx493D_t *sensor, uint8_t modeBF, uint8_t fpBF, TLx493D_PowerModeType_t val) {
    42c2:	4615      	mov	r5, r2
    uint8_t mod1 = sensor->regDef[fpBF].address;
    42c4:	6842      	ldr	r2, [r0, #4]
    switch(val) {
    42c6:	2b02      	cmp	r3, #2
bool tlx493d_gen_2_setPowerMode(TLx493D_t *sensor, uint8_t modeBF, uint8_t fpBF, TLx493D_PowerModeType_t val) {
    42c8:	b084      	sub	sp, #16
    42ca:	4604      	mov	r4, r0
    uint8_t mod1 = sensor->regDef[fpBF].address;
    42cc:	4432      	add	r2, r6
    42ce:	7856      	ldrb	r6, [r2, #1]
    switch(val) {
    42d0:	d030      	beq.n	4334 <tlx493d_gen_2_setPowerMode+0x78>
    42d2:	2b04      	cmp	r3, #4
    42d4:	d008      	beq.n	42e8 <tlx493d_gen_2_setPowerMode+0x2c>
    42d6:	2b01      	cmp	r3, #1
    42d8:	d02a      	beq.n	4330 <tlx493d_gen_2_setPowerMode+0x74>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_PowerModeType_t");
    42da:	4a17      	ldr	r2, [pc, #92]	; (4338 <tlx493d_gen_2_setPowerMode+0x7c>)
    42dc:	4619      	mov	r1, r3
    42de:	f7ff fe01 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    42e2:	2000      	movs	r0, #0
}
    42e4:	b004      	add	sp, #16
    42e6:	bd70      	pop	{r4, r5, r6, pc}
    switch(val) {
    42e8:	2201      	movs	r2, #1
    tlx493d_common_setBitfield(sensor, modeBF, mode);
    42ea:	4620      	mov	r0, r4
    42ec:	f7ff fce0 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, sensor->functions->calculateFuseParity(sensor));
    42f0:	68a3      	ldr	r3, [r4, #8]
    42f2:	4620      	mov	r0, r4
    42f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    42f8:	4798      	blx	r3
    42fa:	4629      	mov	r1, r5
    42fc:	4602      	mov	r2, r0
    42fe:	4620      	mov	r0, r4
    4300:	f7ff fcd6 	bl	3cb0 <tlx493d_common_setBitfield>
                       sensor->regMap[mod1],
    4304:	6822      	ldr	r2, [r4, #0]
    uint8_t buf[4] = { mod1,
    4306:	f88d 600c 	strb.w	r6, [sp, #12]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    430a:	2300      	movs	r3, #0
                       sensor->regMap[mod1],
    430c:	5d91      	ldrb	r1, [r2, r6]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    430e:	4432      	add	r2, r6
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4310:	4620      	mov	r0, r4
    uint8_t buf[4] = { mod1,
    4312:	f88d 100d 	strb.w	r1, [sp, #13]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    4316:	7851      	ldrb	r1, [r2, #1]
    uint8_t buf[4] = { mod1,
    4318:	f88d 100e 	strb.w	r1, [sp, #14]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    431c:	a903      	add	r1, sp, #12
                       sensor->regMap[mod1 + 2U]
    431e:	7894      	ldrb	r4, [r2, #2]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4320:	2204      	movs	r2, #4
    4322:	9300      	str	r3, [sp, #0]
    uint8_t buf[4] = { mod1,
    4324:	f88d 400f 	strb.w	r4, [sp, #15]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4328:	f7fd f940 	bl	15ac <tlx493d_transfer>
}
    432c:	b004      	add	sp, #16
    432e:	bd70      	pop	{r4, r5, r6, pc}
        case TLx493D_FAST_MODE_e : mode = 0x03;
    4330:	2203      	movs	r2, #3
    4332:	e7da      	b.n	42ea <tlx493d_gen_2_setPowerMode+0x2e>
        case TLx493D_LOW_POWER_MODE_e : mode = 0x00;
    4334:	2200      	movs	r2, #0
    4336:	e7d8      	b.n	42ea <tlx493d_gen_2_setPowerMode+0x2e>
    4338:	20001aa4 	.word	0x20001aa4

0000433c <tlx493d_gen_2_setUpdateRateFastSlow>:
bool tlx493d_gen_2_setUpdateRateFastSlow(TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF, TLx493D_UpdateRateType_t val) {
    433c:	b570      	push	{r4, r5, r6, lr}
    433e:	460d      	mov	r5, r1
    uint8_t mod1 = sensor->regDef[fpBF].address;
    4340:	6846      	ldr	r6, [r0, #4]
bool tlx493d_gen_2_setUpdateRateFastSlow(TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF, TLx493D_UpdateRateType_t val) {
    4342:	4611      	mov	r1, r2
    4344:	b084      	sub	sp, #16
    uint8_t mod1 = sensor->regDef[fpBF].address;
    4346:	eb05 0285 	add.w	r2, r5, r5, lsl #2
bool tlx493d_gen_2_setUpdateRateFastSlow(TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF, TLx493D_UpdateRateType_t val) {
    434a:	4604      	mov	r4, r0
    uint8_t mod1 = sensor->regDef[fpBF].address;
    434c:	eb06 0c02 	add.w	ip, r6, r2
    4350:	f89c 6001 	ldrb.w	r6, [ip, #1]
    switch(val) {
    4354:	b143      	cbz	r3, 4368 <tlx493d_gen_2_setUpdateRateFastSlow+0x2c>
    4356:	2b01      	cmp	r3, #1
    4358:	d006      	beq.n	4368 <tlx493d_gen_2_setUpdateRateFastSlow+0x2c>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_UpdateRateType_t");
    435a:	4a15      	ldr	r2, [pc, #84]	; (43b0 <tlx493d_gen_2_setUpdateRateFastSlow+0x74>)
    435c:	4619      	mov	r1, r3
    435e:	f7ff fdc1 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    4362:	2000      	movs	r0, #0
}
    4364:	b004      	add	sp, #16
    4366:	bd70      	pop	{r4, r5, r6, pc}
    tlx493d_common_setBitfield(sensor, prdBF, rate);
    4368:	461a      	mov	r2, r3
    436a:	4620      	mov	r0, r4
    436c:	f7ff fca0 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, sensor->functions->calculateFuseParity(sensor));
    4370:	68a3      	ldr	r3, [r4, #8]
    4372:	4620      	mov	r0, r4
    4374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4378:	4798      	blx	r3
    437a:	4629      	mov	r1, r5
    437c:	4602      	mov	r2, r0
    437e:	4620      	mov	r0, r4
    4380:	f7ff fc96 	bl	3cb0 <tlx493d_common_setBitfield>
                       sensor->regMap[mod1],
    4384:	6822      	ldr	r2, [r4, #0]
    uint8_t buf[4] = { mod1,
    4386:	f88d 600c 	strb.w	r6, [sp, #12]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    438a:	2300      	movs	r3, #0
                       sensor->regMap[mod1],
    438c:	5d91      	ldrb	r1, [r2, r6]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    438e:	4432      	add	r2, r6
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4390:	4620      	mov	r0, r4
    uint8_t buf[4] = { mod1,
    4392:	f88d 100d 	strb.w	r1, [sp, #13]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    4396:	7851      	ldrb	r1, [r2, #1]
    uint8_t buf[4] = { mod1,
    4398:	f88d 100e 	strb.w	r1, [sp, #14]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    439c:	a903      	add	r1, sp, #12
                       sensor->regMap[mod1 + 2U]
    439e:	7894      	ldrb	r4, [r2, #2]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    43a0:	2204      	movs	r2, #4
    43a2:	9300      	str	r3, [sp, #0]
    uint8_t buf[4] = { mod1,
    43a4:	f88d 400f 	strb.w	r4, [sp, #15]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    43a8:	f7fd f900 	bl	15ac <tlx493d_transfer>
}
    43ac:	b004      	add	sp, #16
    43ae:	bd70      	pop	{r4, r5, r6, pc}
    43b0:	20001af8 	.word	0x20001af8

000043b4 <tlx493d_gen_2_setUpdateRate>:
bool tlx493d_gen_2_setUpdateRate(TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF, TLx493D_UpdateRateType_t val) {
    43b4:	b570      	push	{r4, r5, r6, lr}
    43b6:	460d      	mov	r5, r1
    uint8_t mod1 = sensor->regDef[fpBF].address;
    43b8:	6846      	ldr	r6, [r0, #4]
bool tlx493d_gen_2_setUpdateRate(TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF, TLx493D_UpdateRateType_t val) {
    43ba:	4611      	mov	r1, r2
    43bc:	b084      	sub	sp, #16
    uint8_t mod1 = sensor->regDef[fpBF].address;
    43be:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    43c2:	eb06 0c02 	add.w	ip, r6, r2
    43c6:	f89c 6001 	ldrb.w	r6, [ip, #1]
    switch(val) {
    43ca:	f1a3 0c02 	sub.w	ip, r3, #2
    43ce:	fa5f f28c 	uxtb.w	r2, ip
    43d2:	2a07      	cmp	r2, #7
    43d4:	d822      	bhi.n	441c <tlx493d_gen_2_setUpdateRate+0x68>
    tlx493d_common_setBitfield(sensor, prdBF, rate);
    43d6:	4604      	mov	r4, r0
    43d8:	f7ff fc6a 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, sensor->functions->calculateFuseParity(sensor));
    43dc:	68a3      	ldr	r3, [r4, #8]
    43de:	4620      	mov	r0, r4
    43e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    43e4:	4798      	blx	r3
    43e6:	4629      	mov	r1, r5
    43e8:	4602      	mov	r2, r0
    43ea:	4620      	mov	r0, r4
    43ec:	f7ff fc60 	bl	3cb0 <tlx493d_common_setBitfield>
                       sensor->regMap[mod1],
    43f0:	6822      	ldr	r2, [r4, #0]
    uint8_t buf[4] = { mod1,
    43f2:	f88d 600c 	strb.w	r6, [sp, #12]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    43f6:	2300      	movs	r3, #0
                       sensor->regMap[mod1],
    43f8:	5d91      	ldrb	r1, [r2, r6]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    43fa:	4432      	add	r2, r6
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    43fc:	4620      	mov	r0, r4
    uint8_t buf[4] = { mod1,
    43fe:	f88d 100d 	strb.w	r1, [sp, #13]
                       sensor->regMap[mod1 + 1U], /** reserved register must have been read once in setDefaultConfig to get factory settings ! */
    4402:	7851      	ldrb	r1, [r2, #1]
    uint8_t buf[4] = { mod1,
    4404:	f88d 100e 	strb.w	r1, [sp, #14]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4408:	a903      	add	r1, sp, #12
                       sensor->regMap[mod1 + 2U]
    440a:	7894      	ldrb	r4, [r2, #2]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    440c:	2204      	movs	r2, #4
    440e:	9300      	str	r3, [sp, #0]
    uint8_t buf[4] = { mod1,
    4410:	f88d 400f 	strb.w	r4, [sp, #15]
    return tlx493d_transfer(sensor, buf, sizeof(buf), NULL, 0);
    4414:	f7fd f8ca 	bl	15ac <tlx493d_transfer>
}
    4418:	b004      	add	sp, #16
    441a:	bd70      	pop	{r4, r5, r6, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_UpdateRateType_t");
    441c:	4a03      	ldr	r2, [pc, #12]	; (442c <tlx493d_gen_2_setUpdateRate+0x78>)
    441e:	4619      	mov	r1, r3
    4420:	f7ff fd60 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return false;
    4424:	2000      	movs	r0, #0
}
    4426:	b004      	add	sp, #16
    4428:	bd70      	pop	{r4, r5, r6, pc}
    442a:	bf00      	nop
    442c:	20001af8 	.word	0x20001af8

00004430 <tlx493d_gen_2_hasValidData>:
bool tlx493d_gen_2_hasValidData(const TLx493D_t *sensor, uint8_t modeBF, uint8_t pd3BF, uint8_t pd0BF) {
    4430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4434:	4698      	mov	r8, r3
    return( sensor->functions->hasValidBusParity(sensor)
    4436:	6883      	ldr	r3, [r0, #8]
bool tlx493d_gen_2_hasValidData(const TLx493D_t *sensor, uint8_t modeBF, uint8_t pd3BF, uint8_t pd0BF) {
    4438:	4604      	mov	r4, r0
    443a:	460e      	mov	r6, r1
    return( sensor->functions->hasValidBusParity(sensor)
    443c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
bool tlx493d_gen_2_hasValidData(const TLx493D_t *sensor, uint8_t modeBF, uint8_t pd3BF, uint8_t pd0BF) {
    4440:	4617      	mov	r7, r2
    return( sensor->functions->hasValidBusParity(sensor)
    4442:	4798      	blx	r3
         && ((tlx493d_common_returnBitfield(sensor, modeBF) == 0x03U) ? true
    4444:	b130      	cbz	r0, 4454 <tlx493d_gen_2_hasValidData+0x24>
         && sensor->functions->hasValidTBit(sensor)
    4446:	68a3      	ldr	r3, [r4, #8]
    4448:	4620      	mov	r0, r4
    444a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    444e:	4798      	blx	r3
    4450:	4605      	mov	r5, r0
    4452:	b918      	cbnz	r0, 445c <tlx493d_gen_2_hasValidData+0x2c>
bool tlx493d_gen_2_hasValidData(const TLx493D_t *sensor, uint8_t modeBF, uint8_t pd3BF, uint8_t pd0BF) {
    4454:	2500      	movs	r5, #0
}
    4456:	4628      	mov	r0, r5
    4458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         && ((tlx493d_common_returnBitfield(sensor, modeBF) == 0x03U) ? true
    445c:	4631      	mov	r1, r6
    445e:	4620      	mov	r0, r4
    4460:	f7ff fbf8 	bl	3c54 <tlx493d_common_returnBitfield>
    4464:	2803      	cmp	r0, #3
    4466:	d0f6      	beq.n	4456 <tlx493d_gen_2_hasValidData+0x26>
                                                                      : ((tlx493d_common_returnBitfield(sensor, pd3BF) == 1U) && (tlx493d_common_returnBitfield(sensor, pd0BF) == 1U))) );
    4468:	4639      	mov	r1, r7
    446a:	4620      	mov	r0, r4
    446c:	f7ff fbf2 	bl	3c54 <tlx493d_common_returnBitfield>
         && ((tlx493d_common_returnBitfield(sensor, modeBF) == 0x03U) ? true
    4470:	2801      	cmp	r0, #1
    4472:	d1ef      	bne.n	4454 <tlx493d_gen_2_hasValidData+0x24>
                                                                      : ((tlx493d_common_returnBitfield(sensor, pd3BF) == 1U) && (tlx493d_common_returnBitfield(sensor, pd0BF) == 1U))) );
    4474:	4641      	mov	r1, r8
    4476:	4620      	mov	r0, r4
    4478:	f7ff fbec 	bl	3c54 <tlx493d_common_returnBitfield>
    447c:	f1a0 0501 	sub.w	r5, r0, #1
    4480:	fab5 f585 	clz	r5, r5
    4484:	096d      	lsrs	r5, r5, #5
    4486:	e7e6      	b.n	4456 <tlx493d_gen_2_hasValidData+0x26>

00004488 <tlx493d_gen_2_isFunctional>:
    return sensor->functions->hasValidFuseParity(sensor) && sensor->functions->hasValidConfigurationParity(sensor);
    4488:	6883      	ldr	r3, [r0, #8]
bool tlx493d_gen_2_isFunctional(const TLx493D_t *sensor) {
    448a:	b510      	push	{r4, lr}
    return sensor->functions->hasValidFuseParity(sensor) && sensor->functions->hasValidConfigurationParity(sensor);
    448c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
bool tlx493d_gen_2_isFunctional(const TLx493D_t *sensor) {
    4490:	4604      	mov	r4, r0
    return sensor->functions->hasValidFuseParity(sensor) && sensor->functions->hasValidConfigurationParity(sensor);
    4492:	4798      	blx	r3
    4494:	b130      	cbz	r0, 44a4 <tlx493d_gen_2_isFunctional+0x1c>
    4496:	68a3      	ldr	r3, [r4, #8]
    4498:	4620      	mov	r0, r4
    449a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
    449e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return sensor->functions->hasValidFuseParity(sensor) && sensor->functions->hasValidConfigurationParity(sensor);
    44a2:	4718      	bx	r3
}
    44a4:	bd10      	pop	{r4, pc}
    44a6:	bf00      	nop

000044a8 <tlx493d_gen_2_isWakeUpEnabled>:
bool tlx493d_gen_2_isWakeUpEnabled(const TLx493D_t *sensor, uint8_t waBF) {
    44a8:	b508      	push	{r3, lr}
    return tlx493d_common_returnBitfield(sensor, waBF) != 0U;
    44aa:	f7ff fbd3 	bl	3c54 <tlx493d_common_returnBitfield>
}
    44ae:	3800      	subs	r0, #0
    44b0:	bf18      	it	ne
    44b2:	2001      	movne	r0, #1
    44b4:	bd08      	pop	{r3, pc}
    44b6:	bf00      	nop

000044b8 <tlx493d_gen_2_writeConfigurationRegisters>:
bool tlx493d_gen_2_writeConfigurationRegisters(TLx493D_t *sensor) {
    44b8:	b510      	push	{r4, lr}
                               sensor->regMap[0x07],
    44ba:	6804      	ldr	r4, [r0, #0]
bool tlx493d_gen_2_writeConfigurationRegisters(TLx493D_t *sensor) {
    44bc:	b086      	sub	sp, #24
    uint8_t txBuffer[11] = {
    44be:	2107      	movs	r1, #7
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    44c0:	2300      	movs	r3, #0
    uint8_t txBuffer[11] = {
    44c2:	f894 c007 	ldrb.w	ip, [r4, #7]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    44c6:	220b      	movs	r2, #11
    uint8_t txBuffer[11] = {
    44c8:	f88d 100c 	strb.w	r1, [sp, #12]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    44cc:	a903      	add	r1, sp, #12
    uint8_t txBuffer[11] = {
    44ce:	f88d c00d 	strb.w	ip, [sp, #13]
    44d2:	f894 c008 	ldrb.w	ip, [r4, #8]
    44d6:	f88d c00e 	strb.w	ip, [sp, #14]
    44da:	f894 c009 	ldrb.w	ip, [r4, #9]
    44de:	f88d c00f 	strb.w	ip, [sp, #15]
    44e2:	f894 c00a 	ldrb.w	ip, [r4, #10]
    44e6:	f88d c010 	strb.w	ip, [sp, #16]
    44ea:	f894 c00b 	ldrb.w	ip, [r4, #11]
    44ee:	f88d c011 	strb.w	ip, [sp, #17]
    44f2:	f894 c00c 	ldrb.w	ip, [r4, #12]
    44f6:	f88d c012 	strb.w	ip, [sp, #18]
    44fa:	f894 c00d 	ldrb.w	ip, [r4, #13]
    44fe:	f88d c013 	strb.w	ip, [sp, #19]
    4502:	f894 c00e 	ldrb.w	ip, [r4, #14]
    4506:	f88d c014 	strb.w	ip, [sp, #20]
    450a:	f894 c00f 	ldrb.w	ip, [r4, #15]
    450e:	7c24      	ldrb	r4, [r4, #16]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    4510:	9300      	str	r3, [sp, #0]
    uint8_t txBuffer[11] = {
    4512:	f88d c015 	strb.w	ip, [sp, #21]
    4516:	f88d 4016 	strb.w	r4, [sp, #22]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    451a:	f7fd f847 	bl	15ac <tlx493d_transfer>
}
    451e:	b006      	add	sp, #24
    4520:	bd10      	pop	{r4, pc}
    4522:	bf00      	nop

00004524 <tlx493d_gen_2_enableWakeUpMode>:
bool tlx493d_gen_2_enableWakeUpMode(TLx493D_t *sensor, uint8_t tstBF, uint8_t wuBF, uint8_t cpbBF) {
    4524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4528:	4604      	mov	r4, r0
    452a:	4617      	mov	r7, r2
    452c:	461d      	mov	r5, r3
    452e:	460e      	mov	r6, r1
    bool isTestMode = tlx493d_common_returnBitfield(sensor, tstBF) != 0U;
    4530:	f7ff fb90 	bl	3c54 <tlx493d_common_returnBitfield>
    if( isTestMode ) {
    4534:	b190      	cbz	r0, 455c <tlx493d_gen_2_enableWakeUpMode+0x38>
        tlx493d_common_setBitfield(sensor, tstBF, 0);
    4536:	2200      	movs	r2, #0
    4538:	4631      	mov	r1, r6
    453a:	4620      	mov	r0, r4
    453c:	f7ff fbb8 	bl	3cb0 <tlx493d_common_setBitfield>
        tlx493d_common_setBitfield(sensor, cpbBF, sensor->functions->calculateConfigurationParity(sensor));
    4540:	68a3      	ldr	r3, [r4, #8]
    4542:	4620      	mov	r0, r4
    4544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    4548:	4798      	blx	r3
    454a:	4629      	mov	r1, r5
    454c:	4602      	mov	r2, r0
    454e:	4620      	mov	r0, r4
    4550:	f7ff fbae 	bl	3cb0 <tlx493d_common_setBitfield>
        if( !tlx493d_gen_2_writeConfigurationRegisters(sensor) ) {
    4554:	4620      	mov	r0, r4
    4556:	f7ff ffaf 	bl	44b8 <tlx493d_gen_2_writeConfigurationRegisters>
    455a:	b1c0      	cbz	r0, 458e <tlx493d_gen_2_enableWakeUpMode+0x6a>
    tlx493d_common_setBitfield(sensor, wuBF, 1U);
    455c:	2201      	movs	r2, #1
    455e:	4639      	mov	r1, r7
    4560:	4620      	mov	r0, r4
    4562:	f7ff fba5 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpbBF, sensor->functions->calculateConfigurationParity(sensor));
    4566:	68a3      	ldr	r3, [r4, #8]
    4568:	4620      	mov	r0, r4
    456a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    456e:	4798      	blx	r3
    4570:	4629      	mov	r1, r5
    4572:	4602      	mov	r2, r0
    4574:	4620      	mov	r0, r4
    4576:	f7ff fb9b 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    457a:	4620      	mov	r0, r4
    457c:	f7ff ff9c 	bl	44b8 <tlx493d_gen_2_writeConfigurationRegisters>
    4580:	b128      	cbz	r0, 458e <tlx493d_gen_2_enableWakeUpMode+0x6a>
    4582:	68a3      	ldr	r3, [r4, #8]
    4584:	4620      	mov	r0, r4
    4586:	689b      	ldr	r3, [r3, #8]
}
    4588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    458c:	4718      	bx	r3
}
    458e:	2000      	movs	r0, #0
    4590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004594 <tlx493d_gen_2_disableWakeUpMode>:
bool tlx493d_gen_2_disableWakeUpMode(TLx493D_t *sensor, uint8_t wuBF, uint8_t cpbBF) {
    4594:	b570      	push	{r4, r5, r6, lr}
    4596:	4604      	mov	r4, r0
    4598:	4615      	mov	r5, r2
    tlx493d_common_setBitfield(sensor, wuBF, 0U);
    459a:	2200      	movs	r2, #0
    459c:	f7ff fb88 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, cpbBF, sensor->functions->calculateConfigurationParity(sensor));
    45a0:	68a3      	ldr	r3, [r4, #8]
    45a2:	4620      	mov	r0, r4
    45a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    45a8:	4798      	blx	r3
    45aa:	4629      	mov	r1, r5
    45ac:	4602      	mov	r2, r0
    45ae:	4620      	mov	r0, r4
    45b0:	f7ff fb7e 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    45b4:	4620      	mov	r0, r4
    45b6:	f7ff ff7f 	bl	44b8 <tlx493d_gen_2_writeConfigurationRegisters>
    45ba:	b128      	cbz	r0, 45c8 <tlx493d_gen_2_disableWakeUpMode+0x34>
    45bc:	68a3      	ldr	r3, [r4, #8]
    45be:	4620      	mov	r0, r4
    45c0:	689b      	ldr	r3, [r3, #8]
}
    45c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return tlx493d_gen_2_writeConfigurationRegisters(sensor) ? sensor->functions->readRegisters(sensor) : false;
    45c6:	4718      	bx	r3
}
    45c8:	bd70      	pop	{r4, r5, r6, pc}
    45ca:	bf00      	nop

000045cc <tlx493d_gen_2_setThreshold>:
bool tlx493d_gen_2_setThreshold(TLx493D_t *sensor, uint8_t msbsBF, uint8_t lsbsBF, int16_t threshold12Bits) {
    45cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ce:	4615      	mov	r5, r2
    TLx493D_Register_t const *msbs = &sensor->regDef[msbsBF];
    45d0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    45d4:	6842      	ldr	r2, [r0, #4]
    int16_t thresh11Bits = threshold12Bits >> 1U;
    45d6:	ea4f 0e63 	mov.w	lr, r3, asr #1
    TLx493D_Register_t const *lsbs = &sensor->regDef[lsbsBF];
    45da:	eb05 0785 	add.w	r7, r5, r5, lsl #2
bool tlx493d_gen_2_setThreshold(TLx493D_t *sensor, uint8_t msbsBF, uint8_t lsbsBF, int16_t threshold12Bits) {
    45de:	4606      	mov	r6, r0
    TLx493D_Register_t const *msbs = &sensor->regDef[msbsBF];
    45e0:	4414      	add	r4, r2
    TLx493D_Register_t const *lsbs = &sensor->regDef[lsbsBF];
    45e2:	eb02 0c07 	add.w	ip, r2, r7
    uint8_t upper = ((uint8_t) ((thresh11Bits >> lsbs->numBits) & (msbs->mask >> msbs->offset)));
    45e6:	78a2      	ldrb	r2, [r4, #2]
    45e8:	78e4      	ldrb	r4, [r4, #3]
    uint8_t lower = ((uint8_t) (thresh11Bits & (lsbs->mask >> lsbs->offset)));
    45ea:	f89c 7003 	ldrb.w	r7, [ip, #3]
    uint8_t upper = ((uint8_t) ((thresh11Bits >> lsbs->numBits) & (msbs->mask >> msbs->offset)));
    45ee:	4122      	asrs	r2, r4
    uint8_t lower = ((uint8_t) (thresh11Bits & (lsbs->mask >> lsbs->offset)));
    45f0:	f89c 4002 	ldrb.w	r4, [ip, #2]
    45f4:	413c      	asrs	r4, r7
    45f6:	ea04 0463 	and.w	r4, r4, r3, asr #1
    uint8_t upper = ((uint8_t) ((thresh11Bits >> lsbs->numBits) & (msbs->mask >> msbs->offset)));
    45fa:	f89c 3004 	ldrb.w	r3, [ip, #4]
    45fe:	fa4e f303 	asr.w	r3, lr, r3
    uint8_t lower = ((uint8_t) (thresh11Bits & (lsbs->mask >> lsbs->offset)));
    4602:	b2e4      	uxtb	r4, r4
    uint8_t upper = ((uint8_t) ((thresh11Bits >> lsbs->numBits) & (msbs->mask >> msbs->offset)));
    4604:	401a      	ands	r2, r3
    tlx493d_common_setBitfield(sensor, msbsBF, upper);
    4606:	b2d2      	uxtb	r2, r2
    4608:	f7ff fb52 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, lsbsBF, lower);
    460c:	4630      	mov	r0, r6
    460e:	4622      	mov	r2, r4
    4610:	4629      	mov	r1, r5
    4612:	f7ff fb4d 	bl	3cb0 <tlx493d_common_setBitfield>
}
    4616:	2001      	movs	r0, #1
    4618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    461a:	bf00      	nop

0000461c <tlx493d_gen_2_setWakeUpThresholdsAsInteger>:
                                                int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4620:	460d      	mov	r5, r1
    4622:	4604      	mov	r4, r0
    bool retVal = tlx493d_gen_2_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    4624:	4611      	mov	r1, r2
    4626:	461a      	mov	r2, r3
                                                int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    4628:	ed2d 8b02 	vpush	{d8}
    462c:	b089      	sub	sp, #36	; 0x24
    462e:	ee08 5a10 	vmov	s16, r5
    4632:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
    4636:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    463a:	9501      	str	r5, [sp, #4]
    463c:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
    4640:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    4644:	9502      	str	r5, [sp, #8]
    4646:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
    464a:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    464e:	9503      	str	r5, [sp, #12]
    4650:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
    4654:	f9bd b07c 	ldrsh.w	fp, [sp, #124]	; 0x7c
    4658:	9504      	str	r5, [sp, #16]
    465a:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
    bool retVal = tlx493d_gen_2_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    465e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
                                                int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    4662:	9505      	str	r5, [sp, #20]
    4664:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
    4668:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
    466c:	9506      	str	r5, [sp, #24]
    466e:	f9bd 5084 	ldrsh.w	r5, [sp, #132]	; 0x84
    4672:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
    4676:	9600      	str	r6, [sp, #0]
    4678:	9507      	str	r5, [sp, #28]
    467a:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
    467e:	f9bd 508c 	ldrsh.w	r5, [sp, #140]	; 0x8c
    bool retVal = tlx493d_gen_2_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    4682:	f7ff ffa3 	bl	45cc <tlx493d_gen_2_setThreshold>
    retVal &= tlx493d_gen_2_setThreshold(sensor, xhMSBBF, xhLSBBF, xhTh);
    4686:	4649      	mov	r1, r9
    bool retVal = tlx493d_gen_2_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    4688:	4681      	mov	r9, r0
    retVal &= tlx493d_gen_2_setThreshold(sensor, xhMSBBF, xhLSBBF, xhTh);
    468a:	465b      	mov	r3, fp
    468c:	4652      	mov	r2, sl
    468e:	4620      	mov	r0, r4
    4690:	f7ff ff9c 	bl	45cc <tlx493d_gen_2_setThreshold>
    4694:	ea09 0900 	and.w	r9, r9, r0
    retVal &= tlx493d_gen_2_setThreshold(sensor, ylMSBBF, ylLSBBF, ylTh);
    4698:	4643      	mov	r3, r8
    469a:	463a      	mov	r2, r7
    469c:	fa5f f989 	uxtb.w	r9, r9
    46a0:	9900      	ldr	r1, [sp, #0]
    46a2:	4620      	mov	r0, r4
    46a4:	f7ff ff92 	bl	45cc <tlx493d_gen_2_setThreshold>
    46a8:	ea00 0709 	and.w	r7, r0, r9
    retVal &= tlx493d_gen_2_setThreshold(sensor, yhMSBBF, yhLSBBF, yhTh);
    46ac:	9b07      	ldr	r3, [sp, #28]
    46ae:	4620      	mov	r0, r4
    46b0:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    46b4:	f7ff ff8a 	bl	45cc <tlx493d_gen_2_setThreshold>
    46b8:	4007      	ands	r7, r0
    retVal &= tlx493d_gen_2_setThreshold(sensor, zlMSBBF, zlLSBBF, zlTh);
    46ba:	4633      	mov	r3, r6
    46bc:	4620      	mov	r0, r4
    46be:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    46c2:	f7ff ff83 	bl	45cc <tlx493d_gen_2_setThreshold>
    retVal &= tlx493d_gen_2_setThreshold(sensor, zhMSBBF, zhLSBBF, zhTh);
    46c6:	462b      	mov	r3, r5
    46c8:	ea00 0607 	and.w	r6, r0, r7
    46cc:	4620      	mov	r0, r4
    46ce:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    46d2:	f7ff ff7b 	bl	45cc <tlx493d_gen_2_setThreshold>
    tlx493d_common_setBitfield(sensor, cpBF, sensor->functions->calculateConfigurationParity(sensor));
    46d6:	68a3      	ldr	r3, [r4, #8]
    46d8:	4006      	ands	r6, r0
    46da:	4620      	mov	r0, r4
    46dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    46e0:	4798      	blx	r3
    46e2:	ee18 1a10 	vmov	r1, s16
    46e6:	4602      	mov	r2, r0
    46e8:	4620      	mov	r0, r4
    46ea:	f7ff fae1 	bl	3cb0 <tlx493d_common_setBitfield>
    retVal &= tlx493d_gen_2_writeConfigurationRegisters(sensor);
    46ee:	4620      	mov	r0, r4
    46f0:	f7ff fee2 	bl	44b8 <tlx493d_gen_2_writeConfigurationRegisters>
}
    46f4:	4030      	ands	r0, r6
    46f6:	b009      	add	sp, #36	; 0x24
    46f8:	ecbd 8b02 	vpop	{d8}
    46fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004700 <tlx493d_gen_2_calculateFuseParity>:
uint8_t tlx493d_gen_2_calculateFuseParity(const TLx493D_t *sensor, uint8_t fpBF, uint8_t prdBF) {
    4700:	b510      	push	{r4, lr}
    const TLx493D_Register_t *prd = &sensor->regDef[prdBF];
    4702:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    const TLx493D_Register_t *fp  = &sensor->regDef[fpBF];
    4706:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	uint8_t parity = sensor->regMap[fp->address] & ((uint8_t) ~fp->mask);
    470a:	e9d0 4200 	ldrd	r4, r2, [r0]
    const TLx493D_Register_t *fp  = &sensor->regDef[fpBF];
    470e:	4411      	add	r1, r2
    const TLx493D_Register_t *prd = &sensor->regDef[prdBF];
    4710:	441a      	add	r2, r3
	uint8_t parity = sensor->regMap[fp->address] & ((uint8_t) ~fp->mask);
    4712:	7848      	ldrb	r0, [r1, #1]
    4714:	788b      	ldrb	r3, [r1, #2]
    4716:	5c20      	ldrb	r0, [r4, r0]
    4718:	ea20 0003 	bic.w	r0, r0, r3
	parity ^= (sensor->regMap[prd->address] & prd->mask);
    471c:	7853      	ldrb	r3, [r2, #1]
    471e:	7892      	ldrb	r2, [r2, #2]
    4720:	5ce3      	ldrb	r3, [r4, r3]
    4722:	4013      	ands	r3, r2
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    4724:	4058      	eors	r0, r3
    4726:	f7ff fb15 	bl	3d54 <tlx493d_common_calculateParity>
}
    472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    472e:	f7ff bb1b 	b.w	3d68 <tlx493d_common_getOddParity>
    4732:	bf00      	nop

00004734 <tlx493d_gen_2_set1ByteReadMode>:
bool tlx493d_gen_2_set1ByteReadMode(TLx493D_t *sensor, uint8_t prBF, uint8_t fpBF, uint8_t prdBF, uint8_t pr) {
    4734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4736:	4604      	mov	r4, r0
    4738:	461f      	mov	r7, r3
    473a:	4615      	mov	r5, r2
    tlx493d_common_setBitfield(sensor, prBF, pr);
    473c:	f89d 2018 	ldrb.w	r2, [sp, #24]
bool tlx493d_gen_2_set1ByteReadMode(TLx493D_t *sensor, uint8_t prBF, uint8_t fpBF, uint8_t prdBF, uint8_t pr) {
    4740:	460e      	mov	r6, r1
    tlx493d_common_setBitfield(sensor, prBF, pr);
    4742:	f7ff fab5 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, fpBF, tlx493d_gen_2_calculateFuseParity(sensor, fpBF, prdBF));
    4746:	463a      	mov	r2, r7
    4748:	4629      	mov	r1, r5
    474a:	4620      	mov	r0, r4
    474c:	f7ff ffd8 	bl	4700 <tlx493d_gen_2_calculateFuseParity>
    4750:	4629      	mov	r1, r5
    4752:	4602      	mov	r2, r0
    4754:	4620      	mov	r0, r4
    4756:	f7ff faab 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, prBF);
    475a:	4631      	mov	r1, r6
    475c:	4620      	mov	r0, r4
}
    475e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return tlx493d_common_writeRegister(sensor, prBF);
    4762:	f7ff bad9 	b.w	3d18 <tlx493d_common_writeRegister>
    4766:	bf00      	nop

00004768 <tlx493d_gen_2_calculateBusParity>:
uint8_t tlx493d_gen_2_calculateBusParity(const TLx493D_t *sensor, uint8_t to) {
    4768:	b510      	push	{r4, lr}
	uint8_t parity = sensor->regMap[0];
    476a:	6804      	ldr	r4, [r0, #0]
    476c:	7820      	ldrb	r0, [r4, #0]
	for (uint8_t i = 1; i <= to; ++i) {
    476e:	b141      	cbz	r1, 4782 <tlx493d_gen_2_calculateBusParity+0x1a>
    4770:	2301      	movs	r3, #1
    4772:	f103 0c01 	add.w	ip, r3, #1
		parity ^= sensor->regMap[i];
    4776:	5ce2      	ldrb	r2, [r4, r3]
	for (uint8_t i = 1; i <= to; ++i) {
    4778:	fa5f f38c 	uxtb.w	r3, ip
		parity ^= sensor->regMap[i];
    477c:	4050      	eors	r0, r2
	for (uint8_t i = 1; i <= to; ++i) {
    477e:	4299      	cmp	r1, r3
    4780:	d2f7      	bcs.n	4772 <tlx493d_gen_2_calculateBusParity+0xa>
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    4782:	f7ff fae7 	bl	3d54 <tlx493d_common_calculateParity>
}
    4786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    478a:	f7ff baed 	b.w	3d68 <tlx493d_common_getOddParity>
    478e:	bf00      	nop

00004790 <tlx493d_gen_2_calculateConfigurationParity>:
uint8_t tlx493d_gen_2_calculateConfigurationParity(const TLx493D_t *sensor, uint8_t cpBF) {
    4790:	b508      	push	{r3, lr}
    const TLx493D_Register_t *cp     = &sensor->regDef[cpBF];
    4792:	eb01 0381 	add.w	r3, r1, r1, lsl #2
	uint8_t                   parity = tlx493d_common_calculateParity(sensor->regMap[cp->address] & ((uint8_t) ~cp->mask));
    4796:	e9d0 2100 	ldrd	r2, r1, [r0]
    const TLx493D_Register_t *cp     = &sensor->regDef[cpBF];
    479a:	4419      	add	r1, r3
	uint8_t                   parity = tlx493d_common_calculateParity(sensor->regMap[cp->address] & ((uint8_t) ~cp->mask));
    479c:	784b      	ldrb	r3, [r1, #1]
    479e:	7888      	ldrb	r0, [r1, #2]
    47a0:	5cd3      	ldrb	r3, [r2, r3]
    47a2:	ea23 0000 	bic.w	r0, r3, r0
    47a6:	f7ff fad5 	bl	3d54 <tlx493d_common_calculateParity>
}
    47aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tlx493d_common_getEvenParity(parity);
    47ae:	f7ff badf 	b.w	3d70 <tlx493d_common_getEvenParity>
    47b2:	bf00      	nop

000047b4 <tlx493d_gen_2_calculateConfigurationParityWakeUp>:
uint8_t tlx493d_gen_2_calculateConfigurationParityWakeUp(const TLx493D_t *sensor, uint8_t cpBF) {
    47b4:	b510      	push	{r4, lr}
    const TLx493D_Register_t *cp     = &sensor->regDef[cpBF];
    47b6:	e9d0 4200 	ldrd	r4, r2, [r0]
    47ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	uint8_t                   parity = sensor->regMap[0x07U]; /**from]; */
    47be:	4623      	mov	r3, r4
    47c0:	f104 000c 	add.w	r0, r4, #12
    const TLx493D_Register_t *cp     = &sensor->regDef[cpBF];
    47c4:	eb02 0c01 	add.w	ip, r2, r1
	uint8_t                   parity = sensor->regMap[0x07U]; /**from]; */
    47c8:	f813 2f07 	ldrb.w	r2, [r3, #7]!
        parity ^= sensor->regMap[i];
    47cc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for(uint8_t i = 0x08U; i <= 0x0CU; ++i) {
    47d0:	4283      	cmp	r3, r0
        parity ^= sensor->regMap[i];
    47d2:	ea82 0201 	eor.w	r2, r2, r1
    for(uint8_t i = 0x08U; i <= 0x0CU; ++i) {
    47d6:	d1f9      	bne.n	47cc <tlx493d_gen_2_calculateConfigurationParityWakeUp+0x18>
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0D] & 0x7FU)); /** WA */
    47d8:	7b63      	ldrb	r3, [r4, #13]
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0E] & 0x3FU)); /** TST */
    47da:	7ba1      	ldrb	r1, [r4, #14]
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0D] & 0x7FU)); /** WA */
    47dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    parity = (uint8_t) (parity ^ (sensor->regMap[0x10] & ((uint8_t) ~cp->mask)));
    47e0:	7c20      	ldrb	r0, [r4, #16]
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0E] & 0x3FU)); /** TST */
    47e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    parity = (uint8_t) (parity ^ (sensor->regMap[0x10] & ((uint8_t) ~cp->mask)));
    47e6:	f89c c002 	ldrb.w	ip, [ip, #2]
    47ea:	404b      	eors	r3, r1
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0F] & 0x3FU)); /** PH */
    47ec:	7be1      	ldrb	r1, [r4, #15]
    parity = (uint8_t) (parity ^ (sensor->regMap[0x10] & ((uint8_t) ~cp->mask)));
    47ee:	ea20 000c 	bic.w	r0, r0, ip
    47f2:	405a      	eors	r2, r3
    parity = (uint8_t) (parity ^ (sensor->regMap[0x0F] & 0x3FU)); /** PH */
    47f4:	f001 033f 	and.w	r3, r1, #63	; 0x3f
    47f8:	405a      	eors	r2, r3
    47fa:	b2d2      	uxtb	r2, r2
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    47fc:	4050      	eors	r0, r2
    47fe:	f7ff faa9 	bl	3d54 <tlx493d_common_calculateParity>
}
    4802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    4806:	f7ff baaf 	b.w	3d68 <tlx493d_common_getOddParity>
    480a:	bf00      	nop

0000480c <tlx493d_gen_2_hasValidFuseParity>:
    480c:	b508      	push	{r3, lr}
    480e:	f7ff fa21 	bl	3c54 <tlx493d_common_returnBitfield>
    4812:	3800      	subs	r0, #0
    4814:	bf18      	it	ne
    4816:	2001      	movne	r0, #1
    4818:	bd08      	pop	{r3, pc}
    481a:	bf00      	nop

0000481c <tlx493d_gen_2_hasValidBusParity>:
    return sensor->functions->calculateBusParity(sensor) == tlx493d_common_returnBitfield(sensor, pBF);
    481c:	6883      	ldr	r3, [r0, #8]
bool tlx493d_gen_2_hasValidBusParity(const TLx493D_t *sensor, uint8_t pBF) {
    481e:	b510      	push	{r4, lr}
    4820:	b082      	sub	sp, #8
    return sensor->functions->calculateBusParity(sensor) == tlx493d_common_returnBitfield(sensor, pBF);
    4822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
bool tlx493d_gen_2_hasValidBusParity(const TLx493D_t *sensor, uint8_t pBF) {
    4826:	4604      	mov	r4, r0
    4828:	9101      	str	r1, [sp, #4]
    return sensor->functions->calculateBusParity(sensor) == tlx493d_common_returnBitfield(sensor, pBF);
    482a:	4798      	blx	r3
    482c:	4603      	mov	r3, r0
    482e:	4620      	mov	r0, r4
    4830:	9901      	ldr	r1, [sp, #4]
    4832:	461c      	mov	r4, r3
    4834:	f7ff fa0e 	bl	3c54 <tlx493d_common_returnBitfield>
}
    4838:	1a20      	subs	r0, r4, r0
    483a:	fab0 f080 	clz	r0, r0
    483e:	0940      	lsrs	r0, r0, #5
    4840:	b002      	add	sp, #8
    4842:	bd10      	pop	{r4, pc}

00004844 <tlx493d_gen_2_hasValidConfigurationParity>:
    4844:	b508      	push	{r3, lr}
    4846:	f7ff fa05 	bl	3c54 <tlx493d_common_returnBitfield>
    484a:	3800      	subs	r0, #0
    484c:	bf18      	it	ne
    484e:	2001      	movne	r0, #1
    4850:	bd08      	pop	{r3, pc}
    4852:	bf00      	nop

00004854 <tlx493d_gen_2_hasValidTBit>:
bool tlx493d_gen_2_hasValidTBit(const TLx493D_t *sensor, uint8_t tBF) {
    4854:	b508      	push	{r3, lr}
    return tlx493d_common_returnBitfield(sensor, tBF) == 0U;
    4856:	f7ff f9fd 	bl	3c54 <tlx493d_common_returnBitfield>
}
    485a:	fab0 f080 	clz	r0, r0
    485e:	0940      	lsrs	r0, r0, #5
    4860:	bd08      	pop	{r3, pc}
    4862:	bf00      	nop

00004864 <tlx493d_gen_2_selectIICAddress>:
    switch(addr) {
    4864:	2903      	cmp	r1, #3
uint8_t tlx493d_gen_2_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    4866:	b508      	push	{r3, lr}
    4868:	d802      	bhi.n	4870 <tlx493d_gen_2_selectIICAddress+0xc>
    486a:	4a04      	ldr	r2, [pc, #16]	; (487c <tlx493d_gen_2_selectIICAddress+0x18>)
    486c:	5c50      	ldrb	r0, [r2, r1]
}
    486e:	bd08      	pop	{r3, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, addr, "TLx493D_IICAddressType_t");
    4870:	4a03      	ldr	r2, [pc, #12]	; (4880 <tlx493d_gen_2_selectIICAddress+0x1c>)
    4872:	f7ff fb37 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return 0;
    4876:	2000      	movs	r0, #0
}
    4878:	bd08      	pop	{r3, pc}
    487a:	bf00      	nop
    487c:	200003f0 	.word	0x200003f0
    4880:	20000630 	.word	0x20000630
    4884:	00000000 	.word	0x00000000

00004888 <tlx493d_gen_2_getSensitivityScaleFactor>:
    switch(availSens) {
    4888:	2901      	cmp	r1, #1
double tlx493d_gen_2_getSensitivityScaleFactor(const TLx493D_t *sensor, TLx493D_AvailableSensitivityType_t availSens, uint8_t x2BF, uint8_t x4BF) {
    488a:	b570      	push	{r4, r5, r6, lr}
    switch(availSens) {
    488c:	d008      	beq.n	48a0 <tlx493d_gen_2_getSensitivityScaleFactor+0x18>
    488e:	2902      	cmp	r1, #2
    4890:	d00d      	beq.n	48ae <tlx493d_gen_2_getSensitivityScaleFactor+0x26>
    4892:	b149      	cbz	r1, 48a8 <tlx493d_gen_2_getSensitivityScaleFactor+0x20>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, availSens, "TLx493D_AvailableSensitivityType_t");
    4894:	4a12      	ldr	r2, [pc, #72]	; (48e0 <tlx493d_gen_2_getSensitivityScaleFactor+0x58>)
    4896:	f7ff fb25 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return 0.0;
    489a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 48d8 <tlx493d_gen_2_getSensitivityScaleFactor+0x50>
}
    489e:	bd70      	pop	{r4, r5, r6, pc}
        case TLx493D_HAS_X2_e : return (tlx493d_common_returnBitfield(sensor, x2BF) == 0U) ? 1.0 : 2.0;
    48a0:	4611      	mov	r1, r2
    48a2:	f7ff f9d7 	bl	3c54 <tlx493d_common_returnBitfield>
    48a6:	b990      	cbnz	r0, 48ce <tlx493d_gen_2_getSensitivityScaleFactor+0x46>
    switch(availSens) {
    48a8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
}
    48ac:	bd70      	pop	{r4, r5, r6, pc}
                                    bool x2IsNotSet = tlx493d_common_returnBitfield(sensor, x2BF) == 0U;
    48ae:	4605      	mov	r5, r0
    48b0:	461e      	mov	r6, r3
    48b2:	4611      	mov	r1, r2
    48b4:	f7ff f9ce 	bl	3c54 <tlx493d_common_returnBitfield>
    48b8:	4604      	mov	r4, r0
                                    bool x4IsNotSet = tlx493d_common_returnBitfield(sensor, x4BF) == 0U;
    48ba:	4631      	mov	r1, r6
    48bc:	4628      	mov	r0, r5
    48be:	f7ff f9c9 	bl	3c54 <tlx493d_common_returnBitfield>
                                    return (x2IsNotSet ? 1.0 : (x4IsNotSet ? 2.0 : 4.0));
    48c2:	2c00      	cmp	r4, #0
    48c4:	d0f0      	beq.n	48a8 <tlx493d_gen_2_getSensitivityScaleFactor+0x20>
    48c6:	b110      	cbz	r0, 48ce <tlx493d_gen_2_getSensitivityScaleFactor+0x46>
    48c8:	eeb1 0b00 	vmov.f64	d0, #16	; 0x40800000  4.0
}
    48cc:	bd70      	pop	{r4, r5, r6, pc}
        case TLx493D_HAS_X2_e : return (tlx493d_common_returnBitfield(sensor, x2BF) == 0U) ? 1.0 : 2.0;
    48ce:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
}
    48d2:	bd70      	pop	{r4, r5, r6, pc}
    48d4:	f3af 8000 	nop.w
	...
    48e0:	20001abc 	.word	0x20001abc
    48e4:	00000000 	.word	0x00000000

000048e8 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature>:
                                                          int16_t *x, int16_t *y, int16_t *z) {
    48e8:	b510      	push	{r4, lr}
    48ea:	461c      	mov	r4, r3
    48ec:	ed2d 8b06 	vpush	{d8-d10}
    48f0:	eeb0 ab41 	vmov.f64	d10, d1
    48f4:	eeb0 9b42 	vmov.f64	d9, d2
                                        : ((sens == TLx493D_SHORT_RANGE_e) ? 2.0 : 4.0);
    48f8:	b1d2      	cbz	r2, 4930 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature+0x48>
    48fa:	2a01      	cmp	r2, #1
    48fc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 4938 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature+0x50>
    4900:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 4940 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature+0x58>
    4904:	fe08 8b07 	vseleq.f64	d8, d8, d7
    *x = (int16_t) lround(xInmT * scaledSensitivity);
    4908:	ee20 0b08 	vmul.f64	d0, d0, d8
    490c:	f003 f920 	bl	7b50 <lround>
    4910:	8020      	strh	r0, [r4, #0]
    *y = (int16_t) lround(yInmT * scaledSensitivity);
    4912:	ee2a 0b08 	vmul.f64	d0, d10, d8
    4916:	f003 f91b 	bl	7b50 <lround>
    491a:	9b08      	ldr	r3, [sp, #32]
    *z = (int16_t) lround(zInmT * scaledSensitivity);
    491c:	ee29 0b08 	vmul.f64	d0, d9, d8
    *y = (int16_t) lround(yInmT * scaledSensitivity);
    4920:	8018      	strh	r0, [r3, #0]
    *z = (int16_t) lround(zInmT * scaledSensitivity);
    4922:	f003 f915 	bl	7b50 <lround>
    4926:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4928:	8018      	strh	r0, [r3, #0]
}
    492a:	ecbd 8b06 	vpop	{d8-d10}
    492e:	bd10      	pop	{r4, pc}
    4930:	ed9f 8b05 	vldr	d8, [pc, #20]	; 4948 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature+0x60>
    4934:	e7e8      	b.n	4908 <tlx493d_gen_2_calculateRawMagneticFieldAtTemperature+0x20>
    4936:	bf00      	nop
    4938:	cccccccd 	.word	0xcccccccd
    493c:	402ecccc 	.word	0x402ecccc
    4940:	cccccccd 	.word	0xcccccccd
    4944:	403ecccc 	.word	0x403ecccc
    4948:	cccccccd 	.word	0xcccccccd
    494c:	401ecccc 	.word	0x401ecccc

00004950 <tlx493d_gen_2_getSensitivityType>:


TLx493D_SensitivityType_t tlx493d_gen_2_getSensitivityType(const TLx493D_t *sensor, TLx493D_AvailableSensitivityType_t availSens, uint8_t x2BF, uint8_t x4BF) {
    switch(availSens) {
    4950:	2901      	cmp	r1, #1
TLx493D_SensitivityType_t tlx493d_gen_2_getSensitivityType(const TLx493D_t *sensor, TLx493D_AvailableSensitivityType_t availSens, uint8_t x2BF, uint8_t x4BF) {
    4952:	b570      	push	{r4, r5, r6, lr}
    switch(availSens) {
    4954:	d009      	beq.n	496a <tlx493d_gen_2_getSensitivityType+0x1a>
    4956:	2902      	cmp	r1, #2
    4958:	460c      	mov	r4, r1
    495a:	d00e      	beq.n	497a <tlx493d_gen_2_getSensitivityType+0x2a>
    495c:	b119      	cbz	r1, 4966 <tlx493d_gen_2_getSensitivityType+0x16>
                                    bool x2IsNotSet = tlx493d_common_returnBitfield(sensor, x2BF) == 0U;
                                    bool x4IsNotSet = tlx493d_common_returnBitfield(sensor, x4BF) == 0U;
                                    return x2IsNotSet ? TLx493D_FULL_RANGE_e : (x4IsNotSet ? TLx493D_SHORT_RANGE_e : TLx493D_EXTRA_SHORT_RANGE_e);
        }
    
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, availSens, "TLx493D_AvailableSensitivityType_t");
    495e:	4a10      	ldr	r2, [pc, #64]	; (49a0 <tlx493d_gen_2_getSensitivityType+0x50>)
                  return TLx493D_FULL_RANGE_e;
    4960:	2400      	movs	r4, #0
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, availSens, "TLx493D_AvailableSensitivityType_t");
    4962:	f7ff fabf 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
    }
}
    4966:	4620      	mov	r0, r4
    4968:	bd70      	pop	{r4, r5, r6, pc}
        case TLx493D_HAS_X2_e : return (tlx493d_common_returnBitfield(sensor, x2BF) == 0U) ? TLx493D_FULL_RANGE_e : TLx493D_SHORT_RANGE_e;
    496a:	4611      	mov	r1, r2
    496c:	f7ff f972 	bl	3c54 <tlx493d_common_returnBitfield>
    4970:	1e04      	subs	r4, r0, #0
    4972:	bf18      	it	ne
    4974:	2401      	movne	r4, #1
}
    4976:	4620      	mov	r0, r4
    4978:	bd70      	pop	{r4, r5, r6, pc}
    497a:	4605      	mov	r5, r0
    497c:	461e      	mov	r6, r3
                                    bool x2IsNotSet = tlx493d_common_returnBitfield(sensor, x2BF) == 0U;
    497e:	4611      	mov	r1, r2
    4980:	f7ff f968 	bl	3c54 <tlx493d_common_returnBitfield>
    4984:	4604      	mov	r4, r0
                                    bool x4IsNotSet = tlx493d_common_returnBitfield(sensor, x4BF) == 0U;
    4986:	4631      	mov	r1, r6
    4988:	4628      	mov	r0, r5
    498a:	f7ff f963 	bl	3c54 <tlx493d_common_returnBitfield>
                                    return x2IsNotSet ? TLx493D_FULL_RANGE_e : (x4IsNotSet ? TLx493D_SHORT_RANGE_e : TLx493D_EXTRA_SHORT_RANGE_e);
    498e:	2c00      	cmp	r4, #0
    4990:	d0e9      	beq.n	4966 <tlx493d_gen_2_getSensitivityType+0x16>
    4992:	2800      	cmp	r0, #0
    4994:	bf0c      	ite	eq
    4996:	2401      	moveq	r4, #1
    4998:	2402      	movne	r4, #2
}
    499a:	4620      	mov	r0, r4
    499c:	bd70      	pop	{r4, r5, r6, pc}
    499e:	bf00      	nop
    49a0:	20001abc 	.word	0x20001abc
    49a4:	00000000 	.word	0x00000000

000049a8 <tlx493d_gen_2_setWakeUpThresholds>:
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    49a8:	eeb3 7b09 	vmov.f64	d7, #57	; 0x41c80000  25.0
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    49ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    49b0:	ee30 0b47 	vsub.f64	d0, d0, d7
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    49b4:	4698      	mov	r8, r3
    49b6:	460e      	mov	r6, r1
    49b8:	4617      	mov	r7, r2
    49ba:	4604      	mov	r4, r0
    49bc:	ed2d 8b0c 	vpush	{d8-d13}
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    49c0:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 4b00 <tlx493d_gen_2_setWakeUpThresholds+0x158>
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    49c4:	b0a1      	sub	sp, #132	; 0x84
    49c6:	eeb0 cb43 	vmov.f64	d12, d3
    49ca:	eeb0 9b44 	vmov.f64	d9, d4
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    49ce:	ee80 7b08 	vdiv.f64	d7, d0, d8
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    49d2:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
    49d6:	f89d 1100 	ldrb.w	r1, [sp, #256]	; 0x100
    49da:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    49de:	f89d c0f0 	ldrb.w	ip, [sp, #240]	; 0xf0
    49e2:	9311      	str	r3, [sp, #68]	; 0x44
    49e4:	eeb0 db45 	vmov.f64	d13, d5
    49e8:	f89d 3108 	ldrb.w	r3, [sp, #264]	; 0x108
    49ec:	eeb0 ab46 	vmov.f64	d10, d6
    49f0:	f89d 50e8 	ldrb.w	r5, [sp, #232]	; 0xe8
    49f4:	eeb0 bb41 	vmov.f64	d11, d1
    49f8:	f89d 00e4 	ldrb.w	r0, [sp, #228]	; 0xe4
    49fc:	eeb0 8b42 	vmov.f64	d8, d2
    4a00:	911b      	str	r1, [sp, #108]	; 0x6c
    4a02:	921a      	str	r2, [sp, #104]	; 0x68
    4a04:	f89d 10e0 	ldrb.w	r1, [sp, #224]	; 0xe0
    4a08:	f89d 20dc 	ldrb.w	r2, [sp, #220]	; 0xdc
    4a0c:	9319      	str	r3, [sp, #100]	; 0x64
    4a0e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
    4a12:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
    4a16:	f89d c0f4 	ldrb.w	ip, [sp, #244]	; 0xf4
    4a1a:	f89d 90f8 	ldrb.w	r9, [sp, #248]	; 0xf8
    4a1e:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
    4a22:	f89d a0fc 	ldrb.w	sl, [sp, #252]	; 0xfc
    4a26:	9212      	str	r2, [sp, #72]	; 0x48
    4a28:	9113      	str	r1, [sp, #76]	; 0x4c
    4a2a:	9515      	str	r5, [sp, #84]	; 0x54
    4a2c:	9316      	str	r3, [sp, #88]	; 0x58
    4a2e:	9014      	str	r0, [sp, #80]	; 0x50
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    4a30:	ed9f 0b35 	vldr	d0, [pc, #212]	; 4b08 <tlx493d_gen_2_setWakeUpThresholds+0x160>
    4a34:	ee37 7b00 	vadd.f64	d7, d7, d0
    4a38:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250
    4a3c:	ee27 0b00 	vmul.f64	d0, d7, d0
    4a40:	f003 f886 	bl	7b50 <lround>
    TLx493D_SensitivityType_t sens = tlx493d_gen_2_getSensitivityType(sensor, availSens, x2BF, x4BF);
    4a44:	991b      	ldr	r1, [sp, #108]	; 0x6c
    *rawTemperature = (int16_t) lround(((temperature - GEN_2_TEMP_REF) / GEN_2_TEMP_RESOLUTION + GEN_2_TEMP_OFFSET) / 4.0);
    4a46:	b205      	sxth	r5, r0
    TLx493D_SensitivityType_t sens = tlx493d_gen_2_getSensitivityType(sensor, availSens, x2BF, x4BF);
    4a48:	4620      	mov	r0, r4
    4a4a:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
    4a4e:	f7ff ff7f 	bl	4950 <tlx493d_gen_2_getSensitivityType>
    sensor->functions->calculateRawMagneticFieldAtTemperature(sensor, tr, sens, xLow,  yLow,  zLow,  &xlTh, &ylTh, &zlTh);
    4a52:	a91e      	add	r1, sp, #120	; 0x78
    4a54:	68a3      	ldr	r3, [r4, #8]
    4a56:	eeb0 2b4d 	vmov.f64	d2, d13
    4a5a:	9101      	str	r1, [sp, #4]
    4a5c:	f10d 0176 	add.w	r1, sp, #118	; 0x76
    4a60:	eeb0 1b4c 	vmov.f64	d1, d12
    TLx493D_SensitivityType_t sens = tlx493d_gen_2_getSensitivityType(sensor, availSens, x2BF, x4BF);
    4a64:	4602      	mov	r2, r0
    sensor->functions->calculateRawMagneticFieldAtTemperature(sensor, tr, sens, xLow,  yLow,  zLow,  &xlTh, &ylTh, &zlTh);
    4a66:	9100      	str	r1, [sp, #0]
    4a68:	eeb0 0b4b 	vmov.f64	d0, d11
    4a6c:	f8d3 b0c0 	ldr.w	fp, [r3, #192]	; 0xc0
    4a70:	4629      	mov	r1, r5
    4a72:	ab1d      	add	r3, sp, #116	; 0x74
    4a74:	9019      	str	r0, [sp, #100]	; 0x64
    4a76:	4620      	mov	r0, r4
    4a78:	47d8      	blx	fp
    sensor->functions->calculateRawMagneticFieldAtTemperature(sensor, tr, sens, xHigh, yHigh, zHigh, &xhTh, &yhTh, &zhTh);
    4a7a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
    4a7e:	68a3      	ldr	r3, [r4, #8]
    4a80:	eeb0 2b4a 	vmov.f64	d2, d10
    4a84:	9001      	str	r0, [sp, #4]
    4a86:	a81f      	add	r0, sp, #124	; 0x7c
    4a88:	eeb0 1b49 	vmov.f64	d1, d9
    4a8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4a8e:	9000      	str	r0, [sp, #0]
    4a90:	eeb0 0b48 	vmov.f64	d0, d8
    4a94:	4629      	mov	r1, r5
    4a96:	4620      	mov	r0, r4
    4a98:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
    4a9c:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
    4aa0:	47a8      	blx	r5
    return tlx493d_gen_2_setWakeUpThresholdsAsInteger(sensor, cpBF,
    4aa2:	9814      	ldr	r0, [sp, #80]	; 0x50
    4aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
    4aa6:	9003      	str	r0, [sp, #12]
    4aa8:	4620      	mov	r0, r4
    4aaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
    4aac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4aae:	9400      	str	r4, [sp, #0]
    4ab0:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    4ab4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4ab6:	940f      	str	r4, [sp, #60]	; 0x3c
    4ab8:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
    4abc:	9107      	str	r1, [sp, #28]
    4abe:	940e      	str	r4, [sp, #56]	; 0x38
    4ac0:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	; 0x7c
    4ac4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4ac6:	940d      	str	r4, [sp, #52]	; 0x34
    4ac8:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
    4acc:	9206      	str	r2, [sp, #24]
    4ace:	940c      	str	r4, [sp, #48]	; 0x30
    4ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4ad2:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
    4ad6:	9d15      	ldr	r5, [sp, #84]	; 0x54
    4ad8:	9305      	str	r3, [sp, #20]
    4ada:	4643      	mov	r3, r8
    4adc:	9102      	str	r1, [sp, #8]
    4ade:	4631      	mov	r1, r6
    4ae0:	9201      	str	r2, [sp, #4]
    4ae2:	463a      	mov	r2, r7
    4ae4:	940b      	str	r4, [sp, #44]	; 0x2c
    4ae6:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
    4aea:	9504      	str	r5, [sp, #16]
    4aec:	940a      	str	r4, [sp, #40]	; 0x28
    4aee:	e9cd 9a08 	strd	r9, sl, [sp, #32]
    4af2:	f7ff fd93 	bl	461c <tlx493d_gen_2_setWakeUpThresholdsAsInteger>
}
    4af6:	b021      	add	sp, #132	; 0x84
    4af8:	ecbd 8b0c 	vpop	{d8-d13}
    4afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b00:	eb851eb8 	.word	0xeb851eb8
    4b04:	3fceb851 	.word	0x3fceb851
    4b08:	00000000 	.word	0x00000000
    4b0c:	40927000 	.word	0x40927000

00004b10 <tlx493d_gen_3_shiftDataInRegisters>:
static void tlx493d_gen_3_shiftDataInRegisters(TLx493D_t *sensor, uint8_t channelSaveBF) {
    4b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b14:	af00      	add	r7, sp, #0
    4b16:	4604      	mov	r4, r0
    uint8_t channel = tlx493d_common_returnBitfield(sensor, channelSaveBF);
    4b18:	f7ff f89c 	bl	3c54 <tlx493d_common_returnBitfield>
    switch(channel) {
    4b1c:	f1a0 030c 	sub.w	r3, r0, #12
    4b20:	b2db      	uxtb	r3, r3
    4b22:	2b02      	cmp	r3, #2
    4b24:	d902      	bls.n	4b2c <tlx493d_gen_3_shiftDataInRegisters+0x1c>
}
    4b26:	46bd      	mov	sp, r7
    4b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t regCopy[sensor->regMapSize];
    4b2c:	7f25      	ldrb	r5, [r4, #28]
    4b2e:	46e8      	mov	r8, sp
    4b30:	4a0e      	ldr	r2, [pc, #56]	; (4b6c <tlx493d_gen_3_shiftDataInRegisters+0x5c>)
    (void) memcpy(regCopy, sensor->regMap, sensor->regMapSize);
    4b32:	f8d4 9000 	ldr.w	r9, [r4]
    4b36:	5cd6      	ldrb	r6, [r2, r3]
    uint8_t regCopy[sensor->regMapSize];
    4b38:	1deb      	adds	r3, r5, #7
    (void) memcpy(regCopy, sensor->regMap, sensor->regMapSize);
    4b3a:	462a      	mov	r2, r5
    4b3c:	4649      	mov	r1, r9
    uint8_t regCopy[sensor->regMapSize];
    4b3e:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
    4b42:	ebad 0d03 	sub.w	sp, sp, r3
    (void) memcpy(regCopy, sensor->regMap, sensor->regMapSize);
    4b46:	4668      	mov	r0, sp
    4b48:	f001 fa58 	bl	5ffc <memcpy>
    (void) memcpy(sensor->regMap + offset + 4, regCopy + offset, (size_t) (sensor->regMapSize - offset - 4));
    4b4c:	1d30      	adds	r0, r6, #4
    4b4e:	1baa      	subs	r2, r5, r6
    4b50:	eb0d 0106 	add.w	r1, sp, r6
    4b54:	4448      	add	r0, r9
    4b56:	3a04      	subs	r2, #4
    4b58:	f001 fa50 	bl	5ffc <memcpy>
    (void) memset(sensor->regMap + offset, 0, 4);
    4b5c:	6823      	ldr	r3, [r4, #0]
    4b5e:	2200      	movs	r2, #0
    4b60:	519a      	str	r2, [r3, r6]
    4b62:	46c5      	mov	sp, r8
}
    4b64:	46bd      	mov	sp, r7
    4b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b6a:	bf00      	nop
    4b6c:	200003dc 	.word	0x200003dc

00004b70 <tlx493d_gen_3_readRegisters>:
bool tlx493d_gen_3_readRegisters(TLx493D_t *sensor, uint8_t channelSaveBF) {
    4b70:	b530      	push	{r4, r5, lr}
    4b72:	b083      	sub	sp, #12
    4b74:	4605      	mov	r5, r0
    4b76:	9101      	str	r1, [sp, #4]
    bool b = tlx493d_common_readRegisters(sensor);
    4b78:	f7fe ff3a 	bl	39f0 <tlx493d_common_readRegisters>
    4b7c:	4604      	mov	r4, r0
    tlx493d_gen_3_shiftDataInRegisters(sensor, channelSaveBF);
    4b7e:	9901      	ldr	r1, [sp, #4]
    4b80:	4628      	mov	r0, r5
    4b82:	f7ff ffc5 	bl	4b10 <tlx493d_gen_3_shiftDataInRegisters>
}
    4b86:	4620      	mov	r0, r4
    4b88:	b003      	add	sp, #12
    4b8a:	bd30      	pop	{r4, r5, pc}

00004b8c <tlx493d_gen_3_readRegistersAndCheck>:
bool tlx493d_gen_3_readRegistersAndCheck(TLx493D_t *sensor, uint8_t channelSaveBF) {
    4b8c:	b530      	push	{r4, r5, lr}
    4b8e:	b083      	sub	sp, #12
    4b90:	4605      	mov	r5, r0
    4b92:	9101      	str	r1, [sp, #4]
    bool b = tlx493d_common_readRegistersAndCheck(sensor);
    4b94:	f7fe ff4c 	bl	3a30 <tlx493d_common_readRegistersAndCheck>
    4b98:	4604      	mov	r4, r0
    tlx493d_gen_3_shiftDataInRegisters(sensor, channelSaveBF);
    4b9a:	9901      	ldr	r1, [sp, #4]
    4b9c:	4628      	mov	r0, r5
    4b9e:	f7ff ffb7 	bl	4b10 <tlx493d_gen_3_shiftDataInRegisters>
}
    4ba2:	4620      	mov	r0, r4
    4ba4:	b003      	add	sp, #12
    4ba6:	bd30      	pop	{r4, r5, pc}

00004ba8 <tlx493d_gen_3_calculateRawTemperature>:
    tlx493d_common_calculateRawTemperature(sensor, tempMSBBF, tempLSBBF, temperature);
    4ba8:	f7fe bfac 	b.w	3b04 <tlx493d_common_calculateRawTemperature>

00004bac <tlx493d_gen_3_calculateRawMagneticField>:
                                             uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    4bac:	b410      	push	{r4}
    4bae:	f89d 4004 	ldrb.w	r4, [sp, #4]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    4bb2:	9401      	str	r4, [sp, #4]
                                             uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    4bb4:	f89d 4008 	ldrb.w	r4, [sp, #8]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    4bb8:	9402      	str	r4, [sp, #8]
                                             uint8_t bzMSBBF, uint8_t bzLSBBF, int16_t *x, int16_t *y, int16_t *z) {
    4bba:	f89d 400c 	ldrb.w	r4, [sp, #12]
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    4bbe:	9403      	str	r4, [sp, #12]
}
    4bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    tlx493d_common_calculateRawMagneticField(sensor, bxMSBBF, bxLSBBF, byMSBBF, byLSBBF, bzMSBBF, bzLSBBF, x, y, z);
    4bc4:	f7ff b900 	b.w	3dc8 <tlx493d_common_calculateRawMagneticField>

00004bc8 <tlx493d_gen_3_calculateTemperature>:
void tlx493d_gen_3_calculateTemperature(TLx493D_t *sensor, uint8_t tempMSBBF, uint8_t tempLSBBF, double *temperature) {
    4bc8:	b510      	push	{r4, lr}
    4bca:	b082      	sub	sp, #8
    int16_t value = 0;
    4bcc:	f04f 0c00 	mov.w	ip, #0
void tlx493d_gen_3_calculateTemperature(TLx493D_t *sensor, uint8_t tempMSBBF, uint8_t tempLSBBF, double *temperature) {
    4bd0:	461c      	mov	r4, r3
    tlx493d_common_concatBytes(sensor, tempMSBBF, tempLSBBF, &value);
    4bd2:	f10d 0306 	add.w	r3, sp, #6
    int16_t value = 0;
    4bd6:	f8ad c006 	strh.w	ip, [sp, #6]
    tlx493d_common_concatBytes(sensor, tempMSBBF, tempLSBBF, &value);
    4bda:	f7ff f8cd 	bl	3d78 <tlx493d_common_concatBytes>
    *temperature = (((double) value - GEN_3_TEMP_OFFSET) / GEN_3_TEMP_SENSITIVITY) + GEN_3_TEMP_REF;
    4bde:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    4be2:	eeb3 5b09 	vmov.f64	d5, #57	; 0x41c80000  25.0
    4be6:	ee07 3a10 	vmov	s14, r3
    4bea:	ed9f 6b09 	vldr	d6, [pc, #36]	; 4c10 <tlx493d_gen_3_calculateTemperature+0x48>
    4bee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    4bf2:	ed9f 4b09 	vldr	d4, [pc, #36]	; 4c18 <tlx493d_gen_3_calculateTemperature+0x50>
    4bf6:	ee37 7b46 	vsub.f64	d7, d7, d6
    4bfa:	ee87 6b04 	vdiv.f64	d6, d7, d4
    4bfe:	ee36 6b05 	vadd.f64	d6, d6, d5
    4c02:	ed84 6b00 	vstr	d6, [r4]
}
    4c06:	b002      	add	sp, #8
    4c08:	bd10      	pop	{r4, pc}
    4c0a:	bf00      	nop
    4c0c:	f3af 8000 	nop.w
    4c10:	00000000 	.word	0x00000000
    4c14:	40b06800 	.word	0x40b06800
    4c18:	66666666 	.word	0x66666666
    4c1c:	402e6666 	.word	0x402e6666

00004c20 <tlx493d_gen_3_calculateMagneticField>:
                                          double *x, double *y, double *z) {
    4c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c24:	ed2d 8b08 	vpush	{d8-d11}
    4c28:	b082      	sub	sp, #8
    4c2a:	461d      	mov	r5, r3
    int16_t valueX = 0;
    4c2c:	2300      	movs	r3, #0
                                          double *x, double *y, double *z) {
    4c2e:	4604      	mov	r4, r0
    4c30:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    4c34:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
    4c38:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    int16_t valueX = 0;
    4c3c:	f8ad 3000 	strh.w	r3, [sp]
    int16_t valueY = 0;
    4c40:	f8ad 3002 	strh.w	r3, [sp, #2]
    int16_t valueZ = 0;
    4c44:	f8ad 3004 	strh.w	r3, [sp, #4]
    tlx493d_common_concatBytes(sensor, bxMSBBF, bxLSBBF, &valueX);
    4c48:	466b      	mov	r3, sp
                                          double *x, double *y, double *z) {
    4c4a:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
    4c4e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    tlx493d_common_concatBytes(sensor, bxMSBBF, bxLSBBF, &valueX);
    4c52:	f7ff f891 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, byMSBBF, byLSBBF, &valueY);
    4c56:	4652      	mov	r2, sl
    4c58:	4629      	mov	r1, r5
    4c5a:	f10d 0302 	add.w	r3, sp, #2
    4c5e:	4620      	mov	r0, r4
    4c60:	f7ff f88a 	bl	3d78 <tlx493d_common_concatBytes>
    tlx493d_common_concatBytes(sensor, bzMSBBF, bzLSBBF, &valueZ);
    4c64:	464a      	mov	r2, r9
    4c66:	4641      	mov	r1, r8
    4c68:	ab01      	add	r3, sp, #4
    4c6a:	4620      	mov	r0, r4
    4c6c:	f7ff f884 	bl	3d78 <tlx493d_common_concatBytes>
    double sf = sensor->functions->getSensitivityScaleFactor(sensor);
    4c70:	68a3      	ldr	r3, [r4, #8]
    4c72:	4620      	mov	r0, r4
    4c74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c78:	4798      	blx	r3
    tlx493d_common_calculateRawTemperature(sensor, tempMSBBF, tempLSBBF, temperature);
    4c7a:	f10d 0306 	add.w	r3, sp, #6
    4c7e:	463a      	mov	r2, r7
    4c80:	4631      	mov	r1, r6
    4c82:	4620      	mov	r0, r4
    double sf = sensor->functions->getSensitivityScaleFactor(sensor);
    4c84:	eeb0 8b40 	vmov.f64	d8, d0
    tlx493d_common_calculateRawTemperature(sensor, tempMSBBF, tempLSBBF, temperature);
    4c88:	f7fe ff3c 	bl	3b04 <tlx493d_common_calculateRawTemperature>
    double temp = (double) rawTemp;
    4c8c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    4c90:	ee07 3a10 	vmov	s14, r3
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4c94:	f9bd 3000 	ldrsh.w	r3, [sp]
    double temp = (double) rawTemp;
    4c98:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4c9c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 4db8 <tlx493d_gen_3_calculateMagneticField+0x198>
    4ca0:	ed9f 5b47 	vldr	d5, [pc, #284]	; 4dc0 <tlx493d_gen_3_calculateMagneticField+0x1a0>
    4ca4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 4dc8 <tlx493d_gen_3_calculateMagneticField+0x1a8>
    4ca8:	ed9f 9b49 	vldr	d9, [pc, #292]	; 4dd0 <tlx493d_gen_3_calculateMagneticField+0x1b0>
    4cac:	eea7 5b04 	vfma.f64	d5, d7, d4
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4cb0:	ed9f 3b49 	vldr	d3, [pc, #292]	; 4dd8 <tlx493d_gen_3_calculateMagneticField+0x1b8>
    4cb4:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 4de0 <tlx493d_gen_3_calculateMagneticField+0x1c0>
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4cb8:	ed9f 2b4b 	vldr	d2, [pc, #300]	; 4de8 <tlx493d_gen_3_calculateMagneticField+0x1c8>
    4cbc:	ed9f ab4c 	vldr	d10, [pc, #304]	; 4df0 <tlx493d_gen_3_calculateMagneticField+0x1d0>
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4cc0:	eea7 1b03 	vfma.f64	d1, d7, d3
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4cc4:	ee03 3a10 	vmov	s6, r3
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4cc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4ccc:	eea5 6b07 	vfma.f64	d6, d5, d7
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4cd0:	ee05 3a10 	vmov	s10, r3
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4cd4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4cd8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4cdc:	eea7 ab02 	vfma.f64	d10, d7, d2
    4ce0:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4ce4:	eea6 9b07 	vfma.f64	d9, d6, d7
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4ce8:	ee06 3a10 	vmov	s12, r3
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4cee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    *y = ((GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y)))
    4cf2:	ed9f 0b41 	vldr	d0, [pc, #260]	; 4df8 <tlx493d_gen_3_calculateMagneticField+0x1d8>
       / GEN_3_FULL_RANGE_FIELD_SENSITIVITY;
    4cf6:	ed9f 4b42 	vldr	d4, [pc, #264]	; 4e00 <tlx493d_gen_3_calculateMagneticField+0x1e0>
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4cfa:	ed9f bb43 	vldr	d11, [pc, #268]	; 4e08 <tlx493d_gen_3_calculateMagneticField+0x1e8>
    4cfe:	ed9f 2b44 	vldr	d2, [pc, #272]	; 4e10 <tlx493d_gen_3_calculateMagneticField+0x1f0>
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4d02:	ee23 9b09 	vmul.f64	d9, d3, d9
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4d06:	eea7 2b0b 	vfma.f64	d2, d7, d11
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4d0a:	ee89 3b08 	vdiv.f64	d3, d9, d8
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4d0e:	ed9f 9b42 	vldr	d9, [pc, #264]	; 4e18 <tlx493d_gen_3_calculateMagneticField+0x1f8>
    4d12:	eeaa 9b07 	vfma.f64	d9, d10, d7
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4d16:	ed9f ab42 	vldr	d10, [pc, #264]	; 4e20 <tlx493d_gen_3_calculateMagneticField+0x200>
    4d1a:	eea1 ab07 	vfma.f64	d10, d1, d7
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4d1e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 4e28 <tlx493d_gen_3_calculateMagneticField+0x208>
    4d22:	eea9 1b07 	vfma.f64	d1, d9, d7
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4d26:	ed9f 9b42 	vldr	d9, [pc, #264]	; 4e30 <tlx493d_gen_3_calculateMagneticField+0x210>
    4d2a:	eeaa 9b07 	vfma.f64	d9, d10, d7
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4d2e:	ee25 5b01 	vmul.f64	d5, d5, d1
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4d32:	ee26 6b09 	vmul.f64	d6, d6, d9
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4d36:	ee85 1b08 	vdiv.f64	d1, d5, d8
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4d3a:	ee86 5b08 	vdiv.f64	d5, d6, d8
    *y = ((GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y)))
    4d3e:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 4e38 <tlx493d_gen_3_calculateMagneticField+0x218>
    *z = ((GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z)))
    4d42:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 4e40 <tlx493d_gen_3_calculateMagneticField+0x220>
    *y = ((GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y)))
    4d46:	eea7 6b00 	vfma.f64	d6, d7, d0
    4d4a:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 4e48 <tlx493d_gen_3_calculateMagneticField+0x228>
    4d4e:	eea6 0b07 	vfma.f64	d0, d6, d7
    4d52:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 4e50 <tlx493d_gen_3_calculateMagneticField+0x230>
    4d56:	eea0 6b07 	vfma.f64	d6, d0, d7
          + ((double) valueY) * (GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf)
    4d5a:	ee31 1b06 	vadd.f64	d1, d1, d6
    *z = ((GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z)))
    4d5e:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 4e58 <tlx493d_gen_3_calculateMagneticField+0x238>
       / GEN_3_FULL_RANGE_FIELD_SENSITIVITY;
    4d62:	ee81 0b04 	vdiv.f64	d0, d1, d4
    *z = ((GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z)))
    4d66:	eea7 6b08 	vfma.f64	d6, d7, d8
    4d6a:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 4e60 <tlx493d_gen_3_calculateMagneticField+0x240>
    4d6e:	eea6 1b07 	vfma.f64	d1, d6, d7
    4d72:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 4e68 <tlx493d_gen_3_calculateMagneticField+0x248>
    4d76:	eea1 6b07 	vfma.f64	d6, d1, d7
          + ((double) valueZ) * (GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf)
    4d7a:	ee35 6b06 	vadd.f64	d6, d5, d6
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4d7e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 4e70 <tlx493d_gen_3_calculateMagneticField+0x250>
       / GEN_3_FULL_RANGE_FIELD_SENSITIVITY;
    4d82:	ee86 1b04 	vdiv.f64	d1, d6, d4
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4d86:	eea2 5b07 	vfma.f64	d5, d2, d7
    4d8a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 4e78 <tlx493d_gen_3_calculateMagneticField+0x258>
    4d8e:	eea5 6b07 	vfma.f64	d6, d5, d7
          + ((double) valueX) * (GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)
    4d92:	ee33 3b06 	vadd.f64	d3, d3, d6
       / GEN_3_FULL_RANGE_FIELD_SENSITIVITY;
    4d96:	ee83 7b04 	vdiv.f64	d7, d3, d4
    *x = ((GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x)))
    4d9a:	ed83 7b00 	vstr	d7, [r3]
    *y = ((GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y)))
    4d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4da0:	ed83 0b00 	vstr	d0, [r3]
    *z = ((GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z)))
    4da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4da6:	ed83 1b00 	vstr	d1, [r3]
}
    4daa:	b002      	add	sp, #8
    4dac:	ecbd 8b08 	vpop	{d8-d11}
    4db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4db4:	f3af 8000 	nop.w
    4db8:	aac74b5e 	.word	0xaac74b5e
    4dbc:	3dc5f88b 	.word	0x3dc5f88b
    4dc0:	029bab9e 	.word	0x029bab9e
    4dc4:	bea1a4be 	.word	0xbea1a4be
    4dc8:	aadb0a7d 	.word	0xaadb0a7d
    4dcc:	3f626b7f 	.word	0x3f626b7f
    4dd0:	b8d61746 	.word	0xb8d61746
    4dd4:	c000dff7 	.word	0xc000dff7
    4dd8:	b92378bf 	.word	0xb92378bf
    4ddc:	3dbceaca 	.word	0x3dbceaca
    4de0:	102bdc8d 	.word	0x102bdc8d
    4de4:	be970036 	.word	0xbe970036
    4de8:	68e7fc8f 	.word	0x68e7fc8f
    4dec:	3dc5dbeb 	.word	0x3dc5dbeb
    4df0:	18721824 	.word	0x18721824
    4df4:	bea18b5e 	.word	0xbea18b5e
    4df8:	5a76eb73 	.word	0x5a76eb73
    4dfc:	bdd48c61 	.word	0xbdd48c61
    4e00:	00000000 	.word	0x00000000
    4e04:	403d8000 	.word	0x403d8000
    4e08:	cf138e5d 	.word	0xcf138e5d
    4e0c:	bdfce652 	.word	0xbdfce652
    4e10:	92f0d7ca 	.word	0x92f0d7ca
    4e14:	3ed96fa4 	.word	0x3ed96fa4
    4e18:	84cb78b1 	.word	0x84cb78b1
    4e1c:	3f624e48 	.word	0x3f624e48
    4e20:	a56c71d4 	.word	0xa56c71d4
    4e24:	3f57ad26 	.word	0x3f57ad26
    4e28:	5dfcbe0a 	.word	0x5dfcbe0a
    4e2c:	c000dabe 	.word	0xc000dabe
    4e30:	ed0eb6a7 	.word	0xed0eb6a7
    4e34:	bfeedde7 	.word	0xbfeedde7
    4e38:	35185235 	.word	0x35185235
    4e3c:	3eace412 	.word	0x3eace412
    4e40:	11fa87ef 	.word	0x11fa87ef
    4e44:	bdc81bee 	.word	0xbdc81bee
    4e48:	9ebee9d8 	.word	0x9ebee9d8
    4e4c:	bf72d9da 	.word	0xbf72d9da
    4e50:	15c46270 	.word	0x15c46270
    4e54:	401e4c82 	.word	0x401e4c82
    4e58:	1568c854 	.word	0x1568c854
    4e5c:	3ea78cbe 	.word	0x3ea78cbe
    4e60:	b9b8eb3b 	.word	0xb9b8eb3b
    4e64:	bf7005af 	.word	0xbf7005af
    4e68:	a42e8433 	.word	0xa42e8433
    4e6c:	4022776d 	.word	0x4022776d
    4e70:	098302f7 	.word	0x098302f7
    4e74:	bf9f917b 	.word	0xbf9f917b
    4e78:	c0b43ab0 	.word	0xc0b43ab0
    4e7c:	404a3b85 	.word	0x404a3b85

00004e80 <tlx493d_gen_3_setMeasurement>:
bool tlx493d_gen_3_setMeasurement(TLx493D_t *sensor, uint8_t channelBF, uint8_t channelSaveBF, TLx493D_MeasurementType_t val) {
    4e80:	b530      	push	{r4, r5, lr}
    4e82:	4615      	mov	r5, r2
    switch(val) {
    4e84:	1e5a      	subs	r2, r3, #1
bool tlx493d_gen_3_setMeasurement(TLx493D_t *sensor, uint8_t channelBF, uint8_t channelSaveBF, TLx493D_MeasurementType_t val) {
    4e86:	b083      	sub	sp, #12
    4e88:	460c      	mov	r4, r1
    switch(val) {
    4e8a:	2a06      	cmp	r2, #6
    4e8c:	d805      	bhi.n	4e9a <tlx493d_gen_3_setMeasurement+0x1a>
    4e8e:	e8df f002 	tbb	[pc, r2]
    4e92:	041d      	.short	0x041d
    4e94:	1f210404 	.word	0x1f210404
    4e98:	0b          	.byte	0x0b
    4e99:	00          	.byte	0x00
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_MeasurementType_t");
    4e9a:	4a0f      	ldr	r2, [pc, #60]	; (4ed8 <tlx493d_gen_3_setMeasurement+0x58>)
    4e9c:	4619      	mov	r1, r3
    4e9e:	f7ff f821 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    4ea2:	2000      	movs	r0, #0
    4ea4:	b003      	add	sp, #12
    4ea6:	bd30      	pop	{r4, r5, pc}
        case TLx493D_BzTemp_e : channel = 0x0E;
    4ea8:	220e      	movs	r2, #14
    tlx493d_common_setBitfield(sensor, channelBF, channel);
    4eaa:	4621      	mov	r1, r4
    4eac:	9201      	str	r2, [sp, #4]
    4eae:	9000      	str	r0, [sp, #0]
    4eb0:	f7fe fefe 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, channelSaveBF, channel);
    4eb4:	4629      	mov	r1, r5
    4eb6:	9800      	ldr	r0, [sp, #0]
    4eb8:	9a01      	ldr	r2, [sp, #4]
    4eba:	f7fe fef9 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, channelBF);
    4ebe:	4621      	mov	r1, r4
    4ec0:	9800      	ldr	r0, [sp, #0]
}
    4ec2:	b003      	add	sp, #12
    4ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, channelBF);
    4ec8:	f7fe bf26 	b.w	3d18 <tlx493d_common_writeRegister>
        case TLx493D_BxByBzTemp_e : channel = 0x00;
    4ecc:	2200      	movs	r2, #0
    4ece:	e7ec      	b.n	4eaa <tlx493d_gen_3_setMeasurement+0x2a>
        case TLx493D_BxBy_e : channel = 0x0D;
    4ed0:	220d      	movs	r2, #13
    4ed2:	e7ea      	b.n	4eaa <tlx493d_gen_3_setMeasurement+0x2a>
    switch(val) {
    4ed4:	220c      	movs	r2, #12
    4ed6:	e7e8      	b.n	4eaa <tlx493d_gen_3_setMeasurement+0x2a>
    4ed8:	2000064c 	.word	0x2000064c

00004edc <tlx493d_gen_3_setTrigger>:
bool tlx493d_gen_3_setTrigger(TLx493D_t *sensor, uint8_t trigBF, TLx493D_TriggerType_t val) {
    4edc:	b538      	push	{r3, r4, r5, lr}
    4ede:	4613      	mov	r3, r2
    4ee0:	3a03      	subs	r2, #3
    4ee2:	b2d2      	uxtb	r2, r2
    4ee4:	2a02      	cmp	r2, #2
    4ee6:	d809      	bhi.n	4efc <tlx493d_gen_3_setTrigger+0x20>
    4ee8:	4604      	mov	r4, r0
    4eea:	460d      	mov	r5, r1
    tlx493d_common_setBitfield(sensor, trigBF, trig);
    4eec:	f7fe fee0 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, trigBF);
    4ef0:	4629      	mov	r1, r5
    4ef2:	4620      	mov	r0, r4
}
    4ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, trigBF);
    4ef8:	f7fe bf0e 	b.w	3d18 <tlx493d_common_writeRegister>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_TriggerType_t");
    4efc:	4a02      	ldr	r2, [pc, #8]	; (4f08 <tlx493d_gen_3_setTrigger+0x2c>)
    4efe:	4619      	mov	r1, r3
    4f00:	f7fe fff0 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    4f04:	2000      	movs	r0, #0
    4f06:	bd38      	pop	{r3, r4, r5, pc}
    4f08:	20001ae0 	.word	0x20001ae0

00004f0c <tlx493d_gen_3_setSensitivity>:
    switch(val) {
    4f0c:	2b02      	cmp	r3, #2
bool tlx493d_gen_3_setSensitivity(TLx493D_t *sensor, uint8_t shortBF, uint8_t xtrShortBF, TLx493D_SensitivityType_t val) {
    4f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f10:	d813      	bhi.n	4f3a <tlx493d_gen_3_setSensitivity+0x2e>
    4f12:	4616      	mov	r6, r2
    4f14:	4a0c      	ldr	r2, [pc, #48]	; (4f48 <tlx493d_gen_3_setSensitivity+0x3c>)
    4f16:	4604      	mov	r4, r0
    4f18:	460d      	mov	r5, r1
    4f1a:	5cd7      	ldrb	r7, [r2, r3]
    tlx493d_common_setBitfield(sensor, shortBF, shortVal);
    4f1c:	4a0b      	ldr	r2, [pc, #44]	; (4f4c <tlx493d_gen_3_setSensitivity+0x40>)
    4f1e:	5cd2      	ldrb	r2, [r2, r3]
    4f20:	f7fe fec6 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, xtrShortBF, extraShortVal);
    4f24:	4631      	mov	r1, r6
    4f26:	4620      	mov	r0, r4
    4f28:	463a      	mov	r2, r7
    4f2a:	f7fe fec1 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, shortBF);
    4f2e:	4629      	mov	r1, r5
    4f30:	4620      	mov	r0, r4
}
    4f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return tlx493d_common_writeRegister(sensor, shortBF);
    4f36:	f7fe beef 	b.w	3d18 <tlx493d_common_writeRegister>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_SensitivityType_t");
    4f3a:	4a05      	ldr	r2, [pc, #20]	; (4f50 <tlx493d_gen_3_setSensitivity+0x44>)
    4f3c:	4619      	mov	r1, r3
    4f3e:	f7fe ffd1 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    4f42:	2000      	movs	r0, #0
    4f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f46:	bf00      	nop
    4f48:	200003ec 	.word	0x200003ec
    4f4c:	200003e8 	.word	0x200003e8
    4f50:	20000938 	.word	0x20000938

00004f54 <tlx493d_gen_3_setIICAddress>:
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setIICAddress");
    4f54:	4902      	ldr	r1, [pc, #8]	; (4f60 <tlx493d_gen_3_setIICAddress+0xc>)
bool tlx493d_gen_3_setIICAddress(const TLx493D_t *sensor, uint8_t iicadrBF, TLx493D_IICAddressType_t addr) {
    4f56:	b508      	push	{r3, lr}
    tlx493d_warnFeatureNotAvailableForSensorType(sensor, "setIICAddress");
    4f58:	f7fe ff64 	bl	3e24 <tlx493d_warnFeatureNotAvailableForSensorType>
}
    4f5c:	2000      	movs	r0, #0
    4f5e:	bd08      	pop	{r3, pc}
    4f60:	20000cd4 	.word	0x20000cd4

00004f64 <tlx493d_gen_3_set1ByteReadMode>:
bool tlx493d_gen_3_set1ByteReadMode(TLx493D_t *sensor, uint8_t prBF, uint8_t pr) {
    4f64:	b538      	push	{r3, r4, r5, lr}
    4f66:	4604      	mov	r4, r0
    4f68:	460d      	mov	r5, r1
    tlx493d_common_setBitfield(sensor, prBF, pr);
    4f6a:	f7fe fea1 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, prBF);
    4f6e:	4629      	mov	r1, r5
    4f70:	4620      	mov	r0, r4
}
    4f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, prBF);
    4f76:	f7fe becf 	b.w	3d18 <tlx493d_common_writeRegister>
    4f7a:	bf00      	nop

00004f7c <tlx493d_gen_3_setCollisionAvoidance>:
    4f7c:	b538      	push	{r3, r4, r5, lr}
    4f7e:	4604      	mov	r4, r0
    4f80:	460d      	mov	r5, r1
    4f82:	f7fe fe95 	bl	3cb0 <tlx493d_common_setBitfield>
    4f86:	4629      	mov	r1, r5
    4f88:	4620      	mov	r0, r4
    4f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f8e:	f7fe bec3 	b.w	3d18 <tlx493d_common_writeRegister>
    4f92:	bf00      	nop

00004f94 <tlx493d_gen_3_setInterrupt>:
    4f94:	b538      	push	{r3, r4, r5, lr}
    4f96:	4604      	mov	r4, r0
    4f98:	460d      	mov	r5, r1
    4f9a:	f7fe fe89 	bl	3cb0 <tlx493d_common_setBitfield>
    4f9e:	4629      	mov	r1, r5
    4fa0:	4620      	mov	r0, r4
    4fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4fa6:	f7fe beb7 	b.w	3d18 <tlx493d_common_writeRegister>
    4faa:	bf00      	nop

00004fac <tlx493d_gen_3_setPowerMode>:
    switch(val) {
    4fac:	2a02      	cmp	r2, #2
bool tlx493d_gen_3_setPowerMode(TLx493D_t *sensor, uint8_t modeBF, TLx493D_PowerModeType_t val) {
    4fae:	b510      	push	{r4, lr}
    4fb0:	4604      	mov	r4, r0
    4fb2:	b082      	sub	sp, #8
    switch(val) {
    4fb4:	d015      	beq.n	4fe2 <tlx493d_gen_3_setPowerMode+0x36>
    4fb6:	2a04      	cmp	r2, #4
    4fb8:	4613      	mov	r3, r2
    4fba:	d006      	beq.n	4fca <tlx493d_gen_3_setPowerMode+0x1e>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_PowerModeType_t");
    4fbc:	4a0a      	ldr	r2, [pc, #40]	; (4fe8 <tlx493d_gen_3_setPowerMode+0x3c>)
    4fbe:	4619      	mov	r1, r3
    4fc0:	f7fe ff90 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    4fc4:	2000      	movs	r0, #0
    4fc6:	b002      	add	sp, #8
    4fc8:	bd10      	pop	{r4, pc}
    switch(val) {
    4fca:	2201      	movs	r2, #1
    tlx493d_common_setBitfield(sensor, modeBF, mode);
    4fcc:	4620      	mov	r0, r4
    4fce:	9101      	str	r1, [sp, #4]
    4fd0:	f7fe fe6e 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, modeBF);
    4fd4:	9901      	ldr	r1, [sp, #4]
    4fd6:	4620      	mov	r0, r4
}
    4fd8:	b002      	add	sp, #8
    4fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tlx493d_common_writeRegister(sensor, modeBF);
    4fde:	f7fe be9b 	b.w	3d18 <tlx493d_common_writeRegister>
        case TLx493D_LOW_POWER_MODE_e : mode = 0x00;
    4fe2:	2200      	movs	r2, #0
    4fe4:	e7f2      	b.n	4fcc <tlx493d_gen_3_setPowerMode+0x20>
    4fe6:	bf00      	nop
    4fe8:	20001aa4 	.word	0x20001aa4

00004fec <tlx493d_gen_3_setUpdateRate>:
bool tlx493d_gen_3_setUpdateRate(TLx493D_t *sensor, uint8_t fUpdateBF, TLx493D_UpdateRateType_t val) {
    4fec:	b538      	push	{r3, r4, r5, lr}
    4fee:	4613      	mov	r3, r2
    4ff0:	3a0a      	subs	r2, #10
    4ff2:	b2d2      	uxtb	r2, r2
    4ff4:	2a03      	cmp	r2, #3
    4ff6:	d809      	bhi.n	500c <tlx493d_gen_3_setUpdateRate+0x20>
    4ff8:	4604      	mov	r4, r0
    4ffa:	460d      	mov	r5, r1
    tlx493d_common_setBitfield(sensor, fUpdateBF, rate);
    4ffc:	f7fe fe58 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, fUpdateBF);
    5000:	4629      	mov	r1, r5
    5002:	4620      	mov	r0, r4
}
    5004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return tlx493d_common_writeRegister(sensor, fUpdateBF);
    5008:	f7fe be86 	b.w	3d18 <tlx493d_common_writeRegister>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, val, "TLx493D_UpdateRateType_t");
    500c:	4a02      	ldr	r2, [pc, #8]	; (5018 <tlx493d_gen_3_setUpdateRate+0x2c>)
    500e:	4619      	mov	r1, r3
    5010:	f7fe ff68 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
}
    5014:	2000      	movs	r0, #0
    5016:	bd38      	pop	{r3, r4, r5, pc}
    5018:	20001af8 	.word	0x20001af8

0000501c <tlx493d_gen_3_hasValidData>:
bool tlx493d_gen_3_hasValidData(const TLx493D_t *sensor, uint8_t measBF) {
    501c:	b508      	push	{r3, lr}
    return tlx493d_common_returnBitfield(sensor, measBF) != 0U;
    501e:	f7fe fe19 	bl	3c54 <tlx493d_common_returnBitfield>
}
    5022:	3800      	subs	r0, #0
    5024:	bf18      	it	ne
    5026:	2001      	movne	r0, #1
    5028:	bd08      	pop	{r3, pc}
    502a:	bf00      	nop

0000502c <tlx493d_gen_3_isFunctional>:
    return sensor->functions->hasValidFuseParity(sensor);
    502c:	6883      	ldr	r3, [r0, #8]
    502e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5032:	4718      	bx	r3

00005034 <tlx493d_gen_3_isWakeUpEnabled>:
    5034:	b508      	push	{r3, lr}
    5036:	f7fe fe0d 	bl	3c54 <tlx493d_common_returnBitfield>
    503a:	3800      	subs	r0, #0
    503c:	bf18      	it	ne
    503e:	2001      	movne	r0, #1
    5040:	bd08      	pop	{r3, pc}
    5042:	bf00      	nop

00005044 <tlx493d_gen_3_setThreshold>:
bool tlx493d_gen_3_setThreshold(TLx493D_t *sensor, uint8_t msbsBF, uint8_t lsbsBF, int16_t threshold10Bits) {
    5044:	b570      	push	{r4, r5, r6, lr}
    5046:	4615      	mov	r5, r2
    const TLx493D_Register_t *msbs = &sensor->regDef[msbsBF];
    5048:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    504c:	6842      	ldr	r2, [r0, #4]
bool tlx493d_gen_3_setThreshold(TLx493D_t *sensor, uint8_t msbsBF, uint8_t lsbsBF, int16_t threshold10Bits) {
    504e:	4606      	mov	r6, r0
    const TLx493D_Register_t *lsbs = &sensor->regDef[lsbsBF];
    5050:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
    const TLx493D_Register_t *msbs = &sensor->regDef[msbsBF];
    5054:	4414      	add	r4, r2
    const TLx493D_Register_t *lsbs = &sensor->regDef[lsbsBF];
    5056:	4494      	add	ip, r2
    uint8_t upper = (uint8_t) (((uint8_t) (threshold10Bits >> lsbs->numBits)) & (msbs->mask >> msbs->offset));
    5058:	78a2      	ldrb	r2, [r4, #2]
    505a:	78e4      	ldrb	r4, [r4, #3]
    uint8_t lower = (uint8_t) (((uint8_t) threshold10Bits) & (lsbs->mask >> lsbs->offset));
    505c:	f89c e003 	ldrb.w	lr, [ip, #3]
    uint8_t upper = (uint8_t) (((uint8_t) (threshold10Bits >> lsbs->numBits)) & (msbs->mask >> msbs->offset));
    5060:	4122      	asrs	r2, r4
    uint8_t lower = (uint8_t) (((uint8_t) threshold10Bits) & (lsbs->mask >> lsbs->offset));
    5062:	f89c 4002 	ldrb.w	r4, [ip, #2]
    uint8_t upper = (uint8_t) (((uint8_t) (threshold10Bits >> lsbs->numBits)) & (msbs->mask >> msbs->offset));
    5066:	f89c c004 	ldrb.w	ip, [ip, #4]
    uint8_t lower = (uint8_t) (((uint8_t) threshold10Bits) & (lsbs->mask >> lsbs->offset));
    506a:	fa44 f40e 	asr.w	r4, r4, lr
    uint8_t upper = (uint8_t) (((uint8_t) (threshold10Bits >> lsbs->numBits)) & (msbs->mask >> msbs->offset));
    506e:	fa43 fc0c 	asr.w	ip, r3, ip
    uint8_t lower = (uint8_t) (((uint8_t) threshold10Bits) & (lsbs->mask >> lsbs->offset));
    5072:	4023      	ands	r3, r4
    uint8_t upper = (uint8_t) (((uint8_t) (threshold10Bits >> lsbs->numBits)) & (msbs->mask >> msbs->offset));
    5074:	ea02 020c 	and.w	r2, r2, ip
    uint8_t lower = (uint8_t) (((uint8_t) threshold10Bits) & (lsbs->mask >> lsbs->offset));
    5078:	b2dc      	uxtb	r4, r3
    tlx493d_common_setBitfield(sensor, msbsBF, upper);
    507a:	b2d2      	uxtb	r2, r2
    507c:	f7fe fe18 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, lsbsBF, lower);
    5080:	4630      	mov	r0, r6
    5082:	4622      	mov	r2, r4
    5084:	4629      	mov	r1, r5
    5086:	f7fe fe13 	bl	3cb0 <tlx493d_common_setBitfield>
}
    508a:	2001      	movs	r0, #1
    508c:	bd70      	pop	{r4, r5, r6, pc}
    508e:	bf00      	nop

00005090 <tlx493d_gen_3_softwareReset>:
bool tlx493d_gen_3_softwareReset(TLx493D_t *sensor, uint8_t resetBF) {
    5090:	b538      	push	{r3, r4, r5, lr}
    5092:	4604      	mov	r4, r0
    5094:	460d      	mov	r5, r1
   tlx493d_common_setBitfield(sensor, resetBF, 1);
    5096:	2201      	movs	r2, #1
    5098:	f7fe fe0a 	bl	3cb0 <tlx493d_common_setBitfield>
   return tlx493d_common_writeRegister(sensor, resetBF);
    509c:	4629      	mov	r1, r5
    509e:	4620      	mov	r0, r4
}
    50a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   return tlx493d_common_writeRegister(sensor, resetBF);
    50a4:	f7fe be38 	b.w	3d18 <tlx493d_common_writeRegister>

000050a8 <tlx493d_gen_3_calculateWakeUpParity>:
uint8_t tlx493d_gen_3_calculateWakeUpParity(const TLx493D_t *sensor, uint8_t wuBF) {
    50a8:	b510      	push	{r4, lr}
    const TLx493D_Register_t *wu     = &sensor->regDef[wuBF];
    50aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	uint8_t                   parity = sensor->regMap[wu->address] & wu->mask;
    50ae:	e9d0 4200 	ldrd	r4, r2, [r0]
    const TLx493D_Register_t *wu     = &sensor->regDef[wuBF];
    50b2:	440a      	add	r2, r1
	uint8_t                   parity = sensor->regMap[wu->address] & wu->mask;
    50b4:	f104 030b 	add.w	r3, r4, #11
    50b8:	f104 0112 	add.w	r1, r4, #18
    50bc:	7850      	ldrb	r0, [r2, #1]
    50be:	7892      	ldrb	r2, [r2, #2]
    50c0:	5c20      	ldrb	r0, [r4, r0]
    50c2:	4010      	ands	r0, r2
        parity ^= sensor->regMap[i];
    50c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    for(uint8_t i = 0x0CU; i <= 0x12U; ++i) {
    50c8:	428b      	cmp	r3, r1
        parity ^= sensor->regMap[i];
    50ca:	ea80 0002 	eor.w	r0, r0, r2
    for(uint8_t i = 0x0CU; i <= 0x12U; ++i) {
    50ce:	d1f9      	bne.n	50c4 <tlx493d_gen_3_calculateWakeUpParity+0x1c>
    parity = (uint8_t) (parity ^ (sensor->regMap[0x13] & 0x0FU));
    50d0:	7ce3      	ldrb	r3, [r4, #19]
    50d2:	f003 030f 	and.w	r3, r3, #15
    50d6:	4058      	eors	r0, r3
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    50d8:	b2c0      	uxtb	r0, r0
    50da:	f7fe fe3b 	bl	3d54 <tlx493d_common_calculateParity>
}
    50de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tlx493d_common_getOddParity(tlx493d_common_calculateParity(parity));
    50e2:	f7fe be41 	b.w	3d68 <tlx493d_common_getOddParity>
    50e6:	bf00      	nop

000050e8 <tlx493d_gen_3_writeWakeupParityRelatedRegisters>:
bool tlx493d_gen_3_writeWakeupParityRelatedRegisters(TLx493D_t *sensor, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    50e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ea:	4604      	mov	r4, r0
    50ec:	4617      	mov	r7, r2
    50ee:	b087      	sub	sp, #28
    50f0:	460e      	mov	r6, r1
    50f2:	461d      	mov	r5, r3
    tlx493d_common_setBitfield(sensor, wucpBF, tlx493d_common_returnBitfield(sensor, wuBF));
    50f4:	f7fe fdae 	bl	3c54 <tlx493d_common_returnBitfield>
    50f8:	4639      	mov	r1, r7
    50fa:	4602      	mov	r2, r0
    50fc:	4620      	mov	r0, r4
    50fe:	f7fe fdd7 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, wupBF, tlx493d_gen_3_calculateWakeUpParity(sensor, wuBF));
    5102:	4631      	mov	r1, r6
    5104:	4620      	mov	r0, r4
    5106:	f7ff ffcf 	bl	50a8 <tlx493d_gen_3_calculateWakeUpParity>
    510a:	4629      	mov	r1, r5
    510c:	4602      	mov	r2, r0
    510e:	4620      	mov	r0, r4
    5110:	f7fe fdce 	bl	3cb0 <tlx493d_common_setBitfield>
                              sensor->regMap[0x0C],
    5114:	6822      	ldr	r2, [r4, #0]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    5116:	4620      	mov	r0, r4
    uint8_t txBuffer[9] = {
    5118:	250c      	movs	r5, #12
    511a:	7b11      	ldrb	r1, [r2, #12]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    511c:	2300      	movs	r3, #0
    uint8_t txBuffer[9] = {
    511e:	7b54      	ldrb	r4, [r2, #13]
    5120:	f88d 100d 	strb.w	r1, [sp, #13]
    5124:	7b91      	ldrb	r1, [r2, #14]
    5126:	f88d 400e 	strb.w	r4, [sp, #14]
    512a:	f88d 100f 	strb.w	r1, [sp, #15]
    512e:	7c11      	ldrb	r1, [r2, #16]
    5130:	7bd4      	ldrb	r4, [r2, #15]
    5132:	f88d 1011 	strb.w	r1, [sp, #17]
    5136:	7c91      	ldrb	r1, [r2, #18]
    5138:	f88d 500c 	strb.w	r5, [sp, #12]
    513c:	f88d 4010 	strb.w	r4, [sp, #16]
    5140:	7c55      	ldrb	r5, [r2, #17]
    5142:	7cd4      	ldrb	r4, [r2, #19]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    5144:	2209      	movs	r2, #9
    uint8_t txBuffer[9] = {
    5146:	f88d 1013 	strb.w	r1, [sp, #19]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    514a:	a903      	add	r1, sp, #12
    514c:	9300      	str	r3, [sp, #0]
    uint8_t txBuffer[9] = {
    514e:	f88d 5012 	strb.w	r5, [sp, #18]
    5152:	f88d 4014 	strb.w	r4, [sp, #20]
    return tlx493d_transfer(sensor, txBuffer, sizeof(txBuffer), NULL, 0);
    5156:	f7fc fa29 	bl	15ac <tlx493d_transfer>
}
    515a:	b007      	add	sp, #28
    515c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    515e:	bf00      	nop

00005160 <tlx493d_gen_3_setWakeUpThresholdsAsInteger>:
                                                int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    5160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5164:	ed2d 8b04 	vpush	{d8-d9}
    5168:	b089      	sub	sp, #36	; 0x24
    516a:	4604      	mov	r4, r0
    516c:	ee09 1a10 	vmov	s18, r1
    5170:	ee08 2a90 	vmov	s17, r2
    5174:	f89d c07c 	ldrb.w	ip, [sp, #124]	; 0x7c
    5178:	ee08 3a10 	vmov	s16, r3
    517c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
    5180:	f8cd c010 	str.w	ip, [sp, #16]
    5184:	f89d c080 	ldrb.w	ip, [sp, #128]	; 0x80
    5188:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
    518c:	f8cd c014 	str.w	ip, [sp, #20]
    5190:	f89d c084 	ldrb.w	ip, [sp, #132]	; 0x84
    5194:	f89d 9060 	ldrb.w	r9, [sp, #96]	; 0x60
    5198:	9500      	str	r5, [sp, #0]
    519a:	9601      	str	r6, [sp, #4]
    519c:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
    51a0:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
    51a4:	f8cd c018 	str.w	ip, [sp, #24]
    51a8:	f9bd c098 	ldrsh.w	ip, [sp, #152]	; 0x98
    51ac:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
    51b0:	f9bd b08c 	ldrsh.w	fp, [sp, #140]	; 0x8c
    bool retVal = tlx493d_gen_3_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    51b4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
    51b8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
    51bc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
                                                int16_t xlTh, int16_t xhTh, int16_t ylTh, int16_t yhTh, int16_t zlTh, int16_t zhTh) {
    51c0:	f8cd c01c 	str.w	ip, [sp, #28]
    51c4:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    51c8:	f9bd 8090 	ldrsh.w	r8, [sp, #144]	; 0x90
    51cc:	9502      	str	r5, [sp, #8]
    51ce:	9603      	str	r6, [sp, #12]
    51d0:	f9bd 509c 	ldrsh.w	r5, [sp, #156]	; 0x9c
    51d4:	f9bd 6094 	ldrsh.w	r6, [sp, #148]	; 0x94
    bool retVal = tlx493d_gen_3_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    51d8:	f7ff ff34 	bl	5044 <tlx493d_gen_3_setThreshold>
    retVal &= tlx493d_gen_3_setThreshold(sensor, xhMSBBF, xhLSBBF, xhTh);
    51dc:	4649      	mov	r1, r9
    bool retVal = tlx493d_gen_3_setThreshold(sensor, xlMSBBF, xlLSBBF, xlTh);
    51de:	4681      	mov	r9, r0
    retVal &= tlx493d_gen_3_setThreshold(sensor, xhMSBBF, xhLSBBF, xhTh);
    51e0:	465b      	mov	r3, fp
    51e2:	4652      	mov	r2, sl
    51e4:	4620      	mov	r0, r4
    51e6:	f7ff ff2d 	bl	5044 <tlx493d_gen_3_setThreshold>
    51ea:	ea09 0900 	and.w	r9, r9, r0
    retVal &= tlx493d_gen_3_setThreshold(sensor, ylMSBBF, ylLSBBF, ylTh);
    51ee:	4643      	mov	r3, r8
    51f0:	463a      	mov	r2, r7
    51f2:	fa5f f989 	uxtb.w	r9, r9
    51f6:	9900      	ldr	r1, [sp, #0]
    51f8:	4620      	mov	r0, r4
    51fa:	f7ff ff23 	bl	5044 <tlx493d_gen_3_setThreshold>
    51fe:	ea00 0909 	and.w	r9, r0, r9
    retVal &= tlx493d_gen_3_setThreshold(sensor, yhMSBBF, yhLSBBF, yhTh);
    5202:	4633      	mov	r3, r6
    5204:	4620      	mov	r0, r4
    5206:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    520a:	f7ff ff1b 	bl	5044 <tlx493d_gen_3_setThreshold>
    520e:	ea00 0609 	and.w	r6, r0, r9
    retVal &= tlx493d_gen_3_setThreshold(sensor, zlMSBBF, zlLSBBF, zlTh);
    5212:	9b07      	ldr	r3, [sp, #28]
    5214:	4620      	mov	r0, r4
    5216:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    521a:	f7ff ff13 	bl	5044 <tlx493d_gen_3_setThreshold>
    521e:	4006      	ands	r6, r0
    retVal &= tlx493d_gen_3_setThreshold(sensor, zhMSBBF, zhLSBBF, zhTh);
    5220:	462b      	mov	r3, r5
    5222:	4620      	mov	r0, r4
    5224:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    5228:	f7ff ff0c 	bl	5044 <tlx493d_gen_3_setThreshold>
    522c:	4006      	ands	r6, r0
    retVal &= tlx493d_gen_3_writeWakeupParityRelatedRegisters(sensor, wuBF, wucpBF, wupBF);
    522e:	ee18 3a10 	vmov	r3, s16
    5232:	ee18 2a90 	vmov	r2, s17
    5236:	ee19 1a10 	vmov	r1, s18
    523a:	4620      	mov	r0, r4
    523c:	f7ff ff54 	bl	50e8 <tlx493d_gen_3_writeWakeupParityRelatedRegisters>
}
    5240:	4030      	ands	r0, r6
    5242:	b009      	add	sp, #36	; 0x24
    5244:	ecbd 8b04 	vpop	{d8-d9}
    5248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    524c:	0000      	movs	r0, r0
	...

00005250 <tlx493d_gen_3_setWakeUpThresholds>:
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    5250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5254:	ed2d 8b08 	vpush	{d8-d11}
    5258:	b0a7      	sub	sp, #156	; 0x9c
    525a:	4698      	mov	r8, r3
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    525c:	eeb3 7b09 	vmov.f64	d7, #57	; 0x41c80000  25.0
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    5260:	4604      	mov	r4, r0
    5262:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
    5266:	460e      	mov	r6, r1
    5268:	f89d 1110 	ldrb.w	r1, [sp, #272]	; 0x110
    526c:	eeb0 bb41 	vmov.f64	d11, d1
    5270:	9313      	str	r3, [sp, #76]	; 0x4c
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    5272:	ee30 7b47 	vsub.f64	d7, d0, d7
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    5276:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
    527a:	eeb0 9b44 	vmov.f64	d9, d4
    527e:	f89d b114 	ldrb.w	fp, [sp, #276]	; 0x114
    5282:	eeb0 ab46 	vmov.f64	d10, d6
    5286:	9314      	str	r3, [sp, #80]	; 0x50
    5288:	4617      	mov	r7, r2
    528a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
    528e:	9121      	str	r1, [sp, #132]	; 0x84
    5290:	9315      	str	r3, [sp, #84]	; 0x54
    5292:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
    5296:	f89d 9108 	ldrb.w	r9, [sp, #264]	; 0x108
    529a:	9316      	str	r3, [sp, #88]	; 0x58
    529c:	f89d 30f0 	ldrb.w	r3, [sp, #240]	; 0xf0
    52a0:	f89d a10c 	ldrb.w	sl, [sp, #268]	; 0x10c
    52a4:	9317      	str	r3, [sp, #92]	; 0x5c
    52a6:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
    52aa:	9318      	str	r3, [sp, #96]	; 0x60
    52ac:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
    52b0:	9319      	str	r3, [sp, #100]	; 0x64
    52b2:	f89d 30fc 	ldrb.w	r3, [sp, #252]	; 0xfc
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    52b6:	ed9f 8b42 	vldr	d8, [pc, #264]	; 53c0 <tlx493d_gen_3_setWakeUpThresholds+0x170>
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    52ba:	931a      	str	r3, [sp, #104]	; 0x68
    52bc:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    52c0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 53c8 <tlx493d_gen_3_setWakeUpThresholds+0x178>
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    52c4:	931b      	str	r3, [sp, #108]	; 0x6c
    52c6:	f89d 3104 	ldrb.w	r3, [sp, #260]	; 0x104
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    52ca:	eea7 0b08 	vfma.f64	d0, d7, d8
                                       double temperature, double xLow, double xHigh, double yLow, double yHigh, double zLow, double zHigh) {
    52ce:	9320      	str	r3, [sp, #128]	; 0x80
    52d0:	eeb0 8b42 	vmov.f64	d8, d2
    52d4:	ed8d 3b1e 	vstr	d3, [sp, #120]	; 0x78
    52d8:	ed8d 5b1c 	vstr	d5, [sp, #112]	; 0x70
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    52dc:	f002 fc38 	bl	7b50 <lround>


TLx493D_SensitivityType_t tlx493d_gen_3_getSensitivityType(const TLx493D_t *sensor, uint8_t x2BF, uint8_t x4BF) {
    bool x2IsSet = tlx493d_common_returnBitfield(sensor, x2BF) != 0U;
    52e0:	9921      	ldr	r1, [sp, #132]	; 0x84
    *rawTemperature = (int16_t) lround((temperature - GEN_3_TEMP_REF) * GEN_3_TEMP_SENSITIVITY + GEN_3_TEMP_OFFSET);
    52e2:	b205      	sxth	r5, r0
    bool x2IsSet = tlx493d_common_returnBitfield(sensor, x2BF) != 0U;
    52e4:	4620      	mov	r0, r4
    52e6:	f7fe fcb5 	bl	3c54 <tlx493d_common_returnBitfield>
    bool x4IsSet = tlx493d_common_returnBitfield(sensor, x4BF) != 0U;
    52ea:	4659      	mov	r1, fp
    bool x2IsSet = tlx493d_common_returnBitfield(sensor, x2BF) != 0U;
    52ec:	4683      	mov	fp, r0
    bool x4IsSet = tlx493d_common_returnBitfield(sensor, x4BF) != 0U;
    52ee:	4620      	mov	r0, r4
    52f0:	f7fe fcb0 	bl	3c54 <tlx493d_common_returnBitfield>

    return x2IsSet ? TLx493D_SHORT_RANGE_e : (x4IsSet ? TLx493D_EXTRA_SHORT_RANGE_e : TLx493D_FULL_RANGE_e);
    52f4:	ed9d 2b1c 	vldr	d2, [sp, #112]	; 0x70
    52f8:	ed9d 1b1e 	vldr	d1, [sp, #120]	; 0x78
    52fc:	f1bb 0f00 	cmp.w	fp, #0
    5300:	d159      	bne.n	53b6 <tlx493d_gen_3_setWakeUpThresholds+0x166>
    5302:	3800      	subs	r0, #0
    5304:	bf18      	it	ne
    5306:	2001      	movne	r0, #1
    5308:	0042      	lsls	r2, r0, #1
    sensor->functions->calculateRawMagneticFieldAtTemperature(sensor, tr, sens, xLow,  yLow,  zLow,  &xlTh, &ylTh, &zlTh);
    530a:	a924      	add	r1, sp, #144	; 0x90
    530c:	68a3      	ldr	r3, [r4, #8]
    530e:	eeb0 0b4b 	vmov.f64	d0, d11
    5312:	4620      	mov	r0, r4
    5314:	9101      	str	r1, [sp, #4]
    5316:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
    531a:	921c      	str	r2, [sp, #112]	; 0x70
    531c:	9100      	str	r1, [sp, #0]
    531e:	4629      	mov	r1, r5
    5320:	f8d3 b0c0 	ldr.w	fp, [r3, #192]	; 0xc0
    5324:	ab23      	add	r3, sp, #140	; 0x8c
    5326:	47d8      	blx	fp
    sensor->functions->calculateRawMagneticFieldAtTemperature(sensor, tr, sens, xHigh, yHigh, zHigh, &xhTh, &yhTh, &zhTh);
    5328:	f10d 0096 	add.w	r0, sp, #150	; 0x96
    532c:	68a3      	ldr	r3, [r4, #8]
    532e:	eeb0 2b4a 	vmov.f64	d2, d10
    5332:	9001      	str	r0, [sp, #4]
    5334:	a825      	add	r0, sp, #148	; 0x94
    5336:	eeb0 1b49 	vmov.f64	d1, d9
    533a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    533c:	9000      	str	r0, [sp, #0]
    533e:	eeb0 0b48 	vmov.f64	d0, d8
    5342:	4629      	mov	r1, r5
    5344:	4620      	mov	r0, r4
    5346:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
    534a:	f10d 0392 	add.w	r3, sp, #146	; 0x92
    534e:	47a8      	blx	r5
    return tlx493d_gen_3_setWakeUpThresholdsAsInteger(sensor, wuBF, wucpBF, wupBF,
    5350:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5352:	4620      	mov	r0, r4
    5354:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    5356:	9307      	str	r3, [sp, #28]
    5358:	463a      	mov	r2, r7
    535a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    535c:	4631      	mov	r1, r6
    535e:	9408      	str	r4, [sp, #32]
    5360:	9306      	str	r3, [sp, #24]
    5362:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5364:	f9bd 4096 	ldrsh.w	r4, [sp, #150]	; 0x96
    5368:	9305      	str	r3, [sp, #20]
    536a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    536c:	9411      	str	r4, [sp, #68]	; 0x44
    536e:	9304      	str	r3, [sp, #16]
    5370:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5372:	f9bd 4090 	ldrsh.w	r4, [sp, #144]	; 0x90
    5376:	9303      	str	r3, [sp, #12]
    5378:	9b15      	ldr	r3, [sp, #84]	; 0x54
    537a:	9410      	str	r4, [sp, #64]	; 0x40
    537c:	9302      	str	r3, [sp, #8]
    537e:	f9bd 4094 	ldrsh.w	r4, [sp, #148]	; 0x94
    5382:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5384:	940f      	str	r4, [sp, #60]	; 0x3c
    5386:	9301      	str	r3, [sp, #4]
    5388:	f9bd 408e 	ldrsh.w	r4, [sp, #142]	; 0x8e
    538c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    538e:	940e      	str	r4, [sp, #56]	; 0x38
    5390:	9300      	str	r3, [sp, #0]
    5392:	f9bd 4092 	ldrsh.w	r4, [sp, #146]	; 0x92
    5396:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5398:	940d      	str	r4, [sp, #52]	; 0x34
    539a:	9309      	str	r3, [sp, #36]	; 0x24
    539c:	4643      	mov	r3, r8
    539e:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
    53a2:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
    53a6:	940c      	str	r4, [sp, #48]	; 0x30
    53a8:	f7ff feda 	bl	5160 <tlx493d_gen_3_setWakeUpThresholdsAsInteger>
}
    53ac:	b027      	add	sp, #156	; 0x9c
    53ae:	ecbd 8b08 	vpop	{d8-d11}
    53b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return x2IsSet ? TLx493D_SHORT_RANGE_e : (x4IsSet ? TLx493D_EXTRA_SHORT_RANGE_e : TLx493D_FULL_RANGE_e);
    53b6:	2201      	movs	r2, #1
    53b8:	e7a7      	b.n	530a <tlx493d_gen_3_setWakeUpThresholds+0xba>
    53ba:	bf00      	nop
    53bc:	f3af 8000 	nop.w
    53c0:	66666666 	.word	0x66666666
    53c4:	402e6666 	.word	0x402e6666
    53c8:	00000000 	.word	0x00000000
    53cc:	40b06800 	.word	0x40b06800

000053d0 <tlx493d_gen_3_disableWakeUpMode>:
bool tlx493d_gen_3_disableWakeUpMode(TLx493D_t *sensor, uint8_t intBF, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    53d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53d4:	4615      	mov	r5, r2
    53d6:	461e      	mov	r6, r3
    53d8:	4604      	mov	r4, r0
    tlx493d_common_setBitfield(sensor, wuBF, 0);
    53da:	2200      	movs	r2, #0
bool tlx493d_gen_3_disableWakeUpMode(TLx493D_t *sensor, uint8_t intBF, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    53dc:	460f      	mov	r7, r1
    tlx493d_common_setBitfield(sensor, wuBF, 0);
    53de:	4629      	mov	r1, r5
bool tlx493d_gen_3_disableWakeUpMode(TLx493D_t *sensor, uint8_t intBF, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    53e0:	f89d 8018 	ldrb.w	r8, [sp, #24]
    tlx493d_common_setBitfield(sensor, wuBF, 0);
    53e4:	f7fe fc64 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, wucpBF, 0);
    53e8:	2200      	movs	r2, #0
    53ea:	4631      	mov	r1, r6
    53ec:	4620      	mov	r0, r4
    53ee:	f7fe fc5f 	bl	3cb0 <tlx493d_common_setBitfield>
   tlx493d_common_setBitfield(sensor, wupBF, tlx493d_gen_3_calculateWakeUpParity(sensor, wuBF));
    53f2:	4629      	mov	r1, r5
    53f4:	4620      	mov	r0, r4
    53f6:	f7ff fe57 	bl	50a8 <tlx493d_gen_3_calculateWakeUpParity>
    53fa:	4641      	mov	r1, r8
    53fc:	4602      	mov	r2, r0
    53fe:	4620      	mov	r0, r4
    5400:	f7fe fc56 	bl	3cb0 <tlx493d_common_setBitfield>
   return tlx493d_common_writeRegister(sensor, wupBF);
    5404:	4641      	mov	r1, r8
    5406:	4620      	mov	r0, r4
    5408:	f7fe fc86 	bl	3d18 <tlx493d_common_writeRegister>
    return b && tlx493d_gen_3_setInterrupt(sensor, intBF, 1);
    540c:	b908      	cbnz	r0, 5412 <tlx493d_gen_3_disableWakeUpMode+0x42>
}
    540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tlx493d_common_setBitfield(sensor, prBF, pr);
    5412:	4639      	mov	r1, r7
    5414:	4620      	mov	r0, r4
    5416:	2201      	movs	r2, #1
    5418:	f7fe fc4a 	bl	3cb0 <tlx493d_common_setBitfield>
    return tlx493d_common_writeRegister(sensor, prBF);
    541c:	4639      	mov	r1, r7
    541e:	4620      	mov	r0, r4
}
    5420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return tlx493d_common_writeRegister(sensor, prBF);
    5424:	f7fe bc78 	b.w	3d18 <tlx493d_common_writeRegister>

00005428 <tlx493d_gen_3_enableWakeUpMode>:
bool tlx493d_gen_3_enableWakeUpMode(TLx493D_t *sensor, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    5428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    542c:	461e      	mov	r6, r3
    if( sensor->functions->isInTestMode(sensor) ) {
    542e:	6883      	ldr	r3, [r0, #8]
bool tlx493d_gen_3_enableWakeUpMode(TLx493D_t *sensor, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    5430:	4604      	mov	r4, r0
    5432:	460f      	mov	r7, r1
    if( sensor->functions->isInTestMode(sensor) ) {
    5434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
bool tlx493d_gen_3_enableWakeUpMode(TLx493D_t *sensor, uint8_t wuBF, uint8_t wucpBF, uint8_t wupBF) {
    5438:	4690      	mov	r8, r2
    if( sensor->functions->isInTestMode(sensor) ) {
    543a:	4798      	blx	r3
    543c:	bb50      	cbnz	r0, 5494 <tlx493d_gen_3_enableWakeUpMode+0x6c>
    bool b = true;
    543e:	2501      	movs	r5, #1
    tlx493d_common_setBitfield(sensor, wuBF, 1);
    5440:	2201      	movs	r2, #1
    5442:	4639      	mov	r1, r7
    5444:	4620      	mov	r0, r4
    5446:	f7fe fc33 	bl	3cb0 <tlx493d_common_setBitfield>
    tlx493d_common_setBitfield(sensor, wucpBF, 1);
    544a:	2201      	movs	r2, #1
    544c:	4641      	mov	r1, r8
    544e:	4620      	mov	r0, r4
    5450:	f7fe fc2e 	bl	3cb0 <tlx493d_common_setBitfield>
   tlx493d_common_setBitfield(sensor, wupBF, tlx493d_gen_3_calculateWakeUpParity(sensor, wuBF));
    5454:	4639      	mov	r1, r7
    5456:	4620      	mov	r0, r4
    5458:	f7ff fe26 	bl	50a8 <tlx493d_gen_3_calculateWakeUpParity>
    545c:	4631      	mov	r1, r6
    545e:	4602      	mov	r2, r0
    5460:	4620      	mov	r0, r4
    5462:	f7fe fc25 	bl	3cb0 <tlx493d_common_setBitfield>
   return tlx493d_common_writeRegister(sensor, wupBF);
    5466:	4631      	mov	r1, r6
    5468:	4620      	mov	r0, r4
    546a:	f7fe fc55 	bl	3d18 <tlx493d_common_writeRegister>
    b &= sensor->functions->readRegisters(sensor);
    546e:	68a3      	ldr	r3, [r4, #8]
   return tlx493d_common_writeRegister(sensor, wupBF);
    5470:	4602      	mov	r2, r0
    b &= sensor->functions->readRegisters(sensor);
    5472:	4620      	mov	r0, r4
    5474:	689b      	ldr	r3, [r3, #8]
    5476:	4015      	ands	r5, r2
    5478:	4798      	blx	r3
    if( ! sensor->functions->hasValidWakeUpParity(sensor) ) {
    547a:	68a3      	ldr	r3, [r4, #8]
    b &= sensor->functions->readRegisters(sensor);
    547c:	4602      	mov	r2, r0
    547e:	b2ed      	uxtb	r5, r5
    if( ! sensor->functions->hasValidWakeUpParity(sensor) ) {
    5480:	4620      	mov	r0, r4
    5482:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    5486:	4015      	ands	r5, r2
    5488:	4798      	blx	r3
    548a:	4603      	mov	r3, r0
    548c:	b188      	cbz	r0, 54b2 <tlx493d_gen_3_enableWakeUpMode+0x8a>
}
    548e:	4628      	mov	r0, r5
    5490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        logWarn("Sensor %s was in test mode, changed to normal mode in order to enable wake up !", tlx493d_common_getTypeAsString(sensor));
    5494:	4620      	mov	r0, r4
    5496:	f7fe fcb5 	bl	3e04 <tlx493d_common_getTypeAsString>
    549a:	490c      	ldr	r1, [pc, #48]	; (54cc <tlx493d_gen_3_enableWakeUpMode+0xa4>)
    549c:	4602      	mov	r2, r0
    549e:	480c      	ldr	r0, [pc, #48]	; (54d0 <tlx493d_gen_3_enableWakeUpMode+0xa8>)
    54a0:	f7fc fa68 	bl	1974 <logPrintln>
        b &= sensor->functions->setMeasurement(sensor, TLx493D_BxByBzTemp_e);
    54a4:	68a3      	ldr	r3, [r4, #8]
    54a6:	2101      	movs	r1, #1
    54a8:	4620      	mov	r0, r4
    54aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    54ac:	4798      	blx	r3
    54ae:	4605      	mov	r5, r0
    54b0:	e7c6      	b.n	5440 <tlx493d_gen_3_enableWakeUpMode+0x18>
        return false;
    54b2:	461d      	mov	r5, r3
        logError("Wake up parity is not correct, cannot enter wake up mode for sensor %s !", tlx493d_common_getTypeAsString(sensor));
    54b4:	4620      	mov	r0, r4
    54b6:	f7fe fca5 	bl	3e04 <tlx493d_common_getTypeAsString>
    54ba:	4906      	ldr	r1, [pc, #24]	; (54d4 <tlx493d_gen_3_enableWakeUpMode+0xac>)
    54bc:	4602      	mov	r2, r0
    54be:	4806      	ldr	r0, [pc, #24]	; (54d8 <tlx493d_gen_3_enableWakeUpMode+0xb0>)
    54c0:	f7fc fa58 	bl	1974 <logPrintln>
}
    54c4:	4628      	mov	r0, r5
    54c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54ca:	bf00      	nop
    54cc:	20001b14 	.word	0x20001b14
    54d0:	20001114 	.word	0x20001114
    54d4:	20001b64 	.word	0x20001b64
    54d8:	20000f30 	.word	0x20000f30

000054dc <tlx493d_gen_3_hasValidFuseParity>:
    54dc:	b508      	push	{r3, lr}
    54de:	f7fe fbb9 	bl	3c54 <tlx493d_common_returnBitfield>
    54e2:	3800      	subs	r0, #0
    54e4:	bf18      	it	ne
    54e6:	2001      	movne	r0, #1
    54e8:	bd08      	pop	{r3, pc}
    54ea:	bf00      	nop

000054ec <tlx493d_gen_3_hasValidWakeUpParity>:
    54ec:	b508      	push	{r3, lr}
    54ee:	f7fe fbb1 	bl	3c54 <tlx493d_common_returnBitfield>
    54f2:	3800      	subs	r0, #0
    54f4:	bf18      	it	ne
    54f6:	2001      	movne	r0, #1
    54f8:	bd08      	pop	{r3, pc}
    54fa:	bf00      	nop

000054fc <tlx493d_gen_3_isInTestMode>:
    54fc:	b508      	push	{r3, lr}
    54fe:	f7fe fba9 	bl	3c54 <tlx493d_common_returnBitfield>
    5502:	3800      	subs	r0, #0
    5504:	bf18      	it	ne
    5506:	2001      	movne	r0, #1
    5508:	bd08      	pop	{r3, pc}
    550a:	bf00      	nop

0000550c <tlx493d_gen_3_selectIICAddress>:
    switch(addr) {
    550c:	2903      	cmp	r1, #3
uint8_t tlx493d_gen_3_selectIICAddress(const TLx493D_t *sensor, TLx493D_IICAddressType_t addr) {
    550e:	b508      	push	{r3, lr}
    5510:	d802      	bhi.n	5518 <tlx493d_gen_3_selectIICAddress+0xc>
    5512:	4a04      	ldr	r2, [pc, #16]	; (5524 <tlx493d_gen_3_selectIICAddress+0x18>)
    5514:	5c50      	ldrb	r0, [r2, r1]
}
    5516:	bd08      	pop	{r3, pc}
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, addr, "TLx493D_IICAddressType_t");
    5518:	4a03      	ldr	r2, [pc, #12]	; (5528 <tlx493d_gen_3_selectIICAddress+0x1c>)
    551a:	f7fe fce3 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return 0;
    551e:	2000      	movs	r0, #0
}
    5520:	bd08      	pop	{r3, pc}
    5522:	bf00      	nop
    5524:	200003fc 	.word	0x200003fc
    5528:	20000630 	.word	0x20000630
    552c:	00000000 	.word	0x00000000

00005530 <tlx493d_gen_3_getSensitivityScaleFactor>:
    switch(availSens) {
    5530:	2902      	cmp	r1, #2
double tlx493d_gen_3_getSensitivityScaleFactor(const TLx493D_t *sensor, TLx493D_AvailableSensitivityType_t availSens, uint8_t x2BF, uint8_t x4BF) {
    5532:	b538      	push	{r3, r4, r5, lr}
    switch(availSens) {
    5534:	d005      	beq.n	5542 <tlx493d_gen_3_getSensitivityScaleFactor+0x12>
        default : tlx493d_errorSelectionNotSupportedForSensorType(sensor, availSens, "TLx493D_AvailableSensitivityType_t");
    5536:	4a10      	ldr	r2, [pc, #64]	; (5578 <tlx493d_gen_3_getSensitivityScaleFactor+0x48>)
    5538:	f7fe fcd4 	bl	3ee4 <tlx493d_errorSelectionNotSupportedForSensorType>
                  return 0.0;
    553c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 5570 <tlx493d_gen_3_getSensitivityScaleFactor+0x40>
}
    5540:	bd38      	pop	{r3, r4, r5, pc}
                                    bool x2IsSet = tlx493d_common_returnBitfield(sensor, x2BF) != 0U;
    5542:	4611      	mov	r1, r2
    5544:	4604      	mov	r4, r0
    5546:	461d      	mov	r5, r3
    5548:	f7fe fb84 	bl	3c54 <tlx493d_common_returnBitfield>
    554c:	4603      	mov	r3, r0
                                    bool x4IsSet = tlx493d_common_returnBitfield(sensor, x4BF) != 0U;
    554e:	4620      	mov	r0, r4
    5550:	4629      	mov	r1, r5
                                    bool x2IsSet = tlx493d_common_returnBitfield(sensor, x2BF) != 0U;
    5552:	461c      	mov	r4, r3
                                    bool x4IsSet = tlx493d_common_returnBitfield(sensor, x4BF) != 0U;
    5554:	f7fe fb7e 	bl	3c54 <tlx493d_common_returnBitfield>
                                    return x2IsSet ? 2.0 : (x4IsSet ? 4.0 : 1.0);
    5558:	b114      	cbz	r4, 5560 <tlx493d_gen_3_getSensitivityScaleFactor+0x30>
    555a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
}
    555e:	bd38      	pop	{r3, r4, r5, pc}
                                    return x2IsSet ? 2.0 : (x4IsSet ? 4.0 : 1.0);
    5560:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    5564:	2800      	cmp	r0, #0
    5566:	eeb1 0b00 	vmov.f64	d0, #16	; 0x40800000  4.0
    556a:	fe07 0b00 	vseleq.f64	d0, d7, d0
}
    556e:	bd38      	pop	{r3, r4, r5, pc}
	...
    5578:	20001abc 	.word	0x20001abc
    557c:	00000000 	.word	0x00000000

00005580 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature>:
                                                          int16_t *x, int16_t *y, int16_t *z) {
    5580:	b510      	push	{r4, lr}
    5582:	461c      	mov	r4, r3
    5584:	ed2d 8b0a 	vpush	{d8-d12}
    5588:	eeb0 cb41 	vmov.f64	d12, d1
    558c:	ee08 1a10 	vmov	s16, r1
    5590:	eeb0 ab42 	vmov.f64	d10, d2
                                        : ((sens == TLx493D_SHORT_RANGE_e) ? 2.0 : 4.0);
    5594:	2a00      	cmp	r2, #0
    5596:	d07e      	beq.n	5696 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x116>
    5598:	eeb0 bb00 	vmov.f64	d11, #0	; 0x40000000  2.0
    559c:	2a01      	cmp	r2, #1
    559e:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
    55a2:	fe0b bb07 	vseleq.f64	d11, d11, d7
    double temp = (double) rawTemp;
    55a6:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
                         / ((GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)));
    55aa:	ed9f 4b3d 	vldr	d4, [pc, #244]	; 56a0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x120>
    55ae:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 56a8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x128>
    55b2:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 56b0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x130>
    *x = (int16_t) lround(((xInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x))))
    55b6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 56b8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x138>
                         / ((GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)));
    55ba:	eea8 7b04 	vfma.f64	d7, d8, d4
    *x = (int16_t) lround(((xInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x))))
    55be:	ed9f 9b40 	vldr	d9, [pc, #256]	; 56c0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x140>
                         / ((GEN_3_L0x + temp * (GEN_3_L1x + temp * (GEN_3_L2x + temp * GEN_3_L3x))) / sf)));
    55c2:	eea7 5b08 	vfma.f64	d5, d7, d8
    55c6:	ed9f 7b40 	vldr	d7, [pc, #256]	; 56c8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x148>
    55ca:	eea5 7b08 	vfma.f64	d7, d5, d8
    55ce:	ee87 5b0b 	vdiv.f64	d5, d7, d11
    *x = (int16_t) lround(((xInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0x + temp * (GEN_3_O1x + temp * (GEN_3_O2x + temp * GEN_3_O3x))))
    55d2:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 56d0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x150>
    55d6:	eea8 7b06 	vfma.f64	d7, d8, d6
    55da:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 56d8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x158>
    55de:	eea7 6b08 	vfma.f64	d6, d7, d8
    55e2:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 56e0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x160>
    55e6:	eea6 7b08 	vfma.f64	d7, d6, d8
    55ea:	ee90 7b09 	vfnms.f64	d7, d0, d9
    55ee:	ee87 0b05 	vdiv.f64	d0, d7, d5
    55f2:	f002 faad 	bl	7b50 <lround>
    55f6:	8020      	strh	r0, [r4, #0]
                         / ((GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf));
    55f8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 56e8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x168>
    55fc:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 56f0 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x170>
    5600:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 56f8 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x178>
    *y = (int16_t) lround((yInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y))))
    5604:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 5700 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x180>
                         / ((GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf));
    5608:	eea8 7b05 	vfma.f64	d7, d8, d5
    *y = (int16_t) lround((yInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y))))
    560c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 5708 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x188>
    5610:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 5710 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x190>
    5614:	eea8 5b04 	vfma.f64	d5, d8, d4
                         / ((GEN_3_L0y + temp * (GEN_3_L1y + temp * (GEN_3_L2y + temp * GEN_3_L3y))) / sf));
    5618:	eea7 6b08 	vfma.f64	d6, d7, d8
    561c:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 5718 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x198>
    5620:	eea6 7b08 	vfma.f64	d7, d6, d8
    5624:	ee87 6b0b 	vdiv.f64	d6, d7, d11
    *y = (int16_t) lround((yInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0y + temp * (GEN_3_O1y + temp * (GEN_3_O2y + temp * GEN_3_O3y))))
    5628:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 5720 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1a0>
    562c:	eea5 7b08 	vfma.f64	d7, d5, d8
    5630:	eea7 0b08 	vfma.f64	d0, d7, d8
    5634:	ee9c 0b09 	vfnms.f64	d0, d12, d9
    5638:	ee80 0b06 	vdiv.f64	d0, d0, d6
    563c:	f002 fa88 	bl	7b50 <lround>
    5640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5642:	8018      	strh	r0, [r3, #0]
                         / ((GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf));
    5644:	ed9f 3b38 	vldr	d3, [pc, #224]	; 5728 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1a8>
    5648:	ed9f 5b39 	vldr	d5, [pc, #228]	; 5730 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1b0>
    564c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 5738 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1b8>
    5650:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 5740 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1c0>
    5654:	eea8 5b03 	vfma.f64	d5, d8, d3
    *z = (int16_t) lround((zInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z))))
    5658:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 5748 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1c8>
    565c:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 5750 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1d0>
                         / ((GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf));
    5660:	eea5 6b08 	vfma.f64	d6, d5, d8
    5664:	eea6 7b08 	vfma.f64	d7, d6, d8
    *z = (int16_t) lround((zInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z))))
    5668:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 5758 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1d8>
    566c:	eea8 6b04 	vfma.f64	d6, d8, d4
                         / ((GEN_3_L0z + temp * (GEN_3_L1z + temp * (GEN_3_L2z + temp * GEN_3_L3z))) / sf));
    5670:	ee87 5b0b 	vdiv.f64	d5, d7, d11
    *z = (int16_t) lround((zInmT * GEN_3_FULL_RANGE_FIELD_SENSITIVITY - (GEN_3_O0z + temp * (GEN_3_O1z + temp * (GEN_3_O2z + temp * GEN_3_O3z))))
    5674:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 5760 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x1e0>
    5678:	eea6 7b08 	vfma.f64	d7, d6, d8
    567c:	eea7 0b08 	vfma.f64	d0, d7, d8
    5680:	ee9a 0b09 	vfnms.f64	d0, d10, d9
    5684:	ee80 0b05 	vdiv.f64	d0, d0, d5
    5688:	f002 fa62 	bl	7b50 <lround>
    568c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    568e:	8018      	strh	r0, [r3, #0]
}
    5690:	ecbd 8b0a 	vpop	{d8-d12}
    5694:	bd10      	pop	{r4, pc}
                                        : ((sens == TLx493D_SHORT_RANGE_e) ? 2.0 : 4.0);
    5696:	eeb7 bb00 	vmov.f64	d11, #112	; 0x3f800000  1.0
    569a:	e784      	b.n	55a6 <tlx493d_gen_3_calculateRawMagneticFieldAtTemperature+0x26>
    569c:	f3af 8000 	nop.w
    56a0:	aac74b5e 	.word	0xaac74b5e
    56a4:	3dc5f88b 	.word	0x3dc5f88b
    56a8:	029bab9e 	.word	0x029bab9e
    56ac:	bea1a4be 	.word	0xbea1a4be
    56b0:	aadb0a7d 	.word	0xaadb0a7d
    56b4:	3f626b7f 	.word	0x3f626b7f
    56b8:	cf138e5d 	.word	0xcf138e5d
    56bc:	bdfce652 	.word	0xbdfce652
    56c0:	00000000 	.word	0x00000000
    56c4:	403d8000 	.word	0x403d8000
    56c8:	b8d61746 	.word	0xb8d61746
    56cc:	c000dff7 	.word	0xc000dff7
    56d0:	92f0d7ca 	.word	0x92f0d7ca
    56d4:	3ed96fa4 	.word	0x3ed96fa4
    56d8:	098302f7 	.word	0x098302f7
    56dc:	bf9f917b 	.word	0xbf9f917b
    56e0:	c0b43ab0 	.word	0xc0b43ab0
    56e4:	404a3b85 	.word	0x404a3b85
    56e8:	68e7fc8f 	.word	0x68e7fc8f
    56ec:	3dc5dbeb 	.word	0x3dc5dbeb
    56f0:	18721824 	.word	0x18721824
    56f4:	bea18b5e 	.word	0xbea18b5e
    56f8:	84cb78b1 	.word	0x84cb78b1
    56fc:	3f624e48 	.word	0x3f624e48
    5700:	5a76eb73 	.word	0x5a76eb73
    5704:	bdd48c61 	.word	0xbdd48c61
    5708:	35185235 	.word	0x35185235
    570c:	3eace412 	.word	0x3eace412
    5710:	15c46270 	.word	0x15c46270
    5714:	401e4c82 	.word	0x401e4c82
    5718:	5dfcbe0a 	.word	0x5dfcbe0a
    571c:	c000dabe 	.word	0xc000dabe
    5720:	9ebee9d8 	.word	0x9ebee9d8
    5724:	bf72d9da 	.word	0xbf72d9da
    5728:	b92378bf 	.word	0xb92378bf
    572c:	3dbceaca 	.word	0x3dbceaca
    5730:	102bdc8d 	.word	0x102bdc8d
    5734:	be970036 	.word	0xbe970036
    5738:	a56c71d4 	.word	0xa56c71d4
    573c:	3f57ad26 	.word	0x3f57ad26
    5740:	ed0eb6a7 	.word	0xed0eb6a7
    5744:	bfeedde7 	.word	0xbfeedde7
    5748:	11fa87ef 	.word	0x11fa87ef
    574c:	bdc81bee 	.word	0xbdc81bee
    5750:	a42e8433 	.word	0xa42e8433
    5754:	4022776d 	.word	0x4022776d
    5758:	1568c854 	.word	0x1568c854
    575c:	3ea78cbe 	.word	0x3ea78cbe
    5760:	b9b8eb3b 	.word	0xb9b8eb3b
    5764:	bf7005af 	.word	0xbf7005af

00005768 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5768:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    576a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    576e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5770:	4c0c      	ldr	r4, [pc, #48]	; (57a4 <EventResponder::runFromInterrupt()+0x3c>)
    5772:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5774:	b180      	cbz	r0, 5798 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5776:	4e0c      	ldr	r6, [pc, #48]	; (57a8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    5778:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    577a:	6943      	ldr	r3, [r0, #20]
    577c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    577e:	b173      	cbz	r3, 579e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5780:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5782:	b902      	cbnz	r2, 5786 <EventResponder::runFromInterrupt()+0x1e>
    5784:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    5786:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    5788:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    578a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    578c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5790:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    5792:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5794:	2800      	cmp	r0, #0
    5796:	d1f0      	bne.n	577a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    5798:	b902      	cbnz	r2, 579c <EventResponder::runFromInterrupt()+0x34>
    579a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    579c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    579e:	6033      	str	r3, [r6, #0]
    57a0:	e7ef      	b.n	5782 <EventResponder::runFromInterrupt()+0x1a>
    57a2:	bf00      	nop
    57a4:	20003d00 	.word	0x20003d00
    57a8:	20003cfc 	.word	0x20003cfc

000057ac <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    57ac:	f7ff bfdc 	b.w	5768 <EventResponder::runFromInterrupt()>

000057b0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    57b0:	4904      	ldr	r1, [pc, #16]	; (57c4 <systick_isr+0x14>)
	systick_millis_count++;
    57b2:	4a05      	ldr	r2, [pc, #20]	; (57c8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    57b4:	6849      	ldr	r1, [r1, #4]
    57b6:	4b05      	ldr	r3, [pc, #20]	; (57cc <systick_isr+0x1c>)
    57b8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    57ba:	6813      	ldr	r3, [r2, #0]
    57bc:	3301      	adds	r3, #1
    57be:	6013      	str	r3, [r2, #0]
}
    57c0:	4770      	bx	lr
    57c2:	bf00      	nop
    57c4:	e0001000 	.word	0xe0001000
    57c8:	20004168 	.word	0x20004168
    57cc:	20004164 	.word	0x20004164

000057d0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    57d0:	4608      	mov	r0, r1
    57d2:	f002 b843 	b.w	785c <usb_serial_putchar>
    57d6:	bf00      	nop

000057d8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    57d8:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    57da:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    57dc:	bf08      	it	eq
    57de:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    57e0:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    57e2:	b391      	cbz	r1, 584a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    57e4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    57e8:	e001      	b.n	57ee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    57ea:	fa5f fe86 	uxtb.w	lr, r6
    57ee:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    57f2:	fbb1 f5f2 	udiv	r5, r1, r2
    57f6:	fb02 1415 	mls	r4, r2, r5, r1
    57fa:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    57fe:	2c09      	cmp	r4, #9
    5800:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    5804:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    5808:	bf98      	it	ls
    580a:	fa5f f48c 	uxtbls.w	r4, ip
    580e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    5812:	bf88      	it	hi
    5814:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    5816:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5818:	44ec      	add	ip, sp
			n /= base;
    581a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    581c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    5820:	d2e3      	bcs.n	57ea <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    5822:	b14b      	cbz	r3, 5838 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    5824:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    5828:	222d      	movs	r2, #45	; 0x2d
		i--;
    582a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    582e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    5832:	446b      	add	r3, sp
    5834:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5838:	6803      	ldr	r3, [r0, #0]
    583a:	a901      	add	r1, sp, #4
    583c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    5840:	685b      	ldr	r3, [r3, #4]
    5842:	4471      	add	r1, lr
    5844:	4798      	blx	r3
}
    5846:	b00a      	add	sp, #40	; 0x28
    5848:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    584a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    584c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    5850:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    5854:	e7e5      	b.n	5822 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    5856:	bf00      	nop

00005858 <Print::print(long)>:
	if (n < 0) {
    5858:	2900      	cmp	r1, #0
    585a:	db03      	blt.n	5864 <Print::print(long)+0xc>
	uint8_t sign=0;
    585c:	2300      	movs	r3, #0
	if (base == 0) {
    585e:	220a      	movs	r2, #10
    5860:	f7ff bfba 	b.w	57d8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    5864:	4249      	negs	r1, r1
		sign = '-';
    5866:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    5868:	220a      	movs	r2, #10
    586a:	f7ff bfb5 	b.w	57d8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    586e:	bf00      	nop

00005870 <Print::println()>:
{
    5870:	b500      	push	{lr}
	return write(buf, 2);
    5872:	6803      	ldr	r3, [r0, #0]
{
    5874:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    5876:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    587a:	2202      	movs	r2, #2
    587c:	a901      	add	r1, sp, #4
    587e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    5880:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    5884:	4798      	blx	r3
}
    5886:	b003      	add	sp, #12
    5888:	f85d fb04 	ldr.w	pc, [sp], #4

0000588c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    588c:	4b05      	ldr	r3, [pc, #20]	; (58a4 <_write+0x18>)
    588e:	2802      	cmp	r0, #2
    5890:	bf88      	it	hi
    5892:	4603      	movhi	r3, r0
{
    5894:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    5896:	681c      	ldr	r4, [r3, #0]
    5898:	4618      	mov	r0, r3
    589a:	6863      	ldr	r3, [r4, #4]
}
    589c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    58a0:	4718      	bx	r3
    58a2:	bf00      	nop
    58a4:	20001db0 	.word	0x20001db0

000058a8 <Print::printf(char const*, ...)>:
{
    58a8:	b40e      	push	{r1, r2, r3}
    58aa:	b500      	push	{lr}
    58ac:	b082      	sub	sp, #8
    58ae:	aa03      	add	r2, sp, #12
    58b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    58b4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    58b6:	f002 fff9 	bl	88ac <vdprintf>
}
    58ba:	b002      	add	sp, #8
    58bc:	f85d eb04 	ldr.w	lr, [sp], #4
    58c0:	b003      	add	sp, #12
    58c2:	4770      	bx	lr
    58c4:	0000      	movs	r0, r0
	...

000058c8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    58c8:	eeb4 0b40 	vcmp.f64	d0, d0
{
    58cc:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    58ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    58d2:	4605      	mov	r5, r0
    58d4:	ed2d 8b02 	vpush	{d8}
    58d8:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    58da:	d67c      	bvs.n	59d6 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    58dc:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    58e0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 5a00 <Print::printFloat(double, unsigned char)+0x138>
    58e4:	eeb4 7b46 	vcmp.f64	d7, d6
    58e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58ec:	dc6b      	bgt.n	59c6 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    58ee:	ed9f 7b46 	vldr	d7, [pc, #280]	; 5a08 <Print::printFloat(double, unsigned char)+0x140>
    58f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    58f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58fa:	dc5a      	bgt.n	59b2 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    58fc:	ed9f 7b44 	vldr	d7, [pc, #272]	; 5a10 <Print::printFloat(double, unsigned char)+0x148>
    5900:	eeb4 0bc7 	vcmpe.f64	d0, d7
    5904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5908:	d453      	bmi.n	59b2 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    590a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    590e:	460c      	mov	r4, r1
    5910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5914:	d45b      	bmi.n	59ce <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    5916:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    5918:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    591c:	2c00      	cmp	r4, #0
    591e:	d05e      	beq.n	59de <Print::printFloat(double, unsigned char)+0x116>
    5920:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    5924:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 5a18 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    5928:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    592c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    5930:	fa5f f28c 	uxtb.w	r2, ip
    5934:	42a2      	cmp	r2, r4
    5936:	d3f7      	bcc.n	5928 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    5938:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    593c:	220a      	movs	r2, #10
    593e:	4628      	mov	r0, r5
    5940:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    5944:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    5948:	ee17 1a90 	vmov	r1, s15
    594c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    5950:	f7ff ff42 	bl	57d8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    5954:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    5956:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    595a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    595e:	4606      	mov	r6, r0
		buf[0] = '.';
    5960:	bf28      	it	cs
    5962:	240f      	movcs	r4, #15
    5964:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    5968:	f10d 0309 	add.w	r3, sp, #9
    596c:	aa02      	add	r2, sp, #8
    596e:	1e61      	subs	r1, r4, #1
    5970:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    5974:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    5978:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    597c:	edcd 7a01 	vstr	s15, [sp, #4]
    5980:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    5984:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    5988:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    598a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    598e:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    5992:	4291      	cmp	r1, r2
			remainder -= n; 
    5994:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    5998:	d1ec      	bne.n	5974 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    599a:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    599c:	3401      	adds	r4, #1
		count += write(buf, count);
    599e:	a902      	add	r1, sp, #8
    59a0:	4628      	mov	r0, r5
    59a2:	685b      	ldr	r3, [r3, #4]
    59a4:	b2e2      	uxtb	r2, r4
    59a6:	4798      	blx	r3
	}
	return count;
}
    59a8:	4630      	mov	r0, r6
    59aa:	b006      	add	sp, #24
    59ac:	ecbd 8b02 	vpop	{d8}
    59b0:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    59b2:	682b      	ldr	r3, [r5, #0]
    59b4:	2203      	movs	r2, #3
    59b6:	491a      	ldr	r1, [pc, #104]	; (5a20 <Print::printFloat(double, unsigned char)+0x158>)
    59b8:	685b      	ldr	r3, [r3, #4]
    59ba:	b006      	add	sp, #24
    59bc:	ecbd 8b02 	vpop	{d8}
    59c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    59c4:	4718      	bx	r3
    59c6:	6803      	ldr	r3, [r0, #0]
    59c8:	2203      	movs	r2, #3
    59ca:	4916      	ldr	r1, [pc, #88]	; (5a24 <Print::printFloat(double, unsigned char)+0x15c>)
    59cc:	e7f4      	b.n	59b8 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    59ce:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    59d2:	2301      	movs	r3, #1
    59d4:	e7a0      	b.n	5918 <Print::printFloat(double, unsigned char)+0x50>
    59d6:	6803      	ldr	r3, [r0, #0]
    59d8:	2203      	movs	r2, #3
    59da:	4913      	ldr	r1, [pc, #76]	; (5a28 <Print::printFloat(double, unsigned char)+0x160>)
    59dc:	e7ec      	b.n	59b8 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    59de:	ee30 0b07 	vadd.f64	d0, d0, d7
    59e2:	220a      	movs	r2, #10
    59e4:	4628      	mov	r0, r5
    59e6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    59ea:	ee17 1a90 	vmov	r1, s15
}
    59ee:	b006      	add	sp, #24
    59f0:	ecbd 8b02 	vpop	{d8}
    59f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    59f8:	f7ff beee 	b.w	57d8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    59fc:	f3af 8000 	nop.w
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	7fefffff 	.word	0x7fefffff
    5a08:	e0000000 	.word	0xe0000000
    5a0c:	41efffff 	.word	0x41efffff
    5a10:	e0000000 	.word	0xe0000000
    5a14:	c1efffff 	.word	0xc1efffff
    5a18:	9999999a 	.word	0x9999999a
    5a1c:	3fb99999 	.word	0x3fb99999
    5a20:	20001124 	.word	0x20001124
    5a24:	20001120 	.word	0x20001120
    5a28:	2000111c 	.word	0x2000111c

00005a2c <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    5a2c:	282a      	cmp	r0, #42	; 0x2a
    5a2e:	d849      	bhi.n	5ac4 <analogRead+0x98>
{
    5a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    5a32:	4f25      	ldr	r7, [pc, #148]	; (5ac8 <analogRead+0x9c>)
    5a34:	4604      	mov	r4, r0
    5a36:	783b      	ldrb	r3, [r7, #0]
    5a38:	b9e3      	cbnz	r3, 5a74 <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    5a3a:	4b24      	ldr	r3, [pc, #144]	; (5acc <analogRead+0xa0>)
    5a3c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    5a3e:	2bff      	cmp	r3, #255	; 0xff
    5a40:	d029      	beq.n	5a96 <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    5a42:	4a23      	ldr	r2, [pc, #140]	; (5ad0 <analogRead+0xa4>)
    5a44:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    5a48:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    5a4a:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    5a4c:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    5a50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    5a54:	d030      	beq.n	5ab8 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    5a56:	061c      	lsls	r4, r3, #24
    5a58:	d41f      	bmi.n	5a9a <analogRead+0x6e>
		ADC1_HC0 = ch;
    5a5a:	4c1e      	ldr	r4, [pc, #120]	; (5ad4 <analogRead+0xa8>)
    5a5c:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    5a5e:	6a23      	ldr	r3, [r4, #32]
    5a60:	07d8      	lsls	r0, r3, #31
    5a62:	d404      	bmi.n	5a6e <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    5a64:	f001 ff8e 	bl	7984 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    5a68:	6a23      	ldr	r3, [r4, #32]
    5a6a:	07d9      	lsls	r1, r3, #31
    5a6c:	d5fa      	bpl.n	5a64 <analogRead+0x38>
		return ADC1_R0;
    5a6e:	4b19      	ldr	r3, [pc, #100]	; (5ad4 <analogRead+0xa8>)
    5a70:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    5a74:	4d17      	ldr	r5, [pc, #92]	; (5ad4 <analogRead+0xa8>)
    5a76:	4e18      	ldr	r6, [pc, #96]	; (5ad8 <analogRead+0xac>)
    5a78:	e001      	b.n	5a7e <analogRead+0x52>
		yield();
    5a7a:	f001 ff83 	bl	7984 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    5a7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    5a80:	061b      	lsls	r3, r3, #24
    5a82:	d4fa      	bmi.n	5a7a <analogRead+0x4e>
    5a84:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    5a86:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    5a8a:	d1f6      	bne.n	5a7a <analogRead+0x4e>
	calibrating = 0;
    5a8c:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    5a8e:	4b0f      	ldr	r3, [pc, #60]	; (5acc <analogRead+0xa0>)
    5a90:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    5a92:	2bff      	cmp	r3, #255	; 0xff
    5a94:	d1d5      	bne.n	5a42 <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    5a96:	2000      	movs	r0, #0
}
    5a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    5a9a:	4c0f      	ldr	r4, [pc, #60]	; (5ad8 <analogRead+0xac>)
    5a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5aa0:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    5aa2:	6a23      	ldr	r3, [r4, #32]
    5aa4:	07da      	lsls	r2, r3, #31
    5aa6:	d404      	bmi.n	5ab2 <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    5aa8:	f001 ff6c 	bl	7984 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    5aac:	6a23      	ldr	r3, [r4, #32]
    5aae:	07db      	lsls	r3, r3, #31
    5ab0:	d5fa      	bpl.n	5aa8 <analogRead+0x7c>
		return ADC2_R0;
    5ab2:	4b09      	ldr	r3, [pc, #36]	; (5ad8 <analogRead+0xac>)
    5ab4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    5ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    5abc:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    5abe:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    5ac0:	d4eb      	bmi.n	5a9a <analogRead+0x6e>
    5ac2:	e7ca      	b.n	5a5a <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    5ac4:	2000      	movs	r0, #0
}
    5ac6:	4770      	bx	lr
    5ac8:	2000418d 	.word	0x2000418d
    5acc:	20001778 	.word	0x20001778
    5ad0:	200013f0 	.word	0x200013f0
    5ad4:	400c4000 	.word	0x400c4000
    5ad8:	400c8000 	.word	0x400c8000

00005adc <analogReadRes>:
   if (bits == 8) {
    5adc:	2808      	cmp	r0, #8
{
    5ade:	b430      	push	{r4, r5}
   if (bits == 8) {
    5ae0:	d022      	beq.n	5b28 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    5ae2:	280a      	cmp	r0, #10
    5ae4:	bf0c      	ite	eq
    5ae6:	f44f 7105 	moveq.w	r1, #532	; 0x214
    5aea:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    5aee:	4c10      	ldr	r4, [pc, #64]	; (5b30 <analogReadRes+0x54>)
    5af0:	4d10      	ldr	r5, [pc, #64]	; (5b34 <analogReadRes+0x58>)
    5af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    5af4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    5af6:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    5af8:	480f      	ldr	r0, [pc, #60]	; (5b38 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    5afa:	f002 0203 	and.w	r2, r2, #3
    5afe:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    5b00:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5b02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    5b06:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    5b08:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    5b0a:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    5b0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    5b0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    5b10:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    5b12:	f002 0203 	and.w	r2, r2, #3
    5b16:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    5b18:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5b1a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    5b1e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    5b20:	4319      	orrs	r1, r3
}
    5b22:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    5b24:	6441      	str	r1, [r0, #68]	; 0x44
}
    5b26:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    5b28:	f44f 7140 	mov.w	r1, #768	; 0x300
    5b2c:	e7df      	b.n	5aee <analogReadRes+0x12>
    5b2e:	bf00      	nop
    5b30:	400c4000 	.word	0x400c4000
    5b34:	fffffc00 	.word	0xfffffc00
    5b38:	400c8000 	.word	0x400c8000

00005b3c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    5b3c:	49a2      	ldr	r1, [pc, #648]	; (5dc8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    5b3e:	4ba3      	ldr	r3, [pc, #652]	; (5dcc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    5b40:	4288      	cmp	r0, r1
{
    5b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    5b46:	4ca2      	ldr	r4, [pc, #648]	; (5dd0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    5b48:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    5b4a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    5b4c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    5b50:	d91b      	bls.n	5b8a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    5b52:	4ba0      	ldr	r3, [pc, #640]	; (5dd4 <set_arm_clock+0x298>)
    5b54:	4298      	cmp	r0, r3
    5b56:	f240 8102 	bls.w	5d5e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    5b5a:	1ac3      	subs	r3, r0, r3
    5b5c:	499e      	ldr	r1, [pc, #632]	; (5dd8 <set_arm_clock+0x29c>)
    5b5e:	0a1b      	lsrs	r3, r3, #8
    5b60:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b64:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    5b68:	09db      	lsrs	r3, r3, #7
    5b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5b72:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b76:	428b      	cmp	r3, r1
    5b78:	bf28      	it	cs
    5b7a:	460b      	movcs	r3, r1
    5b7c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    5b80:	4b96      	ldr	r3, [pc, #600]	; (5ddc <set_arm_clock+0x2a0>)
    5b82:	fba3 3707 	umull	r3, r7, r3, r7
    5b86:	08ff      	lsrs	r7, r7, #3
    5b88:	e004      	b.n	5b94 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    5b8a:	4f95      	ldr	r7, [pc, #596]	; (5de0 <set_arm_clock+0x2a4>)
    5b8c:	42b8      	cmp	r0, r7
    5b8e:	bf8c      	ite	hi
    5b90:	270e      	movhi	r7, #14
    5b92:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5b94:	498d      	ldr	r1, [pc, #564]	; (5dcc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b96:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5b9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b9e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    5ba4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5ba8:	d20c      	bcs.n	5bc4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    5baa:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    5bae:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    5bb2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    5bb6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    5bba:	680b      	ldr	r3, [r1, #0]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	dafc      	bge.n	5bba <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5bc0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    5bc4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    5bc8:	d124      	bne.n	5c14 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    5bca:	4986      	ldr	r1, [pc, #536]	; (5de4 <set_arm_clock+0x2a8>)
    5bcc:	690c      	ldr	r4, [r1, #16]
    5bce:	4986      	ldr	r1, [pc, #536]	; (5de8 <set_arm_clock+0x2ac>)
    5bd0:	43a1      	bics	r1, r4
    5bd2:	f000 80ea 	beq.w	5daa <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    5bd6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    5bda:	4634      	mov	r4, r6
    5bdc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    5be0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    5be4:	d004      	beq.n	5bf0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    5be6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    5bea:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    5bec:	4b77      	ldr	r3, [pc, #476]	; (5dcc <set_arm_clock+0x290>)
    5bee:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    5bf0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    5bf4:	d007      	beq.n	5c06 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    5bf6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    5bfa:	4974      	ldr	r1, [pc, #464]	; (5dcc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    5bfc:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    5bfe:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    5c00:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5c02:	071a      	lsls	r2, r3, #28
    5c04:	d4fc      	bmi.n	5c00 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    5c06:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    5c0a:	4a70      	ldr	r2, [pc, #448]	; (5dcc <set_arm_clock+0x290>)
    5c0c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    5c0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5c10:	069b      	lsls	r3, r3, #26
    5c12:	d4fc      	bmi.n	5c0e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    5c14:	4c75      	ldr	r4, [pc, #468]	; (5dec <set_arm_clock+0x2b0>)
    5c16:	42a0      	cmp	r0, r4
    5c18:	f200 80ce 	bhi.w	5db8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    5c1c:	f04f 0c01 	mov.w	ip, #1
    5c20:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    5c22:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    5c24:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    5c28:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    5c2c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5c30:	42a2      	cmp	r2, r4
    5c32:	d818      	bhi.n	5c66 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    5c34:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    5c38:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    5c3c:	f040 808d 	bne.w	5d5a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    5c40:	f1bc 0f04 	cmp.w	ip, #4
    5c44:	f200 8091 	bhi.w	5d6a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    5c48:	180a      	adds	r2, r1, r0
    5c4a:	42a2      	cmp	r2, r4
    5c4c:	f200 80a4 	bhi.w	5d98 <set_arm_clock+0x25c>
    5c50:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    5c54:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    5c56:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5c5a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    5c5e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5c62:	42a2      	cmp	r2, r4
    5c64:	d9e6      	bls.n	5c34 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5c66:	f10c 31ff 	add.w	r1, ip, #4294967295
    5c6a:	028c      	lsls	r4, r1, #10
    5c6c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5c70:	485f      	ldr	r0, [pc, #380]	; (5df0 <set_arm_clock+0x2b4>)
    5c72:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    5c74:	4a5f      	ldr	r2, [pc, #380]	; (5df4 <set_arm_clock+0x2b8>)
    5c76:	4290      	cmp	r0, r2
    5c78:	d97f      	bls.n	5d7a <set_arm_clock+0x23e>
    5c7a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 5e20 <set_arm_clock+0x2e4>
    5c7e:	226c      	movs	r2, #108	; 0x6c
    5c80:	485d      	ldr	r0, [pc, #372]	; (5df8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5c82:	4d58      	ldr	r5, [pc, #352]	; (5de4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    5c84:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5c88:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    5c8c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5c90:	f8df c190 	ldr.w	ip, [pc, #400]	; 5e24 <set_arm_clock+0x2e8>
    5c94:	ea0e 0c0c 	and.w	ip, lr, ip
    5c98:	45d4      	cmp	ip, sl
    5c9a:	d009      	beq.n	5cb0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    5c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    5ca0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    5ca4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    5ca8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    5caa:	682a      	ldr	r2, [r5, #0]
    5cac:	2a00      	cmp	r2, #0
    5cae:	dafc      	bge.n	5caa <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    5cb0:	4a46      	ldr	r2, [pc, #280]	; (5dcc <set_arm_clock+0x290>)
    5cb2:	6915      	ldr	r5, [r2, #16]
    5cb4:	f005 0507 	and.w	r5, r5, #7
    5cb8:	429d      	cmp	r5, r3
    5cba:	d003      	beq.n	5cc4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    5cbc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    5cbe:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5cc0:	03dd      	lsls	r5, r3, #15
    5cc2:	d4fc      	bmi.n	5cbe <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5cc4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    5cc8:	d009      	beq.n	5cde <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    5cca:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5cce:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    5cd2:	4a3e      	ldr	r2, [pc, #248]	; (5dcc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5cd4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    5cd6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    5cd8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5cda:	0799      	lsls	r1, r3, #30
    5cdc:	d4fc      	bmi.n	5cd8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5cde:	4947      	ldr	r1, [pc, #284]	; (5dfc <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    5ce0:	4a47      	ldr	r2, [pc, #284]	; (5e00 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5ce2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    5ce4:	4291      	cmp	r1, r2
    5ce6:	d83c      	bhi.n	5d62 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5ce8:	4b46      	ldr	r3, [pc, #280]	; (5e04 <set_arm_clock+0x2c8>)
    5cea:	09c9      	lsrs	r1, r1, #7
    5cec:	fba3 3101 	umull	r3, r1, r3, r1
    5cf0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    5cf2:	1e4b      	subs	r3, r1, #1
    5cf4:	021b      	lsls	r3, r3, #8
    5cf6:	ea86 0203 	eor.w	r2, r6, r3
    5cfa:	f412 7f40 	tst.w	r2, #768	; 0x300
    5cfe:	d006      	beq.n	5d0e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    5d00:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    5d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    5d08:	4a30      	ldr	r2, [pc, #192]	; (5dcc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    5d0a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    5d0c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    5d0e:	4a2f      	ldr	r2, [pc, #188]	; (5dcc <set_arm_clock+0x290>)
    5d10:	6953      	ldr	r3, [r2, #20]
    5d12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    5d16:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    5d18:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5d1a:	069b      	lsls	r3, r3, #26
    5d1c:	d4fc      	bmi.n	5d18 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5d1e:	4b3a      	ldr	r3, [pc, #232]	; (5e08 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5d20:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5d22:	fba3 2300 	umull	r2, r3, r3, r0
    5d26:	f04f 32ff 	mov.w	r2, #4294967295
    5d2a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    5d2e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5d32:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    5d36:	4a35      	ldr	r2, [pc, #212]	; (5e0c <set_arm_clock+0x2d0>)
    5d38:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    5d3a:	4a35      	ldr	r2, [pc, #212]	; (5e10 <set_arm_clock+0x2d4>)
    5d3c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5d3e:	4a35      	ldr	r2, [pc, #212]	; (5e14 <set_arm_clock+0x2d8>)
    5d40:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5d42:	d208      	bcs.n	5d56 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    5d44:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    5d48:	4a21      	ldr	r2, [pc, #132]	; (5dd0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    5d4a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    5d4e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    5d50:	6813      	ldr	r3, [r2, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	dafc      	bge.n	5d50 <set_arm_clock+0x214>
	}

	return frequency;
}
    5d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d5a:	4673      	mov	r3, lr
    5d5c:	e762      	b.n	5c24 <set_arm_clock+0xe8>
    5d5e:	2712      	movs	r7, #18
    5d60:	e718      	b.n	5b94 <set_arm_clock+0x58>
    5d62:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    5d66:	2104      	movs	r1, #4
    5d68:	e7c5      	b.n	5cf6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5d6a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5d6e:	4820      	ldr	r0, [pc, #128]	; (5df0 <set_arm_clock+0x2b4>)
    5d70:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5d72:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5d74:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5d76:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5d7a:	4a27      	ldr	r2, [pc, #156]	; (5e18 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    5d7c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 5e28 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5d80:	fba2 2000 	umull	r2, r0, r2, r0
    5d84:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    5d86:	4825      	ldr	r0, [pc, #148]	; (5e1c <set_arm_clock+0x2e0>)
    5d88:	2a36      	cmp	r2, #54	; 0x36
    5d8a:	bf38      	it	cc
    5d8c:	2236      	movcc	r2, #54	; 0x36
    5d8e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    5d92:	ea42 0a0a 	orr.w	sl, r2, sl
    5d96:	e774      	b.n	5c82 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5d98:	ea4f 248c 	mov.w	r4, ip, lsl #10
    5d9c:	2300      	movs	r3, #0
    5d9e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    5da2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    5da6:	46ac      	mov	ip, r5
    5da8:	e762      	b.n	5c70 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    5daa:	461d      	mov	r5, r3
    5dac:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    5db0:	4611      	mov	r1, r2
    5db2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    5db6:	e713      	b.n	5be0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    5db8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    5dba:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5dbe:	4602      	mov	r2, r0
    5dc0:	4631      	mov	r1, r6
    5dc2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    5dc4:	46e6      	mov	lr, ip
    5dc6:	e753      	b.n	5c70 <set_arm_clock+0x134>
    5dc8:	1f78a400 	.word	0x1f78a400
    5dcc:	400fc000 	.word	0x400fc000
    5dd0:	40080000 	.word	0x40080000
    5dd4:	23c34600 	.word	0x23c34600
    5dd8:	004cb223 	.word	0x004cb223
    5ddc:	51eb851f 	.word	0x51eb851f
    5de0:	016e3600 	.word	0x016e3600
    5de4:	400d8000 	.word	0x400d8000
    5de8:	80003040 	.word	0x80003040
    5dec:	269fb1ff 	.word	0x269fb1ff
    5df0:	005b8d80 	.word	0x005b8d80
    5df4:	4df67eff 	.word	0x4df67eff
    5df8:	4d3f6400 	.word	0x4d3f6400
    5dfc:	08f0d17f 	.word	0x08f0d17f
    5e00:	2cb4177f 	.word	0x2cb4177f
    5e04:	00e5109f 	.word	0x00e5109f
    5e08:	431bde83 	.word	0x431bde83
    5e0c:	20001dac 	.word	0x20001dac
    5e10:	20001da8 	.word	0x20001da8
    5e14:	20004160 	.word	0x20004160
    5e18:	165e9f81 	.word	0x165e9f81
    5e1c:	00b71b00 	.word	0x00b71b00
    5e20:	8000206c 	.word	0x8000206c
    5e24:	8001307f 	.word	0x8001307f
    5e28:	80002000 	.word	0x80002000

00005e2c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    5e2c:	b900      	cbnz	r0, 5e30 <delay+0x4>
    5e2e:	4770      	bx	lr
{
    5e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5e34:	2101      	movs	r1, #1
    5e36:	4681      	mov	r9, r0
    5e38:	4c21      	ldr	r4, [pc, #132]	; (5ec0 <delay+0x94>)
    5e3a:	4d22      	ldr	r5, [pc, #136]	; (5ec4 <delay+0x98>)
    5e3c:	4e22      	ldr	r6, [pc, #136]	; (5ec8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    5e3e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    5e42:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    5e44:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5e46:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d1f7      	bne.n	5e3e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    5e4e:	491f      	ldr	r1, [pc, #124]	; (5ecc <delay+0xa0>)
    5e50:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    5e52:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5e56:	f8df a078 	ldr.w	sl, [pc, #120]	; 5ed0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    5e5a:	1a1b      	subs	r3, r3, r0
    5e5c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    5e5e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5e62:	f8da 2000 	ldr.w	r2, [sl]
    5e66:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    5e6a:	455a      	cmp	r2, fp
    5e6c:	bf94      	ite	ls
    5e6e:	4490      	addls	r8, r2
    5e70:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    5e72:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    5e76:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    5e78:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5e7a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d1f7      	bne.n	5e72 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    5e82:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5e84:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    5e88:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    5e8a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5e8e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    5e92:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    5e96:	bf94      	ite	ls
    5e98:	4462      	addls	r2, ip
    5e9a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    5e9e:	eba2 0208 	sub.w	r2, r2, r8
    5ea2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    5ea6:	d306      	bcc.n	5eb6 <delay+0x8a>
			if (--msec == 0) return;
    5ea8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    5eac:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    5eb0:	d1df      	bne.n	5e72 <delay+0x46>
}
    5eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    5eb6:	f001 fd65 	bl	7984 <yield>
		while ((micros() - start) >= 1000) {
    5eba:	4904      	ldr	r1, [pc, #16]	; (5ecc <delay+0xa0>)
    5ebc:	e7d9      	b.n	5e72 <delay+0x46>
    5ebe:	bf00      	nop
    5ec0:	2000416c 	.word	0x2000416c
    5ec4:	20004168 	.word	0x20004168
    5ec8:	20004164 	.word	0x20004164
    5ecc:	e0001000 	.word	0xe0001000
    5ed0:	20004160 	.word	0x20004160

00005ed4 <micros>:
{
    5ed4:	b430      	push	{r4, r5}
    5ed6:	4b0f      	ldr	r3, [pc, #60]	; (5f14 <micros+0x40>)
    5ed8:	f04f 0c01 	mov.w	ip, #1
    5edc:	4d0e      	ldr	r5, [pc, #56]	; (5f18 <micros+0x44>)
    5ede:	4c0f      	ldr	r4, [pc, #60]	; (5f1c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    5ee0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    5ee4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    5ee6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5ee8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    5eec:	2a00      	cmp	r2, #0
    5eee:	d1f7      	bne.n	5ee0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    5ef0:	4b0b      	ldr	r3, [pc, #44]	; (5f20 <micros+0x4c>)
    5ef2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5ef4:	4a0b      	ldr	r2, [pc, #44]	; (5f24 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    5ef6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    5ef8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5efc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    5efe:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5f02:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    5f06:	bc30      	pop	{r4, r5}
    5f08:	428a      	cmp	r2, r1
    5f0a:	bf94      	ite	ls
    5f0c:	1880      	addls	r0, r0, r2
    5f0e:	1840      	addhi	r0, r0, r1
    5f10:	4770      	bx	lr
    5f12:	bf00      	nop
    5f14:	2000416c 	.word	0x2000416c
    5f18:	20004168 	.word	0x20004168
    5f1c:	20004164 	.word	0x20004164
    5f20:	e0001000 	.word	0xe0001000
    5f24:	20004160 	.word	0x20004160

00005f28 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    5f28:	2836      	cmp	r0, #54	; 0x36
    5f2a:	d816      	bhi.n	5f5a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    5f2c:	0102      	lsls	r2, r0, #4
    5f2e:	4b10      	ldr	r3, [pc, #64]	; (5f70 <digitalWrite+0x48>)
    5f30:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    5f34:	589b      	ldr	r3, [r3, r2]
{
    5f36:	b410      	push	{r4}
	mask = p->mask;
    5f38:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    5f3a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    5f3c:	4214      	tst	r4, r2
    5f3e:	d005      	beq.n	5f4c <digitalWrite+0x24>
		if (val) {
    5f40:	b961      	cbnz	r1, 5f5c <digitalWrite+0x34>
}
    5f42:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    5f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    5f4a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5f4c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    5f4e:	b151      	cbz	r1, 5f66 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5f50:	4a08      	ldr	r2, [pc, #32]	; (5f74 <digitalWrite+0x4c>)
}
    5f52:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5f56:	601a      	str	r2, [r3, #0]
}
    5f58:	4770      	bx	lr
    5f5a:	4770      	bx	lr
    5f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    5f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    5f64:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5f66:	4a04      	ldr	r2, [pc, #16]	; (5f78 <digitalWrite+0x50>)
}
    5f68:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5f6c:	601a      	str	r2, [r3, #0]
}
    5f6e:	4770      	bx	lr
    5f70:	200013f0 	.word	0x200013f0
    5f74:	0001f038 	.word	0x0001f038
    5f78:	00013038 	.word	0x00013038

00005f7c <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    5f7c:	2836      	cmp	r0, #54	; 0x36
    5f7e:	d829      	bhi.n	5fd4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    5f80:	4b16      	ldr	r3, [pc, #88]	; (5fdc <pinMode+0x60>)
    5f82:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5f84:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    5f86:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5f8a:	589a      	ldr	r2, [r3, r2]
{
    5f8c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5f8e:	6853      	ldr	r3, [r2, #4]
    5f90:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5f92:	d00e      	beq.n	5fb2 <pinMode+0x36>
    5f94:	2904      	cmp	r1, #4
    5f96:	d00c      	beq.n	5fb2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5f98:	ea23 0304 	bic.w	r3, r3, r4
    5f9c:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5f9e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    5fa0:	b1a9      	cbz	r1, 5fce <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    5fa2:	2902      	cmp	r1, #2
    5fa4:	d017      	beq.n	5fd6 <pinMode+0x5a>
		} else if (mode == INPUT_PULLDOWN) {
    5fa6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5fa8:	bf0c      	ite	eq
    5faa:	4a0d      	ldreq	r2, [pc, #52]	; (5fe0 <pinMode+0x64>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    5fac:	4a0d      	ldrne	r2, [pc, #52]	; (5fe4 <pinMode+0x68>)
    5fae:	601a      	str	r2, [r3, #0]
    5fb0:	e007      	b.n	5fc2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    5fb2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    5fb4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    5fb6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5fb8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    5fba:	d008      	beq.n	5fce <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    5fbc:	f640 0238 	movw	r2, #2104	; 0x838
    5fc0:	601a      	str	r2, [r3, #0]
	*(p->mux) = 5 | 0x10;
    5fc2:	6843      	ldr	r3, [r0, #4]
    5fc4:	2215      	movs	r2, #21
}
    5fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    5fca:	601a      	str	r2, [r3, #0]
}
    5fcc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5fce:	2238      	movs	r2, #56	; 0x38
    5fd0:	601a      	str	r2, [r3, #0]
    5fd2:	e7f6      	b.n	5fc2 <pinMode+0x46>
    5fd4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5fd6:	4a04      	ldr	r2, [pc, #16]	; (5fe8 <pinMode+0x6c>)
    5fd8:	601a      	str	r2, [r3, #0]
    5fda:	e7f2      	b.n	5fc2 <pinMode+0x46>
    5fdc:	200013f0 	.word	0x200013f0
    5fe0:	00013038 	.word	0x00013038
    5fe4:	00010038 	.word	0x00010038
    5fe8:	0001f038 	.word	0x0001f038

00005fec <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5fec:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5fee:	f7fa f841 	bl	74 <setup>
	while (1) {
		loop();
    5ff2:	f7fa f885 	bl	100 <loop>
		yield();
    5ff6:	f001 fcc5 	bl	7984 <yield>
	while (1) {
    5ffa:	e7fa      	b.n	5ff2 <main+0x6>

00005ffc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    5ffc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    5ffe:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    6002:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    6006:	d16d      	bne.n	60e4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6008:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    600a:	d341      	bcc.n	6090 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    600c:	f851 3b04 	ldr.w	r3, [r1], #4
    6010:	f840 3b04 	str.w	r3, [r0], #4
    6014:	f851 3b04 	ldr.w	r3, [r1], #4
    6018:	f840 3b04 	str.w	r3, [r0], #4
    601c:	f851 3b04 	ldr.w	r3, [r1], #4
    6020:	f840 3b04 	str.w	r3, [r0], #4
    6024:	f851 3b04 	ldr.w	r3, [r1], #4
    6028:	f840 3b04 	str.w	r3, [r0], #4
    602c:	f851 3b04 	ldr.w	r3, [r1], #4
    6030:	f840 3b04 	str.w	r3, [r0], #4
    6034:	f851 3b04 	ldr.w	r3, [r1], #4
    6038:	f840 3b04 	str.w	r3, [r0], #4
    603c:	f851 3b04 	ldr.w	r3, [r1], #4
    6040:	f840 3b04 	str.w	r3, [r0], #4
    6044:	f851 3b04 	ldr.w	r3, [r1], #4
    6048:	f840 3b04 	str.w	r3, [r0], #4
    604c:	f851 3b04 	ldr.w	r3, [r1], #4
    6050:	f840 3b04 	str.w	r3, [r0], #4
    6054:	f851 3b04 	ldr.w	r3, [r1], #4
    6058:	f840 3b04 	str.w	r3, [r0], #4
    605c:	f851 3b04 	ldr.w	r3, [r1], #4
    6060:	f840 3b04 	str.w	r3, [r0], #4
    6064:	f851 3b04 	ldr.w	r3, [r1], #4
    6068:	f840 3b04 	str.w	r3, [r0], #4
    606c:	f851 3b04 	ldr.w	r3, [r1], #4
    6070:	f840 3b04 	str.w	r3, [r0], #4
    6074:	f851 3b04 	ldr.w	r3, [r1], #4
    6078:	f840 3b04 	str.w	r3, [r0], #4
    607c:	f851 3b04 	ldr.w	r3, [r1], #4
    6080:	f840 3b04 	str.w	r3, [r0], #4
    6084:	f851 3b04 	ldr.w	r3, [r1], #4
    6088:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    608c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    608e:	d2bd      	bcs.n	600c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    6090:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    6092:	d311      	bcc.n	60b8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6094:	f851 3b04 	ldr.w	r3, [r1], #4
    6098:	f840 3b04 	str.w	r3, [r0], #4
    609c:	f851 3b04 	ldr.w	r3, [r1], #4
    60a0:	f840 3b04 	str.w	r3, [r0], #4
    60a4:	f851 3b04 	ldr.w	r3, [r1], #4
    60a8:	f840 3b04 	str.w	r3, [r0], #4
    60ac:	f851 3b04 	ldr.w	r3, [r1], #4
    60b0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    60b4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    60b6:	d2ed      	bcs.n	6094 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    60b8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    60ba:	d305      	bcc.n	60c8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    60bc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    60c0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    60c4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    60c6:	d2f9      	bcs.n	60bc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    60c8:	3204      	adds	r2, #4
	beq	.Ldone
    60ca:	d008      	beq.n	60de <memcpy+0xe2>

	lsls	r2, r2, #31
    60cc:	07d2      	lsls	r2, r2, #31
	itt ne
    60ce:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    60d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    60d4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    60d8:	d301      	bcc.n	60de <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    60da:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    60dc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    60de:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    60e0:	4770      	bx	lr
    60e2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    60e4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    60e6:	d313      	bcc.n	6110 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    60e8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    60ea:	d08d      	beq.n	6008 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    60ec:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    60f0:	d08a      	beq.n	6008 <memcpy+0xc>

	rsb	r3, #4
    60f2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    60f6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    60f8:	07db      	lsls	r3, r3, #31
	itt ne
    60fa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    60fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6100:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    6104:	d380      	bcc.n	6008 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    6106:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    610a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    610e:	e77b      	b.n	6008 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    6110:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    6112:	d3d9      	bcc.n	60c8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    6114:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    6116:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    611a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    611e:	d2f9      	bcs.n	6114 <memcpy+0x118>

	ldrb	r3, [r1]
    6120:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    6122:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    6124:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    6126:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    6128:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    612a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    612c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    612e:	4770      	bx	lr

00006130 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    6130:	f101 3cff 	add.w	ip, r1, #4294967295
{
    6134:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    6136:	4666      	mov	r6, ip
	int i=0, j;
    6138:	2400      	movs	r4, #0
    613a:	e000      	b.n	613e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    613c:	3401      	adds	r4, #1
		digit = val % radix;
    613e:	fbb0 f5f2 	udiv	r5, r0, r2
    6142:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6146:	2b09      	cmp	r3, #9
    6148:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    614c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    6150:	fa5f fe8e 	uxtb.w	lr, lr
    6154:	bf98      	it	ls
    6156:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    615a:	4290      	cmp	r0, r2
		val /= radix;
    615c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    615e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    6162:	d2eb      	bcs.n	613c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    6164:	1c63      	adds	r3, r4, #1
    6166:	2200      	movs	r2, #0
    6168:	18c8      	adds	r0, r1, r3
    616a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    616c:	b17c      	cbz	r4, 618e <ultoa+0x5e>
		t = buf[j];
    616e:	4662      	mov	r2, ip
    6170:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    6174:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    6178:	eba1 030c 	sub.w	r3, r1, ip
    617c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    617e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    6182:	3b01      	subs	r3, #1
    6184:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    6186:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    6188:	4423      	add	r3, r4
    618a:	429a      	cmp	r2, r3
    618c:	dbef      	blt.n	616e <ultoa+0x3e>
	}
	return buf;
}
    618e:	4608      	mov	r0, r1
    6190:	bd70      	pop	{r4, r5, r6, pc}
    6192:	bf00      	nop

00006194 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
    6194:	f04f 0c01 	mov.w	ip, #1
    6198:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    619c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    61a0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
    61a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
    61a6:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
    61aa:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    61ae:	4c25      	ldr	r4, [pc, #148]	; (6244 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
    61b0:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    61b4:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    61b6:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    61b8:	fb0e 3303 	mla	r3, lr, r3, r3
    61bc:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    61c0:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    61c2:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    61c6:	4573      	cmp	r3, lr
    61c8:	b2a4      	uxth	r4, r4
    61ca:	bf28      	it	cs
    61cc:	4673      	movcs	r3, lr
    61ce:	4334      	orrs	r4, r6
	switch (channel) {
    61d0:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    61d2:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    61d6:	d00d      	beq.n	61f4 <flexpwmWrite+0x60>
    61d8:	2a02      	cmp	r2, #2
    61da:	d028      	beq.n	622e <flexpwmWrite+0x9a>
    61dc:	b1c2      	cbz	r2, 6210 <flexpwmWrite+0x7c>
    61de:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    61e2:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
    61e6:	fa1f fc8c 	uxth.w	ip, ip
    61ea:	ea4c 0c02 	orr.w	ip, ip, r2
    61ee:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    61f2:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
    61f4:	b29b      	uxth	r3, r3
    61f6:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    61fa:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
    61fc:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    61fe:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    6202:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    6206:	b29b      	uxth	r3, r3
    6208:	432b      	orrs	r3, r5
    620a:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    620e:	e7e8      	b.n	61e2 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
    6210:	ebae 0e03 	sub.w	lr, lr, r3
    6214:	f00c 020f 	and.w	r2, ip, #15
    6218:	fa1f fe8e 	uxth.w	lr, lr
    621c:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    6220:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    6224:	b29b      	uxth	r3, r3
    6226:	4313      	orrs	r3, r2
    6228:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    622c:	e7d9      	b.n	61e2 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
    622e:	b29b      	uxth	r3, r3
    6230:	f00c 020f 	and.w	r2, ip, #15
    6234:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    6236:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    623a:	b29b      	uxth	r3, r3
    623c:	431e      	orrs	r6, r3
    623e:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    6242:	e7ce      	b.n	61e2 <flexpwmWrite+0x4e>
    6244:	2000347e 	.word	0x2000347e

00006248 <flexpwmFrequency>:
	uint32_t olddiv = p->SM[submodule].VAL1;
    6248:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    624c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t olddiv = p->SM[submodule].VAL1;
    6250:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    6254:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    6258:	4b31      	ldr	r3, [pc, #196]	; (6320 <flexpwmFrequency+0xd8>)
	uint32_t olddiv = p->SM[submodule].VAL1;
    625a:	fa1f fc8c 	uxth.w	ip, ip
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    625e:	ed93 7a00 	vldr	s14, [r3]
    6262:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
    6266:	b570      	push	{r4, r5, r6, lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    6268:	eec7 7a00 	vdiv.f32	s15, s14, s0
	uint16_t mask = 1 << submodule;
    626c:	f04f 0e01 	mov.w	lr, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    6270:	004e      	lsls	r6, r1, #1
	uint16_t mask = 1 << submodule;
    6272:	fa0e fe01 	lsl.w	lr, lr, r1
    6276:	fa1f f58e 	uxth.w	r5, lr
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    627e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6282:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65535 && prescale < 7) {
    6286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    628a:	d346      	bcc.n	631a <flexpwmFrequency+0xd2>
	uint32_t prescale = 0;
    628c:	2200      	movs	r2, #0
	while (newdiv > 65535 && prescale < 7) {
    628e:	f64f 74ff 	movw	r4, #65535	; 0xffff
		newdiv = newdiv >> 1;
    6292:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    6294:	3201      	adds	r2, #1
	while (newdiv > 65535 && prescale < 7) {
    6296:	42a3      	cmp	r3, r4
    6298:	d901      	bls.n	629e <flexpwmFrequency+0x56>
    629a:	2a06      	cmp	r2, #6
    629c:	d9f9      	bls.n	6292 <flexpwmFrequency+0x4a>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    629e:	0112      	lsls	r2, r2, #4
    62a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    62a4:	b292      	uxth	r2, r2
	if (newdiv > 65535) {
    62a6:	2b02      	cmp	r3, #2
    62a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    62ac:	ea4f 1505 	mov.w	r5, r5, lsl #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    62b0:	4431      	add	r1, r6
    62b2:	bf38      	it	cc
    62b4:	2302      	movcc	r3, #2
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    62b6:	f00e 0e0f 	and.w	lr, lr, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    62ba:	b2ed      	uxtb	r5, r5
    62bc:	42a3      	cmp	r3, r4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    62be:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    62c2:	bf28      	it	cs
    62c4:	4623      	movcs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    62c6:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    62ca:	b2a4      	uxth	r4, r4
    62cc:	432c      	orrs	r4, r5
    62ce:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    62d2:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    62d4:	1e5a      	subs	r2, r3, #1
    62d6:	b292      	uxth	r2, r2
    62d8:	81ca      	strh	r2, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    62da:	894a      	ldrh	r2, [r1, #10]
    62dc:	b292      	uxth	r2, r2
    62de:	fb03 f202 	mul.w	r2, r3, r2
    62e2:	fbb2 f2fc 	udiv	r2, r2, ip
    62e6:	b292      	uxth	r2, r2
    62e8:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    62ea:	8aca      	ldrh	r2, [r1, #22]
    62ec:	b292      	uxth	r2, r2
    62ee:	fb03 f202 	mul.w	r2, r3, r2
    62f2:	fbb2 f2fc 	udiv	r2, r2, ip
    62f6:	b292      	uxth	r2, r2
    62f8:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    62fa:	8bca      	ldrh	r2, [r1, #30]
    62fc:	b292      	uxth	r2, r2
    62fe:	fb02 f303 	mul.w	r3, r2, r3
    6302:	fbb3 f3fc 	udiv	r3, r3, ip
    6306:	b29b      	uxth	r3, r3
    6308:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    630a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    630e:	b29b      	uxth	r3, r3
    6310:	ea43 030e 	orr.w	r3, r3, lr
    6314:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    6318:	bd70      	pop	{r4, r5, r6, pc}
	while (newdiv > 65535 && prescale < 7) {
    631a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    631e:	e7c2      	b.n	62a6 <flexpwmFrequency+0x5e>
    6320:	20001da8 	.word	0x20001da8

00006324 <quadtimerFrequency>:

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    6324:	4b21      	ldr	r3, [pc, #132]	; (63ac <quadtimerFrequency+0x88>)
    6326:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    632a:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    632e:	ed93 7a00 	vldr	s14, [r3]
    6332:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    6336:	eec7 7a00 	vdiv.f32	s15, s14, s0
    633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    633e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6342:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    6346:	4563      	cmp	r3, ip
    6348:	d92c      	bls.n	63a4 <quadtimerFrequency+0x80>
	uint32_t prescale = 0;
    634a:	2200      	movs	r2, #0
		newdiv = newdiv >> 1; 
    634c:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    634e:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    6350:	4563      	cmp	r3, ip
    6352:	d901      	bls.n	6358 <quadtimerFrequency+0x34>
    6354:	2a06      	cmp	r2, #6
    6356:	d9f9      	bls.n	634c <quadtimerFrequency+0x28>
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    6358:	3208      	adds	r2, #8
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    635a:	f242 0c26 	movw	ip, #8230	; 0x2026
    635e:	ea4c 2c42 	orr.w	ip, ip, r2, lsl #9
    6362:	fa1f fc8c 	uxth.w	ip, ip
	if (newdiv > 65534) {
    6366:	2b02      	cmp	r3, #2
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    6368:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    636c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    6370:	bf38      	it	cc
    6372:	2302      	movcc	r3, #2
    6374:	8a0a      	ldrh	r2, [r1, #16]
    6376:	4283      	cmp	r3, r0
    6378:	b292      	uxth	r2, r2
    637a:	bf28      	it	cs
    637c:	4603      	movcs	r3, r0
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    637e:	88c8      	ldrh	r0, [r1, #6]
    6380:	b280      	uxth	r0, r0
    6382:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    6386:	4410      	add	r0, r2
    6388:	fb03 f202 	mul.w	r2, r3, r2
    638c:	fbb2 f2f0 	udiv	r2, r2, r0
	uint32_t low = newdiv - high;
    6390:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    6392:	b292      	uxth	r2, r2
	p->CH[submodule].LOAD = 65537 - low;
    6394:	f1c3 0301 	rsb	r3, r3, #1
    6398:	b29b      	uxth	r3, r3
    639a:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    639c:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    639e:	f8a1 c00c 	strh.w	ip, [r1, #12]
}
    63a2:	4770      	bx	lr
	while (newdiv > 65534 && prescale < 7) {
    63a4:	f243 0c26 	movw	ip, #12326	; 0x3026
    63a8:	e7dd      	b.n	6366 <quadtimerFrequency+0x42>
    63aa:	bf00      	nop
    63ac:	20001da8 	.word	0x20001da8

000063b0 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    63b0:	2836      	cmp	r0, #54	; 0x36
    63b2:	d84b      	bhi.n	644c <analogWrite+0x9c>
{
    63b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    63b6:	4d2a      	ldr	r5, [pc, #168]	; (6460 <analogWrite+0xb0>)
    63b8:	4604      	mov	r4, r0
	if (info->type == 1) {
    63ba:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
    63be:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
    63c2:	2a01      	cmp	r2, #1
    63c4:	d02d      	beq.n	6422 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    63c6:	2a02      	cmp	r2, #2
    63c8:	d13f      	bne.n	644a <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    63ca:	786b      	ldrb	r3, [r5, #1]
    63cc:	f3c3 1001 	ubfx	r0, r3, #4, #2
    63d0:	2803      	cmp	r0, #3
    63d2:	d03e      	beq.n	6452 <analogWrite+0xa2>
    63d4:	4a23      	ldr	r2, [pc, #140]	; (6464 <analogWrite+0xb4>)
    63d6:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
    63da:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    63de:	4822      	ldr	r0, [pc, #136]	; (6468 <analogWrite+0xb8>)
    63e0:	b289      	uxth	r1, r1
    63e2:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    63e4:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    63e8:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    63ea:	f8bc e006 	ldrh.w	lr, [ip, #6]
    63ee:	0158      	lsls	r0, r3, #5
    63f0:	f8bc 3010 	ldrh.w	r3, [ip, #16]
    63f4:	fa1f fe8e 	uxth.w	lr, lr
    63f8:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
    63fc:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    6400:	f103 3eff 	add.w	lr, r3, #4294967295
    6404:	fb0e f101 	mul.w	r1, lr, r1
    6408:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
    640a:	458e      	cmp	lr, r1
    640c:	d923      	bls.n	6456 <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
    640e:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
    6410:	f1c3 0301 	rsb	r3, r3, #1
    6414:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
    6416:	b289      	uxth	r1, r1
    6418:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
    641a:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
    641e:	8211      	strh	r1, [r2, #16]
}
    6420:	e00d      	b.n	643e <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
    6422:	786a      	ldrb	r2, [r5, #1]
    6424:	f3c2 1301 	ubfx	r3, r2, #4, #2
    6428:	2b03      	cmp	r3, #3
    642a:	d010      	beq.n	644e <analogWrite+0x9e>
    642c:	480f      	ldr	r0, [pc, #60]	; (646c <analogWrite+0xbc>)
    642e:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    6432:	b28b      	uxth	r3, r1
    6434:	f002 0103 	and.w	r1, r2, #3
    6438:	78aa      	ldrb	r2, [r5, #2]
    643a:	f7ff feab 	bl	6194 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    643e:	4b0c      	ldr	r3, [pc, #48]	; (6470 <analogWrite+0xc0>)
    6440:	78ea      	ldrb	r2, [r5, #3]
    6442:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6446:	685b      	ldr	r3, [r3, #4]
    6448:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
    644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    644c:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    644e:	4809      	ldr	r0, [pc, #36]	; (6474 <analogWrite+0xc4>)
    6450:	e7ef      	b.n	6432 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
    6452:	4a09      	ldr	r2, [pc, #36]	; (6478 <analogWrite+0xc8>)
    6454:	e7c1      	b.n	63da <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
    6456:	1e99      	subs	r1, r3, #2
    6458:	f64f 73ff 	movw	r3, #65535	; 0xffff
    645c:	e7db      	b.n	6416 <analogWrite+0x66>
    645e:	bf00      	nop
    6460:	200017a4 	.word	0x200017a4
    6464:	401dc000 	.word	0x401dc000
    6468:	2000347e 	.word	0x2000347e
    646c:	403dc000 	.word	0x403dc000
    6470:	200013f0 	.word	0x200013f0
    6474:	403e8000 	.word	0x403e8000
    6478:	401e8000 	.word	0x401e8000

0000647c <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    647c:	2836      	cmp	r0, #54	; 0x36
    647e:	d808      	bhi.n	6492 <analogWriteFrequency+0x16>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    6480:	4b15      	ldr	r3, [pc, #84]	; (64d8 <analogWriteFrequency+0x5c>)
	if (info->type == 1) {
    6482:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
	info = pwm_pin_info + pin;
    6486:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    648a:	2a01      	cmp	r2, #1
    648c:	d002      	beq.n	6494 <analogWriteFrequency+0x18>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    648e:	2a02      	cmp	r2, #2
    6490:	d00d      	beq.n	64ae <analogWriteFrequency+0x32>
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}
    6492:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    6494:	7859      	ldrb	r1, [r3, #1]
    6496:	f3c1 1201 	ubfx	r2, r1, #4, #2
    649a:	2a03      	cmp	r2, #3
    649c:	d013      	beq.n	64c6 <analogWriteFrequency+0x4a>
    649e:	480f      	ldr	r0, [pc, #60]	; (64dc <analogWriteFrequency+0x60>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    64a0:	f001 0103 	and.w	r1, r1, #3
    64a4:	eb00 3082 	add.w	r0, r0, r2, lsl #14
    64a8:	789a      	ldrb	r2, [r3, #2]
    64aa:	f7ff becd 	b.w	6248 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
    64ae:	7859      	ldrb	r1, [r3, #1]
    64b0:	f3c1 1301 	ubfx	r3, r1, #4, #2
    64b4:	2b03      	cmp	r3, #3
    64b6:	d00c      	beq.n	64d2 <analogWriteFrequency+0x56>
    64b8:	4809      	ldr	r0, [pc, #36]	; (64e0 <analogWriteFrequency+0x64>)
    64ba:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    64be:	f001 0103 	and.w	r1, r1, #3
    64c2:	f7ff bf2f 	b.w	6324 <quadtimerFrequency>
		switch ((info->module >> 4) & 3) {
    64c6:	4807      	ldr	r0, [pc, #28]	; (64e4 <analogWriteFrequency+0x68>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    64c8:	f001 0103 	and.w	r1, r1, #3
    64cc:	789a      	ldrb	r2, [r3, #2]
    64ce:	f7ff bebb 	b.w	6248 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
    64d2:	4805      	ldr	r0, [pc, #20]	; (64e8 <analogWriteFrequency+0x6c>)
    64d4:	e7f3      	b.n	64be <analogWriteFrequency+0x42>
    64d6:	bf00      	nop
    64d8:	200017a4 	.word	0x200017a4
    64dc:	403dc000 	.word	0x403dc000
    64e0:	401dc000 	.word	0x401dc000
    64e4:	403e8000 	.word	0x403e8000
    64e8:	401e8000 	.word	0x401e8000

000064ec <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    64ec:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    64ee:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    64f0:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    64f4:	4619      	mov	r1, r3
{
    64f6:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    64f8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    64fc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6500:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6504:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    6508:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    650c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    650e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    6512:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    6516:	b29b      	uxth	r3, r3
    6518:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    651c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6520:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    6524:	3101      	adds	r1, #1
    6526:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    652a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    652c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    652e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    6532:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    6534:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    6536:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    6538:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    653a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    653e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    6540:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    6542:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    6544:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    6546:	d1eb      	bne.n	6520 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6548:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    654c:	b29b      	uxth	r3, r3
    654e:	f043 030f 	orr.w	r3, r3, #15
    6552:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    6556:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    655a:	b29b      	uxth	r3, r3
    655c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    6560:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    6564:	bd10      	pop	{r4, pc}
    6566:	bf00      	nop

00006568 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6568:	4b37      	ldr	r3, [pc, #220]	; (6648 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    656a:	4a38      	ldr	r2, [pc, #224]	; (664c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    656c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    656e:	4838      	ldr	r0, [pc, #224]	; (6650 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6570:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    6574:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6576:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6578:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    657c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6580:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6584:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    6588:	430a      	orrs	r2, r1
    658a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    658e:	f7ff ffad 	bl	64ec <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    6592:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    6596:	f7ff ffa9 	bl	64ec <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    659a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    659e:	f7ff ffa5 	bl	64ec <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    65a2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    65a6:	f7ff ffa1 	bl	64ec <flexpwm_init>
	for (i=0; i < 4; i++) {
    65aa:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    65ac:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    65b0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    65b4:	4611      	mov	r1, r2
    65b6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    65ba:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    65be:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    65c0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    65c2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    65c4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    65c6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    65ca:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    65cc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    65ce:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    65d2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    65d4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    65d6:	d1ee      	bne.n	65b6 <pwm_init+0x4e>
    65d8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    65da:	481e      	ldr	r0, [pc, #120]	; (6654 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    65dc:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    65e0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    65e4:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    65e6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    65ea:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    65ee:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    65f2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    65f6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    65f8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    65fa:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    65fc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    65fe:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6602:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6604:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    6606:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    660a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    660c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    660e:	d1ee      	bne.n	65ee <pwm_init+0x86>
    6610:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    6612:	4811      	ldr	r0, [pc, #68]	; (6658 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6614:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6616:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    661a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    661c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6620:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    6624:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    6628:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    662c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    662e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    6630:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    6632:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6634:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6636:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6638:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    663a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    663e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6640:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    6644:	d1ee      	bne.n	6624 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    6646:	bd70      	pop	{r4, r5, r6, pc}
    6648:	400fc000 	.word	0x400fc000
    664c:	fc030000 	.word	0xfc030000
    6650:	403dc000 	.word	0x403dc000
    6654:	401e0000 	.word	0x401e0000
    6658:	401e4000 	.word	0x401e4000

0000665c <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
    665c:	2810      	cmp	r0, #16
    665e:	4603      	mov	r3, r0
	prior = analog_write_res;
    6660:	4a04      	ldr	r2, [pc, #16]	; (6674 <analogWriteRes+0x18>)
	analog_write_res = bits;
    6662:	bf28      	it	cs
    6664:	2310      	movcs	r3, #16
	prior = analog_write_res;
    6666:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    6668:	2b01      	cmp	r3, #1
    666a:	bf38      	it	cc
    666c:	2301      	movcc	r3, #1
    666e:	7013      	strb	r3, [r2, #0]
	return prior;
}
    6670:	4770      	bx	lr
    6672:	bf00      	nop
    6674:	2000347e 	.word	0x2000347e

00006678 <unused_interrupt_vector>:
	__disable_irq();
    6678:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    667a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    667e:	4c52      	ldr	r4, [pc, #328]	; (67c8 <unused_interrupt_vector+0x150>)
    6680:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    6684:	f01e 0f04 	tst.w	lr, #4
    6688:	bf0c      	ite	eq
    668a:	f3ef 8208 	mrseq	r2, MSP
    668e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    6692:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    6696:	4e4d      	ldr	r6, [pc, #308]	; (67cc <unused_interrupt_vector+0x154>)
	while (p < end) {
    6698:	4d4d      	ldr	r5, [pc, #308]	; (67d0 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    669a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    669e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    66a2:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    66a6:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    66aa:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    66ae:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    66b2:	6993      	ldr	r3, [r2, #24]
    66b4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    66b8:	69d3      	ldr	r3, [r2, #28]
    66ba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    66be:	f000 f8d1 	bl	6864 <tempmonGetTemp>
    66c2:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    66c6:	f001 f9c9 	bl	7a5c <rtc_get>
	info->len = sizeof(*info) / 4;
    66ca:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    66cc:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    66d0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    66d4:	460b      	mov	r3, r1
    66d6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    66da:	493e      	ldr	r1, [pc, #248]	; (67d4 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    66dc:	1d30      	adds	r0, r6, #4
    66de:	405a      	eors	r2, r3
    66e0:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    66e2:	f002 0301 	and.w	r3, r2, #1
    66e6:	3c01      	subs	r4, #1
    66e8:	fb01 f303 	mul.w	r3, r1, r3
    66ec:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    66f0:	d1f7      	bne.n	66e2 <unused_interrupt_vector+0x6a>
	while (p < end) {
    66f2:	42a8      	cmp	r0, r5
    66f4:	d002      	beq.n	66fc <unused_interrupt_vector+0x84>
		crc ^= *p++;
    66f6:	6873      	ldr	r3, [r6, #4]
    66f8:	4606      	mov	r6, r0
    66fa:	e7ef      	b.n	66dc <unused_interrupt_vector+0x64>
	info->crc = crc;
    66fc:	4b32      	ldr	r3, [pc, #200]	; (67c8 <unused_interrupt_vector+0x150>)
    66fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    6702:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    6706:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    670a:	4930      	ldr	r1, [pc, #192]	; (67cc <unused_interrupt_vector+0x154>)
    670c:	4a32      	ldr	r2, [pc, #200]	; (67d8 <unused_interrupt_vector+0x160>)
    670e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    6712:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    6716:	f3bf 8f4f 	dsb	sy
	asm("isb");
    671a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    671e:	4a2f      	ldr	r2, [pc, #188]	; (67dc <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    6720:	2502      	movs	r5, #2
    6722:	482f      	ldr	r0, [pc, #188]	; (67e0 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    6724:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    6726:	492f      	ldr	r1, [pc, #188]	; (67e4 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    6728:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    672c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    672e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    6730:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    6732:	482d      	ldr	r0, [pc, #180]	; (67e8 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    6734:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    673c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    673e:	680b      	ldr	r3, [r1, #0]
    6740:	4283      	cmp	r3, r0
    6742:	d83d      	bhi.n	67c0 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    6744:	4d26      	ldr	r5, [pc, #152]	; (67e0 <unused_interrupt_vector+0x168>)
    6746:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    6748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    674c:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    6750:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    6752:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    6754:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    6758:	4924      	ldr	r1, [pc, #144]	; (67ec <unused_interrupt_vector+0x174>)
    675a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    675e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    6762:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    6766:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    676a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    676e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    6772:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    6776:	e001      	b.n	677c <unused_interrupt_vector+0x104>
		usb_isr();
    6778:	f000 f966 	bl	6a48 <usb_isr>
		if (PIT_TFLG0) {
    677c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    6780:	2b00      	cmp	r3, #0
    6782:	d0f9      	beq.n	6778 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    6784:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    6786:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    678a:	2c4f      	cmp	r4, #79	; 0x4f
    678c:	d9f4      	bls.n	6778 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    678e:	4b18      	ldr	r3, [pc, #96]	; (67f0 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    6790:	2002      	movs	r0, #2
    6792:	4918      	ldr	r1, [pc, #96]	; (67f4 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    6794:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    6798:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    679c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    679e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    67a2:	b93b      	cbnz	r3, 67b4 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    67a4:	4814      	ldr	r0, [pc, #80]	; (67f8 <unused_interrupt_vector+0x180>)
    67a6:	4915      	ldr	r1, [pc, #84]	; (67fc <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    67a8:	4a0d      	ldr	r2, [pc, #52]	; (67e0 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    67aa:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    67ac:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    67b0:	2b00      	cmp	r3, #0
    67b2:	d0fa      	beq.n	67aa <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    67b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    67b8:	4a11      	ldr	r2, [pc, #68]	; (6800 <unused_interrupt_vector+0x188>)
    67ba:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    67be:	e7fe      	b.n	67be <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    67c0:	f7ff f9bc 	bl	5b3c <set_arm_clock>
    67c4:	e7be      	b.n	6744 <unused_interrupt_vector+0xcc>
    67c6:	bf00      	nop
    67c8:	2027ff00 	.word	0x2027ff00
    67cc:	2027ff80 	.word	0x2027ff80
    67d0:	2027ffa8 	.word	0x2027ffa8
    67d4:	edb88320 	.word	0xedb88320
    67d8:	2027ffa0 	.word	0x2027ffa0
    67dc:	400fc000 	.word	0x400fc000
    67e0:	40084000 	.word	0x40084000
    67e4:	20001dac 	.word	0x20001dac
    67e8:	0bcd3d80 	.word	0x0bcd3d80
    67ec:	00249f00 	.word	0x00249f00
    67f0:	400d9000 	.word	0x400d9000
    67f4:	402e0000 	.word	0x402e0000
    67f8:	400f8000 	.word	0x400f8000
    67fc:	0bad00f1 	.word	0x0bad00f1
    6800:	05fa0004 	.word	0x05fa0004

00006804 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    6804:	490a      	ldr	r1, [pc, #40]	; (6830 <_sbrk+0x2c>)
    6806:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    6808:	b138      	cbz	r0, 681a <_sbrk+0x16>
{
    680a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    680c:	1813      	adds	r3, r2, r0
    680e:	4809      	ldr	r0, [pc, #36]	; (6834 <_sbrk+0x30>)
    6810:	4283      	cmp	r3, r0
    6812:	d804      	bhi.n	681e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    6814:	4610      	mov	r0, r2
                __brkval = prev + incr;
    6816:	600b      	str	r3, [r1, #0]
}
    6818:	bd08      	pop	{r3, pc}
    681a:	4610      	mov	r0, r2
    681c:	4770      	bx	lr
                        errno = ENOMEM;
    681e:	f002 fa0d 	bl	8c3c <__errno>
    6822:	230c      	movs	r3, #12
                        return (void *)-1;
    6824:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    6828:	6003      	str	r3, [r0, #0]
}
    682a:	4610      	mov	r0, r2
    682c:	bd08      	pop	{r3, pc}
    682e:	bf00      	nop
    6830:	20002e84 	.word	0x20002e84
    6834:	20280000 	.word	0x20280000

00006838 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    6838:	2000      	movs	r0, #0
    683a:	4770      	bx	lr

0000683c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    683c:	f04f 30ff 	mov.w	r0, #4294967295
    6840:	4770      	bx	lr
    6842:	bf00      	nop

00006844 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    6844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    6848:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    684a:	604b      	str	r3, [r1, #4]
}
    684c:	4770      	bx	lr
    684e:	bf00      	nop

00006850 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    6850:	2001      	movs	r0, #1
    6852:	4770      	bx	lr

00006854 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    6854:	f04f 30ff 	mov.w	r0, #4294967295
    6858:	4770      	bx	lr
    685a:	bf00      	nop

0000685c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    685c:	bf30      	wfi
    685e:	e7fd      	b.n	685c <abort>

00006860 <Panic_Temp_isr>:
  unused_interrupt_vector();
    6860:	f7ff bf0a 	b.w	6678 <unused_interrupt_vector>

00006864 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    6864:	4a12      	ldr	r2, [pc, #72]	; (68b0 <tempmonGetTemp+0x4c>)
    6866:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    686a:	075b      	lsls	r3, r3, #29
    686c:	d5fb      	bpl.n	6866 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    686e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    6872:	4810      	ldr	r0, [pc, #64]	; (68b4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    6874:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    6878:	490f      	ldr	r1, [pc, #60]	; (68b8 <tempmonGetTemp+0x54>)
    687a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    687e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    6882:	ed91 6a00 	vldr	s12, [r1]
    6886:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    688a:	4a0c      	ldr	r2, [pc, #48]	; (68bc <tempmonGetTemp+0x58>)
    688c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6890:	4b0b      	ldr	r3, [pc, #44]	; (68c0 <tempmonGetTemp+0x5c>)
    6892:	edd2 6a00 	vldr	s13, [r2]
    6896:	ee77 7ac7 	vsub.f32	s15, s15, s14
    689a:	ed93 7a00 	vldr	s14, [r3]
    689e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    68a2:	ee67 7a86 	vmul.f32	s15, s15, s12
    68a6:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    68aa:	ee37 0a40 	vsub.f32	s0, s14, s0
    68ae:	4770      	bx	lr
    68b0:	400d8100 	.word	0x400d8100
    68b4:	20004150 	.word	0x20004150
    68b8:	20004158 	.word	0x20004158
    68bc:	2000415c 	.word	0x2000415c
    68c0:	20004154 	.word	0x20004154

000068c4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    68c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    68c6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    68c8:	b11b      	cbz	r3, 68d2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    68ca:	6853      	ldr	r3, [r2, #4]
    68cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    68d0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    68d2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    68d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    68d6:	b33c      	cbz	r4, 6928 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    68d8:	4b1a      	ldr	r3, [pc, #104]	; (6944 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    68da:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    68dc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    68e0:	420c      	tst	r4, r1
    68e2:	d11d      	bne.n	6920 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    68e4:	4e18      	ldr	r6, [pc, #96]	; (6948 <schedule_transfer+0x84>)
    68e6:	6877      	ldr	r7, [r6, #4]
    68e8:	e004      	b.n	68f4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    68ea:	6874      	ldr	r4, [r6, #4]
    68ec:	1be4      	subs	r4, r4, r7
    68ee:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    68f2:	d20b      	bcs.n	690c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    68f4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    68f8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    68fc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    6900:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    6904:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    6908:	0464      	lsls	r4, r4, #17
    690a:	d5ee      	bpl.n	68ea <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    690c:	400d      	ands	r5, r1
    690e:	d107      	bne.n	6920 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    6910:	4c0c      	ldr	r4, [pc, #48]	; (6944 <schedule_transfer+0x80>)
		endpoint->status = 0;
    6912:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    6916:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    691a:	430b      	orrs	r3, r1
    691c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    6920:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    6922:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    6924:	bcf0      	pop	{r4, r5, r6, r7}
    6926:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    6928:	4d06      	ldr	r5, [pc, #24]	; (6944 <schedule_transfer+0x80>)
	endpoint->status = 0;
    692a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    692e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    6932:	430b      	orrs	r3, r1
    6934:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    6938:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    693a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    693c:	b662      	cpsie	i
}
    693e:	bcf0      	pop	{r4, r5, r6, r7}
    6940:	4770      	bx	lr
    6942:	bf00      	nop
    6944:	402e0000 	.word	0x402e0000
    6948:	e0001000 	.word	0xe0001000

0000694c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    694c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    694e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    6950:	b19d      	cbz	r5, 697a <run_callbacks+0x2e>
    6952:	4606      	mov	r6, r0
    6954:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    6956:	2400      	movs	r4, #0
    6958:	e003      	b.n	6962 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    695a:	6812      	ldr	r2, [r2, #0]
		count++;
    695c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    695e:	2a01      	cmp	r2, #1
    6960:	d00c      	beq.n	697c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    6962:	6853      	ldr	r3, [r2, #4]
    6964:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    6968:	d0f7      	beq.n	695a <run_callbacks+0xe>
			ep->first_transfer = t;
    696a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    696c:	b12c      	cbz	r4, 697a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    696e:	4628      	mov	r0, r5
		ep->callback_function(first);
    6970:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    6972:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    6974:	4798      	blx	r3
	while (count) {
    6976:	3c01      	subs	r4, #1
    6978:	d1f9      	bne.n	696e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    697a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    697c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    6980:	e7f4      	b.n	696c <run_callbacks+0x20>
    6982:	bf00      	nop

00006984 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    6984:	b430      	push	{r4, r5}
	if (len > 0) {
    6986:	b9d9      	cbnz	r1, 69c0 <endpoint0_transmit.constprop.0+0x3c>
    6988:	4c1f      	ldr	r4, [pc, #124]	; (6a08 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    698a:	4b20      	ldr	r3, [pc, #128]	; (6a0c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    698c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    698e:	4a20      	ldr	r2, [pc, #128]	; (6a10 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    6990:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6992:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    6996:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6998:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    699a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    699e:	2480      	movs	r4, #128	; 0x80
    69a0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    69a2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    69a6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    69aa:	481a      	ldr	r0, [pc, #104]	; (6a14 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    69ac:	432b      	orrs	r3, r5
    69ae:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    69b2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    69b4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    69b8:	2b00      	cmp	r3, #0
    69ba:	d1fb      	bne.n	69b4 <endpoint0_transmit.constprop.0+0x30>
}
    69bc:	bc30      	pop	{r4, r5}
    69be:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    69c0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    69c2:	4b15      	ldr	r3, [pc, #84]	; (6a18 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    69c4:	4c10      	ldr	r4, [pc, #64]	; (6a08 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    69c6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    69c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    69cc:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    69ce:	4a10      	ldr	r2, [pc, #64]	; (6a10 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    69d0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    69d2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    69d6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    69d8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    69da:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    69de:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    69e0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    69e2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    69e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    69ea:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    69ec:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    69ee:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    69f0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    69f2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    69f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    69fa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    69fe:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    6a02:	2b00      	cmp	r3, #0
    6a04:	d1fb      	bne.n	69fe <endpoint0_transmit.constprop.0+0x7a>
    6a06:	e7c0      	b.n	698a <endpoint0_transmit.constprop.0+0x6>
    6a08:	20000000 	.word	0x20000000
    6a0c:	20003ac0 	.word	0x20003ac0
    6a10:	402e0000 	.word	0x402e0000
    6a14:	2000405c 	.word	0x2000405c
    6a18:	20003ae0 	.word	0x20003ae0

00006a1c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    6a1c:	4908      	ldr	r1, [pc, #32]	; (6a40 <usb_stop_sof_interrupts+0x24>)
    6a1e:	2201      	movs	r2, #1
    6a20:	780b      	ldrb	r3, [r1, #0]
    6a22:	fa02 f000 	lsl.w	r0, r2, r0
    6a26:	ea23 0000 	bic.w	r0, r3, r0
    6a2a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    6a2c:	b930      	cbnz	r0, 6a3c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    6a2e:	4a05      	ldr	r2, [pc, #20]	; (6a44 <usb_stop_sof_interrupts+0x28>)
    6a30:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    6a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6a38:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    6a3c:	4770      	bx	lr
    6a3e:	bf00      	nop
    6a40:	20004191 	.word	0x20004191
    6a44:	402e0000 	.word	0x402e0000

00006a48 <usb_isr>:
{
    6a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    6a4c:	4c97      	ldr	r4, [pc, #604]	; (6cac <usb_isr+0x264>)
{
    6a4e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    6a50:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    6a54:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    6a56:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    6a5a:	d553      	bpl.n	6b04 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    6a5c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    6a60:	2a00      	cmp	r2, #0
    6a62:	d04a      	beq.n	6afa <usb_isr+0xb2>
    6a64:	4e92      	ldr	r6, [pc, #584]	; (6cb0 <usb_isr+0x268>)
    6a66:	f8df a260 	ldr.w	sl, [pc, #608]	; 6cc8 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    6a6a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 6ce0 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    6a6e:	f8df b274 	ldr.w	fp, [pc, #628]	; 6ce4 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    6a72:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6ce8 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    6a76:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    6a7a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    6a7e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    6a86:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    6a8a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6a8e:	049d      	lsls	r5, r3, #18
    6a90:	d5f5      	bpl.n	6a7e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    6a92:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6a96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6a9a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    6a9e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6aa2:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    6aa6:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    6aaa:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    6aae:	d1fa      	bne.n	6aa6 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    6ab0:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    6ab2:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    6ab4:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    6ab8:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    6abc:	f000 81cf 	beq.w	6e5e <usb_isr+0x416>
    6ac0:	f200 80db 	bhi.w	6c7a <usb_isr+0x232>
    6ac4:	f240 3102 	movw	r1, #770	; 0x302
    6ac8:	428b      	cmp	r3, r1
    6aca:	f000 81e7 	beq.w	6e9c <usb_isr+0x454>
    6ace:	f200 809a 	bhi.w	6c06 <usb_isr+0x1be>
    6ad2:	2b82      	cmp	r3, #130	; 0x82
    6ad4:	f000 81cb 	beq.w	6e6e <usb_isr+0x426>
    6ad8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6adc:	f040 808a 	bne.w	6bf4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    6ae0:	f010 0f78 	tst.w	r0, #120	; 0x78
    6ae4:	b283      	uxth	r3, r0
    6ae6:	f000 8203 	beq.w	6ef0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    6aea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6aee:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    6af2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    6af6:	2a00      	cmp	r2, #0
    6af8:	d1bd      	bne.n	6a76 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    6afa:	4a6c      	ldr	r2, [pc, #432]	; (6cac <usb_isr+0x264>)
    6afc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    6b00:	2b00      	cmp	r3, #0
    6b02:	d142      	bne.n	6b8a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    6b04:	067e      	lsls	r6, r7, #25
    6b06:	d516      	bpl.n	6b36 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    6b08:	4b68      	ldr	r3, [pc, #416]	; (6cac <usb_isr+0x264>)
    6b0a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    6b0e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    6b12:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    6b16:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    6b1a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    6b1e:	2c00      	cmp	r4, #0
    6b20:	d1fb      	bne.n	6b1a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    6b22:	f04f 32ff 	mov.w	r2, #4294967295
    6b26:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    6b2a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    6b2e:	f000 fd2d 	bl	758c <usb_serial_reset>
		endpointN_notify_mask = 0;
    6b32:	4b60      	ldr	r3, [pc, #384]	; (6cb4 <usb_isr+0x26c>)
    6b34:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    6b36:	01fc      	lsls	r4, r7, #7
    6b38:	d503      	bpl.n	6b42 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    6b3a:	4b5f      	ldr	r3, [pc, #380]	; (6cb8 <usb_isr+0x270>)
    6b3c:	681b      	ldr	r3, [r3, #0]
    6b3e:	b103      	cbz	r3, 6b42 <usb_isr+0xfa>
    6b40:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    6b42:	01b8      	lsls	r0, r7, #6
    6b44:	d503      	bpl.n	6b4e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    6b46:	4b5d      	ldr	r3, [pc, #372]	; (6cbc <usb_isr+0x274>)
    6b48:	681b      	ldr	r3, [r3, #0]
    6b4a:	b103      	cbz	r3, 6b4e <usb_isr+0x106>
    6b4c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    6b4e:	0779      	lsls	r1, r7, #29
    6b50:	d508      	bpl.n	6b64 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    6b52:	4b56      	ldr	r3, [pc, #344]	; (6cac <usb_isr+0x264>)
    6b54:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    6b58:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    6b5c:	d047      	beq.n	6bee <usb_isr+0x1a6>
			usb_high_speed = 1;
    6b5e:	4b58      	ldr	r3, [pc, #352]	; (6cc0 <usb_isr+0x278>)
    6b60:	2201      	movs	r2, #1
    6b62:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    6b64:	4b51      	ldr	r3, [pc, #324]	; (6cac <usb_isr+0x264>)
    6b66:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    6b6a:	061a      	lsls	r2, r3, #24
    6b6c:	d50a      	bpl.n	6b84 <usb_isr+0x13c>
    6b6e:	063b      	lsls	r3, r7, #24
    6b70:	d508      	bpl.n	6b84 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    6b72:	4a54      	ldr	r2, [pc, #336]	; (6cc4 <usb_isr+0x27c>)
    6b74:	7813      	ldrb	r3, [r2, #0]
    6b76:	b12b      	cbz	r3, 6b84 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    6b78:	3b01      	subs	r3, #1
    6b7a:	b2db      	uxtb	r3, r3
    6b7c:	7013      	strb	r3, [r2, #0]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	f000 8272 	beq.w	7068 <usb_isr+0x620>
}
    6b84:	b003      	add	sp, #12
    6b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    6b8a:	494f      	ldr	r1, [pc, #316]	; (6cc8 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    6b8c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    6b90:	6808      	ldr	r0, [r1, #0]
    6b92:	4203      	tst	r3, r0
    6b94:	f040 81d1 	bne.w	6f3a <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    6b98:	4a46      	ldr	r2, [pc, #280]	; (6cb4 <usb_isr+0x26c>)
    6b9a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    6b9c:	401c      	ands	r4, r3
    6b9e:	d0b1      	beq.n	6b04 <usb_isr+0xbc>
				while (tx) {
    6ba0:	ea5f 4814 	movs.w	r8, r4, lsr #16
    6ba4:	d010      	beq.n	6bc8 <usb_isr+0x180>
    6ba6:	4e42      	ldr	r6, [pc, #264]	; (6cb0 <usb_isr+0x268>)
					tx &= ~(1<<p);
    6ba8:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    6bac:	fa98 f5a8 	rbit	r5, r8
    6bb0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    6bb4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    6bb8:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    6bbc:	3040      	adds	r0, #64	; 0x40
    6bbe:	f7ff fec5 	bl	694c <run_callbacks>
				while (tx) {
    6bc2:	ea38 0805 	bics.w	r8, r8, r5
    6bc6:	d1f1      	bne.n	6bac <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    6bc8:	b2a4      	uxth	r4, r4
				while(rx) {
    6bca:	2c00      	cmp	r4, #0
    6bcc:	d09a      	beq.n	6b04 <usb_isr+0xbc>
    6bce:	4e38      	ldr	r6, [pc, #224]	; (6cb0 <usb_isr+0x268>)
					rx &= ~(1<<p);
    6bd0:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    6bd4:	fa94 f5a4 	rbit	r5, r4
    6bd8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    6bdc:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    6be0:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    6be4:	f7ff feb2 	bl	694c <run_callbacks>
				while(rx) {
    6be8:	43ac      	bics	r4, r5
    6bea:	d1f3      	bne.n	6bd4 <usb_isr+0x18c>
    6bec:	e78a      	b.n	6b04 <usb_isr+0xbc>
			usb_high_speed = 0;
    6bee:	4a34      	ldr	r2, [pc, #208]	; (6cc0 <usb_isr+0x278>)
    6bf0:	7013      	strb	r3, [r2, #0]
    6bf2:	e7b7      	b.n	6b64 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    6bf4:	2b80      	cmp	r3, #128	; 0x80
    6bf6:	f47f af78 	bne.w	6aea <usb_isr+0xa2>
		reply_buffer[0] = 0;
    6bfa:	4834      	ldr	r0, [pc, #208]	; (6ccc <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    6bfc:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    6bfe:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    6c00:	f7ff fec0 	bl	6984 <endpoint0_transmit.constprop.0>
		return;
    6c04:	e775      	b.n	6af2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    6c06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    6c0a:	f000 810b 	beq.w	6e24 <usb_isr+0x3dc>
    6c0e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    6c12:	2b01      	cmp	r3, #1
    6c14:	f63f af69 	bhi.w	6aea <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    6c18:	4b2d      	ldr	r3, [pc, #180]	; (6cd0 <usb_isr+0x288>)
    6c1a:	685d      	ldr	r5, [r3, #4]
    6c1c:	2d00      	cmp	r5, #0
    6c1e:	f43f af64 	beq.w	6aea <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    6c22:	fa1f fc8c 	uxth.w	ip, ip
    6c26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    6c2a:	e004      	b.n	6c36 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    6c2c:	691d      	ldr	r5, [r3, #16]
    6c2e:	330c      	adds	r3, #12
    6c30:	2d00      	cmp	r5, #0
    6c32:	f43f af5a 	beq.w	6aea <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    6c36:	881a      	ldrh	r2, [r3, #0]
    6c38:	4572      	cmp	r2, lr
    6c3a:	d1f7      	bne.n	6c2c <usb_isr+0x1e4>
    6c3c:	885a      	ldrh	r2, [r3, #2]
    6c3e:	4562      	cmp	r2, ip
    6c40:	d1f4      	bne.n	6c2c <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    6c42:	ea4f 221e 	mov.w	r2, lr, lsr #8
    6c46:	2a03      	cmp	r2, #3
    6c48:	f000 81a5 	beq.w	6f96 <usb_isr+0x54e>
					datalen = list->length;
    6c4c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    6c4e:	0c00      	lsrs	r0, r0, #16
    6c50:	4282      	cmp	r2, r0
    6c52:	bf28      	it	cs
    6c54:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    6c56:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    6c5a:	f040 81a1 	bne.w	6fa0 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    6c5e:	4b18      	ldr	r3, [pc, #96]	; (6cc0 <usb_isr+0x278>)
    6c60:	491c      	ldr	r1, [pc, #112]	; (6cd4 <usb_isr+0x28c>)
    6c62:	7818      	ldrb	r0, [r3, #0]
    6c64:	4b1c      	ldr	r3, [pc, #112]	; (6cd8 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    6c66:	9201      	str	r2, [sp, #4]
    6c68:	2800      	cmp	r0, #0
    6c6a:	bf18      	it	ne
    6c6c:	4619      	movne	r1, r3
    6c6e:	481b      	ldr	r0, [pc, #108]	; (6cdc <usb_isr+0x294>)
    6c70:	f7ff f9c4 	bl	5ffc <memcpy>
    6c74:	4d19      	ldr	r5, [pc, #100]	; (6cdc <usb_isr+0x294>)
    6c76:	9a01      	ldr	r2, [sp, #4]
    6c78:	e1e1      	b.n	703e <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    6c7a:	f242 2121 	movw	r1, #8737	; 0x2221
    6c7e:	428b      	cmp	r3, r1
    6c80:	d07c      	beq.n	6d7c <usb_isr+0x334>
    6c82:	d933      	bls.n	6cec <usb_isr+0x2a4>
    6c84:	f242 3121 	movw	r1, #8993	; 0x2321
    6c88:	428b      	cmp	r3, r1
    6c8a:	f000 8081 	beq.w	6d90 <usb_isr+0x348>
    6c8e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    6c92:	428b      	cmp	r3, r1
    6c94:	f47f af29 	bne.w	6aea <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    6c98:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    6c9c:	b283      	uxth	r3, r0
    6c9e:	f47f af24 	bne.w	6aea <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    6ca2:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    6ca6:	f363 0c0f 	bfi	ip, r3, #0, #16
    6caa:	e7b5      	b.n	6c18 <usb_isr+0x1d0>
    6cac:	402e0000 	.word	0x402e0000
    6cb0:	20000000 	.word	0x20000000
    6cb4:	20004060 	.word	0x20004060
    6cb8:	2000417c 	.word	0x2000417c
    6cbc:	20004180 	.word	0x20004180
    6cc0:	20004197 	.word	0x20004197
    6cc4:	20004198 	.word	0x20004198
    6cc8:	2000405c 	.word	0x2000405c
    6ccc:	20004118 	.word	0x20004118
    6cd0:	20001be4 	.word	0x20001be4
    6cd4:	6000212c 	.word	0x6000212c
    6cd8:	60002190 	.word	0x60002190
    6cdc:	20200000 	.word	0x20200000
    6ce0:	20004054 	.word	0x20004054
    6ce4:	b8c6cf5d 	.word	0xb8c6cf5d
    6ce8:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    6cec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6cf0:	d066      	beq.n	6dc0 <usb_isr+0x378>
    6cf2:	f242 0121 	movw	r1, #8225	; 0x2021
    6cf6:	428b      	cmp	r3, r1
    6cf8:	f47f aef7 	bne.w	6aea <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    6cfc:	0c03      	lsrs	r3, r0, #16
    6cfe:	2b07      	cmp	r3, #7
    6d00:	f47f aef3 	bne.w	6aea <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    6d04:	4bb2      	ldr	r3, [pc, #712]	; (6fd0 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    6d06:	49b3      	ldr	r1, [pc, #716]	; (6fd4 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    6d08:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    6d0a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    6d0c:	49b2      	ldr	r1, [pc, #712]	; (6fd8 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    6d0e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    6d10:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    6d14:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    6d18:	2201      	movs	r2, #1
    6d1a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    6d1c:	4aaf      	ldr	r2, [pc, #700]	; (6fdc <usb_isr+0x594>)
    6d1e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    6d20:	4aaf      	ldr	r2, [pc, #700]	; (6fe0 <usb_isr+0x598>)
    6d22:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    6d24:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    6d28:	f041 0101 	orr.w	r1, r1, #1
    6d2c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    6d30:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    6d34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    6d38:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    6d3a:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    6d3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6d40:	2b00      	cmp	r3, #0
    6d42:	d1fb      	bne.n	6d3c <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    6d44:	4aa7      	ldr	r2, [pc, #668]	; (6fe4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    6d46:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    6d48:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    6d4a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6d4c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6d4e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6d50:	f248 0380 	movw	r3, #32896	; 0x8080
    6d54:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6d56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6d5a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6d5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6d66:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    6d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6d6e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    6d72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6d76:	2b00      	cmp	r3, #0
    6d78:	d1fb      	bne.n	6d72 <usb_isr+0x32a>
    6d7a:	e6ba      	b.n	6af2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    6d7c:	b280      	uxth	r0, r0
    6d7e:	b938      	cbnz	r0, 6d90 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    6d80:	4b99      	ldr	r3, [pc, #612]	; (6fe8 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    6d82:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    6d86:	6819      	ldr	r1, [r3, #0]
    6d88:	4b98      	ldr	r3, [pc, #608]	; (6fec <usb_isr+0x5a4>)
    6d8a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    6d8c:	4b98      	ldr	r3, [pc, #608]	; (6ff0 <usb_isr+0x5a8>)
    6d8e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    6d90:	4b94      	ldr	r3, [pc, #592]	; (6fe4 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    6d92:	2200      	movs	r2, #0
    6d94:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    6d96:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    6d98:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6d9a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6d9c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6d9e:	2280      	movs	r2, #128	; 0x80
    6da0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6da2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6da6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6daa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6db2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6db6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d1fb      	bne.n	6db6 <usb_isr+0x36e>
    6dbe:	e698      	b.n	6af2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    6dc0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    6dc4:	4b8b      	ldr	r3, [pc, #556]	; (6ff4 <usb_isr+0x5ac>)
    6dc6:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    6dc8:	4b8b      	ldr	r3, [pc, #556]	; (6ff8 <usb_isr+0x5b0>)
    6dca:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    6dce:	4b8b      	ldr	r3, [pc, #556]	; (6ffc <usb_isr+0x5b4>)
    6dd0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    6dd4:	4b8a      	ldr	r3, [pc, #552]	; (7000 <usb_isr+0x5b8>)
    6dd6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    6dda:	f000 fbd9 	bl	7590 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    6dde:	2280      	movs	r2, #128	; 0x80
    6de0:	4629      	mov	r1, r5
    6de2:	4888      	ldr	r0, [pc, #544]	; (7004 <usb_isr+0x5bc>)
    6de4:	f001 fe3a 	bl	8a5c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    6de8:	4b87      	ldr	r3, [pc, #540]	; (7008 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6dea:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    6dec:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    6df0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    6df4:	4b7b      	ldr	r3, [pc, #492]	; (6fe4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    6df6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6df8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    6dfa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6dfc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    6dfe:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6e00:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6e02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6e06:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6e0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6e12:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    6e16:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    6e1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6e1e:	2b00      	cmp	r3, #0
    6e20:	d1fb      	bne.n	6e1a <usb_isr+0x3d2>
    6e22:	e666      	b.n	6af2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    6e24:	4b6f      	ldr	r3, [pc, #444]	; (6fe4 <usb_isr+0x59c>)
    6e26:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    6e28:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    6e2a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6e2c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    6e2e:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6e30:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6e32:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6e34:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6e38:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6e3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6e44:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6e48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d1fb      	bne.n	6e48 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    6e50:	0c13      	lsrs	r3, r2, #16
    6e52:	065b      	lsls	r3, r3, #25
    6e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6e58:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    6e5c:	e649      	b.n	6af2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    6e5e:	4b65      	ldr	r3, [pc, #404]	; (6ff4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    6e60:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    6e62:	486a      	ldr	r0, [pc, #424]	; (700c <usb_isr+0x5c4>)
    6e64:	781b      	ldrb	r3, [r3, #0]
    6e66:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    6e68:	f7ff fd8c 	bl	6984 <endpoint0_transmit.constprop.0>
		return;
    6e6c:	e641      	b.n	6af2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    6e6e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    6e70:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    6e74:	f47f ae39 	bne.w	6aea <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    6e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    6e7c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    6e80:	4a62      	ldr	r2, [pc, #392]	; (700c <usb_isr+0x5c4>)
    6e82:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    6e84:	0618      	lsls	r0, r3, #24
    6e86:	f100 809e 	bmi.w	6fc6 <usb_isr+0x57e>
    6e8a:	07cb      	lsls	r3, r1, #31
    6e8c:	d501      	bpl.n	6e92 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    6e8e:	2301      	movs	r3, #1
    6e90:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    6e92:	2102      	movs	r1, #2
    6e94:	485d      	ldr	r0, [pc, #372]	; (700c <usb_isr+0x5c4>)
    6e96:	f7ff fd75 	bl	6984 <endpoint0_transmit.constprop.0>
		return;
    6e9a:	e62a      	b.n	6af2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    6e9c:	f010 0f78 	tst.w	r0, #120	; 0x78
    6ea0:	b283      	uxth	r3, r0
    6ea2:	f47f ae22 	bne.w	6aea <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    6ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    6eaa:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    6eae:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    6eb2:	bf14      	ite	ne
    6eb4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    6eb8:	f043 0301 	orreq.w	r3, r3, #1
    6ebc:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    6ec0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    6ec2:	4b48      	ldr	r3, [pc, #288]	; (6fe4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    6ec4:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    6ec6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6ec8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6eca:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6ecc:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6ece:	2280      	movs	r2, #128	; 0x80
    6ed0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6ed2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6ed6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6eda:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6ee2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6ee6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6eea:	2b00      	cmp	r3, #0
    6eec:	d1fb      	bne.n	6ee6 <usb_isr+0x49e>
    6eee:	e600      	b.n	6af2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    6ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    6ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    6ef8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    6efc:	bf14      	ite	ne
    6efe:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    6f02:	f023 0301 	biceq.w	r3, r3, #1
    6f06:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    6f0a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    6f0c:	4b35      	ldr	r3, [pc, #212]	; (6fe4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    6f0e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    6f10:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6f12:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6f14:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6f16:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6f1c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6f20:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6f24:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6f2c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6f30:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6f34:	2b00      	cmp	r3, #0
    6f36:	d1fb      	bne.n	6f30 <usb_isr+0x4e8>
    6f38:	e5db      	b.n	6af2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    6f3a:	2000      	movs	r0, #0
    6f3c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    6f3e:	4926      	ldr	r1, [pc, #152]	; (6fd8 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    6f40:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    6f42:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    6f44:	f242 0121 	movw	r1, #8225	; 0x2021
    6f48:	428c      	cmp	r4, r1
    6f4a:	f47f ae25 	bne.w	6b98 <usb_isr+0x150>
    6f4e:	b280      	uxth	r0, r0
    6f50:	2800      	cmp	r0, #0
    6f52:	f47f ae21 	bne.w	6b98 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    6f56:	492e      	ldr	r1, [pc, #184]	; (7010 <usb_isr+0x5c8>)
    6f58:	4c2e      	ldr	r4, [pc, #184]	; (7014 <usb_isr+0x5cc>)
    6f5a:	c903      	ldmia	r1, {r0, r1}
    6f5c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    6f5e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    6f60:	ea4f 4111 	mov.w	r1, r1, lsr #16
    6f64:	6020      	str	r0, [r4, #0]
    6f66:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    6f68:	f47f ae16 	bne.w	6b98 <usb_isr+0x150>
	__disable_irq();
    6f6c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    6f6e:	482a      	ldr	r0, [pc, #168]	; (7018 <usb_isr+0x5d0>)
    6f70:	7801      	ldrb	r1, [r0, #0]
    6f72:	f041 0108 	orr.w	r1, r1, #8
    6f76:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    6f78:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    6f7c:	060d      	lsls	r5, r1, #24
    6f7e:	d405      	bmi.n	6f8c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    6f80:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    6f82:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    6f84:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    6f88:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    6f8c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    6f8e:	4a23      	ldr	r2, [pc, #140]	; (701c <usb_isr+0x5d4>)
    6f90:	2150      	movs	r1, #80	; 0x50
    6f92:	7011      	strb	r1, [r2, #0]
    6f94:	e600      	b.n	6b98 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    6f96:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    6f98:	782a      	ldrb	r2, [r5, #0]
    6f9a:	4282      	cmp	r2, r0
    6f9c:	bf28      	it	cs
    6f9e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    6fa0:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    6fa4:	d144      	bne.n	7030 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    6fa6:	4b1e      	ldr	r3, [pc, #120]	; (7020 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    6fa8:	4d1e      	ldr	r5, [pc, #120]	; (7024 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    6faa:	7818      	ldrb	r0, [r3, #0]
    6fac:	491e      	ldr	r1, [pc, #120]	; (7028 <usb_isr+0x5e0>)
    6fae:	4b1f      	ldr	r3, [pc, #124]	; (702c <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    6fb0:	9201      	str	r2, [sp, #4]
    6fb2:	2800      	cmp	r0, #0
    6fb4:	bf18      	it	ne
    6fb6:	4619      	movne	r1, r3
    6fb8:	4628      	mov	r0, r5
    6fba:	f7ff f81f 	bl	5ffc <memcpy>
					usb_descriptor_buffer[1] = 7;
    6fbe:	2307      	movs	r3, #7
    6fc0:	706b      	strb	r3, [r5, #1]
    6fc2:	9a01      	ldr	r2, [sp, #4]
    6fc4:	e03b      	b.n	703e <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    6fc6:	03c9      	lsls	r1, r1, #15
    6fc8:	f53f af61 	bmi.w	6e8e <usb_isr+0x446>
    6fcc:	e761      	b.n	6e92 <usb_isr+0x44a>
    6fce:	bf00      	nop
    6fd0:	20003ae0 	.word	0x20003ae0
    6fd4:	20005054 	.word	0x20005054
    6fd8:	20003c80 	.word	0x20003c80
    6fdc:	00070080 	.word	0x00070080
    6fe0:	20006054 	.word	0x20006054
    6fe4:	20003ac0 	.word	0x20003ac0
    6fe8:	20004168 	.word	0x20004168
    6fec:	20004178 	.word	0x20004178
    6ff0:	20004195 	.word	0x20004195
    6ff4:	20004196 	.word	0x20004196
    6ff8:	00cc0002 	.word	0x00cc0002
    6ffc:	000200c8 	.word	0x000200c8
    7000:	00c80002 	.word	0x00c80002
    7004:	20000080 	.word	0x20000080
    7008:	74d59319 	.word	0x74d59319
    700c:	20004118 	.word	0x20004118
    7010:	20004054 	.word	0x20004054
    7014:	20004170 	.word	0x20004170
    7018:	20004191 	.word	0x20004191
    701c:	20004198 	.word	0x20004198
    7020:	20004197 	.word	0x20004197
    7024:	20200000 	.word	0x20200000
    7028:	60002190 	.word	0x60002190
    702c:	6000212c 	.word	0x6000212c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    7030:	4629      	mov	r1, r5
    7032:	4d10      	ldr	r5, [pc, #64]	; (7074 <usb_isr+0x62c>)
    7034:	9201      	str	r2, [sp, #4]
    7036:	4628      	mov	r0, r5
    7038:	f7fe ffe0 	bl	5ffc <memcpy>
    703c:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    703e:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    7042:	4415      	add	r5, r2
	asm("dsb");
    7044:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7048:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    704c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    7050:	3320      	adds	r3, #32
	} while (location < end_addr);
    7052:	429d      	cmp	r5, r3
    7054:	d8fa      	bhi.n	704c <usb_isr+0x604>
	asm("dsb");
    7056:	f3bf 8f4f 	dsb	sy
	asm("isb");
    705a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    705e:	4805      	ldr	r0, [pc, #20]	; (7074 <usb_isr+0x62c>)
    7060:	4611      	mov	r1, r2
    7062:	f7ff fc8f 	bl	6984 <endpoint0_transmit.constprop.0>
				return;
    7066:	e544      	b.n	6af2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    7068:	2003      	movs	r0, #3
    706a:	f7ff fcd7 	bl	6a1c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    706e:	f006 ff8f 	bl	df90 <___reboot_Teensyduino__veneer>
    7072:	bf00      	nop
    7074:	20200000 	.word	0x20200000

00007078 <usb_config_rx>:
{
    7078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    707c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    707e:	1e83      	subs	r3, r0, #2
    7080:	2b02      	cmp	r3, #2
    7082:	d901      	bls.n	7088 <usb_config_rx+0x10>
}
    7084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7088:	f8df 904c 	ldr.w	r9, [pc, #76]	; 70d8 <usb_config_rx+0x60>
    708c:	4615      	mov	r5, r2
    708e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    7090:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7092:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    7096:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7098:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    709c:	2100      	movs	r1, #0
    709e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    70a2:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    70a4:	f001 fcda 	bl	8a5c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    70a8:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    70ac:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    70ae:	0952      	lsrs	r2, r2, #5
    70b0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    70b4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    70b8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    70bc:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    70c0:	2f00      	cmp	r7, #0
    70c2:	d0df      	beq.n	7084 <usb_config_rx+0xc>
    70c4:	4a03      	ldr	r2, [pc, #12]	; (70d4 <usb_config_rx+0x5c>)
    70c6:	40b3      	lsls	r3, r6
    70c8:	6811      	ldr	r1, [r2, #0]
    70ca:	430b      	orrs	r3, r1
    70cc:	6013      	str	r3, [r2, #0]
}
    70ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70d2:	bf00      	nop
    70d4:	20004060 	.word	0x20004060
    70d8:	20000000 	.word	0x20000000

000070dc <usb_config_tx>:
{
    70dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70e0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    70e2:	1e81      	subs	r1, r0, #2
    70e4:	2902      	cmp	r1, #2
    70e6:	d901      	bls.n	70ec <usb_config_tx+0x10>
}
    70e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    70ec:	01c7      	lsls	r7, r0, #7
    70ee:	f8df 904c 	ldr.w	r9, [pc, #76]	; 713c <usb_config_tx+0x60>
    70f2:	4692      	mov	sl, r2
    70f4:	4604      	mov	r4, r0
    70f6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    70f8:	223c      	movs	r2, #60	; 0x3c
    70fa:	2100      	movs	r1, #0
    70fc:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    70fe:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7102:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    7104:	f108 0004 	add.w	r0, r8, #4
    7108:	f001 fca8 	bl	8a5c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    710c:	faba f28a 	clz	r2, sl
    7110:	0952      	lsrs	r2, r2, #5
    7112:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    7116:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    711a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    711c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    7120:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    7124:	2e00      	cmp	r6, #0
    7126:	d0df      	beq.n	70e8 <usb_config_tx+0xc>
    7128:	4b03      	ldr	r3, [pc, #12]	; (7138 <usb_config_tx+0x5c>)
    712a:	3410      	adds	r4, #16
    712c:	6819      	ldr	r1, [r3, #0]
    712e:	40a2      	lsls	r2, r4
    7130:	430a      	orrs	r2, r1
    7132:	601a      	str	r2, [r3, #0]
}
    7134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7138:	20004060 	.word	0x20004060
    713c:	20000000 	.word	0x20000000

00007140 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    7140:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    7142:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    7144:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    7146:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    714a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    714e:	b410      	push	{r4}
	transfer->next = 1;
    7150:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    7152:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    7154:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    7158:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    715a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    715e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    7162:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    7164:	6181      	str	r1, [r0, #24]
}
    7166:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    716a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    716e:	4770      	bx	lr

00007170 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7170:	1e83      	subs	r3, r0, #2
{
    7172:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7174:	2b02      	cmp	r3, #2
    7176:	d900      	bls.n	717a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    7178:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    717a:	4b06      	ldr	r3, [pc, #24]	; (7194 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    717c:	f100 0110 	add.w	r1, r0, #16
    7180:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    7184:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    7188:	fa0c f101 	lsl.w	r1, ip, r1
    718c:	3040      	adds	r0, #64	; 0x40
    718e:	f7ff bb99 	b.w	68c4 <schedule_transfer>
    7192:	bf00      	nop
    7194:	20000000 	.word	0x20000000

00007198 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7198:	1e83      	subs	r3, r0, #2
{
    719a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    719c:	2b02      	cmp	r3, #2
    719e:	d900      	bls.n	71a2 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    71a0:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    71a2:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    71a4:	4b02      	ldr	r3, [pc, #8]	; (71b0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    71a6:	4081      	lsls	r1, r0
    71a8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    71ac:	f7ff bb8a 	b.w	68c4 <schedule_transfer>
    71b0:	20000000 	.word	0x20000000

000071b4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    71b4:	6840      	ldr	r0, [r0, #4]
#endif
}
    71b6:	4770      	bx	lr

000071b8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    71b8:	4a12      	ldr	r2, [pc, #72]	; (7204 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    71ba:	4b13      	ldr	r3, [pc, #76]	; (7208 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    71bc:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    71c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    71c4:	4298      	cmp	r0, r3
{
    71c6:	b510      	push	{r4, lr}
    71c8:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    71ca:	d202      	bcs.n	71d2 <usb_init_serialnumber+0x1a>
    71cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    71d0:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    71d2:	4c0e      	ldr	r4, [pc, #56]	; (720c <usb_init_serialnumber+0x54>)
    71d4:	a901      	add	r1, sp, #4
    71d6:	220a      	movs	r2, #10
    71d8:	f7fe ffaa 	bl	6130 <ultoa>
	for (i=0; i<10; i++) {
    71dc:	a901      	add	r1, sp, #4
    71de:	2300      	movs	r3, #0
    71e0:	4620      	mov	r0, r4
		char c = buf[i];
    71e2:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    71e6:	3301      	adds	r3, #1
		if (!c) break;
    71e8:	b13a      	cbz	r2, 71fa <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    71ea:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    71ec:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    71f0:	d1f7      	bne.n	71e2 <usb_init_serialnumber+0x2a>
    71f2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    71f4:	7023      	strb	r3, [r4, #0]
}
    71f6:	b004      	add	sp, #16
    71f8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    71fa:	005b      	lsls	r3, r3, #1
    71fc:	b2db      	uxtb	r3, r3
    71fe:	7023      	strb	r3, [r4, #0]
}
    7200:	b004      	add	sp, #16
    7202:	bd10      	pop	{r4, pc}
    7204:	401f4400 	.word	0x401f4400
    7208:	00989680 	.word	0x00989680
    720c:	20003468 	.word	0x20003468

00007210 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    7210:	f000 badc 	b.w	77cc <usb_serial_flush_input>

00007214 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7214:	f000 baac 	b.w	7770 <usb_serial_peekchar>

00007218 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7218:	f000 bb10 	b.w	783c <usb_serial_getchar>

0000721c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    721c:	f000 baca 	b.w	77b4 <usb_serial_available>

00007220 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    7220:	f000 bb66 	b.w	78f0 <usb_serial_flush_output>

00007224 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    7224:	f000 bb3c 	b.w	78a0 <usb_serial_write_buffer_free>

00007228 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7228:	4608      	mov	r0, r1
    722a:	4611      	mov	r1, r2
    722c:	f000 bb2c 	b.w	7888 <usb_serial_write>

00007230 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    7230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    7232:	4c14      	ldr	r4, [pc, #80]	; (7284 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7234:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    7238:	4e13      	ldr	r6, [pc, #76]	; (7288 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    723a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    723e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    7242:	4f12      	ldr	r7, [pc, #72]	; (728c <rx_queue_transfer+0x5c>)
    7244:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    7248:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    724a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    724e:	4621      	mov	r1, r4
    7250:	883a      	ldrh	r2, [r7, #0]
    7252:	4630      	mov	r0, r6
    7254:	f7ff ff74 	bl	7140 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    7258:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    725a:	4423      	add	r3, r4
	asm("dsb");
    725c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    7260:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    7264:	3420      	adds	r4, #32
	} while (location < end_addr);
    7266:	42a3      	cmp	r3, r4
    7268:	d8fa      	bhi.n	7260 <rx_queue_transfer+0x30>
	asm("dsb");
    726a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    726e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    7272:	2003      	movs	r0, #3
    7274:	4631      	mov	r1, r6
    7276:	f7ff ff8f 	bl	7198 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    727a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    727e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    7282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7284:	20200080 	.word	0x20200080
    7288:	20003b00 	.word	0x20003b00
    728c:	20004184 	.word	0x20004184

00007290 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7290:	4b24      	ldr	r3, [pc, #144]	; (7324 <rx_event+0x94>)
{
    7292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7296:	881c      	ldrh	r4, [r3, #0]
    7298:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    729a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    729c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    72a0:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    72a2:	2c00      	cmp	r4, #0
    72a4:	dd24      	ble.n	72f0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    72a6:	4920      	ldr	r1, [pc, #128]	; (7328 <rx_event+0x98>)
		if (head != rx_tail) {
    72a8:	4820      	ldr	r0, [pc, #128]	; (732c <rx_event+0x9c>)
		uint32_t head = rx_head;
    72aa:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    72ac:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    72ae:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    72b0:	4e1f      	ldr	r6, [pc, #124]	; (7330 <rx_event+0xa0>)
		if (head != rx_tail) {
    72b2:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    72b4:	481f      	ldr	r0, [pc, #124]	; (7334 <rx_event+0xa4>)
		if (head != rx_tail) {
    72b6:	d007      	beq.n	72c8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    72b8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    72bc:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    72c0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    72c4:	4294      	cmp	r4, r2
    72c6:	d918      	bls.n	72fa <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    72c8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    72ca:	2200      	movs	r2, #0
		rx_count[i] = len;
    72cc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    72d0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    72d2:	4e19      	ldr	r6, [pc, #100]	; (7338 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    72d4:	bf88      	it	hi
    72d6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    72d8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    72dc:	bf98      	it	ls
    72de:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    72e0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    72e2:	4b16      	ldr	r3, [pc, #88]	; (733c <rx_event+0xac>)
		rx_head = head;
    72e4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    72e6:	681a      	ldr	r2, [r3, #0]
    72e8:	4414      	add	r4, r2
    72ea:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    72ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    72f0:	4628      	mov	r0, r5
}
    72f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    72f6:	f7ff bf9b 	b.w	7230 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    72fa:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    72fe:	4910      	ldr	r1, [pc, #64]	; (7340 <rx_event+0xb0>)
    7300:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    7302:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    7304:	4408      	add	r0, r1
    7306:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    730a:	f7fe fe77 	bl	5ffc <memcpy>
				rx_available += len;
    730e:	4a0b      	ldr	r2, [pc, #44]	; (733c <rx_event+0xac>)
				rx_queue_transfer(i);
    7310:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    7312:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    7316:	6813      	ldr	r3, [r2, #0]
    7318:	4423      	add	r3, r4
}
    731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    731e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    7320:	f7ff bf86 	b.w	7230 <rx_queue_transfer>
    7324:	20004184 	.word	0x20004184
    7328:	2000418f 	.word	0x2000418f
    732c:	20004190 	.word	0x20004190
    7330:	20004124 	.word	0x20004124
    7334:	20004144 	.word	0x20004144
    7338:	20004134 	.word	0x20004134
    733c:	20004120 	.word	0x20004120
    7340:	20200080 	.word	0x20200080

00007344 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    7344:	4b1d      	ldr	r3, [pc, #116]	; (73bc <usb_serial_flush_callback+0x78>)
    7346:	781a      	ldrb	r2, [r3, #0]
    7348:	2a00      	cmp	r2, #0
    734a:	d136      	bne.n	73ba <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    734c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    7350:	4a1b      	ldr	r2, [pc, #108]	; (73c0 <usb_serial_flush_callback+0x7c>)
    7352:	7812      	ldrb	r2, [r2, #0]
    7354:	b38a      	cbz	r2, 73ba <usb_serial_flush_callback+0x76>
{
    7356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    735a:	4d1a      	ldr	r5, [pc, #104]	; (73c4 <usb_serial_flush_callback+0x80>)
    735c:	882a      	ldrh	r2, [r5, #0]
    735e:	b352      	cbz	r2, 73b6 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    7360:	4e19      	ldr	r6, [pc, #100]	; (73c8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    7362:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    7366:	4f19      	ldr	r7, [pc, #100]	; (73cc <usb_serial_flush_callback+0x88>)
    7368:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    736a:	4c19      	ldr	r4, [pc, #100]	; (73d0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    736c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7370:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7374:	4642      	mov	r2, r8
    7376:	4638      	mov	r0, r7
    7378:	4621      	mov	r1, r4
    737a:	f7ff fee1 	bl	7140 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    737e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    7382:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7386:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    738a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    738e:	3420      	adds	r4, #32
	} while (location < end_addr);
    7390:	42a2      	cmp	r2, r4
    7392:	d8fa      	bhi.n	738a <usb_serial_flush_callback+0x46>
	asm("dsb");
    7394:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7398:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    739c:	2004      	movs	r0, #4
    739e:	4639      	mov	r1, r7
    73a0:	f7ff fee6 	bl	7170 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    73a4:	7833      	ldrb	r3, [r6, #0]
    73a6:	3301      	adds	r3, #1
    73a8:	b2db      	uxtb	r3, r3
    73aa:	2b03      	cmp	r3, #3
    73ac:	bf88      	it	hi
    73ae:	2300      	movhi	r3, #0
    73b0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    73b2:	2300      	movs	r3, #0
    73b4:	802b      	strh	r3, [r5, #0]
}
    73b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73ba:	4770      	bx	lr
    73bc:	20004194 	.word	0x20004194
    73c0:	20004196 	.word	0x20004196
    73c4:	20004186 	.word	0x20004186
    73c8:	20004193 	.word	0x20004193
    73cc:	20003c00 	.word	0x20003c00
    73d0:	20201080 	.word	0x20201080

000073d4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    73d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73d8:	b085      	sub	sp, #20
	while (size > 0) {
    73da:	e9cd 1001 	strd	r1, r0, [sp, #4]
    73de:	2900      	cmp	r1, #0
    73e0:	f000 80bf 	beq.w	7562 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    73e4:	2300      	movs	r3, #0
    73e6:	4c60      	ldr	r4, [pc, #384]	; (7568 <usb_serial_write.part.0+0x194>)
    73e8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 7584 <usb_serial_write.part.0+0x1b0>
    73ec:	f8df a198 	ldr.w	sl, [pc, #408]	; 7588 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    73f0:	4f5e      	ldr	r7, [pc, #376]	; (756c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    73f2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    73f4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    73f6:	4a5e      	ldr	r2, [pc, #376]	; (7570 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    73f8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    73fa:	4b5e      	ldr	r3, [pc, #376]	; (7574 <usb_serial_write.part.0+0x1a0>)
    73fc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    73fe:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    7402:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    7406:	2b00      	cmp	r3, #0
    7408:	f040 80a7 	bne.w	755a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    740c:	461e      	mov	r6, r3
		int waiting=0;
    740e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    7410:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    7412:	4648      	mov	r0, r9
    7414:	f7ff fece 	bl	71b4 <usb_transfer_status>
			if (!(status & 0x80)) {
    7418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    741c:	f000 808c 	beq.w	7538 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    7420:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    7424:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    7428:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    742c:	b905      	cbnz	r5, 7430 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    742e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    7430:	2b00      	cmp	r3, #0
    7432:	d17d      	bne.n	7530 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    7434:	683b      	ldr	r3, [r7, #0]
    7436:	1b9b      	subs	r3, r3, r6
    7438:	2b78      	cmp	r3, #120	; 0x78
    743a:	f200 8087 	bhi.w	754c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    743e:	4b4e      	ldr	r3, [pc, #312]	; (7578 <usb_serial_write.part.0+0x1a4>)
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	2b00      	cmp	r3, #0
    7444:	d074      	beq.n	7530 <usb_serial_write.part.0+0x15c>
			yield();
    7446:	f000 fa9d 	bl	7984 <yield>
			tx_noautoflush = 1;
    744a:	2201      	movs	r2, #1
		while (!tx_available) {
    744c:	f8b8 3000 	ldrh.w	r3, [r8]
    7450:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    7452:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    7454:	2b00      	cmp	r3, #0
    7456:	d0dc      	beq.n	7412 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7458:	4a46      	ldr	r2, [pc, #280]	; (7574 <usb_serial_write.part.0+0x1a0>)
    745a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    745e:	7811      	ldrb	r1, [r2, #0]
    7460:	461a      	mov	r2, r3
    7462:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    7466:	4d45      	ldr	r5, [pc, #276]	; (757c <usb_serial_write.part.0+0x1a8>)
    7468:	02c9      	lsls	r1, r1, #11
    746a:	4428      	add	r0, r5
		if (size >= tx_available) {
    746c:	9d01      	ldr	r5, [sp, #4]
    746e:	4295      	cmp	r5, r2
    7470:	d217      	bcs.n	74a2 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    7472:	9303      	str	r3, [sp, #12]
    7474:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    7478:	462a      	mov	r2, r5
    747a:	f7fe fdbf 	bl	5ffc <memcpy>
			tx_available -= size;
    747e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    7480:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    7484:	1b5b      	subs	r3, r3, r5
    7486:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    748a:	4b3d      	ldr	r3, [pc, #244]	; (7580 <usb_serial_write.part.0+0x1ac>)
    748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    7490:	f3bf 8f4f 	dsb	sy
			sent += size;
    7494:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    7496:	2300      	movs	r3, #0
			sent += size;
    7498:	4428      	add	r0, r5
		tx_noautoflush = 0;
    749a:	7023      	strb	r3, [r4, #0]
}
    749c:	b005      	add	sp, #20
    749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    74a2:	4b36      	ldr	r3, [pc, #216]	; (757c <usb_serial_write.part.0+0x1a8>)
    74a4:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    74a6:	9902      	ldr	r1, [sp, #8]
    74a8:	f7fe fda8 	bl	5ffc <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    74ac:	2300      	movs	r3, #0
    74ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    74b2:	4629      	mov	r1, r5
    74b4:	4648      	mov	r0, r9
    74b6:	f7ff fe43 	bl	7140 <usb_prepare_transfer>
	asm("dsb");
    74ba:	f3bf 8f4f 	dsb	sy
    74be:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    74c2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    74c6:	4293      	cmp	r3, r2
    74c8:	bf34      	ite	cc
    74ca:	2301      	movcc	r3, #1
    74cc:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    74ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    74d2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    74d6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    74da:	3520      	adds	r5, #32
	} while (location < end_addr);
    74dc:	42ab      	cmp	r3, r5
    74de:	d1fa      	bne.n	74d6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    74e0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    74e4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    74e8:	2004      	movs	r0, #4
    74ea:	4649      	mov	r1, r9
    74ec:	f7ff fe40 	bl	7170 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    74f0:	4a20      	ldr	r2, [pc, #128]	; (7574 <usb_serial_write.part.0+0x1a0>)
    74f2:	7813      	ldrb	r3, [r2, #0]
    74f4:	3301      	adds	r3, #1
    74f6:	b2db      	uxtb	r3, r3
    74f8:	2b03      	cmp	r3, #3
    74fa:	bf84      	itt	hi
    74fc:	2300      	movhi	r3, #0
    74fe:	4a1d      	ldrhi	r2, [pc, #116]	; (7574 <usb_serial_write.part.0+0x1a0>)
    7500:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    7502:	f8b8 3000 	ldrh.w	r3, [r8]
    7506:	9a01      	ldr	r2, [sp, #4]
    7508:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    750a:	9a00      	ldr	r2, [sp, #0]
    750c:	441a      	add	r2, r3
			size -= tx_available;
    750e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    7510:	9200      	str	r2, [sp, #0]
			data += tx_available;
    7512:	9a02      	ldr	r2, [sp, #8]
    7514:	441a      	add	r2, r3
			tx_available = 0;
    7516:	2300      	movs	r3, #0
			data += tx_available;
    7518:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    751a:	4a19      	ldr	r2, [pc, #100]	; (7580 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    751c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    7520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    7524:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    7528:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    752a:	2900      	cmp	r1, #0
    752c:	f47f af62 	bne.w	73f4 <usb_serial_write.part.0+0x20>
	return sent;
    7530:	9800      	ldr	r0, [sp, #0]
}
    7532:	b005      	add	sp, #20
    7534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    7538:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    753c:	4b0d      	ldr	r3, [pc, #52]	; (7574 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    753e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7542:	7819      	ldrb	r1, [r3, #0]
				break;
    7544:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    7546:	f8a8 2000 	strh.w	r2, [r8]
				break;
    754a:	e78a      	b.n	7462 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    754c:	2301      	movs	r3, #1
				return sent;
    754e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    7550:	f88a 3000 	strb.w	r3, [sl]
}
    7554:	b005      	add	sp, #20
    7556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    755a:	461a      	mov	r2, r3
    755c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    7560:	e77f      	b.n	7462 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    7562:	9801      	ldr	r0, [sp, #4]
	return sent;
    7564:	e7e5      	b.n	7532 <usb_serial_write.part.0+0x15e>
    7566:	bf00      	nop
    7568:	20004194 	.word	0x20004194
    756c:	20004168 	.word	0x20004168
    7570:	20003c00 	.word	0x20003c00
    7574:	20004193 	.word	0x20004193
    7578:	20004196 	.word	0x20004196
    757c:	20201080 	.word	0x20201080
    7580:	402e0000 	.word	0x402e0000
    7584:	20004186 	.word	0x20004186
    7588:	20004192 	.word	0x20004192

0000758c <usb_serial_reset>:
}
    758c:	4770      	bx	lr
    758e:	bf00      	nop

00007590 <usb_serial_configure>:
	if (usb_high_speed) {
    7590:	4b2d      	ldr	r3, [pc, #180]	; (7648 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    7592:	2100      	movs	r1, #0
    7594:	2280      	movs	r2, #128	; 0x80
    7596:	482d      	ldr	r0, [pc, #180]	; (764c <usb_serial_configure+0xbc>)
{
    7598:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    759a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    759c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    759e:	4d2c      	ldr	r5, [pc, #176]	; (7650 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    75a0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    75a2:	4e2c      	ldr	r6, [pc, #176]	; (7654 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    75a4:	bf0c      	ite	eq
    75a6:	2340      	moveq	r3, #64	; 0x40
    75a8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    75ac:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    75ae:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    75b0:	f001 fa54 	bl	8a5c <memset>
	tx_head = 0;
    75b4:	4a28      	ldr	r2, [pc, #160]	; (7658 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    75b6:	4621      	mov	r1, r4
	tx_available = 0;
    75b8:	4b28      	ldr	r3, [pc, #160]	; (765c <usb_serial_configure+0xcc>)
	tx_head = 0;
    75ba:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    75bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    75c0:	4827      	ldr	r0, [pc, #156]	; (7660 <usb_serial_configure+0xd0>)
	tx_available = 0;
    75c2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    75c4:	f001 fa4a 	bl	8a5c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    75c8:	4a26      	ldr	r2, [pc, #152]	; (7664 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    75ca:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    75cc:	4b26      	ldr	r3, [pc, #152]	; (7668 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    75ce:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    75d0:	e9c2 4400 	strd	r4, r4, [r2]
    75d4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    75d8:	4a24      	ldr	r2, [pc, #144]	; (766c <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    75da:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    75de:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    75e0:	4a23      	ldr	r2, [pc, #140]	; (7670 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    75e2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    75e6:	4b23      	ldr	r3, [pc, #140]	; (7674 <usb_serial_configure+0xe4>)
    75e8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    75ea:	4623      	mov	r3, r4
	rx_available = 0;
    75ec:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    75ee:	4622      	mov	r2, r4
    75f0:	f7ff fd74 	bl	70dc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    75f4:	4622      	mov	r2, r4
    75f6:	8831      	ldrh	r1, [r6, #0]
    75f8:	2003      	movs	r0, #3
    75fa:	4b1f      	ldr	r3, [pc, #124]	; (7678 <usb_serial_configure+0xe8>)
    75fc:	f7ff fd3c 	bl	7078 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    7600:	4623      	mov	r3, r4
    7602:	2201      	movs	r2, #1
    7604:	8829      	ldrh	r1, [r5, #0]
    7606:	2004      	movs	r0, #4
    7608:	f7ff fd68 	bl	70dc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    760c:	4620      	mov	r0, r4
    760e:	3401      	adds	r4, #1
    7610:	f7ff fe0e 	bl	7230 <rx_queue_transfer>
    7614:	2c08      	cmp	r4, #8
    7616:	d1f9      	bne.n	760c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    7618:	4b18      	ldr	r3, [pc, #96]	; (767c <usb_serial_configure+0xec>)
    761a:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    761c:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    761e:	4818      	ldr	r0, [pc, #96]	; (7680 <usb_serial_configure+0xf0>)
    7620:	4c18      	ldr	r4, [pc, #96]	; (7684 <usb_serial_configure+0xf4>)
    7622:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    7624:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    7628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    762c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    7630:	4915      	ldr	r1, [pc, #84]	; (7688 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    7632:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    7636:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    763a:	b121      	cbz	r1, 7646 <usb_serial_configure+0xb6>
    763c:	4a13      	ldr	r2, [pc, #76]	; (768c <usb_serial_configure+0xfc>)
    763e:	7813      	ldrb	r3, [r2, #0]
    7640:	f043 0301 	orr.w	r3, r3, #1
    7644:	7013      	strb	r3, [r2, #0]
}
    7646:	bd70      	pop	{r4, r5, r6, pc}
    7648:	20004197 	.word	0x20004197
    764c:	20003c00 	.word	0x20003c00
    7650:	20004188 	.word	0x20004188
    7654:	20004184 	.word	0x20004184
    7658:	20004193 	.word	0x20004193
    765c:	20004186 	.word	0x20004186
    7660:	20003b00 	.word	0x20003b00
    7664:	20004124 	.word	0x20004124
    7668:	20004134 	.word	0x20004134
    766c:	2000418f 	.word	0x2000418f
    7670:	20004120 	.word	0x20004120
    7674:	20004190 	.word	0x20004190
    7678:	00007291 	.word	0x00007291
    767c:	402e0000 	.word	0x402e0000
    7680:	2000417c 	.word	0x2000417c
    7684:	00007345 	.word	0x00007345
    7688:	00000000 	.word	0x00000000
    768c:	20004199 	.word	0x20004199

00007690 <usb_serial_read>:
{
    7690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7694:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7698:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    769c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 7768 <usb_serial_read+0xd8>
{
    76a0:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    76a2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    76a6:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    76a8:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    76ac:	2900      	cmp	r1, #0
    76ae:	d04f      	beq.n	7750 <usb_serial_read+0xc0>
    76b0:	4680      	mov	r8, r0
    76b2:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    76b4:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    76b6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 776c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    76ba:	4b26      	ldr	r3, [pc, #152]	; (7754 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    76bc:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    76c0:	4925      	ldr	r1, [pc, #148]	; (7758 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    76c2:	781b      	ldrb	r3, [r3, #0]
    76c4:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    76c6:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    76ca:	d03f      	beq.n	774c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    76cc:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    76ce:	4b23      	ldr	r3, [pc, #140]	; (775c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    76d0:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    76d2:	bf28      	it	cs
    76d4:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    76d6:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    76d8:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    76dc:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    76e0:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    76e2:	4b1f      	ldr	r3, [pc, #124]	; (7760 <usb_serial_read+0xd0>)
    76e4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    76e8:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    76ec:	42aa      	cmp	r2, r5
    76ee:	d21c      	bcs.n	772a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    76f0:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    76f4:	4918      	ldr	r1, [pc, #96]	; (7758 <usb_serial_read+0xc8>)
			rx_available -= len;
    76f6:	4c1b      	ldr	r4, [pc, #108]	; (7764 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    76f8:	4461      	add	r1, ip
    76fa:	9201      	str	r2, [sp, #4]
    76fc:	f7fe fc7e 	bl	5ffc <memcpy>
			rx_available -= len;
    7700:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    7702:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    7706:	4658      	mov	r0, fp
			rx_index[i] += len;
    7708:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    770a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    770e:	442a      	add	r2, r5
			rx_available -= len;
    7710:	4439      	add	r1, r7
			rx_index[i] += len;
    7712:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    7716:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    7718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    771c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7720:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    7724:	b003      	add	sp, #12
    7726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    772a:	462a      	mov	r2, r5
			count += avail;
    772c:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    772e:	f7fe fc65 	bl	5ffc <memcpy>
			rx_available -= avail;
    7732:	490c      	ldr	r1, [pc, #48]	; (7764 <usb_serial_read+0xd4>)
			rx_tail = tail;
    7734:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    7736:	4630      	mov	r0, r6
			rx_available -= avail;
    7738:	680a      	ldr	r2, [r1, #0]
			p += avail;
    773a:	44a8      	add	r8, r5
			rx_available -= avail;
    773c:	1b52      	subs	r2, r2, r5
    773e:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    7740:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    7744:	f7ff fd74 	bl	7230 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    7748:	45bb      	cmp	fp, r7
    774a:	d8b6      	bhi.n	76ba <usb_serial_read+0x2a>
	return count;
    774c:	4638      	mov	r0, r7
    774e:	e7e3      	b.n	7718 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    7750:	4608      	mov	r0, r1
    7752:	e7e1      	b.n	7718 <usb_serial_read+0x88>
    7754:	2000418f 	.word	0x2000418f
    7758:	20200080 	.word	0x20200080
    775c:	20004144 	.word	0x20004144
    7760:	20004124 	.word	0x20004124
    7764:	20004120 	.word	0x20004120
    7768:	20004190 	.word	0x20004190
    776c:	20004134 	.word	0x20004134

00007770 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    7770:	4b0b      	ldr	r3, [pc, #44]	; (77a0 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    7772:	4a0c      	ldr	r2, [pc, #48]	; (77a4 <usb_serial_peekchar+0x34>)
    7774:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    7776:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    7778:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    777a:	428a      	cmp	r2, r1
    777c:	d00d      	beq.n	779a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    777e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    7780:	4809      	ldr	r0, [pc, #36]	; (77a8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    7782:	4a0a      	ldr	r2, [pc, #40]	; (77ac <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    7784:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    7786:	490a      	ldr	r1, [pc, #40]	; (77b0 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    7788:	bf28      	it	cs
    778a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    778c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    778e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    7792:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    7796:	5c58      	ldrb	r0, [r3, r1]
    7798:	4770      	bx	lr
	if (tail == rx_head) return -1;
    779a:	f04f 30ff 	mov.w	r0, #4294967295
}
    779e:	4770      	bx	lr
    77a0:	2000418f 	.word	0x2000418f
    77a4:	20004190 	.word	0x20004190
    77a8:	20004144 	.word	0x20004144
    77ac:	20200080 	.word	0x20200080
    77b0:	20004134 	.word	0x20004134

000077b4 <usb_serial_available>:
	uint32_t n = rx_available;
    77b4:	4b04      	ldr	r3, [pc, #16]	; (77c8 <usb_serial_available+0x14>)
{
    77b6:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    77b8:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    77ba:	b10c      	cbz	r4, 77c0 <usb_serial_available+0xc>
}
    77bc:	4620      	mov	r0, r4
    77be:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    77c0:	f000 f8e0 	bl	7984 <yield>
}
    77c4:	4620      	mov	r0, r4
    77c6:	bd10      	pop	{r4, pc}
    77c8:	20004120 	.word	0x20004120

000077cc <usb_serial_flush_input>:
{
    77cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    77d0:	4e14      	ldr	r6, [pc, #80]	; (7824 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    77d2:	4d15      	ldr	r5, [pc, #84]	; (7828 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    77d4:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    77d6:	782a      	ldrb	r2, [r5, #0]
    77d8:	4293      	cmp	r3, r2
    77da:	d021      	beq.n	7820 <usb_serial_flush_input+0x54>
    77dc:	b2dc      	uxtb	r4, r3
    77de:	f8df 9050 	ldr.w	r9, [pc, #80]	; 7830 <usb_serial_flush_input+0x64>
    77e2:	f8df b050 	ldr.w	fp, [pc, #80]	; 7834 <usb_serial_flush_input+0x68>
    77e6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 7838 <usb_serial_flush_input+0x6c>
    77ea:	4f10      	ldr	r7, [pc, #64]	; (782c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    77ec:	3401      	adds	r4, #1
    77ee:	2c08      	cmp	r4, #8
		rx_tail = tail;
    77f0:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    77f4:	d901      	bls.n	77fa <usb_serial_flush_input+0x2e>
    77f6:	2400      	movs	r4, #0
    77f8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    77fa:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    77fe:	f8db 3000 	ldr.w	r3, [fp]
    7802:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    7806:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    780a:	1a52      	subs	r2, r2, r1
    780c:	1a9b      	subs	r3, r3, r2
    780e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    7812:	f7ff fd0d 	bl	7230 <rx_queue_transfer>
		rx_tail = tail;
    7816:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    781a:	782b      	ldrb	r3, [r5, #0]
    781c:	42a3      	cmp	r3, r4
    781e:	d1e5      	bne.n	77ec <usb_serial_flush_input+0x20>
}
    7820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7824:	20004190 	.word	0x20004190
    7828:	2000418f 	.word	0x2000418f
    782c:	20004134 	.word	0x20004134
    7830:	20004144 	.word	0x20004144
    7834:	20004120 	.word	0x20004120
    7838:	20004124 	.word	0x20004124

0000783c <usb_serial_getchar>:
{
    783c:	b500      	push	{lr}
    783e:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    7840:	2101      	movs	r1, #1
    7842:	f10d 0007 	add.w	r0, sp, #7
    7846:	f7ff ff23 	bl	7690 <usb_serial_read>
    784a:	b120      	cbz	r0, 7856 <usb_serial_getchar+0x1a>
    784c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    7850:	b003      	add	sp, #12
    7852:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    7856:	f04f 30ff 	mov.w	r0, #4294967295
    785a:	e7f9      	b.n	7850 <usb_serial_getchar+0x14>

0000785c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    785c:	4b09      	ldr	r3, [pc, #36]	; (7884 <usb_serial_putchar+0x28>)
{
    785e:	b500      	push	{lr}
    7860:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    7862:	781b      	ldrb	r3, [r3, #0]
{
    7864:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    7868:	b13b      	cbz	r3, 787a <usb_serial_putchar+0x1e>
    786a:	2101      	movs	r1, #1
    786c:	f10d 0007 	add.w	r0, sp, #7
    7870:	f7ff fdb0 	bl	73d4 <usb_serial_write.part.0>
}
    7874:	b003      	add	sp, #12
    7876:	f85d fb04 	ldr.w	pc, [sp], #4
    787a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    787e:	b003      	add	sp, #12
    7880:	f85d fb04 	ldr.w	pc, [sp], #4
    7884:	20004196 	.word	0x20004196

00007888 <usb_serial_write>:
	if (!usb_configuration) return 0;
    7888:	4b04      	ldr	r3, [pc, #16]	; (789c <usb_serial_write+0x14>)
    788a:	781b      	ldrb	r3, [r3, #0]
    788c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7890:	b10b      	cbz	r3, 7896 <usb_serial_write+0xe>
    7892:	f7ff bd9f 	b.w	73d4 <usb_serial_write.part.0>
}
    7896:	4610      	mov	r0, r2
    7898:	4770      	bx	lr
    789a:	bf00      	nop
    789c:	20004196 	.word	0x20004196

000078a0 <usb_serial_write_buffer_free>:
{
    78a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    78a4:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    78a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 78ec <usb_serial_write_buffer_free+0x4c>
    78aa:	2301      	movs	r3, #1
    78ac:	4d0d      	ldr	r5, [pc, #52]	; (78e4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    78ae:	4627      	mov	r7, r4
    78b0:	4e0d      	ldr	r6, [pc, #52]	; (78e8 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    78b2:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    78b6:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    78b8:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    78ba:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    78bc:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    78be:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    78c2:	d005      	beq.n	78d0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    78c4:	f7ff fc76 	bl	71b4 <usb_transfer_status>
    78c8:	0603      	lsls	r3, r0, #24
    78ca:	bf58      	it	pl
    78cc:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    78d0:	2c04      	cmp	r4, #4
    78d2:	d1f0      	bne.n	78b6 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    78d4:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    78d8:	2300      	movs	r3, #0
}
    78da:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    78dc:	f888 3000 	strb.w	r3, [r8]
}
    78e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78e4:	20003c00 	.word	0x20003c00
    78e8:	20004193 	.word	0x20004193
    78ec:	20004194 	.word	0x20004194

000078f0 <usb_serial_flush_output>:
{
    78f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    78f4:	4b1d      	ldr	r3, [pc, #116]	; (796c <usb_serial_flush_output+0x7c>)
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	b113      	cbz	r3, 7900 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    78fa:	4d1d      	ldr	r5, [pc, #116]	; (7970 <usb_serial_flush_output+0x80>)
    78fc:	882a      	ldrh	r2, [r5, #0]
    78fe:	b90a      	cbnz	r2, 7904 <usb_serial_flush_output+0x14>
}
    7900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    7904:	4e1b      	ldr	r6, [pc, #108]	; (7974 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    7906:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    790a:	491b      	ldr	r1, [pc, #108]	; (7978 <usb_serial_flush_output+0x88>)
    790c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    790e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7910:	4c1a      	ldr	r4, [pc, #104]	; (797c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    7912:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    7916:	4f1a      	ldr	r7, [pc, #104]	; (7980 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7918:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    791c:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    791e:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    7920:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7922:	4621      	mov	r1, r4
    7924:	2300      	movs	r3, #0
    7926:	f7ff fc0b 	bl	7140 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    792a:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    792e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7932:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7936:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    793a:	3420      	adds	r4, #32
	} while (location < end_addr);
    793c:	42a2      	cmp	r2, r4
    793e:	d8fa      	bhi.n	7936 <usb_serial_flush_output+0x46>
	asm("dsb");
    7940:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7944:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    7948:	2004      	movs	r0, #4
    794a:	4641      	mov	r1, r8
    794c:	f7ff fc10 	bl	7170 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7950:	7833      	ldrb	r3, [r6, #0]
    7952:	3301      	adds	r3, #1
    7954:	b2db      	uxtb	r3, r3
    7956:	2b03      	cmp	r3, #3
    7958:	bf88      	it	hi
    795a:	2300      	movhi	r3, #0
    795c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    795e:	2300      	movs	r3, #0
    7960:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    7962:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    7966:	703b      	strb	r3, [r7, #0]
}
    7968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    796c:	20004196 	.word	0x20004196
    7970:	20004186 	.word	0x20004186
    7974:	20004193 	.word	0x20004193
    7978:	20003c00 	.word	0x20003c00
    797c:	20201080 	.word	0x20201080
    7980:	20004194 	.word	0x20004194

00007984 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    7984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    7988:	4b2d      	ldr	r3, [pc, #180]	; (7a40 <yield+0xbc>)
    798a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    798c:	b166      	cbz	r6, 79a8 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    798e:	4f2d      	ldr	r7, [pc, #180]	; (7a44 <yield+0xc0>)
    7990:	783b      	ldrb	r3, [r7, #0]
    7992:	b94b      	cbnz	r3, 79a8 <yield+0x24>
	running = 1;
    7994:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    7996:	07f1      	lsls	r1, r6, #31
	running = 1;
    7998:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    799a:	d443      	bmi.n	7a24 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    799c:	07b2      	lsls	r2, r6, #30
    799e:	d426      	bmi.n	79ee <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    79a0:	2300      	movs	r3, #0
    79a2:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    79a4:	0773      	lsls	r3, r6, #29
    79a6:	d401      	bmi.n	79ac <yield+0x28>
		EventResponder::runFromYield();
	}
};
    79a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    79ac:	4b26      	ldr	r3, [pc, #152]	; (7a48 <yield+0xc4>)
    79ae:	681a      	ldr	r2, [r3, #0]
    79b0:	2a00      	cmp	r2, #0
    79b2:	d0f9      	beq.n	79a8 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    79b4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    79b8:	2a00      	cmp	r2, #0
    79ba:	d1f5      	bne.n	79a8 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    79bc:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    79c0:	b672      	cpsid	i
		EventResponder *first = firstYield;
    79c2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    79c4:	2800      	cmp	r0, #0
    79c6:	d034      	beq.n	7a32 <yield+0xae>
		if (runningFromYield) {
    79c8:	4c20      	ldr	r4, [pc, #128]	; (7a4c <yield+0xc8>)
    79ca:	7821      	ldrb	r1, [r4, #0]
    79cc:	2900      	cmp	r1, #0
    79ce:	d130      	bne.n	7a32 <yield+0xae>
		runningFromYield = true;
    79d0:	2201      	movs	r2, #1
    79d2:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    79d4:	6942      	ldr	r2, [r0, #20]
    79d6:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    79d8:	2a00      	cmp	r2, #0
    79da:	d02e      	beq.n	7a3a <yield+0xb6>
			firstYield->_prev = nullptr;
    79dc:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    79de:	b905      	cbnz	r5, 79e2 <yield+0x5e>
    79e0:	b662      	cpsie	i
		first->_triggered = false;
    79e2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    79e4:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    79e6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    79e8:	4798      	blx	r3
		runningFromYield = false;
    79ea:	7025      	strb	r5, [r4, #0]
    79ec:	e7dc      	b.n	79a8 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    79ee:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7a54 <yield+0xd0>
    79f2:	f898 3000 	ldrb.w	r3, [r8]
    79f6:	2b00      	cmp	r3, #0
    79f8:	d0d2      	beq.n	79a0 <yield+0x1c>
    79fa:	2500      	movs	r5, #0
    79fc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7a58 <yield+0xd4>
    7a00:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    7a02:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    7a06:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    7a08:	6823      	ldr	r3, [r4, #0]
    7a0a:	4620      	mov	r0, r4
    7a0c:	691b      	ldr	r3, [r3, #16]
    7a0e:	4798      	blx	r3
    7a10:	b110      	cbz	r0, 7a18 <yield+0x94>
    7a12:	6963      	ldr	r3, [r4, #20]
    7a14:	689b      	ldr	r3, [r3, #8]
    7a16:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    7a18:	f898 2000 	ldrb.w	r2, [r8]
    7a1c:	b2eb      	uxtb	r3, r5
    7a1e:	429a      	cmp	r2, r3
    7a20:	d8ef      	bhi.n	7a02 <yield+0x7e>
    7a22:	e7bd      	b.n	79a0 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    7a24:	f7ff fec6 	bl	77b4 <usb_serial_available>
		if (Serial.available()) serialEvent();
    7a28:	2800      	cmp	r0, #0
    7a2a:	d0b7      	beq.n	799c <yield+0x18>
    7a2c:	f3af 8000 	nop.w
    7a30:	e7b4      	b.n	799c <yield+0x18>
		if (doit) __enable_irq();
    7a32:	2d00      	cmp	r5, #0
    7a34:	d1b8      	bne.n	79a8 <yield+0x24>
    7a36:	b662      	cpsie	i
    7a38:	e7b6      	b.n	79a8 <yield+0x24>
			lastYield = nullptr;
    7a3a:	4b05      	ldr	r3, [pc, #20]	; (7a50 <yield+0xcc>)
    7a3c:	601a      	str	r2, [r3, #0]
    7a3e:	e7ce      	b.n	79de <yield+0x5a>
    7a40:	20004199 	.word	0x20004199
    7a44:	2000418c 	.word	0x2000418c
    7a48:	20003cf8 	.word	0x20003cf8
    7a4c:	2000418a 	.word	0x2000418a
    7a50:	20003d04 	.word	0x20003d04
    7a54:	2000418b 	.word	0x2000418b
    7a58:	20003d08 	.word	0x20003d08

00007a5c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    7a5c:	4a07      	ldr	r2, [pc, #28]	; (7a7c <rtc_get+0x20>)
    7a5e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    7a60:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    7a62:	4619      	mov	r1, r3
    7a64:	4684      	mov	ip, r0
    7a66:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    7a68:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    7a6a:	4299      	cmp	r1, r3
    7a6c:	d1f9      	bne.n	7a62 <rtc_get+0x6>
    7a6e:	4584      	cmp	ip, r0
    7a70:	d1f7      	bne.n	7a62 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    7a72:	0bdb      	lsrs	r3, r3, #15
}
    7a74:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    7a78:	4770      	bx	lr
    7a7a:	bf00      	nop
    7a7c:	400d4000 	.word	0x400d4000

00007a80 <sm_align_pool>:
{
    7a80:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    7a82:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    7a86:	b15b      	cbz	r3, 7aa0 <sm_align_pool+0x20>
    7a88:	b1ba      	cbz	r2, 7aba <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    7a8a:	4b0f      	ldr	r3, [pc, #60]	; (7ac8 <sm_align_pool+0x48>)
    7a8c:	fba3 1302 	umull	r1, r3, r3, r2
    7a90:	08db      	lsrs	r3, r3, #3
    7a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7a96:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    7a9a:	d10a      	bne.n	7ab2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    7a9c:	2001      	movs	r0, #1
}
    7a9e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    7aa0:	4b09      	ldr	r3, [pc, #36]	; (7ac8 <sm_align_pool+0x48>)
    7aa2:	fba3 1302 	umull	r1, r3, r3, r2
    7aa6:	08db      	lsrs	r3, r3, #3
    7aa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    7aac:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    7ab0:	d001      	beq.n	7ab6 <sm_align_pool+0x36>
    7ab2:	1ad2      	subs	r2, r2, r3
    7ab4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    7ab6:	2af0      	cmp	r2, #240	; 0xf0
    7ab8:	d8f0      	bhi.n	7a9c <sm_align_pool+0x1c>
		errno = ENOSPC;
    7aba:	f001 f8bf 	bl	8c3c <__errno>
    7abe:	221c      	movs	r2, #28
    7ac0:	4603      	mov	r3, r0
    7ac2:	2000      	movs	r0, #0
    7ac4:	601a      	str	r2, [r3, #0]
}
    7ac6:	bd08      	pop	{r3, pc}
    7ac8:	aaaaaaab 	.word	0xaaaaaaab

00007acc <sm_set_pool>:
{
    7acc:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    7ace:	4604      	mov	r4, r0
    7ad0:	b338      	cbz	r0, 7b22 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    7ad2:	b119      	cbz	r1, 7adc <sm_set_pool+0x10>
    7ad4:	fab2 f682 	clz	r6, r2
    7ad8:	0976      	lsrs	r6, r6, #5
    7ada:	b9a2      	cbnz	r2, 7b06 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    7adc:	6820      	ldr	r0, [r4, #0]
    7ade:	b300      	cbz	r0, 7b22 <sm_set_pool+0x56>
    7ae0:	6862      	ldr	r2, [r4, #4]
    7ae2:	b1f2      	cbz	r2, 7b22 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    7ae4:	4b18      	ldr	r3, [pc, #96]	; (7b48 <sm_set_pool+0x7c>)
    7ae6:	4919      	ldr	r1, [pc, #100]	; (7b4c <sm_set_pool+0x80>)
    7ae8:	fb02 f303 	mul.w	r3, r2, r3
    7aec:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    7af0:	d317      	bcc.n	7b22 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    7af2:	68a3      	ldr	r3, [r4, #8]
    7af4:	b9e3      	cbnz	r3, 7b30 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    7af6:	2200      	movs	r2, #0
			return 1;
    7af8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    7afa:	6022      	str	r2, [r4, #0]
    7afc:	6062      	str	r2, [r4, #4]
    7afe:	60a2      	str	r2, [r4, #8]
    7b00:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    7b02:	4618      	mov	r0, r3
    7b04:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    7b06:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    7b08:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    7b0a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    7b0e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    7b10:	f7ff ffb6 	bl	7a80 <sm_align_pool>
    7b14:	4603      	mov	r3, r0
    7b16:	2800      	cmp	r0, #0
    7b18:	d0f3      	beq.n	7b02 <sm_set_pool+0x36>
	if (do_zero) {
    7b1a:	b96d      	cbnz	r5, 7b38 <sm_set_pool+0x6c>
	return 1;
    7b1c:	2301      	movs	r3, #1
}
    7b1e:	4618      	mov	r0, r3
    7b20:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    7b22:	f001 f88b 	bl	8c3c <__errno>
    7b26:	2216      	movs	r2, #22
		return 0;
    7b28:	2300      	movs	r3, #0
		errno = EINVAL;
    7b2a:	6002      	str	r2, [r0, #0]
}
    7b2c:	4618      	mov	r0, r3
    7b2e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    7b30:	2100      	movs	r1, #0
    7b32:	f000 ff93 	bl	8a5c <memset>
    7b36:	e7de      	b.n	7af6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    7b38:	6862      	ldr	r2, [r4, #4]
    7b3a:	4631      	mov	r1, r6
    7b3c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    7b3e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    7b40:	f000 ff8c 	bl	8a5c <memset>
	return 1;
    7b44:	2301      	movs	r3, #1
    7b46:	e7dc      	b.n	7b02 <sm_set_pool+0x36>
    7b48:	aaaaaaab 	.word	0xaaaaaaab
    7b4c:	15555555 	.word	0x15555555

00007b50 <lround>:
    7b50:	ec53 2b10 	vmov	r2, r3, d0
    7b54:	1e18      	subs	r0, r3, #0
    7b56:	f3c0 510a 	ubfx	r1, r0, #20, #11
    7b5a:	b500      	push	{lr}
    7b5c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
    7b60:	f3c0 0c13 	ubfx	ip, r0, #0, #20
    7b64:	bfb4      	ite	lt
    7b66:	f04f 30ff 	movlt.w	r0, #4294967295
    7b6a:	2001      	movge	r0, #1
    7b6c:	f1be 0f13 	cmp.w	lr, #19
    7b70:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
    7b74:	dc0f      	bgt.n	7b96 <lround+0x46>
    7b76:	f1be 0f00 	cmp.w	lr, #0
    7b7a:	db25      	blt.n	7bc8 <lround+0x78>
    7b7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    7b80:	fa41 f10e 	asr.w	r1, r1, lr
    7b84:	4461      	add	r1, ip
    7b86:	f1ce 0e14 	rsb	lr, lr, #20
    7b8a:	fa21 f10e 	lsr.w	r1, r1, lr
    7b8e:	fb01 f000 	mul.w	r0, r1, r0
    7b92:	f85d fb04 	ldr.w	pc, [sp], #4
    7b96:	f1be 0f1e 	cmp.w	lr, #30
    7b9a:	d81b      	bhi.n	7bd4 <lround+0x84>
    7b9c:	f1be 0f33 	cmp.w	lr, #51	; 0x33
    7ba0:	dc1e      	bgt.n	7be0 <lround+0x90>
    7ba2:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
    7ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    7baa:	40cb      	lsrs	r3, r1
    7bac:	189b      	adds	r3, r3, r2
    7bae:	bf28      	it	cs
    7bb0:	f10c 0c01 	addcs.w	ip, ip, #1
    7bb4:	f1be 0f14 	cmp.w	lr, #20
    7bb8:	fa0c f101 	lsl.w	r1, ip, r1
    7bbc:	f1ce 0234 	rsb	r2, lr, #52	; 0x34
    7bc0:	d0e5      	beq.n	7b8e <lround+0x3e>
    7bc2:	40d3      	lsrs	r3, r2
    7bc4:	4319      	orrs	r1, r3
    7bc6:	e7e2      	b.n	7b8e <lround+0x3e>
    7bc8:	f1be 3fff 	cmp.w	lr, #4294967295
    7bcc:	bf18      	it	ne
    7bce:	2000      	movne	r0, #0
    7bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    7bd4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    7bd8:	ee17 0a90 	vmov	r0, s15
    7bdc:	f85d fb04 	ldr.w	pc, [sp], #4
    7be0:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
    7be4:	f2a1 4133 	subw	r1, r1, #1075	; 0x433
    7be8:	fa0c f303 	lsl.w	r3, ip, r3
    7bec:	408a      	lsls	r2, r1
    7bee:	ea43 0102 	orr.w	r1, r3, r2
    7bf2:	e7cc      	b.n	7b8e <lround+0x3e>

00007bf4 <__aeabi_atexit>:
    7bf4:	4603      	mov	r3, r0
    7bf6:	4608      	mov	r0, r1
    7bf8:	4619      	mov	r1, r3
    7bfa:	f000 bd01 	b.w	8600 <__cxa_atexit>
    7bfe:	bf00      	nop

00007c00 <calloc>:
    7c00:	b410      	push	{r4}
    7c02:	4c04      	ldr	r4, [pc, #16]	; (7c14 <calloc+0x14>)
    7c04:	4603      	mov	r3, r0
    7c06:	460a      	mov	r2, r1
    7c08:	6820      	ldr	r0, [r4, #0]
    7c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c0e:	4619      	mov	r1, r3
    7c10:	f000 b802 	b.w	7c18 <_calloc_r>
    7c14:	20003414 	.word	0x20003414

00007c18 <_calloc_r>:
    7c18:	b538      	push	{r3, r4, r5, lr}
    7c1a:	fba1 1402 	umull	r1, r4, r1, r2
    7c1e:	bb8c      	cbnz	r4, 7c84 <_calloc_r+0x6c>
    7c20:	f000 f846 	bl	7cb0 <_malloc_r>
    7c24:	4605      	mov	r5, r0
    7c26:	b1e0      	cbz	r0, 7c62 <_calloc_r+0x4a>
    7c28:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7c2c:	f022 0203 	bic.w	r2, r2, #3
    7c30:	3a04      	subs	r2, #4
    7c32:	2a24      	cmp	r2, #36	; 0x24
    7c34:	d817      	bhi.n	7c66 <_calloc_r+0x4e>
    7c36:	2a13      	cmp	r2, #19
    7c38:	d91a      	bls.n	7c70 <_calloc_r+0x58>
    7c3a:	2a1b      	cmp	r2, #27
    7c3c:	e9c0 4400 	strd	r4, r4, [r0]
    7c40:	d91d      	bls.n	7c7e <_calloc_r+0x66>
    7c42:	2a24      	cmp	r2, #36	; 0x24
    7c44:	bf14      	ite	ne
    7c46:	f100 0210 	addne.w	r2, r0, #16
    7c4a:	f100 0218 	addeq.w	r2, r0, #24
    7c4e:	f04f 0300 	mov.w	r3, #0
    7c52:	e9c0 4402 	strd	r4, r4, [r0, #8]
    7c56:	bf04      	itt	eq
    7c58:	6104      	streq	r4, [r0, #16]
    7c5a:	6144      	streq	r4, [r0, #20]
    7c5c:	e9c2 3300 	strd	r3, r3, [r2]
    7c60:	6093      	str	r3, [r2, #8]
    7c62:	4628      	mov	r0, r5
    7c64:	bd38      	pop	{r3, r4, r5, pc}
    7c66:	4621      	mov	r1, r4
    7c68:	f000 fef8 	bl	8a5c <memset>
    7c6c:	4628      	mov	r0, r5
    7c6e:	bd38      	pop	{r3, r4, r5, pc}
    7c70:	4602      	mov	r2, r0
    7c72:	2300      	movs	r3, #0
    7c74:	e9c2 3300 	strd	r3, r3, [r2]
    7c78:	6093      	str	r3, [r2, #8]
    7c7a:	4628      	mov	r0, r5
    7c7c:	bd38      	pop	{r3, r4, r5, pc}
    7c7e:	f100 0208 	add.w	r2, r0, #8
    7c82:	e7f6      	b.n	7c72 <_calloc_r+0x5a>
    7c84:	f000 ffda 	bl	8c3c <__errno>
    7c88:	230c      	movs	r3, #12
    7c8a:	2500      	movs	r5, #0
    7c8c:	6003      	str	r3, [r0, #0]
    7c8e:	e7e8      	b.n	7c62 <_calloc_r+0x4a>

00007c90 <malloc>:
    7c90:	4b02      	ldr	r3, [pc, #8]	; (7c9c <malloc+0xc>)
    7c92:	4601      	mov	r1, r0
    7c94:	6818      	ldr	r0, [r3, #0]
    7c96:	f000 b80b 	b.w	7cb0 <_malloc_r>
    7c9a:	bf00      	nop
    7c9c:	20003414 	.word	0x20003414

00007ca0 <free>:
    7ca0:	4b02      	ldr	r3, [pc, #8]	; (7cac <free+0xc>)
    7ca2:	4601      	mov	r1, r0
    7ca4:	6818      	ldr	r0, [r3, #0]
    7ca6:	f001 b90d 	b.w	8ec4 <_free_r>
    7caa:	bf00      	nop
    7cac:	20003414 	.word	0x20003414

00007cb0 <_malloc_r>:
    7cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cb4:	f101 060b 	add.w	r6, r1, #11
    7cb8:	2e16      	cmp	r6, #22
    7cba:	b083      	sub	sp, #12
    7cbc:	4604      	mov	r4, r0
    7cbe:	d824      	bhi.n	7d0a <_malloc_r+0x5a>
    7cc0:	2910      	cmp	r1, #16
    7cc2:	f200 80ba 	bhi.w	7e3a <_malloc_r+0x18a>
    7cc6:	f000 faa3 	bl	8210 <__malloc_lock>
    7cca:	2610      	movs	r6, #16
    7ccc:	2218      	movs	r2, #24
    7cce:	2002      	movs	r0, #2
    7cd0:	4fb5      	ldr	r7, [pc, #724]	; (7fa8 <_malloc_r+0x2f8>)
    7cd2:	443a      	add	r2, r7
    7cd4:	f1a2 0108 	sub.w	r1, r2, #8
    7cd8:	6853      	ldr	r3, [r2, #4]
    7cda:	428b      	cmp	r3, r1
    7cdc:	f000 80ba 	beq.w	7e54 <_malloc_r+0x1a4>
    7ce0:	685a      	ldr	r2, [r3, #4]
    7ce2:	68d9      	ldr	r1, [r3, #12]
    7ce4:	f022 0203 	bic.w	r2, r2, #3
    7ce8:	441a      	add	r2, r3
    7cea:	689d      	ldr	r5, [r3, #8]
    7cec:	60e9      	str	r1, [r5, #12]
    7cee:	608d      	str	r5, [r1, #8]
    7cf0:	6851      	ldr	r1, [r2, #4]
    7cf2:	f041 0101 	orr.w	r1, r1, #1
    7cf6:	4620      	mov	r0, r4
    7cf8:	6051      	str	r1, [r2, #4]
    7cfa:	f103 0508 	add.w	r5, r3, #8
    7cfe:	f000 fa8d 	bl	821c <__malloc_unlock>
    7d02:	4628      	mov	r0, r5
    7d04:	b003      	add	sp, #12
    7d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d0a:	f036 0607 	bics.w	r6, r6, #7
    7d0e:	f100 8094 	bmi.w	7e3a <_malloc_r+0x18a>
    7d12:	42b1      	cmp	r1, r6
    7d14:	f200 8091 	bhi.w	7e3a <_malloc_r+0x18a>
    7d18:	f000 fa7a 	bl	8210 <__malloc_lock>
    7d1c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    7d20:	f0c0 819a 	bcc.w	8058 <_malloc_r+0x3a8>
    7d24:	0a73      	lsrs	r3, r6, #9
    7d26:	f000 808f 	beq.w	7e48 <_malloc_r+0x198>
    7d2a:	2b04      	cmp	r3, #4
    7d2c:	f200 816f 	bhi.w	800e <_malloc_r+0x35e>
    7d30:	09b3      	lsrs	r3, r6, #6
    7d32:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7d36:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    7d3a:	00c3      	lsls	r3, r0, #3
    7d3c:	4f9a      	ldr	r7, [pc, #616]	; (7fa8 <_malloc_r+0x2f8>)
    7d3e:	443b      	add	r3, r7
    7d40:	f1a3 0508 	sub.w	r5, r3, #8
    7d44:	685b      	ldr	r3, [r3, #4]
    7d46:	429d      	cmp	r5, r3
    7d48:	d106      	bne.n	7d58 <_malloc_r+0xa8>
    7d4a:	e00c      	b.n	7d66 <_malloc_r+0xb6>
    7d4c:	2900      	cmp	r1, #0
    7d4e:	f280 8127 	bge.w	7fa0 <_malloc_r+0x2f0>
    7d52:	68db      	ldr	r3, [r3, #12]
    7d54:	429d      	cmp	r5, r3
    7d56:	d006      	beq.n	7d66 <_malloc_r+0xb6>
    7d58:	685a      	ldr	r2, [r3, #4]
    7d5a:	f022 0203 	bic.w	r2, r2, #3
    7d5e:	1b91      	subs	r1, r2, r6
    7d60:	290f      	cmp	r1, #15
    7d62:	ddf3      	ble.n	7d4c <_malloc_r+0x9c>
    7d64:	4660      	mov	r0, ip
    7d66:	693d      	ldr	r5, [r7, #16]
    7d68:	f8df c250 	ldr.w	ip, [pc, #592]	; 7fbc <_malloc_r+0x30c>
    7d6c:	4565      	cmp	r5, ip
    7d6e:	d07c      	beq.n	7e6a <_malloc_r+0x1ba>
    7d70:	686a      	ldr	r2, [r5, #4]
    7d72:	f022 0203 	bic.w	r2, r2, #3
    7d76:	1b93      	subs	r3, r2, r6
    7d78:	2b0f      	cmp	r3, #15
    7d7a:	f300 817b 	bgt.w	8074 <_malloc_r+0x3c4>
    7d7e:	2b00      	cmp	r3, #0
    7d80:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    7d84:	f280 816c 	bge.w	8060 <_malloc_r+0x3b0>
    7d88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    7d8c:	f080 811a 	bcs.w	7fc4 <_malloc_r+0x314>
    7d90:	08d3      	lsrs	r3, r2, #3
    7d92:	6879      	ldr	r1, [r7, #4]
    7d94:	3301      	adds	r3, #1
    7d96:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    7d9a:	2201      	movs	r2, #1
    7d9c:	fa02 f20e 	lsl.w	r2, r2, lr
    7da0:	430a      	orrs	r2, r1
    7da2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    7da6:	f8c5 e008 	str.w	lr, [r5, #8]
    7daa:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    7dae:	3908      	subs	r1, #8
    7db0:	60e9      	str	r1, [r5, #12]
    7db2:	607a      	str	r2, [r7, #4]
    7db4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    7db8:	f8ce 500c 	str.w	r5, [lr, #12]
    7dbc:	1083      	asrs	r3, r0, #2
    7dbe:	2101      	movs	r1, #1
    7dc0:	4099      	lsls	r1, r3
    7dc2:	4291      	cmp	r1, r2
    7dc4:	d857      	bhi.n	7e76 <_malloc_r+0x1c6>
    7dc6:	4211      	tst	r1, r2
    7dc8:	d106      	bne.n	7dd8 <_malloc_r+0x128>
    7dca:	f020 0003 	bic.w	r0, r0, #3
    7dce:	0049      	lsls	r1, r1, #1
    7dd0:	4211      	tst	r1, r2
    7dd2:	f100 0004 	add.w	r0, r0, #4
    7dd6:	d0fa      	beq.n	7dce <_malloc_r+0x11e>
    7dd8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    7ddc:	464d      	mov	r5, r9
    7dde:	4686      	mov	lr, r0
    7de0:	f8d5 800c 	ldr.w	r8, [r5, #12]
    7de4:	4545      	cmp	r5, r8
    7de6:	d108      	bne.n	7dfa <_malloc_r+0x14a>
    7de8:	e11d      	b.n	8026 <_malloc_r+0x376>
    7dea:	2b00      	cmp	r3, #0
    7dec:	f280 8124 	bge.w	8038 <_malloc_r+0x388>
    7df0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    7df4:	4545      	cmp	r5, r8
    7df6:	f000 8116 	beq.w	8026 <_malloc_r+0x376>
    7dfa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7dfe:	f022 0203 	bic.w	r2, r2, #3
    7e02:	1b93      	subs	r3, r2, r6
    7e04:	2b0f      	cmp	r3, #15
    7e06:	ddf0      	ble.n	7dea <_malloc_r+0x13a>
    7e08:	4620      	mov	r0, r4
    7e0a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    7e0e:	eb08 0106 	add.w	r1, r8, r6
    7e12:	f046 0601 	orr.w	r6, r6, #1
    7e16:	f8c8 6004 	str.w	r6, [r8, #4]
    7e1a:	60ec      	str	r4, [r5, #12]
    7e1c:	60a5      	str	r5, [r4, #8]
    7e1e:	f043 0401 	orr.w	r4, r3, #1
    7e22:	e9c7 1104 	strd	r1, r1, [r7, #16]
    7e26:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    7e2a:	604c      	str	r4, [r1, #4]
    7e2c:	f848 3002 	str.w	r3, [r8, r2]
    7e30:	f000 f9f4 	bl	821c <__malloc_unlock>
    7e34:	f108 0508 	add.w	r5, r8, #8
    7e38:	e002      	b.n	7e40 <_malloc_r+0x190>
    7e3a:	230c      	movs	r3, #12
    7e3c:	6023      	str	r3, [r4, #0]
    7e3e:	2500      	movs	r5, #0
    7e40:	4628      	mov	r0, r5
    7e42:	b003      	add	sp, #12
    7e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e48:	f44f 7300 	mov.w	r3, #512	; 0x200
    7e4c:	2040      	movs	r0, #64	; 0x40
    7e4e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    7e52:	e773      	b.n	7d3c <_malloc_r+0x8c>
    7e54:	68d3      	ldr	r3, [r2, #12]
    7e56:	429a      	cmp	r2, r3
    7e58:	bf08      	it	eq
    7e5a:	3002      	addeq	r0, #2
    7e5c:	f47f af40 	bne.w	7ce0 <_malloc_r+0x30>
    7e60:	693d      	ldr	r5, [r7, #16]
    7e62:	f8df c158 	ldr.w	ip, [pc, #344]	; 7fbc <_malloc_r+0x30c>
    7e66:	4565      	cmp	r5, ip
    7e68:	d182      	bne.n	7d70 <_malloc_r+0xc0>
    7e6a:	687a      	ldr	r2, [r7, #4]
    7e6c:	1083      	asrs	r3, r0, #2
    7e6e:	2101      	movs	r1, #1
    7e70:	4099      	lsls	r1, r3
    7e72:	4291      	cmp	r1, r2
    7e74:	d9a7      	bls.n	7dc6 <_malloc_r+0x116>
    7e76:	68bd      	ldr	r5, [r7, #8]
    7e78:	686b      	ldr	r3, [r5, #4]
    7e7a:	f023 0903 	bic.w	r9, r3, #3
    7e7e:	454e      	cmp	r6, r9
    7e80:	d803      	bhi.n	7e8a <_malloc_r+0x1da>
    7e82:	eba9 0306 	sub.w	r3, r9, r6
    7e86:	2b0f      	cmp	r3, #15
    7e88:	dc7a      	bgt.n	7f80 <_malloc_r+0x2d0>
    7e8a:	f8df b134 	ldr.w	fp, [pc, #308]	; 7fc0 <_malloc_r+0x310>
    7e8e:	4b47      	ldr	r3, [pc, #284]	; (7fac <_malloc_r+0x2fc>)
    7e90:	f8db 2000 	ldr.w	r2, [fp]
    7e94:	681b      	ldr	r3, [r3, #0]
    7e96:	3201      	adds	r2, #1
    7e98:	4433      	add	r3, r6
    7e9a:	eb05 0a09 	add.w	sl, r5, r9
    7e9e:	f000 8133 	beq.w	8108 <_malloc_r+0x458>
    7ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    7ea6:	330f      	adds	r3, #15
    7ea8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    7eac:	f028 080f 	bic.w	r8, r8, #15
    7eb0:	4641      	mov	r1, r8
    7eb2:	4620      	mov	r0, r4
    7eb4:	f000 fe9a 	bl	8bec <_sbrk_r>
    7eb8:	1c41      	adds	r1, r0, #1
    7eba:	4602      	mov	r2, r0
    7ebc:	f000 80f3 	beq.w	80a6 <_malloc_r+0x3f6>
    7ec0:	4582      	cmp	sl, r0
    7ec2:	f200 80ee 	bhi.w	80a2 <_malloc_r+0x3f2>
    7ec6:	4b3a      	ldr	r3, [pc, #232]	; (7fb0 <_malloc_r+0x300>)
    7ec8:	6819      	ldr	r1, [r3, #0]
    7eca:	4441      	add	r1, r8
    7ecc:	6019      	str	r1, [r3, #0]
    7ece:	4608      	mov	r0, r1
    7ed0:	f000 814e 	beq.w	8170 <_malloc_r+0x4c0>
    7ed4:	f8db 1000 	ldr.w	r1, [fp]
    7ed8:	9301      	str	r3, [sp, #4]
    7eda:	3101      	adds	r1, #1
    7edc:	bf1b      	ittet	ne
    7ede:	eba2 010a 	subne.w	r1, r2, sl
    7ee2:	1809      	addne	r1, r1, r0
    7ee4:	f8cb 2000 	streq.w	r2, [fp]
    7ee8:	6019      	strne	r1, [r3, #0]
    7eea:	f012 0b07 	ands.w	fp, r2, #7
    7eee:	f000 8117 	beq.w	8120 <_malloc_r+0x470>
    7ef2:	f1cb 0108 	rsb	r1, fp, #8
    7ef6:	440a      	add	r2, r1
    7ef8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    7efc:	4490      	add	r8, r2
    7efe:	3108      	adds	r1, #8
    7f00:	eba1 0108 	sub.w	r1, r1, r8
    7f04:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    7f08:	4651      	mov	r1, sl
    7f0a:	4620      	mov	r0, r4
    7f0c:	9200      	str	r2, [sp, #0]
    7f0e:	f000 fe6d 	bl	8bec <_sbrk_r>
    7f12:	1c42      	adds	r2, r0, #1
    7f14:	e9dd 2300 	ldrd	r2, r3, [sp]
    7f18:	f000 814f 	beq.w	81ba <_malloc_r+0x50a>
    7f1c:	1a80      	subs	r0, r0, r2
    7f1e:	eb00 080a 	add.w	r8, r0, sl
    7f22:	6819      	ldr	r1, [r3, #0]
    7f24:	60ba      	str	r2, [r7, #8]
    7f26:	f048 0001 	orr.w	r0, r8, #1
    7f2a:	4451      	add	r1, sl
    7f2c:	42bd      	cmp	r5, r7
    7f2e:	6050      	str	r0, [r2, #4]
    7f30:	6019      	str	r1, [r3, #0]
    7f32:	f000 8129 	beq.w	8188 <_malloc_r+0x4d8>
    7f36:	f1b9 0f0f 	cmp.w	r9, #15
    7f3a:	f240 8127 	bls.w	818c <_malloc_r+0x4dc>
    7f3e:	6868      	ldr	r0, [r5, #4]
    7f40:	f1a9 0c0c 	sub.w	ip, r9, #12
    7f44:	f02c 0c07 	bic.w	ip, ip, #7
    7f48:	f000 0001 	and.w	r0, r0, #1
    7f4c:	ea40 000c 	orr.w	r0, r0, ip
    7f50:	6068      	str	r0, [r5, #4]
    7f52:	f04f 0e05 	mov.w	lr, #5
    7f56:	eb05 000c 	add.w	r0, r5, ip
    7f5a:	f1bc 0f0f 	cmp.w	ip, #15
    7f5e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    7f62:	f200 8132 	bhi.w	81ca <_malloc_r+0x51a>
    7f66:	6850      	ldr	r0, [r2, #4]
    7f68:	4615      	mov	r5, r2
    7f6a:	4b12      	ldr	r3, [pc, #72]	; (7fb4 <_malloc_r+0x304>)
    7f6c:	681a      	ldr	r2, [r3, #0]
    7f6e:	428a      	cmp	r2, r1
    7f70:	bf38      	it	cc
    7f72:	6019      	strcc	r1, [r3, #0]
    7f74:	4b10      	ldr	r3, [pc, #64]	; (7fb8 <_malloc_r+0x308>)
    7f76:	681a      	ldr	r2, [r3, #0]
    7f78:	428a      	cmp	r2, r1
    7f7a:	bf38      	it	cc
    7f7c:	6019      	strcc	r1, [r3, #0]
    7f7e:	e094      	b.n	80aa <_malloc_r+0x3fa>
    7f80:	19aa      	adds	r2, r5, r6
    7f82:	f043 0301 	orr.w	r3, r3, #1
    7f86:	f046 0601 	orr.w	r6, r6, #1
    7f8a:	606e      	str	r6, [r5, #4]
    7f8c:	4620      	mov	r0, r4
    7f8e:	60ba      	str	r2, [r7, #8]
    7f90:	6053      	str	r3, [r2, #4]
    7f92:	f000 f943 	bl	821c <__malloc_unlock>
    7f96:	3508      	adds	r5, #8
    7f98:	4628      	mov	r0, r5
    7f9a:	b003      	add	sp, #12
    7f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fa0:	68d9      	ldr	r1, [r3, #12]
    7fa2:	441a      	add	r2, r3
    7fa4:	e6a1      	b.n	7cea <_malloc_r+0x3a>
    7fa6:	bf00      	nop
    7fa8:	20002ff8 	.word	0x20002ff8
    7fac:	20003ef8 	.word	0x20003ef8
    7fb0:	20003ec8 	.word	0x20003ec8
    7fb4:	20003ef0 	.word	0x20003ef0
    7fb8:	20003ef4 	.word	0x20003ef4
    7fbc:	20003000 	.word	0x20003000
    7fc0:	20003400 	.word	0x20003400
    7fc4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    7fc8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    7fcc:	d363      	bcc.n	8096 <_malloc_r+0x3e6>
    7fce:	2b14      	cmp	r3, #20
    7fd0:	f200 80b7 	bhi.w	8142 <_malloc_r+0x492>
    7fd4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    7fd8:	00c9      	lsls	r1, r1, #3
    7fda:	335b      	adds	r3, #91	; 0x5b
    7fdc:	eb07 0e01 	add.w	lr, r7, r1
    7fe0:	5879      	ldr	r1, [r7, r1]
    7fe2:	f1ae 0e08 	sub.w	lr, lr, #8
    7fe6:	458e      	cmp	lr, r1
    7fe8:	f000 8091 	beq.w	810e <_malloc_r+0x45e>
    7fec:	684b      	ldr	r3, [r1, #4]
    7fee:	f023 0303 	bic.w	r3, r3, #3
    7ff2:	4293      	cmp	r3, r2
    7ff4:	d902      	bls.n	7ffc <_malloc_r+0x34c>
    7ff6:	6889      	ldr	r1, [r1, #8]
    7ff8:	458e      	cmp	lr, r1
    7ffa:	d1f7      	bne.n	7fec <_malloc_r+0x33c>
    7ffc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    8000:	687a      	ldr	r2, [r7, #4]
    8002:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    8006:	f8ce 5008 	str.w	r5, [lr, #8]
    800a:	60cd      	str	r5, [r1, #12]
    800c:	e6d6      	b.n	7dbc <_malloc_r+0x10c>
    800e:	2b14      	cmp	r3, #20
    8010:	d959      	bls.n	80c6 <_malloc_r+0x416>
    8012:	2b54      	cmp	r3, #84	; 0x54
    8014:	f200 809d 	bhi.w	8152 <_malloc_r+0x4a2>
    8018:	0b33      	lsrs	r3, r6, #12
    801a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    801e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    8022:	00c3      	lsls	r3, r0, #3
    8024:	e68a      	b.n	7d3c <_malloc_r+0x8c>
    8026:	f10e 0e01 	add.w	lr, lr, #1
    802a:	f01e 0f03 	tst.w	lr, #3
    802e:	f105 0508 	add.w	r5, r5, #8
    8032:	f47f aed5 	bne.w	7de0 <_malloc_r+0x130>
    8036:	e051      	b.n	80dc <_malloc_r+0x42c>
    8038:	4442      	add	r2, r8
    803a:	4645      	mov	r5, r8
    803c:	6853      	ldr	r3, [r2, #4]
    803e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    8042:	f043 0301 	orr.w	r3, r3, #1
    8046:	6053      	str	r3, [r2, #4]
    8048:	f855 3f08 	ldr.w	r3, [r5, #8]!
    804c:	4620      	mov	r0, r4
    804e:	60d9      	str	r1, [r3, #12]
    8050:	608b      	str	r3, [r1, #8]
    8052:	f000 f8e3 	bl	821c <__malloc_unlock>
    8056:	e6f3      	b.n	7e40 <_malloc_r+0x190>
    8058:	08f0      	lsrs	r0, r6, #3
    805a:	f106 0208 	add.w	r2, r6, #8
    805e:	e637      	b.n	7cd0 <_malloc_r+0x20>
    8060:	442a      	add	r2, r5
    8062:	4620      	mov	r0, r4
    8064:	6853      	ldr	r3, [r2, #4]
    8066:	f043 0301 	orr.w	r3, r3, #1
    806a:	6053      	str	r3, [r2, #4]
    806c:	3508      	adds	r5, #8
    806e:	f000 f8d5 	bl	821c <__malloc_unlock>
    8072:	e6e5      	b.n	7e40 <_malloc_r+0x190>
    8074:	19a9      	adds	r1, r5, r6
    8076:	4620      	mov	r0, r4
    8078:	f046 0601 	orr.w	r6, r6, #1
    807c:	f043 0401 	orr.w	r4, r3, #1
    8080:	606e      	str	r6, [r5, #4]
    8082:	e9c7 1104 	strd	r1, r1, [r7, #16]
    8086:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    808a:	604c      	str	r4, [r1, #4]
    808c:	50ab      	str	r3, [r5, r2]
    808e:	f000 f8c5 	bl	821c <__malloc_unlock>
    8092:	3508      	adds	r5, #8
    8094:	e6d4      	b.n	7e40 <_malloc_r+0x190>
    8096:	0993      	lsrs	r3, r2, #6
    8098:	f103 0139 	add.w	r1, r3, #57	; 0x39
    809c:	00c9      	lsls	r1, r1, #3
    809e:	3338      	adds	r3, #56	; 0x38
    80a0:	e79c      	b.n	7fdc <_malloc_r+0x32c>
    80a2:	42bd      	cmp	r5, r7
    80a4:	d05f      	beq.n	8166 <_malloc_r+0x4b6>
    80a6:	68bd      	ldr	r5, [r7, #8]
    80a8:	6868      	ldr	r0, [r5, #4]
    80aa:	f020 0803 	bic.w	r8, r0, #3
    80ae:	4546      	cmp	r6, r8
    80b0:	eba8 0306 	sub.w	r3, r8, r6
    80b4:	d802      	bhi.n	80bc <_malloc_r+0x40c>
    80b6:	2b0f      	cmp	r3, #15
    80b8:	f73f af62 	bgt.w	7f80 <_malloc_r+0x2d0>
    80bc:	4620      	mov	r0, r4
    80be:	f000 f8ad 	bl	821c <__malloc_unlock>
    80c2:	2500      	movs	r5, #0
    80c4:	e6bc      	b.n	7e40 <_malloc_r+0x190>
    80c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    80ca:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    80ce:	00c3      	lsls	r3, r0, #3
    80d0:	e634      	b.n	7d3c <_malloc_r+0x8c>
    80d2:	f859 3908 	ldr.w	r3, [r9], #-8
    80d6:	454b      	cmp	r3, r9
    80d8:	f040 8096 	bne.w	8208 <_malloc_r+0x558>
    80dc:	f010 0f03 	tst.w	r0, #3
    80e0:	f100 30ff 	add.w	r0, r0, #4294967295
    80e4:	d1f5      	bne.n	80d2 <_malloc_r+0x422>
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	ea23 0301 	bic.w	r3, r3, r1
    80ec:	607b      	str	r3, [r7, #4]
    80ee:	0049      	lsls	r1, r1, #1
    80f0:	4299      	cmp	r1, r3
    80f2:	f63f aec0 	bhi.w	7e76 <_malloc_r+0x1c6>
    80f6:	b919      	cbnz	r1, 8100 <_malloc_r+0x450>
    80f8:	e6bd      	b.n	7e76 <_malloc_r+0x1c6>
    80fa:	0049      	lsls	r1, r1, #1
    80fc:	f10e 0e04 	add.w	lr, lr, #4
    8100:	4219      	tst	r1, r3
    8102:	d0fa      	beq.n	80fa <_malloc_r+0x44a>
    8104:	4670      	mov	r0, lr
    8106:	e667      	b.n	7dd8 <_malloc_r+0x128>
    8108:	f103 0810 	add.w	r8, r3, #16
    810c:	e6d0      	b.n	7eb0 <_malloc_r+0x200>
    810e:	109a      	asrs	r2, r3, #2
    8110:	f04f 0801 	mov.w	r8, #1
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	fa08 f202 	lsl.w	r2, r8, r2
    811a:	431a      	orrs	r2, r3
    811c:	607a      	str	r2, [r7, #4]
    811e:	e770      	b.n	8002 <_malloc_r+0x352>
    8120:	eb02 0108 	add.w	r1, r2, r8
    8124:	4249      	negs	r1, r1
    8126:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    812a:	4651      	mov	r1, sl
    812c:	4620      	mov	r0, r4
    812e:	9200      	str	r2, [sp, #0]
    8130:	f000 fd5c 	bl	8bec <_sbrk_r>
    8134:	1c43      	adds	r3, r0, #1
    8136:	e9dd 2300 	ldrd	r2, r3, [sp]
    813a:	f47f aeef 	bne.w	7f1c <_malloc_r+0x26c>
    813e:	46da      	mov	sl, fp
    8140:	e6ef      	b.n	7f22 <_malloc_r+0x272>
    8142:	2b54      	cmp	r3, #84	; 0x54
    8144:	d825      	bhi.n	8192 <_malloc_r+0x4e2>
    8146:	0b13      	lsrs	r3, r2, #12
    8148:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    814c:	00c9      	lsls	r1, r1, #3
    814e:	336e      	adds	r3, #110	; 0x6e
    8150:	e744      	b.n	7fdc <_malloc_r+0x32c>
    8152:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8156:	d825      	bhi.n	81a4 <_malloc_r+0x4f4>
    8158:	0bf3      	lsrs	r3, r6, #15
    815a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    815e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    8162:	00c3      	lsls	r3, r0, #3
    8164:	e5ea      	b.n	7d3c <_malloc_r+0x8c>
    8166:	4b29      	ldr	r3, [pc, #164]	; (820c <_malloc_r+0x55c>)
    8168:	6818      	ldr	r0, [r3, #0]
    816a:	4440      	add	r0, r8
    816c:	6018      	str	r0, [r3, #0]
    816e:	e6b1      	b.n	7ed4 <_malloc_r+0x224>
    8170:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    8174:	f1bc 0f00 	cmp.w	ip, #0
    8178:	f47f aeac 	bne.w	7ed4 <_malloc_r+0x224>
    817c:	68bd      	ldr	r5, [r7, #8]
    817e:	44c8      	add	r8, r9
    8180:	f048 0001 	orr.w	r0, r8, #1
    8184:	6068      	str	r0, [r5, #4]
    8186:	e6f0      	b.n	7f6a <_malloc_r+0x2ba>
    8188:	4615      	mov	r5, r2
    818a:	e6ee      	b.n	7f6a <_malloc_r+0x2ba>
    818c:	2301      	movs	r3, #1
    818e:	6053      	str	r3, [r2, #4]
    8190:	e794      	b.n	80bc <_malloc_r+0x40c>
    8192:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8196:	d823      	bhi.n	81e0 <_malloc_r+0x530>
    8198:	0bd3      	lsrs	r3, r2, #15
    819a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    819e:	00c9      	lsls	r1, r1, #3
    81a0:	3377      	adds	r3, #119	; 0x77
    81a2:	e71b      	b.n	7fdc <_malloc_r+0x32c>
    81a4:	f240 5254 	movw	r2, #1364	; 0x554
    81a8:	4293      	cmp	r3, r2
    81aa:	d823      	bhi.n	81f4 <_malloc_r+0x544>
    81ac:	0cb3      	lsrs	r3, r6, #18
    81ae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    81b2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    81b6:	00c3      	lsls	r3, r0, #3
    81b8:	e5c0      	b.n	7d3c <_malloc_r+0x8c>
    81ba:	f1ab 0b08 	sub.w	fp, fp, #8
    81be:	44d8      	add	r8, fp
    81c0:	eba8 0802 	sub.w	r8, r8, r2
    81c4:	f04f 0a00 	mov.w	sl, #0
    81c8:	e6ab      	b.n	7f22 <_malloc_r+0x272>
    81ca:	f105 0108 	add.w	r1, r5, #8
    81ce:	4620      	mov	r0, r4
    81d0:	9300      	str	r3, [sp, #0]
    81d2:	f000 fe77 	bl	8ec4 <_free_r>
    81d6:	68bd      	ldr	r5, [r7, #8]
    81d8:	9b00      	ldr	r3, [sp, #0]
    81da:	6868      	ldr	r0, [r5, #4]
    81dc:	6819      	ldr	r1, [r3, #0]
    81de:	e6c4      	b.n	7f6a <_malloc_r+0x2ba>
    81e0:	f240 5154 	movw	r1, #1364	; 0x554
    81e4:	428b      	cmp	r3, r1
    81e6:	d80b      	bhi.n	8200 <_malloc_r+0x550>
    81e8:	0c93      	lsrs	r3, r2, #18
    81ea:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    81ee:	00c9      	lsls	r1, r1, #3
    81f0:	337c      	adds	r3, #124	; 0x7c
    81f2:	e6f3      	b.n	7fdc <_malloc_r+0x32c>
    81f4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    81f8:	207f      	movs	r0, #127	; 0x7f
    81fa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    81fe:	e59d      	b.n	7d3c <_malloc_r+0x8c>
    8200:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    8204:	237e      	movs	r3, #126	; 0x7e
    8206:	e6e9      	b.n	7fdc <_malloc_r+0x32c>
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	e770      	b.n	80ee <_malloc_r+0x43e>
    820c:	20003ec8 	.word	0x20003ec8

00008210 <__malloc_lock>:
    8210:	4801      	ldr	r0, [pc, #4]	; (8218 <__malloc_lock+0x8>)
    8212:	f000 bd41 	b.w	8c98 <__retarget_lock_acquire_recursive>
    8216:	bf00      	nop
    8218:	20003ec0 	.word	0x20003ec0

0000821c <__malloc_unlock>:
    821c:	4801      	ldr	r0, [pc, #4]	; (8224 <__malloc_unlock+0x8>)
    821e:	f000 bd3d 	b.w	8c9c <__retarget_lock_release_recursive>
    8222:	bf00      	nop
    8224:	20003ec0 	.word	0x20003ec0

00008228 <_realloc_r>:
    8228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    822c:	4617      	mov	r7, r2
    822e:	2900      	cmp	r1, #0
    8230:	f000 8098 	beq.w	8364 <_realloc_r+0x13c>
    8234:	460c      	mov	r4, r1
    8236:	f107 050b 	add.w	r5, r7, #11
    823a:	4680      	mov	r8, r0
    823c:	f7ff ffe8 	bl	8210 <__malloc_lock>
    8240:	2d16      	cmp	r5, #22
    8242:	f854 1c04 	ldr.w	r1, [r4, #-4]
    8246:	d85b      	bhi.n	8300 <_realloc_r+0xd8>
    8248:	2510      	movs	r5, #16
    824a:	462a      	mov	r2, r5
    824c:	42af      	cmp	r7, r5
    824e:	d85c      	bhi.n	830a <_realloc_r+0xe2>
    8250:	f021 0603 	bic.w	r6, r1, #3
    8254:	4296      	cmp	r6, r2
    8256:	f1a4 0908 	sub.w	r9, r4, #8
    825a:	da62      	bge.n	8322 <_realloc_r+0xfa>
    825c:	4bbc      	ldr	r3, [pc, #752]	; (8550 <_realloc_r+0x328>)
    825e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    8262:	eb09 0006 	add.w	r0, r9, r6
    8266:	4584      	cmp	ip, r0
    8268:	f000 8097 	beq.w	839a <_realloc_r+0x172>
    826c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    8270:	f02c 0301 	bic.w	r3, ip, #1
    8274:	4403      	add	r3, r0
    8276:	685b      	ldr	r3, [r3, #4]
    8278:	07db      	lsls	r3, r3, #31
    827a:	d468      	bmi.n	834e <_realloc_r+0x126>
    827c:	f02c 0c03 	bic.w	ip, ip, #3
    8280:	eb06 030c 	add.w	r3, r6, ip
    8284:	4293      	cmp	r3, r2
    8286:	da47      	bge.n	8318 <_realloc_r+0xf0>
    8288:	07cb      	lsls	r3, r1, #31
    828a:	d410      	bmi.n	82ae <_realloc_r+0x86>
    828c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8290:	eba9 0a03 	sub.w	sl, r9, r3
    8294:	f8da 3004 	ldr.w	r3, [sl, #4]
    8298:	f023 0103 	bic.w	r1, r3, #3
    829c:	448c      	add	ip, r1
    829e:	44b4      	add	ip, r6
    82a0:	4594      	cmp	ip, r2
    82a2:	f280 8111 	bge.w	84c8 <_realloc_r+0x2a0>
    82a6:	1873      	adds	r3, r6, r1
    82a8:	4293      	cmp	r3, r2
    82aa:	f280 80e8 	bge.w	847e <_realloc_r+0x256>
    82ae:	4639      	mov	r1, r7
    82b0:	4640      	mov	r0, r8
    82b2:	f7ff fcfd 	bl	7cb0 <_malloc_r>
    82b6:	4607      	mov	r7, r0
    82b8:	b1e0      	cbz	r0, 82f4 <_realloc_r+0xcc>
    82ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    82be:	f023 0301 	bic.w	r3, r3, #1
    82c2:	444b      	add	r3, r9
    82c4:	f1a0 0208 	sub.w	r2, r0, #8
    82c8:	4293      	cmp	r3, r2
    82ca:	f000 80d2 	beq.w	8472 <_realloc_r+0x24a>
    82ce:	1f32      	subs	r2, r6, #4
    82d0:	2a24      	cmp	r2, #36	; 0x24
    82d2:	f200 80f5 	bhi.w	84c0 <_realloc_r+0x298>
    82d6:	2a13      	cmp	r2, #19
    82d8:	f200 80ac 	bhi.w	8434 <_realloc_r+0x20c>
    82dc:	4603      	mov	r3, r0
    82de:	4622      	mov	r2, r4
    82e0:	6811      	ldr	r1, [r2, #0]
    82e2:	6019      	str	r1, [r3, #0]
    82e4:	6851      	ldr	r1, [r2, #4]
    82e6:	6059      	str	r1, [r3, #4]
    82e8:	6892      	ldr	r2, [r2, #8]
    82ea:	609a      	str	r2, [r3, #8]
    82ec:	4621      	mov	r1, r4
    82ee:	4640      	mov	r0, r8
    82f0:	f000 fde8 	bl	8ec4 <_free_r>
    82f4:	4640      	mov	r0, r8
    82f6:	f7ff ff91 	bl	821c <__malloc_unlock>
    82fa:	4638      	mov	r0, r7
    82fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8300:	f025 0507 	bic.w	r5, r5, #7
    8304:	2d00      	cmp	r5, #0
    8306:	462a      	mov	r2, r5
    8308:	daa0      	bge.n	824c <_realloc_r+0x24>
    830a:	230c      	movs	r3, #12
    830c:	f8c8 3000 	str.w	r3, [r8]
    8310:	2700      	movs	r7, #0
    8312:	4638      	mov	r0, r7
    8314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8318:	461e      	mov	r6, r3
    831a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    831e:	60d3      	str	r3, [r2, #12]
    8320:	609a      	str	r2, [r3, #8]
    8322:	1b73      	subs	r3, r6, r5
    8324:	2b0f      	cmp	r3, #15
    8326:	d822      	bhi.n	836e <_realloc_r+0x146>
    8328:	f8d9 3004 	ldr.w	r3, [r9, #4]
    832c:	f003 0301 	and.w	r3, r3, #1
    8330:	4333      	orrs	r3, r6
    8332:	444e      	add	r6, r9
    8334:	f8c9 3004 	str.w	r3, [r9, #4]
    8338:	6873      	ldr	r3, [r6, #4]
    833a:	f043 0301 	orr.w	r3, r3, #1
    833e:	6073      	str	r3, [r6, #4]
    8340:	4640      	mov	r0, r8
    8342:	4627      	mov	r7, r4
    8344:	f7ff ff6a 	bl	821c <__malloc_unlock>
    8348:	4638      	mov	r0, r7
    834a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    834e:	07c9      	lsls	r1, r1, #31
    8350:	d4ad      	bmi.n	82ae <_realloc_r+0x86>
    8352:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8356:	eba9 0a03 	sub.w	sl, r9, r3
    835a:	f8da 1004 	ldr.w	r1, [sl, #4]
    835e:	f021 0103 	bic.w	r1, r1, #3
    8362:	e7a0      	b.n	82a6 <_realloc_r+0x7e>
    8364:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8368:	4611      	mov	r1, r2
    836a:	f7ff bca1 	b.w	7cb0 <_malloc_r>
    836e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    8372:	eb09 0105 	add.w	r1, r9, r5
    8376:	f002 0201 	and.w	r2, r2, #1
    837a:	444e      	add	r6, r9
    837c:	f043 0301 	orr.w	r3, r3, #1
    8380:	432a      	orrs	r2, r5
    8382:	f8c9 2004 	str.w	r2, [r9, #4]
    8386:	604b      	str	r3, [r1, #4]
    8388:	6873      	ldr	r3, [r6, #4]
    838a:	f043 0301 	orr.w	r3, r3, #1
    838e:	3108      	adds	r1, #8
    8390:	6073      	str	r3, [r6, #4]
    8392:	4640      	mov	r0, r8
    8394:	f000 fd96 	bl	8ec4 <_free_r>
    8398:	e7d2      	b.n	8340 <_realloc_r+0x118>
    839a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    839e:	f020 0b03 	bic.w	fp, r0, #3
    83a2:	eb06 0c0b 	add.w	ip, r6, fp
    83a6:	f105 0010 	add.w	r0, r5, #16
    83aa:	4584      	cmp	ip, r0
    83ac:	da4d      	bge.n	844a <_realloc_r+0x222>
    83ae:	07c9      	lsls	r1, r1, #31
    83b0:	f53f af7d 	bmi.w	82ae <_realloc_r+0x86>
    83b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
    83b8:	eba9 0a01 	sub.w	sl, r9, r1
    83bc:	f8da 1004 	ldr.w	r1, [sl, #4]
    83c0:	f021 0103 	bic.w	r1, r1, #3
    83c4:	448b      	add	fp, r1
    83c6:	44b3      	add	fp, r6
    83c8:	4558      	cmp	r0, fp
    83ca:	f73f af6c 	bgt.w	82a6 <_realloc_r+0x7e>
    83ce:	4657      	mov	r7, sl
    83d0:	f8da 100c 	ldr.w	r1, [sl, #12]
    83d4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    83d8:	1f32      	subs	r2, r6, #4
    83da:	2a24      	cmp	r2, #36	; 0x24
    83dc:	60c1      	str	r1, [r0, #12]
    83de:	6088      	str	r0, [r1, #8]
    83e0:	f200 80db 	bhi.w	859a <_realloc_r+0x372>
    83e4:	2a13      	cmp	r2, #19
    83e6:	f240 80d6 	bls.w	8596 <_realloc_r+0x36e>
    83ea:	6821      	ldr	r1, [r4, #0]
    83ec:	f8ca 1008 	str.w	r1, [sl, #8]
    83f0:	6861      	ldr	r1, [r4, #4]
    83f2:	f8ca 100c 	str.w	r1, [sl, #12]
    83f6:	2a1b      	cmp	r2, #27
    83f8:	f200 80df 	bhi.w	85ba <_realloc_r+0x392>
    83fc:	3408      	adds	r4, #8
    83fe:	f10a 0210 	add.w	r2, sl, #16
    8402:	6821      	ldr	r1, [r4, #0]
    8404:	6011      	str	r1, [r2, #0]
    8406:	6861      	ldr	r1, [r4, #4]
    8408:	6051      	str	r1, [r2, #4]
    840a:	68a1      	ldr	r1, [r4, #8]
    840c:	6091      	str	r1, [r2, #8]
    840e:	eb0a 0105 	add.w	r1, sl, r5
    8412:	ebab 0205 	sub.w	r2, fp, r5
    8416:	f042 0201 	orr.w	r2, r2, #1
    841a:	6099      	str	r1, [r3, #8]
    841c:	604a      	str	r2, [r1, #4]
    841e:	f8da 3004 	ldr.w	r3, [sl, #4]
    8422:	f003 0301 	and.w	r3, r3, #1
    8426:	432b      	orrs	r3, r5
    8428:	4640      	mov	r0, r8
    842a:	f8ca 3004 	str.w	r3, [sl, #4]
    842e:	f7ff fef5 	bl	821c <__malloc_unlock>
    8432:	e76e      	b.n	8312 <_realloc_r+0xea>
    8434:	6823      	ldr	r3, [r4, #0]
    8436:	6003      	str	r3, [r0, #0]
    8438:	6863      	ldr	r3, [r4, #4]
    843a:	6043      	str	r3, [r0, #4]
    843c:	2a1b      	cmp	r2, #27
    843e:	d868      	bhi.n	8512 <_realloc_r+0x2ea>
    8440:	f104 0208 	add.w	r2, r4, #8
    8444:	f100 0308 	add.w	r3, r0, #8
    8448:	e74a      	b.n	82e0 <_realloc_r+0xb8>
    844a:	eb09 0205 	add.w	r2, r9, r5
    844e:	609a      	str	r2, [r3, #8]
    8450:	ebac 0305 	sub.w	r3, ip, r5
    8454:	f043 0301 	orr.w	r3, r3, #1
    8458:	6053      	str	r3, [r2, #4]
    845a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    845e:	f003 0301 	and.w	r3, r3, #1
    8462:	432b      	orrs	r3, r5
    8464:	4640      	mov	r0, r8
    8466:	f844 3c04 	str.w	r3, [r4, #-4]
    846a:	f7ff fed7 	bl	821c <__malloc_unlock>
    846e:	4627      	mov	r7, r4
    8470:	e74f      	b.n	8312 <_realloc_r+0xea>
    8472:	f850 3c04 	ldr.w	r3, [r0, #-4]
    8476:	f023 0303 	bic.w	r3, r3, #3
    847a:	441e      	add	r6, r3
    847c:	e751      	b.n	8322 <_realloc_r+0xfa>
    847e:	4657      	mov	r7, sl
    8480:	f8da 100c 	ldr.w	r1, [sl, #12]
    8484:	f857 0f08 	ldr.w	r0, [r7, #8]!
    8488:	1f32      	subs	r2, r6, #4
    848a:	2a24      	cmp	r2, #36	; 0x24
    848c:	60c1      	str	r1, [r0, #12]
    848e:	6088      	str	r0, [r1, #8]
    8490:	d84c      	bhi.n	852c <_realloc_r+0x304>
    8492:	2a13      	cmp	r2, #19
    8494:	d948      	bls.n	8528 <_realloc_r+0x300>
    8496:	6821      	ldr	r1, [r4, #0]
    8498:	f8ca 1008 	str.w	r1, [sl, #8]
    849c:	6861      	ldr	r1, [r4, #4]
    849e:	f8ca 100c 	str.w	r1, [sl, #12]
    84a2:	2a1b      	cmp	r2, #27
    84a4:	d856      	bhi.n	8554 <_realloc_r+0x32c>
    84a6:	3408      	adds	r4, #8
    84a8:	f10a 0210 	add.w	r2, sl, #16
    84ac:	461e      	mov	r6, r3
    84ae:	6823      	ldr	r3, [r4, #0]
    84b0:	6013      	str	r3, [r2, #0]
    84b2:	6863      	ldr	r3, [r4, #4]
    84b4:	6053      	str	r3, [r2, #4]
    84b6:	68a3      	ldr	r3, [r4, #8]
    84b8:	6093      	str	r3, [r2, #8]
    84ba:	46d1      	mov	r9, sl
    84bc:	463c      	mov	r4, r7
    84be:	e730      	b.n	8322 <_realloc_r+0xfa>
    84c0:	4621      	mov	r1, r4
    84c2:	f000 fa4f 	bl	8964 <memmove>
    84c6:	e711      	b.n	82ec <_realloc_r+0xc4>
    84c8:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    84cc:	4657      	mov	r7, sl
    84ce:	60cb      	str	r3, [r1, #12]
    84d0:	6099      	str	r1, [r3, #8]
    84d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
    84d6:	f8da 300c 	ldr.w	r3, [sl, #12]
    84da:	60cb      	str	r3, [r1, #12]
    84dc:	1f32      	subs	r2, r6, #4
    84de:	2a24      	cmp	r2, #36	; 0x24
    84e0:	6099      	str	r1, [r3, #8]
    84e2:	d82d      	bhi.n	8540 <_realloc_r+0x318>
    84e4:	2a13      	cmp	r2, #19
    84e6:	d929      	bls.n	853c <_realloc_r+0x314>
    84e8:	6823      	ldr	r3, [r4, #0]
    84ea:	f8ca 3008 	str.w	r3, [sl, #8]
    84ee:	6863      	ldr	r3, [r4, #4]
    84f0:	f8ca 300c 	str.w	r3, [sl, #12]
    84f4:	2a1b      	cmp	r2, #27
    84f6:	d842      	bhi.n	857e <_realloc_r+0x356>
    84f8:	3408      	adds	r4, #8
    84fa:	f10a 0310 	add.w	r3, sl, #16
    84fe:	6822      	ldr	r2, [r4, #0]
    8500:	601a      	str	r2, [r3, #0]
    8502:	6862      	ldr	r2, [r4, #4]
    8504:	605a      	str	r2, [r3, #4]
    8506:	68a2      	ldr	r2, [r4, #8]
    8508:	609a      	str	r2, [r3, #8]
    850a:	4666      	mov	r6, ip
    850c:	46d1      	mov	r9, sl
    850e:	463c      	mov	r4, r7
    8510:	e707      	b.n	8322 <_realloc_r+0xfa>
    8512:	68a3      	ldr	r3, [r4, #8]
    8514:	6083      	str	r3, [r0, #8]
    8516:	68e3      	ldr	r3, [r4, #12]
    8518:	60c3      	str	r3, [r0, #12]
    851a:	2a24      	cmp	r2, #36	; 0x24
    851c:	d026      	beq.n	856c <_realloc_r+0x344>
    851e:	f104 0210 	add.w	r2, r4, #16
    8522:	f100 0310 	add.w	r3, r0, #16
    8526:	e6db      	b.n	82e0 <_realloc_r+0xb8>
    8528:	463a      	mov	r2, r7
    852a:	e7bf      	b.n	84ac <_realloc_r+0x284>
    852c:	4621      	mov	r1, r4
    852e:	4638      	mov	r0, r7
    8530:	461e      	mov	r6, r3
    8532:	46d1      	mov	r9, sl
    8534:	f000 fa16 	bl	8964 <memmove>
    8538:	463c      	mov	r4, r7
    853a:	e6f2      	b.n	8322 <_realloc_r+0xfa>
    853c:	463b      	mov	r3, r7
    853e:	e7de      	b.n	84fe <_realloc_r+0x2d6>
    8540:	4621      	mov	r1, r4
    8542:	4638      	mov	r0, r7
    8544:	4666      	mov	r6, ip
    8546:	46d1      	mov	r9, sl
    8548:	f000 fa0c 	bl	8964 <memmove>
    854c:	463c      	mov	r4, r7
    854e:	e6e8      	b.n	8322 <_realloc_r+0xfa>
    8550:	20002ff8 	.word	0x20002ff8
    8554:	68a1      	ldr	r1, [r4, #8]
    8556:	f8ca 1010 	str.w	r1, [sl, #16]
    855a:	68e1      	ldr	r1, [r4, #12]
    855c:	f8ca 1014 	str.w	r1, [sl, #20]
    8560:	2a24      	cmp	r2, #36	; 0x24
    8562:	d020      	beq.n	85a6 <_realloc_r+0x37e>
    8564:	3410      	adds	r4, #16
    8566:	f10a 0218 	add.w	r2, sl, #24
    856a:	e79f      	b.n	84ac <_realloc_r+0x284>
    856c:	6923      	ldr	r3, [r4, #16]
    856e:	6103      	str	r3, [r0, #16]
    8570:	6961      	ldr	r1, [r4, #20]
    8572:	6141      	str	r1, [r0, #20]
    8574:	f104 0218 	add.w	r2, r4, #24
    8578:	f100 0318 	add.w	r3, r0, #24
    857c:	e6b0      	b.n	82e0 <_realloc_r+0xb8>
    857e:	68a3      	ldr	r3, [r4, #8]
    8580:	f8ca 3010 	str.w	r3, [sl, #16]
    8584:	68e3      	ldr	r3, [r4, #12]
    8586:	f8ca 3014 	str.w	r3, [sl, #20]
    858a:	2a24      	cmp	r2, #36	; 0x24
    858c:	d021      	beq.n	85d2 <_realloc_r+0x3aa>
    858e:	3410      	adds	r4, #16
    8590:	f10a 0318 	add.w	r3, sl, #24
    8594:	e7b3      	b.n	84fe <_realloc_r+0x2d6>
    8596:	463a      	mov	r2, r7
    8598:	e733      	b.n	8402 <_realloc_r+0x1da>
    859a:	4621      	mov	r1, r4
    859c:	4638      	mov	r0, r7
    859e:	f000 f9e1 	bl	8964 <memmove>
    85a2:	4b16      	ldr	r3, [pc, #88]	; (85fc <_realloc_r+0x3d4>)
    85a4:	e733      	b.n	840e <_realloc_r+0x1e6>
    85a6:	6922      	ldr	r2, [r4, #16]
    85a8:	f8ca 2018 	str.w	r2, [sl, #24]
    85ac:	6962      	ldr	r2, [r4, #20]
    85ae:	f8ca 201c 	str.w	r2, [sl, #28]
    85b2:	3418      	adds	r4, #24
    85b4:	f10a 0220 	add.w	r2, sl, #32
    85b8:	e778      	b.n	84ac <_realloc_r+0x284>
    85ba:	68a1      	ldr	r1, [r4, #8]
    85bc:	f8ca 1010 	str.w	r1, [sl, #16]
    85c0:	68e1      	ldr	r1, [r4, #12]
    85c2:	f8ca 1014 	str.w	r1, [sl, #20]
    85c6:	2a24      	cmp	r2, #36	; 0x24
    85c8:	d00d      	beq.n	85e6 <_realloc_r+0x3be>
    85ca:	3410      	adds	r4, #16
    85cc:	f10a 0218 	add.w	r2, sl, #24
    85d0:	e717      	b.n	8402 <_realloc_r+0x1da>
    85d2:	6923      	ldr	r3, [r4, #16]
    85d4:	f8ca 3018 	str.w	r3, [sl, #24]
    85d8:	6963      	ldr	r3, [r4, #20]
    85da:	f8ca 301c 	str.w	r3, [sl, #28]
    85de:	3418      	adds	r4, #24
    85e0:	f10a 0320 	add.w	r3, sl, #32
    85e4:	e78b      	b.n	84fe <_realloc_r+0x2d6>
    85e6:	6922      	ldr	r2, [r4, #16]
    85e8:	f8ca 2018 	str.w	r2, [sl, #24]
    85ec:	6962      	ldr	r2, [r4, #20]
    85ee:	f8ca 201c 	str.w	r2, [sl, #28]
    85f2:	3418      	adds	r4, #24
    85f4:	f10a 0220 	add.w	r2, sl, #32
    85f8:	e703      	b.n	8402 <_realloc_r+0x1da>
    85fa:	bf00      	nop
    85fc:	20002ff8 	.word	0x20002ff8

00008600 <__cxa_atexit>:
    8600:	4613      	mov	r3, r2
    8602:	460a      	mov	r2, r1
    8604:	4601      	mov	r1, r0
    8606:	2002      	movs	r0, #2
    8608:	f000 bbc8 	b.w	8d9c <__register_exitproc>

0000860c <stdio_exit_handler>:
    860c:	4a02      	ldr	r2, [pc, #8]	; (8618 <stdio_exit_handler+0xc>)
    860e:	4903      	ldr	r1, [pc, #12]	; (861c <stdio_exit_handler+0x10>)
    8610:	4803      	ldr	r0, [pc, #12]	; (8620 <stdio_exit_handler+0x14>)
    8612:	f000 b8bb 	b.w	878c <_fwalk_sglue>
    8616:	bf00      	nop
    8618:	20003408 	.word	0x20003408
    861c:	0000b3d5 	.word	0x0000b3d5
    8620:	20001c88 	.word	0x20001c88

00008624 <cleanup_stdio>:
    8624:	4b0c      	ldr	r3, [pc, #48]	; (8658 <cleanup_stdio+0x34>)
    8626:	6841      	ldr	r1, [r0, #4]
    8628:	4299      	cmp	r1, r3
    862a:	b510      	push	{r4, lr}
    862c:	4604      	mov	r4, r0
    862e:	d001      	beq.n	8634 <cleanup_stdio+0x10>
    8630:	f002 fed0 	bl	b3d4 <_fclose_r>
    8634:	68a1      	ldr	r1, [r4, #8]
    8636:	4b09      	ldr	r3, [pc, #36]	; (865c <cleanup_stdio+0x38>)
    8638:	4299      	cmp	r1, r3
    863a:	d002      	beq.n	8642 <cleanup_stdio+0x1e>
    863c:	4620      	mov	r0, r4
    863e:	f002 fec9 	bl	b3d4 <_fclose_r>
    8642:	68e1      	ldr	r1, [r4, #12]
    8644:	4b06      	ldr	r3, [pc, #24]	; (8660 <cleanup_stdio+0x3c>)
    8646:	4299      	cmp	r1, r3
    8648:	d004      	beq.n	8654 <cleanup_stdio+0x30>
    864a:	4620      	mov	r0, r4
    864c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8650:	f002 bec0 	b.w	b3d4 <_fclose_r>
    8654:	bd10      	pop	{r4, pc}
    8656:	bf00      	nop
    8658:	20003efc 	.word	0x20003efc
    865c:	20003f64 	.word	0x20003f64
    8660:	20003fcc 	.word	0x20003fcc

00008664 <global_stdio_init.part.0>:
    8664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8668:	4c2a      	ldr	r4, [pc, #168]	; (8714 <global_stdio_init.part.0+0xb0>)
    866a:	4b2b      	ldr	r3, [pc, #172]	; (8718 <global_stdio_init.part.0+0xb4>)
    866c:	482b      	ldr	r0, [pc, #172]	; (871c <global_stdio_init.part.0+0xb8>)
    866e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8730 <global_stdio_init.part.0+0xcc>
    8672:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8734 <global_stdio_init.part.0+0xd0>
    8676:	4f2a      	ldr	r7, [pc, #168]	; (8720 <global_stdio_init.part.0+0xbc>)
    8678:	6018      	str	r0, [r3, #0]
    867a:	2500      	movs	r5, #0
    867c:	2304      	movs	r3, #4
    867e:	2208      	movs	r2, #8
    8680:	4629      	mov	r1, r5
    8682:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8686:	4e27      	ldr	r6, [pc, #156]	; (8724 <global_stdio_init.part.0+0xc0>)
    8688:	6665      	str	r5, [r4, #100]	; 0x64
    868a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    868e:	e9c4 5500 	strd	r5, r5, [r4]
    8692:	e9c4 5504 	strd	r5, r5, [r4, #16]
    8696:	61a5      	str	r5, [r4, #24]
    8698:	f000 f9e0 	bl	8a5c <memset>
    869c:	4b22      	ldr	r3, [pc, #136]	; (8728 <global_stdio_init.part.0+0xc4>)
    869e:	6763      	str	r3, [r4, #116]	; 0x74
    86a0:	2208      	movs	r2, #8
    86a2:	4629      	mov	r1, r5
    86a4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    86a8:	e9c4 4907 	strd	r4, r9, [r4, #28]
    86ac:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    86b0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    86b4:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    86b8:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    86bc:	6725      	str	r5, [r4, #112]	; 0x70
    86be:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    86c2:	62e6      	str	r6, [r4, #44]	; 0x2c
    86c4:	f000 f9ca 	bl	8a5c <memset>
    86c8:	4b18      	ldr	r3, [pc, #96]	; (872c <global_stdio_init.part.0+0xc8>)
    86ca:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    86ce:	4629      	mov	r1, r5
    86d0:	f104 0368 	add.w	r3, r4, #104	; 0x68
    86d4:	2208      	movs	r2, #8
    86d6:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    86da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    86de:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    86e2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    86e6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    86ea:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    86ee:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    86f2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    86f6:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    86fa:	f000 f9af 	bl	8a5c <memset>
    86fe:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8702:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    8706:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    870a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    870e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8712:	bf00      	nop
    8714:	20003efc 	.word	0x20003efc
    8718:	20004034 	.word	0x20004034
    871c:	0000860d 	.word	0x0000860d
    8720:	00008839 	.word	0x00008839
    8724:	00008859 	.word	0x00008859
    8728:	00010009 	.word	0x00010009
    872c:	00020012 	.word	0x00020012
    8730:	000087d5 	.word	0x000087d5
    8734:	000087f9 	.word	0x000087f9

00008738 <__sinit>:
    8738:	b510      	push	{r4, lr}
    873a:	4604      	mov	r4, r0
    873c:	480a      	ldr	r0, [pc, #40]	; (8768 <__sinit+0x30>)
    873e:	f000 faab 	bl	8c98 <__retarget_lock_acquire_recursive>
    8742:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8744:	b923      	cbnz	r3, 8750 <__sinit+0x18>
    8746:	4b09      	ldr	r3, [pc, #36]	; (876c <__sinit+0x34>)
    8748:	4a09      	ldr	r2, [pc, #36]	; (8770 <__sinit+0x38>)
    874a:	681b      	ldr	r3, [r3, #0]
    874c:	6362      	str	r2, [r4, #52]	; 0x34
    874e:	b123      	cbz	r3, 875a <__sinit+0x22>
    8750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8754:	4804      	ldr	r0, [pc, #16]	; (8768 <__sinit+0x30>)
    8756:	f000 baa1 	b.w	8c9c <__retarget_lock_release_recursive>
    875a:	f7ff ff83 	bl	8664 <global_stdio_init.part.0>
    875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8762:	4801      	ldr	r0, [pc, #4]	; (8768 <__sinit+0x30>)
    8764:	f000 ba9a 	b.w	8c9c <__retarget_lock_release_recursive>
    8768:	20003ec4 	.word	0x20003ec4
    876c:	20004034 	.word	0x20004034
    8770:	00008625 	.word	0x00008625

00008774 <__sfp_lock_acquire>:
    8774:	4801      	ldr	r0, [pc, #4]	; (877c <__sfp_lock_acquire+0x8>)
    8776:	f000 ba8f 	b.w	8c98 <__retarget_lock_acquire_recursive>
    877a:	bf00      	nop
    877c:	20003ec4 	.word	0x20003ec4

00008780 <__sfp_lock_release>:
    8780:	4801      	ldr	r0, [pc, #4]	; (8788 <__sfp_lock_release+0x8>)
    8782:	f000 ba8b 	b.w	8c9c <__retarget_lock_release_recursive>
    8786:	bf00      	nop
    8788:	20003ec4 	.word	0x20003ec4

0000878c <_fwalk_sglue>:
    878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8790:	4680      	mov	r8, r0
    8792:	460f      	mov	r7, r1
    8794:	4616      	mov	r6, r2
    8796:	f04f 0900 	mov.w	r9, #0
    879a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    879e:	3d01      	subs	r5, #1
    87a0:	d411      	bmi.n	87c6 <_fwalk_sglue+0x3a>
    87a2:	89a3      	ldrh	r3, [r4, #12]
    87a4:	2b01      	cmp	r3, #1
    87a6:	f105 35ff 	add.w	r5, r5, #4294967295
    87aa:	d908      	bls.n	87be <_fwalk_sglue+0x32>
    87ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    87b0:	3301      	adds	r3, #1
    87b2:	4621      	mov	r1, r4
    87b4:	d003      	beq.n	87be <_fwalk_sglue+0x32>
    87b6:	4640      	mov	r0, r8
    87b8:	47b8      	blx	r7
    87ba:	ea49 0900 	orr.w	r9, r9, r0
    87be:	1c6b      	adds	r3, r5, #1
    87c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
    87c4:	d1ed      	bne.n	87a2 <_fwalk_sglue+0x16>
    87c6:	6836      	ldr	r6, [r6, #0]
    87c8:	2e00      	cmp	r6, #0
    87ca:	d1e6      	bne.n	879a <_fwalk_sglue+0xe>
    87cc:	4648      	mov	r0, r9
    87ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    87d2:	bf00      	nop

000087d4 <__sread>:
    87d4:	b510      	push	{r4, lr}
    87d6:	460c      	mov	r4, r1
    87d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    87dc:	f000 f9f0 	bl	8bc0 <_read_r>
    87e0:	2800      	cmp	r0, #0
    87e2:	db03      	blt.n	87ec <__sread+0x18>
    87e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    87e6:	4403      	add	r3, r0
    87e8:	6523      	str	r3, [r4, #80]	; 0x50
    87ea:	bd10      	pop	{r4, pc}
    87ec:	89a3      	ldrh	r3, [r4, #12]
    87ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    87f2:	81a3      	strh	r3, [r4, #12]
    87f4:	bd10      	pop	{r4, pc}
    87f6:	bf00      	nop

000087f8 <__swrite>:
    87f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87fc:	460c      	mov	r4, r1
    87fe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    8802:	461f      	mov	r7, r3
    8804:	05cb      	lsls	r3, r1, #23
    8806:	4605      	mov	r5, r0
    8808:	4616      	mov	r6, r2
    880a:	d40b      	bmi.n	8824 <__swrite+0x2c>
    880c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    8810:	81a1      	strh	r1, [r4, #12]
    8812:	463b      	mov	r3, r7
    8814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    8818:	4632      	mov	r2, r6
    881a:	4628      	mov	r0, r5
    881c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8820:	f000 b9f6 	b.w	8c10 <_write_r>
    8824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    8828:	2302      	movs	r3, #2
    882a:	2200      	movs	r2, #0
    882c:	f000 f9b2 	bl	8b94 <_lseek_r>
    8830:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    8834:	e7ea      	b.n	880c <__swrite+0x14>
    8836:	bf00      	nop

00008838 <__sseek>:
    8838:	b510      	push	{r4, lr}
    883a:	460c      	mov	r4, r1
    883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8840:	f000 f9a8 	bl	8b94 <_lseek_r>
    8844:	89a3      	ldrh	r3, [r4, #12]
    8846:	1c42      	adds	r2, r0, #1
    8848:	bf0e      	itee	eq
    884a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    884e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    8852:	6520      	strne	r0, [r4, #80]	; 0x50
    8854:	81a3      	strh	r3, [r4, #12]
    8856:	bd10      	pop	{r4, pc}

00008858 <__sclose>:
    8858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    885c:	f000 b988 	b.w	8b70 <_close_r>

00008860 <_vdprintf_r>:
    8860:	b5f0      	push	{r4, r5, r6, r7, lr}
    8862:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    8866:	af04      	add	r7, sp, #16
    8868:	9300      	str	r3, [sp, #0]
    886a:	4613      	mov	r3, r2
    886c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8870:	460e      	mov	r6, r1
    8872:	9203      	str	r2, [sp, #12]
    8874:	4639      	mov	r1, r7
    8876:	aa03      	add	r2, sp, #12
    8878:	4605      	mov	r5, r0
    887a:	f000 f841 	bl	8900 <_vasnprintf_r>
    887e:	b188      	cbz	r0, 88a4 <_vdprintf_r+0x44>
    8880:	4604      	mov	r4, r0
    8882:	4602      	mov	r2, r0
    8884:	9b03      	ldr	r3, [sp, #12]
    8886:	4631      	mov	r1, r6
    8888:	4628      	mov	r0, r5
    888a:	f000 f9c1 	bl	8c10 <_write_r>
    888e:	42bc      	cmp	r4, r7
    8890:	9003      	str	r0, [sp, #12]
    8892:	d004      	beq.n	889e <_vdprintf_r+0x3e>
    8894:	4628      	mov	r0, r5
    8896:	4621      	mov	r1, r4
    8898:	f000 fb14 	bl	8ec4 <_free_r>
    889c:	9803      	ldr	r0, [sp, #12]
    889e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    88a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88a4:	f04f 30ff 	mov.w	r0, #4294967295
    88a8:	e7f9      	b.n	889e <_vdprintf_r+0x3e>
    88aa:	bf00      	nop

000088ac <vdprintf>:
    88ac:	b410      	push	{r4}
    88ae:	4c05      	ldr	r4, [pc, #20]	; (88c4 <vdprintf+0x18>)
    88b0:	4684      	mov	ip, r0
    88b2:	4613      	mov	r3, r2
    88b4:	6820      	ldr	r0, [r4, #0]
    88b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    88ba:	460a      	mov	r2, r1
    88bc:	4661      	mov	r1, ip
    88be:	f7ff bfcf 	b.w	8860 <_vdprintf_r>
    88c2:	bf00      	nop
    88c4:	20003414 	.word	0x20003414

000088c8 <vsprintf>:
    88c8:	b570      	push	{r4, r5, r6, lr}
    88ca:	4e0b      	ldr	r6, [pc, #44]	; (88f8 <vsprintf+0x30>)
    88cc:	b09a      	sub	sp, #104	; 0x68
    88ce:	4604      	mov	r4, r0
    88d0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    88d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    88d8:	4613      	mov	r3, r2
    88da:	9400      	str	r4, [sp, #0]
    88dc:	460a      	mov	r2, r1
    88de:	6830      	ldr	r0, [r6, #0]
    88e0:	4c06      	ldr	r4, [pc, #24]	; (88fc <vsprintf+0x34>)
    88e2:	9502      	str	r5, [sp, #8]
    88e4:	4669      	mov	r1, sp
    88e6:	9403      	str	r4, [sp, #12]
    88e8:	f000 ffd2 	bl	9890 <_svfprintf_r>
    88ec:	9b00      	ldr	r3, [sp, #0]
    88ee:	2200      	movs	r2, #0
    88f0:	701a      	strb	r2, [r3, #0]
    88f2:	b01a      	add	sp, #104	; 0x68
    88f4:	bd70      	pop	{r4, r5, r6, pc}
    88f6:	bf00      	nop
    88f8:	20003414 	.word	0x20003414
    88fc:	ffff0208 	.word	0xffff0208

00008900 <_vasnprintf_r>:
    8900:	b530      	push	{r4, r5, lr}
    8902:	6814      	ldr	r4, [r2, #0]
    8904:	4615      	mov	r5, r2
    8906:	b09b      	sub	sp, #108	; 0x6c
    8908:	461a      	mov	r2, r3
    890a:	b109      	cbz	r1, 8910 <_vasnprintf_r+0x10>
    890c:	2c00      	cmp	r4, #0
    890e:	d119      	bne.n	8944 <_vasnprintf_r+0x44>
    8910:	2100      	movs	r1, #0
    8912:	f44f 7322 	mov.w	r3, #648	; 0x288
    8916:	f8ad 300c 	strh.w	r3, [sp, #12]
    891a:	9100      	str	r1, [sp, #0]
    891c:	9104      	str	r1, [sp, #16]
    891e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8922:	9102      	str	r1, [sp, #8]
    8924:	9105      	str	r1, [sp, #20]
    8926:	f8ad 300e 	strh.w	r3, [sp, #14]
    892a:	4669      	mov	r1, sp
    892c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    892e:	f000 ffaf 	bl	9890 <_svfprintf_r>
    8932:	2800      	cmp	r0, #0
    8934:	db13      	blt.n	895e <_vasnprintf_r+0x5e>
    8936:	9b00      	ldr	r3, [sp, #0]
    8938:	6028      	str	r0, [r5, #0]
    893a:	2200      	movs	r2, #0
    893c:	701a      	strb	r2, [r3, #0]
    893e:	9804      	ldr	r0, [sp, #16]
    8940:	b01b      	add	sp, #108	; 0x6c
    8942:	bd30      	pop	{r4, r5, pc}
    8944:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    8948:	9100      	str	r1, [sp, #0]
    894a:	9104      	str	r1, [sp, #16]
    894c:	f8ad 300c 	strh.w	r3, [sp, #12]
    8950:	4621      	mov	r1, r4
    8952:	dae4      	bge.n	891e <_vasnprintf_r+0x1e>
    8954:	238b      	movs	r3, #139	; 0x8b
    8956:	6003      	str	r3, [r0, #0]
    8958:	2000      	movs	r0, #0
    895a:	b01b      	add	sp, #108	; 0x6c
    895c:	bd30      	pop	{r4, r5, pc}
    895e:	2000      	movs	r0, #0
    8960:	e7ee      	b.n	8940 <_vasnprintf_r+0x40>
    8962:	bf00      	nop

00008964 <memmove>:
    8964:	4288      	cmp	r0, r1
    8966:	d90d      	bls.n	8984 <memmove+0x20>
    8968:	188b      	adds	r3, r1, r2
    896a:	4283      	cmp	r3, r0
    896c:	d90a      	bls.n	8984 <memmove+0x20>
    896e:	eb00 0c02 	add.w	ip, r0, r2
    8972:	b1ba      	cbz	r2, 89a4 <memmove+0x40>
    8974:	4662      	mov	r2, ip
    8976:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    897a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    897e:	4299      	cmp	r1, r3
    8980:	d1f9      	bne.n	8976 <memmove+0x12>
    8982:	4770      	bx	lr
    8984:	2a0f      	cmp	r2, #15
    8986:	d80e      	bhi.n	89a6 <memmove+0x42>
    8988:	4603      	mov	r3, r0
    898a:	f102 3cff 	add.w	ip, r2, #4294967295
    898e:	b14a      	cbz	r2, 89a4 <memmove+0x40>
    8990:	f10c 0c01 	add.w	ip, ip, #1
    8994:	3b01      	subs	r3, #1
    8996:	448c      	add	ip, r1
    8998:	f811 2b01 	ldrb.w	r2, [r1], #1
    899c:	f803 2f01 	strb.w	r2, [r3, #1]!
    89a0:	4561      	cmp	r1, ip
    89a2:	d1f9      	bne.n	8998 <memmove+0x34>
    89a4:	4770      	bx	lr
    89a6:	ea40 0301 	orr.w	r3, r0, r1
    89aa:	079b      	lsls	r3, r3, #30
    89ac:	d150      	bne.n	8a50 <memmove+0xec>
    89ae:	f1a2 0310 	sub.w	r3, r2, #16
    89b2:	b570      	push	{r4, r5, r6, lr}
    89b4:	f101 0c20 	add.w	ip, r1, #32
    89b8:	f023 050f 	bic.w	r5, r3, #15
    89bc:	f101 0e10 	add.w	lr, r1, #16
    89c0:	f100 0410 	add.w	r4, r0, #16
    89c4:	44ac      	add	ip, r5
    89c6:	091b      	lsrs	r3, r3, #4
    89c8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    89cc:	f844 5c10 	str.w	r5, [r4, #-16]
    89d0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    89d4:	f844 5c0c 	str.w	r5, [r4, #-12]
    89d8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    89dc:	f844 5c08 	str.w	r5, [r4, #-8]
    89e0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    89e4:	f844 5c04 	str.w	r5, [r4, #-4]
    89e8:	f10e 0e10 	add.w	lr, lr, #16
    89ec:	45e6      	cmp	lr, ip
    89ee:	f104 0410 	add.w	r4, r4, #16
    89f2:	d1e9      	bne.n	89c8 <memmove+0x64>
    89f4:	3301      	adds	r3, #1
    89f6:	f012 0f0c 	tst.w	r2, #12
    89fa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    89fe:	f002 040f 	and.w	r4, r2, #15
    8a02:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    8a06:	d027      	beq.n	8a58 <memmove+0xf4>
    8a08:	3c04      	subs	r4, #4
    8a0a:	f024 0603 	bic.w	r6, r4, #3
    8a0e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    8a12:	441e      	add	r6, r3
    8a14:	1f1c      	subs	r4, r3, #4
    8a16:	468e      	mov	lr, r1
    8a18:	f85e 5b04 	ldr.w	r5, [lr], #4
    8a1c:	f844 5f04 	str.w	r5, [r4, #4]!
    8a20:	42b4      	cmp	r4, r6
    8a22:	d1f9      	bne.n	8a18 <memmove+0xb4>
    8a24:	f10c 0401 	add.w	r4, ip, #1
    8a28:	f002 0203 	and.w	r2, r2, #3
    8a2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    8a34:	f102 3cff 	add.w	ip, r2, #4294967295
    8a38:	b14a      	cbz	r2, 8a4e <memmove+0xea>
    8a3a:	f10c 0c01 	add.w	ip, ip, #1
    8a3e:	3b01      	subs	r3, #1
    8a40:	448c      	add	ip, r1
    8a42:	f811 2b01 	ldrb.w	r2, [r1], #1
    8a46:	f803 2f01 	strb.w	r2, [r3, #1]!
    8a4a:	4561      	cmp	r1, ip
    8a4c:	d1f9      	bne.n	8a42 <memmove+0xde>
    8a4e:	bd70      	pop	{r4, r5, r6, pc}
    8a50:	f102 3cff 	add.w	ip, r2, #4294967295
    8a54:	4603      	mov	r3, r0
    8a56:	e79b      	b.n	8990 <memmove+0x2c>
    8a58:	4622      	mov	r2, r4
    8a5a:	e7eb      	b.n	8a34 <memmove+0xd0>

00008a5c <memset>:
    8a5c:	0783      	lsls	r3, r0, #30
    8a5e:	b530      	push	{r4, r5, lr}
    8a60:	d048      	beq.n	8af4 <memset+0x98>
    8a62:	1e54      	subs	r4, r2, #1
    8a64:	2a00      	cmp	r2, #0
    8a66:	d03f      	beq.n	8ae8 <memset+0x8c>
    8a68:	b2ca      	uxtb	r2, r1
    8a6a:	4603      	mov	r3, r0
    8a6c:	e001      	b.n	8a72 <memset+0x16>
    8a6e:	3c01      	subs	r4, #1
    8a70:	d33a      	bcc.n	8ae8 <memset+0x8c>
    8a72:	f803 2b01 	strb.w	r2, [r3], #1
    8a76:	079d      	lsls	r5, r3, #30
    8a78:	d1f9      	bne.n	8a6e <memset+0x12>
    8a7a:	2c03      	cmp	r4, #3
    8a7c:	d92d      	bls.n	8ada <memset+0x7e>
    8a7e:	b2cd      	uxtb	r5, r1
    8a80:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    8a84:	2c0f      	cmp	r4, #15
    8a86:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    8a8a:	d936      	bls.n	8afa <memset+0x9e>
    8a8c:	f1a4 0210 	sub.w	r2, r4, #16
    8a90:	f022 0c0f 	bic.w	ip, r2, #15
    8a94:	f103 0e20 	add.w	lr, r3, #32
    8a98:	44e6      	add	lr, ip
    8a9a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    8a9e:	f103 0210 	add.w	r2, r3, #16
    8aa2:	e942 5504 	strd	r5, r5, [r2, #-16]
    8aa6:	e942 5502 	strd	r5, r5, [r2, #-8]
    8aaa:	3210      	adds	r2, #16
    8aac:	4572      	cmp	r2, lr
    8aae:	d1f8      	bne.n	8aa2 <memset+0x46>
    8ab0:	f10c 0201 	add.w	r2, ip, #1
    8ab4:	f014 0f0c 	tst.w	r4, #12
    8ab8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    8abc:	f004 0c0f 	and.w	ip, r4, #15
    8ac0:	d013      	beq.n	8aea <memset+0x8e>
    8ac2:	f1ac 0304 	sub.w	r3, ip, #4
    8ac6:	f023 0303 	bic.w	r3, r3, #3
    8aca:	3304      	adds	r3, #4
    8acc:	4413      	add	r3, r2
    8ace:	f842 5b04 	str.w	r5, [r2], #4
    8ad2:	4293      	cmp	r3, r2
    8ad4:	d1fb      	bne.n	8ace <memset+0x72>
    8ad6:	f00c 0403 	and.w	r4, ip, #3
    8ada:	b12c      	cbz	r4, 8ae8 <memset+0x8c>
    8adc:	b2c9      	uxtb	r1, r1
    8ade:	441c      	add	r4, r3
    8ae0:	f803 1b01 	strb.w	r1, [r3], #1
    8ae4:	429c      	cmp	r4, r3
    8ae6:	d1fb      	bne.n	8ae0 <memset+0x84>
    8ae8:	bd30      	pop	{r4, r5, pc}
    8aea:	4664      	mov	r4, ip
    8aec:	4613      	mov	r3, r2
    8aee:	2c00      	cmp	r4, #0
    8af0:	d1f4      	bne.n	8adc <memset+0x80>
    8af2:	e7f9      	b.n	8ae8 <memset+0x8c>
    8af4:	4603      	mov	r3, r0
    8af6:	4614      	mov	r4, r2
    8af8:	e7bf      	b.n	8a7a <memset+0x1e>
    8afa:	461a      	mov	r2, r3
    8afc:	46a4      	mov	ip, r4
    8afe:	e7e0      	b.n	8ac2 <memset+0x66>

00008b00 <strncpy>:
    8b00:	ea40 0301 	orr.w	r3, r0, r1
    8b04:	079b      	lsls	r3, r3, #30
    8b06:	b530      	push	{r4, r5, lr}
    8b08:	d101      	bne.n	8b0e <strncpy+0xe>
    8b0a:	2a03      	cmp	r2, #3
    8b0c:	d80f      	bhi.n	8b2e <strncpy+0x2e>
    8b0e:	4684      	mov	ip, r0
    8b10:	f101 3eff 	add.w	lr, r1, #4294967295
    8b14:	e007      	b.n	8b26 <strncpy+0x26>
    8b16:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8b1a:	f803 1b01 	strb.w	r1, [r3], #1
    8b1e:	1e54      	subs	r4, r2, #1
    8b20:	b1c1      	cbz	r1, 8b54 <strncpy+0x54>
    8b22:	469c      	mov	ip, r3
    8b24:	4622      	mov	r2, r4
    8b26:	4663      	mov	r3, ip
    8b28:	2a00      	cmp	r2, #0
    8b2a:	d1f4      	bne.n	8b16 <strncpy+0x16>
    8b2c:	bd30      	pop	{r4, r5, pc}
    8b2e:	460b      	mov	r3, r1
    8b30:	4684      	mov	ip, r0
    8b32:	4619      	mov	r1, r3
    8b34:	f853 5b04 	ldr.w	r5, [r3], #4
    8b38:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    8b3c:	ea24 0405 	bic.w	r4, r4, r5
    8b40:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    8b44:	d1e4      	bne.n	8b10 <strncpy+0x10>
    8b46:	3a04      	subs	r2, #4
    8b48:	2a03      	cmp	r2, #3
    8b4a:	f84c 5b04 	str.w	r5, [ip], #4
    8b4e:	4619      	mov	r1, r3
    8b50:	d8ef      	bhi.n	8b32 <strncpy+0x32>
    8b52:	e7dd      	b.n	8b10 <strncpy+0x10>
    8b54:	4494      	add	ip, r2
    8b56:	2c00      	cmp	r4, #0
    8b58:	d0e8      	beq.n	8b2c <strncpy+0x2c>
    8b5a:	f803 1b01 	strb.w	r1, [r3], #1
    8b5e:	4563      	cmp	r3, ip
    8b60:	d1fb      	bne.n	8b5a <strncpy+0x5a>
    8b62:	bd30      	pop	{r4, r5, pc}

00008b64 <__locale_mb_cur_max>:
    8b64:	4b01      	ldr	r3, [pc, #4]	; (8b6c <__locale_mb_cur_max+0x8>)
    8b66:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    8b6a:	4770      	bx	lr
    8b6c:	20002e8c 	.word	0x20002e8c

00008b70 <_close_r>:
    8b70:	b538      	push	{r3, r4, r5, lr}
    8b72:	4d07      	ldr	r5, [pc, #28]	; (8b90 <_close_r+0x20>)
    8b74:	2200      	movs	r2, #0
    8b76:	4604      	mov	r4, r0
    8b78:	4608      	mov	r0, r1
    8b7a:	602a      	str	r2, [r5, #0]
    8b7c:	f7fd fe5e 	bl	683c <_close>
    8b80:	1c43      	adds	r3, r0, #1
    8b82:	d000      	beq.n	8b86 <_close_r+0x16>
    8b84:	bd38      	pop	{r3, r4, r5, pc}
    8b86:	682b      	ldr	r3, [r5, #0]
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d0fb      	beq.n	8b84 <_close_r+0x14>
    8b8c:	6023      	str	r3, [r4, #0]
    8b8e:	bd38      	pop	{r3, r4, r5, pc}
    8b90:	20004064 	.word	0x20004064

00008b94 <_lseek_r>:
    8b94:	b538      	push	{r3, r4, r5, lr}
    8b96:	460c      	mov	r4, r1
    8b98:	4d08      	ldr	r5, [pc, #32]	; (8bbc <_lseek_r+0x28>)
    8b9a:	4684      	mov	ip, r0
    8b9c:	4611      	mov	r1, r2
    8b9e:	4620      	mov	r0, r4
    8ba0:	461a      	mov	r2, r3
    8ba2:	2300      	movs	r3, #0
    8ba4:	602b      	str	r3, [r5, #0]
    8ba6:	4664      	mov	r4, ip
    8ba8:	f7fd fe54 	bl	6854 <_lseek>
    8bac:	1c43      	adds	r3, r0, #1
    8bae:	d000      	beq.n	8bb2 <_lseek_r+0x1e>
    8bb0:	bd38      	pop	{r3, r4, r5, pc}
    8bb2:	682b      	ldr	r3, [r5, #0]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d0fb      	beq.n	8bb0 <_lseek_r+0x1c>
    8bb8:	6023      	str	r3, [r4, #0]
    8bba:	bd38      	pop	{r3, r4, r5, pc}
    8bbc:	20004064 	.word	0x20004064

00008bc0 <_read_r>:
    8bc0:	b538      	push	{r3, r4, r5, lr}
    8bc2:	460c      	mov	r4, r1
    8bc4:	4d08      	ldr	r5, [pc, #32]	; (8be8 <_read_r+0x28>)
    8bc6:	4684      	mov	ip, r0
    8bc8:	4611      	mov	r1, r2
    8bca:	4620      	mov	r0, r4
    8bcc:	461a      	mov	r2, r3
    8bce:	2300      	movs	r3, #0
    8bd0:	602b      	str	r3, [r5, #0]
    8bd2:	4664      	mov	r4, ip
    8bd4:	f7fd fe30 	bl	6838 <_read>
    8bd8:	1c43      	adds	r3, r0, #1
    8bda:	d000      	beq.n	8bde <_read_r+0x1e>
    8bdc:	bd38      	pop	{r3, r4, r5, pc}
    8bde:	682b      	ldr	r3, [r5, #0]
    8be0:	2b00      	cmp	r3, #0
    8be2:	d0fb      	beq.n	8bdc <_read_r+0x1c>
    8be4:	6023      	str	r3, [r4, #0]
    8be6:	bd38      	pop	{r3, r4, r5, pc}
    8be8:	20004064 	.word	0x20004064

00008bec <_sbrk_r>:
    8bec:	b538      	push	{r3, r4, r5, lr}
    8bee:	4d07      	ldr	r5, [pc, #28]	; (8c0c <_sbrk_r+0x20>)
    8bf0:	2200      	movs	r2, #0
    8bf2:	4604      	mov	r4, r0
    8bf4:	4608      	mov	r0, r1
    8bf6:	602a      	str	r2, [r5, #0]
    8bf8:	f7fd fe04 	bl	6804 <_sbrk>
    8bfc:	1c43      	adds	r3, r0, #1
    8bfe:	d000      	beq.n	8c02 <_sbrk_r+0x16>
    8c00:	bd38      	pop	{r3, r4, r5, pc}
    8c02:	682b      	ldr	r3, [r5, #0]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d0fb      	beq.n	8c00 <_sbrk_r+0x14>
    8c08:	6023      	str	r3, [r4, #0]
    8c0a:	bd38      	pop	{r3, r4, r5, pc}
    8c0c:	20004064 	.word	0x20004064

00008c10 <_write_r>:
    8c10:	b538      	push	{r3, r4, r5, lr}
    8c12:	460c      	mov	r4, r1
    8c14:	4d08      	ldr	r5, [pc, #32]	; (8c38 <_write_r+0x28>)
    8c16:	4684      	mov	ip, r0
    8c18:	4611      	mov	r1, r2
    8c1a:	4620      	mov	r0, r4
    8c1c:	461a      	mov	r2, r3
    8c1e:	2300      	movs	r3, #0
    8c20:	602b      	str	r3, [r5, #0]
    8c22:	4664      	mov	r4, ip
    8c24:	f7fc fe32 	bl	588c <_write>
    8c28:	1c43      	adds	r3, r0, #1
    8c2a:	d000      	beq.n	8c2e <_write_r+0x1e>
    8c2c:	bd38      	pop	{r3, r4, r5, pc}
    8c2e:	682b      	ldr	r3, [r5, #0]
    8c30:	2b00      	cmp	r3, #0
    8c32:	d0fb      	beq.n	8c2c <_write_r+0x1c>
    8c34:	6023      	str	r3, [r4, #0]
    8c36:	bd38      	pop	{r3, r4, r5, pc}
    8c38:	20004064 	.word	0x20004064

00008c3c <__errno>:
    8c3c:	4b01      	ldr	r3, [pc, #4]	; (8c44 <__errno+0x8>)
    8c3e:	6818      	ldr	r0, [r3, #0]
    8c40:	4770      	bx	lr
    8c42:	bf00      	nop
    8c44:	20003414 	.word	0x20003414

00008c48 <__libc_init_array>:
    8c48:	b570      	push	{r4, r5, r6, lr}
    8c4a:	4e0d      	ldr	r6, [pc, #52]	; (8c80 <__libc_init_array+0x38>)
    8c4c:	4d0d      	ldr	r5, [pc, #52]	; (8c84 <__libc_init_array+0x3c>)
    8c4e:	1b76      	subs	r6, r6, r5
    8c50:	10b6      	asrs	r6, r6, #2
    8c52:	d006      	beq.n	8c62 <__libc_init_array+0x1a>
    8c54:	2400      	movs	r4, #0
    8c56:	f855 3b04 	ldr.w	r3, [r5], #4
    8c5a:	3401      	adds	r4, #1
    8c5c:	4798      	blx	r3
    8c5e:	42a6      	cmp	r6, r4
    8c60:	d1f9      	bne.n	8c56 <__libc_init_array+0xe>
    8c62:	4e09      	ldr	r6, [pc, #36]	; (8c88 <__libc_init_array+0x40>)
    8c64:	4d09      	ldr	r5, [pc, #36]	; (8c8c <__libc_init_array+0x44>)
    8c66:	1b76      	subs	r6, r6, r5
    8c68:	f005 f996 	bl	df98 <___init_veneer>
    8c6c:	10b6      	asrs	r6, r6, #2
    8c6e:	d006      	beq.n	8c7e <__libc_init_array+0x36>
    8c70:	2400      	movs	r4, #0
    8c72:	f855 3b04 	ldr.w	r3, [r5], #4
    8c76:	3401      	adds	r4, #1
    8c78:	4798      	blx	r3
    8c7a:	42a6      	cmp	r6, r4
    8c7c:	d1f9      	bne.n	8c72 <__libc_init_array+0x2a>
    8c7e:	bd70      	pop	{r4, r5, r6, pc}
    8c80:	60002000 	.word	0x60002000
    8c84:	60002000 	.word	0x60002000
    8c88:	60002008 	.word	0x60002008
    8c8c:	60002000 	.word	0x60002000

00008c90 <__retarget_lock_init_recursive>:
    8c90:	4770      	bx	lr
    8c92:	bf00      	nop

00008c94 <__retarget_lock_close_recursive>:
    8c94:	4770      	bx	lr
    8c96:	bf00      	nop

00008c98 <__retarget_lock_acquire_recursive>:
    8c98:	4770      	bx	lr
    8c9a:	bf00      	nop

00008c9c <__retarget_lock_release_recursive>:
    8c9c:	4770      	bx	lr
    8c9e:	bf00      	nop
	...

00008cc0 <strlen>:
    8cc0:	f890 f000 	pld	[r0]
    8cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8cc8:	f020 0107 	bic.w	r1, r0, #7
    8ccc:	f06f 0c00 	mvn.w	ip, #0
    8cd0:	f010 0407 	ands.w	r4, r0, #7
    8cd4:	f891 f020 	pld	[r1, #32]
    8cd8:	f040 8049 	bne.w	8d6e <strlen+0xae>
    8cdc:	f04f 0400 	mov.w	r4, #0
    8ce0:	f06f 0007 	mvn.w	r0, #7
    8ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
    8ce8:	f891 f040 	pld	[r1, #64]	; 0x40
    8cec:	f100 0008 	add.w	r0, r0, #8
    8cf0:	fa82 f24c 	uadd8	r2, r2, ip
    8cf4:	faa4 f28c 	sel	r2, r4, ip
    8cf8:	fa83 f34c 	uadd8	r3, r3, ip
    8cfc:	faa2 f38c 	sel	r3, r2, ip
    8d00:	bb4b      	cbnz	r3, 8d56 <strlen+0x96>
    8d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8d06:	fa82 f24c 	uadd8	r2, r2, ip
    8d0a:	f100 0008 	add.w	r0, r0, #8
    8d0e:	faa4 f28c 	sel	r2, r4, ip
    8d12:	fa83 f34c 	uadd8	r3, r3, ip
    8d16:	faa2 f38c 	sel	r3, r2, ip
    8d1a:	b9e3      	cbnz	r3, 8d56 <strlen+0x96>
    8d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8d20:	fa82 f24c 	uadd8	r2, r2, ip
    8d24:	f100 0008 	add.w	r0, r0, #8
    8d28:	faa4 f28c 	sel	r2, r4, ip
    8d2c:	fa83 f34c 	uadd8	r3, r3, ip
    8d30:	faa2 f38c 	sel	r3, r2, ip
    8d34:	b97b      	cbnz	r3, 8d56 <strlen+0x96>
    8d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    8d3a:	f101 0120 	add.w	r1, r1, #32
    8d3e:	fa82 f24c 	uadd8	r2, r2, ip
    8d42:	f100 0008 	add.w	r0, r0, #8
    8d46:	faa4 f28c 	sel	r2, r4, ip
    8d4a:	fa83 f34c 	uadd8	r3, r3, ip
    8d4e:	faa2 f38c 	sel	r3, r2, ip
    8d52:	2b00      	cmp	r3, #0
    8d54:	d0c6      	beq.n	8ce4 <strlen+0x24>
    8d56:	2a00      	cmp	r2, #0
    8d58:	bf04      	itt	eq
    8d5a:	3004      	addeq	r0, #4
    8d5c:	461a      	moveq	r2, r3
    8d5e:	ba12      	rev	r2, r2
    8d60:	fab2 f282 	clz	r2, r2
    8d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    8d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    8d6c:	4770      	bx	lr
    8d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    8d72:	f004 0503 	and.w	r5, r4, #3
    8d76:	f1c4 0000 	rsb	r0, r4, #0
    8d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    8d7e:	f014 0f04 	tst.w	r4, #4
    8d82:	f891 f040 	pld	[r1, #64]	; 0x40
    8d86:	fa0c f505 	lsl.w	r5, ip, r5
    8d8a:	ea62 0205 	orn	r2, r2, r5
    8d8e:	bf1c      	itt	ne
    8d90:	ea63 0305 	ornne	r3, r3, r5
    8d94:	4662      	movne	r2, ip
    8d96:	f04f 0400 	mov.w	r4, #0
    8d9a:	e7a9      	b.n	8cf0 <strlen+0x30>

00008d9c <__register_exitproc>:
    8d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8da0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8e20 <__register_exitproc+0x84>
    8da4:	4606      	mov	r6, r0
    8da6:	f8da 0000 	ldr.w	r0, [sl]
    8daa:	4698      	mov	r8, r3
    8dac:	460f      	mov	r7, r1
    8dae:	4691      	mov	r9, r2
    8db0:	f7ff ff72 	bl	8c98 <__retarget_lock_acquire_recursive>
    8db4:	4b18      	ldr	r3, [pc, #96]	; (8e18 <__register_exitproc+0x7c>)
    8db6:	681c      	ldr	r4, [r3, #0]
    8db8:	b324      	cbz	r4, 8e04 <__register_exitproc+0x68>
    8dba:	6865      	ldr	r5, [r4, #4]
    8dbc:	2d1f      	cmp	r5, #31
    8dbe:	dc24      	bgt.n	8e0a <__register_exitproc+0x6e>
    8dc0:	b95e      	cbnz	r6, 8dda <__register_exitproc+0x3e>
    8dc2:	1c6b      	adds	r3, r5, #1
    8dc4:	3502      	adds	r5, #2
    8dc6:	f8da 0000 	ldr.w	r0, [sl]
    8dca:	6063      	str	r3, [r4, #4]
    8dcc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    8dd0:	f7ff ff64 	bl	8c9c <__retarget_lock_release_recursive>
    8dd4:	2000      	movs	r0, #0
    8dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8dda:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    8dde:	2301      	movs	r3, #1
    8de0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8de4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8de8:	40ab      	lsls	r3, r5
    8dea:	431a      	orrs	r2, r3
    8dec:	2e02      	cmp	r6, #2
    8dee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8df2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8df6:	d1e4      	bne.n	8dc2 <__register_exitproc+0x26>
    8df8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    8dfc:	431a      	orrs	r2, r3
    8dfe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8e02:	e7de      	b.n	8dc2 <__register_exitproc+0x26>
    8e04:	4c05      	ldr	r4, [pc, #20]	; (8e1c <__register_exitproc+0x80>)
    8e06:	601c      	str	r4, [r3, #0]
    8e08:	e7d7      	b.n	8dba <__register_exitproc+0x1e>
    8e0a:	f8da 0000 	ldr.w	r0, [sl]
    8e0e:	f7ff ff45 	bl	8c9c <__retarget_lock_release_recursive>
    8e12:	f04f 30ff 	mov.w	r0, #4294967295
    8e16:	e7de      	b.n	8dd6 <__register_exitproc+0x3a>
    8e18:	20003d28 	.word	0x20003d28
    8e1c:	20003d2c 	.word	0x20003d2c
    8e20:	20002e80 	.word	0x20002e80

00008e24 <_malloc_trim_r>:
    8e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e26:	4f24      	ldr	r7, [pc, #144]	; (8eb8 <_malloc_trim_r+0x94>)
    8e28:	460c      	mov	r4, r1
    8e2a:	4606      	mov	r6, r0
    8e2c:	f7ff f9f0 	bl	8210 <__malloc_lock>
    8e30:	68bb      	ldr	r3, [r7, #8]
    8e32:	685d      	ldr	r5, [r3, #4]
    8e34:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    8e38:	310f      	adds	r1, #15
    8e3a:	f025 0503 	bic.w	r5, r5, #3
    8e3e:	194b      	adds	r3, r1, r5
    8e40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    8e44:	f023 030f 	bic.w	r3, r3, #15
    8e48:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    8e4c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    8e50:	db07      	blt.n	8e62 <_malloc_trim_r+0x3e>
    8e52:	2100      	movs	r1, #0
    8e54:	4630      	mov	r0, r6
    8e56:	f7ff fec9 	bl	8bec <_sbrk_r>
    8e5a:	68bb      	ldr	r3, [r7, #8]
    8e5c:	442b      	add	r3, r5
    8e5e:	4298      	cmp	r0, r3
    8e60:	d004      	beq.n	8e6c <_malloc_trim_r+0x48>
    8e62:	4630      	mov	r0, r6
    8e64:	f7ff f9da 	bl	821c <__malloc_unlock>
    8e68:	2000      	movs	r0, #0
    8e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e6c:	4261      	negs	r1, r4
    8e6e:	4630      	mov	r0, r6
    8e70:	f7ff febc 	bl	8bec <_sbrk_r>
    8e74:	3001      	adds	r0, #1
    8e76:	d00d      	beq.n	8e94 <_malloc_trim_r+0x70>
    8e78:	4a10      	ldr	r2, [pc, #64]	; (8ebc <_malloc_trim_r+0x98>)
    8e7a:	68bb      	ldr	r3, [r7, #8]
    8e7c:	1b2d      	subs	r5, r5, r4
    8e7e:	f045 0501 	orr.w	r5, r5, #1
    8e82:	605d      	str	r5, [r3, #4]
    8e84:	6813      	ldr	r3, [r2, #0]
    8e86:	4630      	mov	r0, r6
    8e88:	1b1b      	subs	r3, r3, r4
    8e8a:	6013      	str	r3, [r2, #0]
    8e8c:	f7ff f9c6 	bl	821c <__malloc_unlock>
    8e90:	2001      	movs	r0, #1
    8e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e94:	2100      	movs	r1, #0
    8e96:	4630      	mov	r0, r6
    8e98:	f7ff fea8 	bl	8bec <_sbrk_r>
    8e9c:	68ba      	ldr	r2, [r7, #8]
    8e9e:	1a83      	subs	r3, r0, r2
    8ea0:	2b0f      	cmp	r3, #15
    8ea2:	ddde      	ble.n	8e62 <_malloc_trim_r+0x3e>
    8ea4:	f043 0301 	orr.w	r3, r3, #1
    8ea8:	6053      	str	r3, [r2, #4]
    8eaa:	4b05      	ldr	r3, [pc, #20]	; (8ec0 <_malloc_trim_r+0x9c>)
    8eac:	4903      	ldr	r1, [pc, #12]	; (8ebc <_malloc_trim_r+0x98>)
    8eae:	681b      	ldr	r3, [r3, #0]
    8eb0:	1ac0      	subs	r0, r0, r3
    8eb2:	6008      	str	r0, [r1, #0]
    8eb4:	e7d5      	b.n	8e62 <_malloc_trim_r+0x3e>
    8eb6:	bf00      	nop
    8eb8:	20002ff8 	.word	0x20002ff8
    8ebc:	20003ec8 	.word	0x20003ec8
    8ec0:	20003400 	.word	0x20003400

00008ec4 <_free_r>:
    8ec4:	2900      	cmp	r1, #0
    8ec6:	d061      	beq.n	8f8c <_free_r+0xc8>
    8ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eca:	460c      	mov	r4, r1
    8ecc:	4606      	mov	r6, r0
    8ece:	f7ff f99f 	bl	8210 <__malloc_lock>
    8ed2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    8ed6:	4f7b      	ldr	r7, [pc, #492]	; (90c4 <_free_r+0x200>)
    8ed8:	f1a4 0508 	sub.w	r5, r4, #8
    8edc:	f022 0101 	bic.w	r1, r2, #1
    8ee0:	eb05 0c01 	add.w	ip, r5, r1
    8ee4:	68b8      	ldr	r0, [r7, #8]
    8ee6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    8eea:	4560      	cmp	r0, ip
    8eec:	f023 0303 	bic.w	r3, r3, #3
    8ef0:	f000 808b 	beq.w	900a <_free_r+0x146>
    8ef4:	07d2      	lsls	r2, r2, #31
    8ef6:	f8cc 3004 	str.w	r3, [ip, #4]
    8efa:	d432      	bmi.n	8f62 <_free_r+0x9e>
    8efc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8f00:	1aad      	subs	r5, r5, r2
    8f02:	4411      	add	r1, r2
    8f04:	68aa      	ldr	r2, [r5, #8]
    8f06:	f107 0008 	add.w	r0, r7, #8
    8f0a:	4282      	cmp	r2, r0
    8f0c:	d06a      	beq.n	8fe4 <_free_r+0x120>
    8f0e:	eb0c 0403 	add.w	r4, ip, r3
    8f12:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8f16:	68ec      	ldr	r4, [r5, #12]
    8f18:	60d4      	str	r4, [r2, #12]
    8f1a:	f01e 0f01 	tst.w	lr, #1
    8f1e:	60a2      	str	r2, [r4, #8]
    8f20:	f000 8097 	beq.w	9052 <_free_r+0x18e>
    8f24:	f041 0301 	orr.w	r3, r1, #1
    8f28:	606b      	str	r3, [r5, #4]
    8f2a:	f8cc 1000 	str.w	r1, [ip]
    8f2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8f32:	d235      	bcs.n	8fa0 <_free_r+0xdc>
    8f34:	6878      	ldr	r0, [r7, #4]
    8f36:	08cb      	lsrs	r3, r1, #3
    8f38:	2201      	movs	r2, #1
    8f3a:	0949      	lsrs	r1, r1, #5
    8f3c:	3301      	adds	r3, #1
    8f3e:	408a      	lsls	r2, r1
    8f40:	4302      	orrs	r2, r0
    8f42:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    8f46:	607a      	str	r2, [r7, #4]
    8f48:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    8f4c:	3a08      	subs	r2, #8
    8f4e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    8f52:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    8f56:	60cd      	str	r5, [r1, #12]
    8f58:	4630      	mov	r0, r6
    8f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8f5e:	f7ff b95d 	b.w	821c <__malloc_unlock>
    8f62:	eb0c 0203 	add.w	r2, ip, r3
    8f66:	6852      	ldr	r2, [r2, #4]
    8f68:	07d0      	lsls	r0, r2, #31
    8f6a:	d410      	bmi.n	8f8e <_free_r+0xca>
    8f6c:	4419      	add	r1, r3
    8f6e:	f107 0008 	add.w	r0, r7, #8
    8f72:	f8dc 3008 	ldr.w	r3, [ip, #8]
    8f76:	4283      	cmp	r3, r0
    8f78:	d073      	beq.n	9062 <_free_r+0x19e>
    8f7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    8f7e:	60da      	str	r2, [r3, #12]
    8f80:	6093      	str	r3, [r2, #8]
    8f82:	f041 0301 	orr.w	r3, r1, #1
    8f86:	606b      	str	r3, [r5, #4]
    8f88:	5069      	str	r1, [r5, r1]
    8f8a:	e7d0      	b.n	8f2e <_free_r+0x6a>
    8f8c:	4770      	bx	lr
    8f8e:	f041 0301 	orr.w	r3, r1, #1
    8f92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8f96:	f844 3c04 	str.w	r3, [r4, #-4]
    8f9a:	f8cc 1000 	str.w	r1, [ip]
    8f9e:	d3c9      	bcc.n	8f34 <_free_r+0x70>
    8fa0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    8fa4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    8fa8:	d248      	bcs.n	903c <_free_r+0x178>
    8faa:	098b      	lsrs	r3, r1, #6
    8fac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    8fb0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    8fb4:	00c3      	lsls	r3, r0, #3
    8fb6:	18f8      	adds	r0, r7, r3
    8fb8:	58fb      	ldr	r3, [r7, r3]
    8fba:	3808      	subs	r0, #8
    8fbc:	4298      	cmp	r0, r3
    8fbe:	d059      	beq.n	9074 <_free_r+0x1b0>
    8fc0:	685a      	ldr	r2, [r3, #4]
    8fc2:	f022 0203 	bic.w	r2, r2, #3
    8fc6:	428a      	cmp	r2, r1
    8fc8:	d902      	bls.n	8fd0 <_free_r+0x10c>
    8fca:	689b      	ldr	r3, [r3, #8]
    8fcc:	4298      	cmp	r0, r3
    8fce:	d1f7      	bne.n	8fc0 <_free_r+0xfc>
    8fd0:	68d8      	ldr	r0, [r3, #12]
    8fd2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    8fd6:	6085      	str	r5, [r0, #8]
    8fd8:	60dd      	str	r5, [r3, #12]
    8fda:	4630      	mov	r0, r6
    8fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8fe0:	f7ff b91c 	b.w	821c <__malloc_unlock>
    8fe4:	eb0c 0203 	add.w	r2, ip, r3
    8fe8:	6852      	ldr	r2, [r2, #4]
    8fea:	07d2      	lsls	r2, r2, #31
    8fec:	d463      	bmi.n	90b6 <_free_r+0x1f2>
    8fee:	440b      	add	r3, r1
    8ff0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    8ff4:	60ca      	str	r2, [r1, #12]
    8ff6:	6091      	str	r1, [r2, #8]
    8ff8:	f043 0201 	orr.w	r2, r3, #1
    8ffc:	606a      	str	r2, [r5, #4]
    8ffe:	4630      	mov	r0, r6
    9000:	50eb      	str	r3, [r5, r3]
    9002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9006:	f7ff b909 	b.w	821c <__malloc_unlock>
    900a:	440b      	add	r3, r1
    900c:	07d1      	lsls	r1, r2, #31
    900e:	d407      	bmi.n	9020 <_free_r+0x15c>
    9010:	f854 2c08 	ldr.w	r2, [r4, #-8]
    9014:	1aad      	subs	r5, r5, r2
    9016:	4413      	add	r3, r2
    9018:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    901c:	60ca      	str	r2, [r1, #12]
    901e:	6091      	str	r1, [r2, #8]
    9020:	f043 0201 	orr.w	r2, r3, #1
    9024:	606a      	str	r2, [r5, #4]
    9026:	4a28      	ldr	r2, [pc, #160]	; (90c8 <_free_r+0x204>)
    9028:	60bd      	str	r5, [r7, #8]
    902a:	6812      	ldr	r2, [r2, #0]
    902c:	429a      	cmp	r2, r3
    902e:	d893      	bhi.n	8f58 <_free_r+0x94>
    9030:	4b26      	ldr	r3, [pc, #152]	; (90cc <_free_r+0x208>)
    9032:	4630      	mov	r0, r6
    9034:	6819      	ldr	r1, [r3, #0]
    9036:	f7ff fef5 	bl	8e24 <_malloc_trim_r>
    903a:	e78d      	b.n	8f58 <_free_r+0x94>
    903c:	2b14      	cmp	r3, #20
    903e:	d90a      	bls.n	9056 <_free_r+0x192>
    9040:	2b54      	cmp	r3, #84	; 0x54
    9042:	d81f      	bhi.n	9084 <_free_r+0x1c0>
    9044:	0b0b      	lsrs	r3, r1, #12
    9046:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    904a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    904e:	00c3      	lsls	r3, r0, #3
    9050:	e7b1      	b.n	8fb6 <_free_r+0xf2>
    9052:	4419      	add	r1, r3
    9054:	e78d      	b.n	8f72 <_free_r+0xae>
    9056:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    905a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    905e:	00c3      	lsls	r3, r0, #3
    9060:	e7a9      	b.n	8fb6 <_free_r+0xf2>
    9062:	f041 0301 	orr.w	r3, r1, #1
    9066:	e9c7 5504 	strd	r5, r5, [r7, #16]
    906a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    906e:	606b      	str	r3, [r5, #4]
    9070:	5069      	str	r1, [r5, r1]
    9072:	e771      	b.n	8f58 <_free_r+0x94>
    9074:	6879      	ldr	r1, [r7, #4]
    9076:	1092      	asrs	r2, r2, #2
    9078:	2401      	movs	r4, #1
    907a:	fa04 f202 	lsl.w	r2, r4, r2
    907e:	430a      	orrs	r2, r1
    9080:	607a      	str	r2, [r7, #4]
    9082:	e7a6      	b.n	8fd2 <_free_r+0x10e>
    9084:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9088:	d806      	bhi.n	9098 <_free_r+0x1d4>
    908a:	0bcb      	lsrs	r3, r1, #15
    908c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9090:	f103 0277 	add.w	r2, r3, #119	; 0x77
    9094:	00c3      	lsls	r3, r0, #3
    9096:	e78e      	b.n	8fb6 <_free_r+0xf2>
    9098:	f240 5254 	movw	r2, #1364	; 0x554
    909c:	4293      	cmp	r3, r2
    909e:	d806      	bhi.n	90ae <_free_r+0x1ea>
    90a0:	0c8b      	lsrs	r3, r1, #18
    90a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    90a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    90aa:	00c3      	lsls	r3, r0, #3
    90ac:	e783      	b.n	8fb6 <_free_r+0xf2>
    90ae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    90b2:	227e      	movs	r2, #126	; 0x7e
    90b4:	e77f      	b.n	8fb6 <_free_r+0xf2>
    90b6:	f041 0301 	orr.w	r3, r1, #1
    90ba:	606b      	str	r3, [r5, #4]
    90bc:	f8cc 1000 	str.w	r1, [ip]
    90c0:	e74a      	b.n	8f58 <_free_r+0x94>
    90c2:	bf00      	nop
    90c4:	20002ff8 	.word	0x20002ff8
    90c8:	20003404 	.word	0x20003404
    90cc:	20003ef8 	.word	0x20003ef8

000090d0 <__ascii_mbtowc>:
    90d0:	b082      	sub	sp, #8
    90d2:	b149      	cbz	r1, 90e8 <__ascii_mbtowc+0x18>
    90d4:	b15a      	cbz	r2, 90ee <__ascii_mbtowc+0x1e>
    90d6:	b16b      	cbz	r3, 90f4 <__ascii_mbtowc+0x24>
    90d8:	7813      	ldrb	r3, [r2, #0]
    90da:	600b      	str	r3, [r1, #0]
    90dc:	7812      	ldrb	r2, [r2, #0]
    90de:	1e10      	subs	r0, r2, #0
    90e0:	bf18      	it	ne
    90e2:	2001      	movne	r0, #1
    90e4:	b002      	add	sp, #8
    90e6:	4770      	bx	lr
    90e8:	a901      	add	r1, sp, #4
    90ea:	2a00      	cmp	r2, #0
    90ec:	d1f3      	bne.n	90d6 <__ascii_mbtowc+0x6>
    90ee:	4610      	mov	r0, r2
    90f0:	b002      	add	sp, #8
    90f2:	4770      	bx	lr
    90f4:	f06f 0001 	mvn.w	r0, #1
    90f8:	e7f4      	b.n	90e4 <__ascii_mbtowc+0x14>
    90fa:	bf00      	nop

000090fc <_Balloc>:
    90fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    90fe:	b570      	push	{r4, r5, r6, lr}
    9100:	4605      	mov	r5, r0
    9102:	460c      	mov	r4, r1
    9104:	b14b      	cbz	r3, 911a <_Balloc+0x1e>
    9106:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    910a:	b180      	cbz	r0, 912e <_Balloc+0x32>
    910c:	6802      	ldr	r2, [r0, #0]
    910e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    9112:	2300      	movs	r3, #0
    9114:	e9c0 3303 	strd	r3, r3, [r0, #12]
    9118:	bd70      	pop	{r4, r5, r6, pc}
    911a:	2221      	movs	r2, #33	; 0x21
    911c:	2104      	movs	r1, #4
    911e:	f7fe fd7b 	bl	7c18 <_calloc_r>
    9122:	4603      	mov	r3, r0
    9124:	6468      	str	r0, [r5, #68]	; 0x44
    9126:	2800      	cmp	r0, #0
    9128:	d1ed      	bne.n	9106 <_Balloc+0xa>
    912a:	2000      	movs	r0, #0
    912c:	bd70      	pop	{r4, r5, r6, pc}
    912e:	2101      	movs	r1, #1
    9130:	fa01 f604 	lsl.w	r6, r1, r4
    9134:	1d72      	adds	r2, r6, #5
    9136:	0092      	lsls	r2, r2, #2
    9138:	4628      	mov	r0, r5
    913a:	f7fe fd6d 	bl	7c18 <_calloc_r>
    913e:	2800      	cmp	r0, #0
    9140:	d0f3      	beq.n	912a <_Balloc+0x2e>
    9142:	e9c0 4601 	strd	r4, r6, [r0, #4]
    9146:	e7e4      	b.n	9112 <_Balloc+0x16>

00009148 <_Bfree>:
    9148:	b131      	cbz	r1, 9158 <_Bfree+0x10>
    914a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    914c:	684a      	ldr	r2, [r1, #4]
    914e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9152:	6008      	str	r0, [r1, #0]
    9154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    9158:	4770      	bx	lr
    915a:	bf00      	nop

0000915c <__multadd>:
    915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9160:	690e      	ldr	r6, [r1, #16]
    9162:	4680      	mov	r8, r0
    9164:	460f      	mov	r7, r1
    9166:	461d      	mov	r5, r3
    9168:	f101 0e14 	add.w	lr, r1, #20
    916c:	2000      	movs	r0, #0
    916e:	f8de 1000 	ldr.w	r1, [lr]
    9172:	b28c      	uxth	r4, r1
    9174:	fb02 5304 	mla	r3, r2, r4, r5
    9178:	0c09      	lsrs	r1, r1, #16
    917a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    917e:	fb02 cc01 	mla	ip, r2, r1, ip
    9182:	3001      	adds	r0, #1
    9184:	b29c      	uxth	r4, r3
    9186:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    918a:	4286      	cmp	r6, r0
    918c:	f84e 4b04 	str.w	r4, [lr], #4
    9190:	ea4f 451c 	mov.w	r5, ip, lsr #16
    9194:	dceb      	bgt.n	916e <__multadd+0x12>
    9196:	b13d      	cbz	r5, 91a8 <__multadd+0x4c>
    9198:	68bb      	ldr	r3, [r7, #8]
    919a:	42b3      	cmp	r3, r6
    919c:	dd07      	ble.n	91ae <__multadd+0x52>
    919e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    91a2:	3601      	adds	r6, #1
    91a4:	615d      	str	r5, [r3, #20]
    91a6:	613e      	str	r6, [r7, #16]
    91a8:	4638      	mov	r0, r7
    91aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91ae:	6879      	ldr	r1, [r7, #4]
    91b0:	4640      	mov	r0, r8
    91b2:	3101      	adds	r1, #1
    91b4:	f7ff ffa2 	bl	90fc <_Balloc>
    91b8:	4604      	mov	r4, r0
    91ba:	b1b0      	cbz	r0, 91ea <__multadd+0x8e>
    91bc:	693a      	ldr	r2, [r7, #16]
    91be:	3202      	adds	r2, #2
    91c0:	f107 010c 	add.w	r1, r7, #12
    91c4:	0092      	lsls	r2, r2, #2
    91c6:	300c      	adds	r0, #12
    91c8:	f7fc ff18 	bl	5ffc <memcpy>
    91cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    91d0:	687a      	ldr	r2, [r7, #4]
    91d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    91d6:	6039      	str	r1, [r7, #0]
    91d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    91dc:	4627      	mov	r7, r4
    91de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    91e2:	3601      	adds	r6, #1
    91e4:	615d      	str	r5, [r3, #20]
    91e6:	613e      	str	r6, [r7, #16]
    91e8:	e7de      	b.n	91a8 <__multadd+0x4c>
    91ea:	4b03      	ldr	r3, [pc, #12]	; (91f8 <__multadd+0x9c>)
    91ec:	4803      	ldr	r0, [pc, #12]	; (91fc <__multadd+0xa0>)
    91ee:	4622      	mov	r2, r4
    91f0:	21ba      	movs	r1, #186	; 0xba
    91f2:	f002 faa9 	bl	b748 <__assert_func>
    91f6:	bf00      	nop
    91f8:	200011b4 	.word	0x200011b4
    91fc:	200011c8 	.word	0x200011c8

00009200 <__hi0bits>:
    9200:	0c03      	lsrs	r3, r0, #16
    9202:	041b      	lsls	r3, r3, #16
    9204:	b9d3      	cbnz	r3, 923c <__hi0bits+0x3c>
    9206:	0400      	lsls	r0, r0, #16
    9208:	2310      	movs	r3, #16
    920a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    920e:	bf04      	itt	eq
    9210:	0200      	lsleq	r0, r0, #8
    9212:	3308      	addeq	r3, #8
    9214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    9218:	bf04      	itt	eq
    921a:	0100      	lsleq	r0, r0, #4
    921c:	3304      	addeq	r3, #4
    921e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    9222:	bf04      	itt	eq
    9224:	0080      	lsleq	r0, r0, #2
    9226:	3302      	addeq	r3, #2
    9228:	2800      	cmp	r0, #0
    922a:	db05      	blt.n	9238 <__hi0bits+0x38>
    922c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    9230:	f103 0301 	add.w	r3, r3, #1
    9234:	bf08      	it	eq
    9236:	2320      	moveq	r3, #32
    9238:	4618      	mov	r0, r3
    923a:	4770      	bx	lr
    923c:	2300      	movs	r3, #0
    923e:	e7e4      	b.n	920a <__hi0bits+0xa>

00009240 <__lo0bits>:
    9240:	6803      	ldr	r3, [r0, #0]
    9242:	f013 0207 	ands.w	r2, r3, #7
    9246:	d008      	beq.n	925a <__lo0bits+0x1a>
    9248:	07d9      	lsls	r1, r3, #31
    924a:	d41f      	bmi.n	928c <__lo0bits+0x4c>
    924c:	079a      	lsls	r2, r3, #30
    924e:	d522      	bpl.n	9296 <__lo0bits+0x56>
    9250:	085b      	lsrs	r3, r3, #1
    9252:	6003      	str	r3, [r0, #0]
    9254:	2201      	movs	r2, #1
    9256:	4610      	mov	r0, r2
    9258:	4770      	bx	lr
    925a:	b299      	uxth	r1, r3
    925c:	b909      	cbnz	r1, 9262 <__lo0bits+0x22>
    925e:	0c1b      	lsrs	r3, r3, #16
    9260:	2210      	movs	r2, #16
    9262:	b2d9      	uxtb	r1, r3
    9264:	b909      	cbnz	r1, 926a <__lo0bits+0x2a>
    9266:	3208      	adds	r2, #8
    9268:	0a1b      	lsrs	r3, r3, #8
    926a:	0719      	lsls	r1, r3, #28
    926c:	bf04      	itt	eq
    926e:	091b      	lsreq	r3, r3, #4
    9270:	3204      	addeq	r2, #4
    9272:	0799      	lsls	r1, r3, #30
    9274:	bf04      	itt	eq
    9276:	089b      	lsreq	r3, r3, #2
    9278:	3202      	addeq	r2, #2
    927a:	07d9      	lsls	r1, r3, #31
    927c:	d403      	bmi.n	9286 <__lo0bits+0x46>
    927e:	085b      	lsrs	r3, r3, #1
    9280:	f102 0201 	add.w	r2, r2, #1
    9284:	d005      	beq.n	9292 <__lo0bits+0x52>
    9286:	6003      	str	r3, [r0, #0]
    9288:	4610      	mov	r0, r2
    928a:	4770      	bx	lr
    928c:	2200      	movs	r2, #0
    928e:	4610      	mov	r0, r2
    9290:	4770      	bx	lr
    9292:	2220      	movs	r2, #32
    9294:	e7df      	b.n	9256 <__lo0bits+0x16>
    9296:	089b      	lsrs	r3, r3, #2
    9298:	2202      	movs	r2, #2
    929a:	6003      	str	r3, [r0, #0]
    929c:	4610      	mov	r0, r2
    929e:	4770      	bx	lr

000092a0 <__i2b>:
    92a0:	b538      	push	{r3, r4, r5, lr}
    92a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    92a4:	4604      	mov	r4, r0
    92a6:	460d      	mov	r5, r1
    92a8:	b14b      	cbz	r3, 92be <__i2b+0x1e>
    92aa:	6858      	ldr	r0, [r3, #4]
    92ac:	b1b0      	cbz	r0, 92dc <__i2b+0x3c>
    92ae:	6802      	ldr	r2, [r0, #0]
    92b0:	605a      	str	r2, [r3, #4]
    92b2:	2200      	movs	r2, #0
    92b4:	2301      	movs	r3, #1
    92b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    92ba:	60c2      	str	r2, [r0, #12]
    92bc:	bd38      	pop	{r3, r4, r5, pc}
    92be:	2221      	movs	r2, #33	; 0x21
    92c0:	2104      	movs	r1, #4
    92c2:	f7fe fca9 	bl	7c18 <_calloc_r>
    92c6:	4603      	mov	r3, r0
    92c8:	6460      	str	r0, [r4, #68]	; 0x44
    92ca:	2800      	cmp	r0, #0
    92cc:	d1ed      	bne.n	92aa <__i2b+0xa>
    92ce:	4b09      	ldr	r3, [pc, #36]	; (92f4 <__i2b+0x54>)
    92d0:	4809      	ldr	r0, [pc, #36]	; (92f8 <__i2b+0x58>)
    92d2:	2200      	movs	r2, #0
    92d4:	f240 1145 	movw	r1, #325	; 0x145
    92d8:	f002 fa36 	bl	b748 <__assert_func>
    92dc:	221c      	movs	r2, #28
    92de:	2101      	movs	r1, #1
    92e0:	4620      	mov	r0, r4
    92e2:	f7fe fc99 	bl	7c18 <_calloc_r>
    92e6:	2800      	cmp	r0, #0
    92e8:	d0f1      	beq.n	92ce <__i2b+0x2e>
    92ea:	2201      	movs	r2, #1
    92ec:	2302      	movs	r3, #2
    92ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    92f2:	e7de      	b.n	92b2 <__i2b+0x12>
    92f4:	200011b4 	.word	0x200011b4
    92f8:	200011c8 	.word	0x200011c8

000092fc <__multiply>:
    92fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9300:	690e      	ldr	r6, [r1, #16]
    9302:	6915      	ldr	r5, [r2, #16]
    9304:	42ae      	cmp	r6, r5
    9306:	b085      	sub	sp, #20
    9308:	4688      	mov	r8, r1
    930a:	4614      	mov	r4, r2
    930c:	db05      	blt.n	931a <__multiply+0x1e>
    930e:	462a      	mov	r2, r5
    9310:	4623      	mov	r3, r4
    9312:	4635      	mov	r5, r6
    9314:	460c      	mov	r4, r1
    9316:	4616      	mov	r6, r2
    9318:	4698      	mov	r8, r3
    931a:	68a3      	ldr	r3, [r4, #8]
    931c:	6861      	ldr	r1, [r4, #4]
    931e:	19af      	adds	r7, r5, r6
    9320:	42bb      	cmp	r3, r7
    9322:	bfb8      	it	lt
    9324:	3101      	addlt	r1, #1
    9326:	f7ff fee9 	bl	90fc <_Balloc>
    932a:	9001      	str	r0, [sp, #4]
    932c:	2800      	cmp	r0, #0
    932e:	f000 8087 	beq.w	9440 <__multiply+0x144>
    9332:	9b01      	ldr	r3, [sp, #4]
    9334:	f103 0914 	add.w	r9, r3, #20
    9338:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    933c:	45d1      	cmp	r9, sl
    933e:	d205      	bcs.n	934c <__multiply+0x50>
    9340:	464b      	mov	r3, r9
    9342:	2200      	movs	r2, #0
    9344:	f843 2b04 	str.w	r2, [r3], #4
    9348:	459a      	cmp	sl, r3
    934a:	d8fb      	bhi.n	9344 <__multiply+0x48>
    934c:	f108 0814 	add.w	r8, r8, #20
    9350:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    9354:	f104 0314 	add.w	r3, r4, #20
    9358:	45d8      	cmp	r8, fp
    935a:	461a      	mov	r2, r3
    935c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9360:	d25f      	bcs.n	9422 <__multiply+0x126>
    9362:	1b2b      	subs	r3, r5, r4
    9364:	3b15      	subs	r3, #21
    9366:	f023 0303 	bic.w	r3, r3, #3
    936a:	3304      	adds	r3, #4
    936c:	3415      	adds	r4, #21
    936e:	42a5      	cmp	r5, r4
    9370:	bf38      	it	cc
    9372:	2304      	movcc	r3, #4
    9374:	e9cd a702 	strd	sl, r7, [sp, #8]
    9378:	46ac      	mov	ip, r5
    937a:	461f      	mov	r7, r3
    937c:	4692      	mov	sl, r2
    937e:	e005      	b.n	938c <__multiply+0x90>
    9380:	0c09      	lsrs	r1, r1, #16
    9382:	d129      	bne.n	93d8 <__multiply+0xdc>
    9384:	45c3      	cmp	fp, r8
    9386:	f109 0904 	add.w	r9, r9, #4
    938a:	d948      	bls.n	941e <__multiply+0x122>
    938c:	f858 1b04 	ldr.w	r1, [r8], #4
    9390:	b28d      	uxth	r5, r1
    9392:	2d00      	cmp	r5, #0
    9394:	d0f4      	beq.n	9380 <__multiply+0x84>
    9396:	4656      	mov	r6, sl
    9398:	464c      	mov	r4, r9
    939a:	2300      	movs	r3, #0
    939c:	f856 1b04 	ldr.w	r1, [r6], #4
    93a0:	6822      	ldr	r2, [r4, #0]
    93a2:	fa1f fe81 	uxth.w	lr, r1
    93a6:	b290      	uxth	r0, r2
    93a8:	0c09      	lsrs	r1, r1, #16
    93aa:	fb05 000e 	mla	r0, r5, lr, r0
    93ae:	0c12      	lsrs	r2, r2, #16
    93b0:	4403      	add	r3, r0
    93b2:	fb05 2201 	mla	r2, r5, r1, r2
    93b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    93ba:	b29b      	uxth	r3, r3
    93bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    93c0:	45b4      	cmp	ip, r6
    93c2:	f844 3b04 	str.w	r3, [r4], #4
    93c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    93ca:	d8e7      	bhi.n	939c <__multiply+0xa0>
    93cc:	f849 3007 	str.w	r3, [r9, r7]
    93d0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    93d4:	0c09      	lsrs	r1, r1, #16
    93d6:	d0d5      	beq.n	9384 <__multiply+0x88>
    93d8:	f8d9 3000 	ldr.w	r3, [r9]
    93dc:	4650      	mov	r0, sl
    93de:	461a      	mov	r2, r3
    93e0:	464c      	mov	r4, r9
    93e2:	2600      	movs	r6, #0
    93e4:	8805      	ldrh	r5, [r0, #0]
    93e6:	0c12      	lsrs	r2, r2, #16
    93e8:	fb01 2205 	mla	r2, r1, r5, r2
    93ec:	4416      	add	r6, r2
    93ee:	b29b      	uxth	r3, r3
    93f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    93f4:	f844 3b04 	str.w	r3, [r4], #4
    93f8:	f850 5b04 	ldr.w	r5, [r0], #4
    93fc:	6822      	ldr	r2, [r4, #0]
    93fe:	0c2d      	lsrs	r5, r5, #16
    9400:	b293      	uxth	r3, r2
    9402:	fb01 3305 	mla	r3, r1, r5, r3
    9406:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    940a:	4584      	cmp	ip, r0
    940c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    9410:	d8e8      	bhi.n	93e4 <__multiply+0xe8>
    9412:	45c3      	cmp	fp, r8
    9414:	f849 3007 	str.w	r3, [r9, r7]
    9418:	f109 0904 	add.w	r9, r9, #4
    941c:	d8b6      	bhi.n	938c <__multiply+0x90>
    941e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    9422:	2f00      	cmp	r7, #0
    9424:	dc02      	bgt.n	942c <__multiply+0x130>
    9426:	e005      	b.n	9434 <__multiply+0x138>
    9428:	3f01      	subs	r7, #1
    942a:	d003      	beq.n	9434 <__multiply+0x138>
    942c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    9430:	2b00      	cmp	r3, #0
    9432:	d0f9      	beq.n	9428 <__multiply+0x12c>
    9434:	9b01      	ldr	r3, [sp, #4]
    9436:	4618      	mov	r0, r3
    9438:	611f      	str	r7, [r3, #16]
    943a:	b005      	add	sp, #20
    943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9440:	4b03      	ldr	r3, [pc, #12]	; (9450 <__multiply+0x154>)
    9442:	4804      	ldr	r0, [pc, #16]	; (9454 <__multiply+0x158>)
    9444:	9a01      	ldr	r2, [sp, #4]
    9446:	f44f 71b1 	mov.w	r1, #354	; 0x162
    944a:	f002 f97d 	bl	b748 <__assert_func>
    944e:	bf00      	nop
    9450:	200011b4 	.word	0x200011b4
    9454:	200011c8 	.word	0x200011c8

00009458 <__pow5mult>:
    9458:	f012 0303 	ands.w	r3, r2, #3
    945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9460:	4614      	mov	r4, r2
    9462:	4606      	mov	r6, r0
    9464:	d132      	bne.n	94cc <__pow5mult+0x74>
    9466:	460d      	mov	r5, r1
    9468:	10a4      	asrs	r4, r4, #2
    946a:	d020      	beq.n	94ae <__pow5mult+0x56>
    946c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    9470:	f1b8 0f00 	cmp.w	r8, #0
    9474:	d033      	beq.n	94de <__pow5mult+0x86>
    9476:	07e3      	lsls	r3, r4, #31
    9478:	f04f 0700 	mov.w	r7, #0
    947c:	d407      	bmi.n	948e <__pow5mult+0x36>
    947e:	1064      	asrs	r4, r4, #1
    9480:	d015      	beq.n	94ae <__pow5mult+0x56>
    9482:	f8d8 0000 	ldr.w	r0, [r8]
    9486:	b1a8      	cbz	r0, 94b4 <__pow5mult+0x5c>
    9488:	4680      	mov	r8, r0
    948a:	07e3      	lsls	r3, r4, #31
    948c:	d5f7      	bpl.n	947e <__pow5mult+0x26>
    948e:	4642      	mov	r2, r8
    9490:	4629      	mov	r1, r5
    9492:	4630      	mov	r0, r6
    9494:	f7ff ff32 	bl	92fc <__multiply>
    9498:	b1b5      	cbz	r5, 94c8 <__pow5mult+0x70>
    949a:	6869      	ldr	r1, [r5, #4]
    949c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    949e:	1064      	asrs	r4, r4, #1
    94a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    94a4:	602a      	str	r2, [r5, #0]
    94a6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    94aa:	4605      	mov	r5, r0
    94ac:	d1e9      	bne.n	9482 <__pow5mult+0x2a>
    94ae:	4628      	mov	r0, r5
    94b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94b4:	4642      	mov	r2, r8
    94b6:	4641      	mov	r1, r8
    94b8:	4630      	mov	r0, r6
    94ba:	f7ff ff1f 	bl	92fc <__multiply>
    94be:	f8c8 0000 	str.w	r0, [r8]
    94c2:	6007      	str	r7, [r0, #0]
    94c4:	4680      	mov	r8, r0
    94c6:	e7e0      	b.n	948a <__pow5mult+0x32>
    94c8:	4605      	mov	r5, r0
    94ca:	e7d8      	b.n	947e <__pow5mult+0x26>
    94cc:	3b01      	subs	r3, #1
    94ce:	4a0f      	ldr	r2, [pc, #60]	; (950c <__pow5mult+0xb4>)
    94d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    94d4:	2300      	movs	r3, #0
    94d6:	f7ff fe41 	bl	915c <__multadd>
    94da:	4605      	mov	r5, r0
    94dc:	e7c4      	b.n	9468 <__pow5mult+0x10>
    94de:	2101      	movs	r1, #1
    94e0:	4630      	mov	r0, r6
    94e2:	f7ff fe0b 	bl	90fc <_Balloc>
    94e6:	4680      	mov	r8, r0
    94e8:	b140      	cbz	r0, 94fc <__pow5mult+0xa4>
    94ea:	2301      	movs	r3, #1
    94ec:	f240 2271 	movw	r2, #625	; 0x271
    94f0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    94f4:	2300      	movs	r3, #0
    94f6:	6430      	str	r0, [r6, #64]	; 0x40
    94f8:	6003      	str	r3, [r0, #0]
    94fa:	e7bc      	b.n	9476 <__pow5mult+0x1e>
    94fc:	4b04      	ldr	r3, [pc, #16]	; (9510 <__pow5mult+0xb8>)
    94fe:	4805      	ldr	r0, [pc, #20]	; (9514 <__pow5mult+0xbc>)
    9500:	4642      	mov	r2, r8
    9502:	f240 1145 	movw	r1, #325	; 0x145
    9506:	f002 f91f 	bl	b748 <__assert_func>
    950a:	bf00      	nop
    950c:	2000176c 	.word	0x2000176c
    9510:	200011b4 	.word	0x200011b4
    9514:	200011c8 	.word	0x200011c8

00009518 <__lshift>:
    9518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    951c:	460d      	mov	r5, r1
    951e:	4614      	mov	r4, r2
    9520:	692f      	ldr	r7, [r5, #16]
    9522:	68ab      	ldr	r3, [r5, #8]
    9524:	6849      	ldr	r1, [r1, #4]
    9526:	eb07 1762 	add.w	r7, r7, r2, asr #5
    952a:	1c7e      	adds	r6, r7, #1
    952c:	429e      	cmp	r6, r3
    952e:	4680      	mov	r8, r0
    9530:	ea4f 1962 	mov.w	r9, r2, asr #5
    9534:	dd04      	ble.n	9540 <__lshift+0x28>
    9536:	005b      	lsls	r3, r3, #1
    9538:	429e      	cmp	r6, r3
    953a:	f101 0101 	add.w	r1, r1, #1
    953e:	dcfa      	bgt.n	9536 <__lshift+0x1e>
    9540:	4640      	mov	r0, r8
    9542:	f7ff fddb 	bl	90fc <_Balloc>
    9546:	4684      	mov	ip, r0
    9548:	2800      	cmp	r0, #0
    954a:	d052      	beq.n	95f2 <__lshift+0xda>
    954c:	f1b9 0f00 	cmp.w	r9, #0
    9550:	f100 0214 	add.w	r2, r0, #20
    9554:	dd0e      	ble.n	9574 <__lshift+0x5c>
    9556:	f109 0105 	add.w	r1, r9, #5
    955a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    955e:	4613      	mov	r3, r2
    9560:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9564:	2000      	movs	r0, #0
    9566:	f843 0b04 	str.w	r0, [r3], #4
    956a:	428b      	cmp	r3, r1
    956c:	d1fb      	bne.n	9566 <__lshift+0x4e>
    956e:	f1ae 0314 	sub.w	r3, lr, #20
    9572:	441a      	add	r2, r3
    9574:	6929      	ldr	r1, [r5, #16]
    9576:	f105 0314 	add.w	r3, r5, #20
    957a:	f014 0e1f 	ands.w	lr, r4, #31
    957e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9582:	d02e      	beq.n	95e2 <__lshift+0xca>
    9584:	f1ce 0920 	rsb	r9, lr, #32
    9588:	4610      	mov	r0, r2
    958a:	f04f 0a00 	mov.w	sl, #0
    958e:	681c      	ldr	r4, [r3, #0]
    9590:	fa04 f40e 	lsl.w	r4, r4, lr
    9594:	ea44 040a 	orr.w	r4, r4, sl
    9598:	f840 4b04 	str.w	r4, [r0], #4
    959c:	f853 4b04 	ldr.w	r4, [r3], #4
    95a0:	4299      	cmp	r1, r3
    95a2:	fa24 fa09 	lsr.w	sl, r4, r9
    95a6:	d8f2      	bhi.n	958e <__lshift+0x76>
    95a8:	1b4b      	subs	r3, r1, r5
    95aa:	3b15      	subs	r3, #21
    95ac:	f023 0303 	bic.w	r3, r3, #3
    95b0:	3304      	adds	r3, #4
    95b2:	f105 0015 	add.w	r0, r5, #21
    95b6:	4281      	cmp	r1, r0
    95b8:	bf38      	it	cc
    95ba:	2304      	movcc	r3, #4
    95bc:	f1ba 0f00 	cmp.w	sl, #0
    95c0:	bf18      	it	ne
    95c2:	4637      	movne	r7, r6
    95c4:	f842 a003 	str.w	sl, [r2, r3]
    95c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    95cc:	686a      	ldr	r2, [r5, #4]
    95ce:	f8cc 7010 	str.w	r7, [ip, #16]
    95d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    95d6:	6029      	str	r1, [r5, #0]
    95d8:	4660      	mov	r0, ip
    95da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    95de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95e2:	3a04      	subs	r2, #4
    95e4:	f853 0b04 	ldr.w	r0, [r3], #4
    95e8:	f842 0f04 	str.w	r0, [r2, #4]!
    95ec:	4299      	cmp	r1, r3
    95ee:	d8f9      	bhi.n	95e4 <__lshift+0xcc>
    95f0:	e7ea      	b.n	95c8 <__lshift+0xb0>
    95f2:	4b03      	ldr	r3, [pc, #12]	; (9600 <__lshift+0xe8>)
    95f4:	4803      	ldr	r0, [pc, #12]	; (9604 <__lshift+0xec>)
    95f6:	4662      	mov	r2, ip
    95f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    95fc:	f002 f8a4 	bl	b748 <__assert_func>
    9600:	200011b4 	.word	0x200011b4
    9604:	200011c8 	.word	0x200011c8

00009608 <__mcmp>:
    9608:	690b      	ldr	r3, [r1, #16]
    960a:	4684      	mov	ip, r0
    960c:	6900      	ldr	r0, [r0, #16]
    960e:	1ac0      	subs	r0, r0, r3
    9610:	d116      	bne.n	9640 <__mcmp+0x38>
    9612:	f10c 0c14 	add.w	ip, ip, #20
    9616:	3114      	adds	r1, #20
    9618:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    961c:	b410      	push	{r4}
    961e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9622:	e001      	b.n	9628 <__mcmp+0x20>
    9624:	4594      	cmp	ip, r2
    9626:	d208      	bcs.n	963a <__mcmp+0x32>
    9628:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    962c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9630:	428c      	cmp	r4, r1
    9632:	d0f7      	beq.n	9624 <__mcmp+0x1c>
    9634:	d205      	bcs.n	9642 <__mcmp+0x3a>
    9636:	f04f 30ff 	mov.w	r0, #4294967295
    963a:	f85d 4b04 	ldr.w	r4, [sp], #4
    963e:	4770      	bx	lr
    9640:	4770      	bx	lr
    9642:	2001      	movs	r0, #1
    9644:	f85d 4b04 	ldr.w	r4, [sp], #4
    9648:	4770      	bx	lr
    964a:	bf00      	nop

0000964c <__mdiff>:
    964c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9650:	690f      	ldr	r7, [r1, #16]
    9652:	6913      	ldr	r3, [r2, #16]
    9654:	1aff      	subs	r7, r7, r3
    9656:	2f00      	cmp	r7, #0
    9658:	460e      	mov	r6, r1
    965a:	4690      	mov	r8, r2
    965c:	d17f      	bne.n	975e <__mdiff+0x112>
    965e:	f101 0514 	add.w	r5, r1, #20
    9662:	3214      	adds	r2, #20
    9664:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9668:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    966c:	e001      	b.n	9672 <__mdiff+0x26>
    966e:	429d      	cmp	r5, r3
    9670:	d278      	bcs.n	9764 <__mdiff+0x118>
    9672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9676:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    967a:	42a1      	cmp	r1, r4
    967c:	d0f7      	beq.n	966e <__mdiff+0x22>
    967e:	d369      	bcc.n	9754 <__mdiff+0x108>
    9680:	6871      	ldr	r1, [r6, #4]
    9682:	f7ff fd3b 	bl	90fc <_Balloc>
    9686:	4681      	mov	r9, r0
    9688:	2800      	cmp	r0, #0
    968a:	d077      	beq.n	977c <__mdiff+0x130>
    968c:	6935      	ldr	r5, [r6, #16]
    968e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    9692:	60c7      	str	r7, [r0, #12]
    9694:	f108 0e14 	add.w	lr, r8, #20
    9698:	f106 0014 	add.w	r0, r6, #20
    969c:	f109 0a14 	add.w	sl, r9, #20
    96a0:	f106 0110 	add.w	r1, r6, #16
    96a4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    96a8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    96ac:	4656      	mov	r6, sl
    96ae:	f04f 0c00 	mov.w	ip, #0
    96b2:	f85e 4b04 	ldr.w	r4, [lr], #4
    96b6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    96ba:	b2a3      	uxth	r3, r4
    96bc:	fa1c fc8b 	uxtah	ip, ip, fp
    96c0:	ebac 0303 	sub.w	r3, ip, r3
    96c4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    96c8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    96cc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    96d0:	b29b      	uxth	r3, r3
    96d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    96d6:	4572      	cmp	r2, lr
    96d8:	f846 3b04 	str.w	r3, [r6], #4
    96dc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    96e0:	d8e7      	bhi.n	96b2 <__mdiff+0x66>
    96e2:	eba2 0108 	sub.w	r1, r2, r8
    96e6:	3915      	subs	r1, #21
    96e8:	f108 0815 	add.w	r8, r8, #21
    96ec:	4542      	cmp	r2, r8
    96ee:	f021 0403 	bic.w	r4, r1, #3
    96f2:	f104 0404 	add.w	r4, r4, #4
    96f6:	bf38      	it	cc
    96f8:	2404      	movcc	r4, #4
    96fa:	4420      	add	r0, r4
    96fc:	f021 0203 	bic.w	r2, r1, #3
    9700:	bf38      	it	cc
    9702:	2200      	movcc	r2, #0
    9704:	4287      	cmp	r7, r0
    9706:	4452      	add	r2, sl
    9708:	4454      	add	r4, sl
    970a:	d918      	bls.n	973e <__mdiff+0xf2>
    970c:	4626      	mov	r6, r4
    970e:	4601      	mov	r1, r0
    9710:	f851 3b04 	ldr.w	r3, [r1], #4
    9714:	fa1c fc83 	uxtah	ip, ip, r3
    9718:	ea4f 422c 	mov.w	r2, ip, asr #16
    971c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9720:	fa1f fc8c 	uxth.w	ip, ip
    9724:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9728:	428f      	cmp	r7, r1
    972a:	f846 3b04 	str.w	r3, [r6], #4
    972e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9732:	d8ed      	bhi.n	9710 <__mdiff+0xc4>
    9734:	3f01      	subs	r7, #1
    9736:	1a3f      	subs	r7, r7, r0
    9738:	f027 0703 	bic.w	r7, r7, #3
    973c:	19e2      	adds	r2, r4, r7
    973e:	b923      	cbnz	r3, 974a <__mdiff+0xfe>
    9740:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    9744:	3d01      	subs	r5, #1
    9746:	2b00      	cmp	r3, #0
    9748:	d0fa      	beq.n	9740 <__mdiff+0xf4>
    974a:	f8c9 5010 	str.w	r5, [r9, #16]
    974e:	4648      	mov	r0, r9
    9750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9754:	4633      	mov	r3, r6
    9756:	2701      	movs	r7, #1
    9758:	4646      	mov	r6, r8
    975a:	4698      	mov	r8, r3
    975c:	e790      	b.n	9680 <__mdiff+0x34>
    975e:	dbf9      	blt.n	9754 <__mdiff+0x108>
    9760:	2700      	movs	r7, #0
    9762:	e78d      	b.n	9680 <__mdiff+0x34>
    9764:	2100      	movs	r1, #0
    9766:	f7ff fcc9 	bl	90fc <_Balloc>
    976a:	4681      	mov	r9, r0
    976c:	b168      	cbz	r0, 978a <__mdiff+0x13e>
    976e:	2201      	movs	r2, #1
    9770:	2300      	movs	r3, #0
    9772:	e9c9 2304 	strd	r2, r3, [r9, #16]
    9776:	4648      	mov	r0, r9
    9778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    977c:	4b06      	ldr	r3, [pc, #24]	; (9798 <__mdiff+0x14c>)
    977e:	4807      	ldr	r0, [pc, #28]	; (979c <__mdiff+0x150>)
    9780:	464a      	mov	r2, r9
    9782:	f240 2145 	movw	r1, #581	; 0x245
    9786:	f001 ffdf 	bl	b748 <__assert_func>
    978a:	4b03      	ldr	r3, [pc, #12]	; (9798 <__mdiff+0x14c>)
    978c:	4803      	ldr	r0, [pc, #12]	; (979c <__mdiff+0x150>)
    978e:	464a      	mov	r2, r9
    9790:	f240 2137 	movw	r1, #567	; 0x237
    9794:	f001 ffd8 	bl	b748 <__assert_func>
    9798:	200011b4 	.word	0x200011b4
    979c:	200011c8 	.word	0x200011c8

000097a0 <__d2b>:
    97a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    97a4:	4688      	mov	r8, r1
    97a6:	b083      	sub	sp, #12
    97a8:	2101      	movs	r1, #1
    97aa:	ec57 6b10 	vmov	r6, r7, d0
    97ae:	4615      	mov	r5, r2
    97b0:	f7ff fca4 	bl	90fc <_Balloc>
    97b4:	4604      	mov	r4, r0
    97b6:	2800      	cmp	r0, #0
    97b8:	d051      	beq.n	985e <__d2b+0xbe>
    97ba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    97be:	f3c7 0313 	ubfx	r3, r7, #0, #20
    97c2:	f1b9 0f00 	cmp.w	r9, #0
    97c6:	d001      	beq.n	97cc <__d2b+0x2c>
    97c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    97cc:	2e00      	cmp	r6, #0
    97ce:	9301      	str	r3, [sp, #4]
    97d0:	d118      	bne.n	9804 <__d2b+0x64>
    97d2:	a801      	add	r0, sp, #4
    97d4:	f7ff fd34 	bl	9240 <__lo0bits>
    97d8:	9a01      	ldr	r2, [sp, #4]
    97da:	6162      	str	r2, [r4, #20]
    97dc:	2201      	movs	r2, #1
    97de:	f100 0320 	add.w	r3, r0, #32
    97e2:	6122      	str	r2, [r4, #16]
    97e4:	f1b9 0f00 	cmp.w	r9, #0
    97e8:	d025      	beq.n	9836 <__d2b+0x96>
    97ea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    97ee:	eb09 0203 	add.w	r2, r9, r3
    97f2:	4620      	mov	r0, r4
    97f4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    97f8:	f8c8 2000 	str.w	r2, [r8]
    97fc:	602b      	str	r3, [r5, #0]
    97fe:	b003      	add	sp, #12
    9800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9804:	4668      	mov	r0, sp
    9806:	9600      	str	r6, [sp, #0]
    9808:	f7ff fd1a 	bl	9240 <__lo0bits>
    980c:	4603      	mov	r3, r0
    980e:	b310      	cbz	r0, 9856 <__d2b+0xb6>
    9810:	e9dd 0200 	ldrd	r0, r2, [sp]
    9814:	f1c3 0120 	rsb	r1, r3, #32
    9818:	fa02 f101 	lsl.w	r1, r2, r1
    981c:	4301      	orrs	r1, r0
    981e:	40da      	lsrs	r2, r3
    9820:	6161      	str	r1, [r4, #20]
    9822:	9201      	str	r2, [sp, #4]
    9824:	2a00      	cmp	r2, #0
    9826:	61a2      	str	r2, [r4, #24]
    9828:	bf14      	ite	ne
    982a:	2202      	movne	r2, #2
    982c:	2201      	moveq	r2, #1
    982e:	6122      	str	r2, [r4, #16]
    9830:	f1b9 0f00 	cmp.w	r9, #0
    9834:	d1d9      	bne.n	97ea <__d2b+0x4a>
    9836:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    983a:	f8c8 3000 	str.w	r3, [r8]
    983e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    9842:	6918      	ldr	r0, [r3, #16]
    9844:	f7ff fcdc 	bl	9200 <__hi0bits>
    9848:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    984c:	4620      	mov	r0, r4
    984e:	602b      	str	r3, [r5, #0]
    9850:	b003      	add	sp, #12
    9852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9856:	9a00      	ldr	r2, [sp, #0]
    9858:	6162      	str	r2, [r4, #20]
    985a:	9a01      	ldr	r2, [sp, #4]
    985c:	e7e2      	b.n	9824 <__d2b+0x84>
    985e:	4b03      	ldr	r3, [pc, #12]	; (986c <__d2b+0xcc>)
    9860:	4803      	ldr	r0, [pc, #12]	; (9870 <__d2b+0xd0>)
    9862:	4622      	mov	r2, r4
    9864:	f240 310f 	movw	r1, #783	; 0x30f
    9868:	f001 ff6e 	bl	b748 <__assert_func>
    986c:	200011b4 	.word	0x200011b4
    9870:	200011c8 	.word	0x200011c8

00009874 <__ascii_wctomb>:
    9874:	b149      	cbz	r1, 988a <__ascii_wctomb+0x16>
    9876:	2aff      	cmp	r2, #255	; 0xff
    9878:	d802      	bhi.n	9880 <__ascii_wctomb+0xc>
    987a:	700a      	strb	r2, [r1, #0]
    987c:	2001      	movs	r0, #1
    987e:	4770      	bx	lr
    9880:	238a      	movs	r3, #138	; 0x8a
    9882:	6003      	str	r3, [r0, #0]
    9884:	f04f 30ff 	mov.w	r0, #4294967295
    9888:	4770      	bx	lr
    988a:	4608      	mov	r0, r1
    988c:	4770      	bx	lr
    988e:	bf00      	nop

00009890 <_svfprintf_r>:
    9890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9894:	ed2d 8b08 	vpush	{d8-d11}
    9898:	b0d1      	sub	sp, #324	; 0x144
    989a:	460c      	mov	r4, r1
    989c:	ee0b 1a10 	vmov	s22, r1
    98a0:	4690      	mov	r8, r2
    98a2:	9308      	str	r3, [sp, #32]
    98a4:	4683      	mov	fp, r0
    98a6:	f001 febb 	bl	b620 <_localeconv_r>
    98aa:	6803      	ldr	r3, [r0, #0]
    98ac:	9312      	str	r3, [sp, #72]	; 0x48
    98ae:	4618      	mov	r0, r3
    98b0:	f7ff fa06 	bl	8cc0 <strlen>
    98b4:	af20      	add	r7, sp, #128	; 0x80
    98b6:	9010      	str	r0, [sp, #64]	; 0x40
    98b8:	2208      	movs	r2, #8
    98ba:	2100      	movs	r1, #0
    98bc:	4638      	mov	r0, r7
    98be:	f7ff f8cd 	bl	8a5c <memset>
    98c2:	89a3      	ldrh	r3, [r4, #12]
    98c4:	061b      	lsls	r3, r3, #24
    98c6:	d503      	bpl.n	98d0 <_svfprintf_r+0x40>
    98c8:	6923      	ldr	r3, [r4, #16]
    98ca:	2b00      	cmp	r3, #0
    98cc:	f000 8755 	beq.w	a77a <_svfprintf_r+0xeea>
    98d0:	2300      	movs	r3, #0
    98d2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 9ae0 <_svfprintf_r+0x250>
    98d6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 9ae8 <_svfprintf_r+0x258>
    98da:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    98de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    98e2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    98e6:	aa27      	add	r2, sp, #156	; 0x9c
    98e8:	930e      	str	r3, [sp, #56]	; 0x38
    98ea:	9224      	str	r2, [sp, #144]	; 0x90
    98ec:	4692      	mov	sl, r2
    98ee:	9311      	str	r3, [sp, #68]	; 0x44
    98f0:	9304      	str	r3, [sp, #16]
    98f2:	4644      	mov	r4, r8
    98f4:	46a1      	mov	r9, r4
    98f6:	4b7e      	ldr	r3, [pc, #504]	; (9af0 <_svfprintf_r+0x260>)
    98f8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    98fc:	f7ff f932 	bl	8b64 <__locale_mb_cur_max>
    9900:	464a      	mov	r2, r9
    9902:	4603      	mov	r3, r0
    9904:	a91c      	add	r1, sp, #112	; 0x70
    9906:	9700      	str	r7, [sp, #0]
    9908:	4658      	mov	r0, fp
    990a:	47a8      	blx	r5
    990c:	2800      	cmp	r0, #0
    990e:	f000 80b0 	beq.w	9a72 <_svfprintf_r+0x1e2>
    9912:	f2c0 80a6 	blt.w	9a62 <_svfprintf_r+0x1d2>
    9916:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9918:	2a25      	cmp	r2, #37	; 0x25
    991a:	4603      	mov	r3, r0
    991c:	d001      	beq.n	9922 <_svfprintf_r+0x92>
    991e:	4499      	add	r9, r3
    9920:	e7e9      	b.n	98f6 <_svfprintf_r+0x66>
    9922:	ebb9 0504 	subs.w	r5, r9, r4
    9926:	4606      	mov	r6, r0
    9928:	f040 80a7 	bne.w	9a7a <_svfprintf_r+0x1ea>
    992c:	2300      	movs	r3, #0
    992e:	f04f 32ff 	mov.w	r2, #4294967295
    9932:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    9936:	4698      	mov	r8, r3
    9938:	9306      	str	r3, [sp, #24]
    993a:	f109 0901 	add.w	r9, r9, #1
    993e:	f899 3000 	ldrb.w	r3, [r9]
    9942:	9203      	str	r2, [sp, #12]
    9944:	252b      	movs	r5, #43	; 0x2b
    9946:	2620      	movs	r6, #32
    9948:	f109 0901 	add.w	r9, r9, #1
    994c:	f1a3 0220 	sub.w	r2, r3, #32
    9950:	2a5a      	cmp	r2, #90	; 0x5a
    9952:	f200 80cf 	bhi.w	9af4 <_svfprintf_r+0x264>
    9956:	e8df f012 	tbh	[pc, r2, lsl #1]
    995a:	02e8      	.short	0x02e8
    995c:	00cd00cd 	.word	0x00cd00cd
    9960:	00cd02e3 	.word	0x00cd02e3
    9964:	00cd00cd 	.word	0x00cd00cd
    9968:	00cd006a 	.word	0x00cd006a
    996c:	020500cd 	.word	0x020500cd
    9970:	00cd0284 	.word	0x00cd0284
    9974:	02c90210 	.word	0x02c90210
    9978:	02bd00cd 	.word	0x02bd00cd
    997c:	005b005b 	.word	0x005b005b
    9980:	005b005b 	.word	0x005b005b
    9984:	005b005b 	.word	0x005b005b
    9988:	005b005b 	.word	0x005b005b
    998c:	00cd005b 	.word	0x00cd005b
    9990:	00cd00cd 	.word	0x00cd00cd
    9994:	00cd00cd 	.word	0x00cd00cd
    9998:	00cd00cd 	.word	0x00cd00cd
    999c:	00cd0153 	.word	0x00cd0153
    99a0:	021a0183 	.word	0x021a0183
    99a4:	01530153 	.word	0x01530153
    99a8:	00cd0153 	.word	0x00cd0153
    99ac:	00cd00cd 	.word	0x00cd00cd
    99b0:	021500cd 	.word	0x021500cd
    99b4:	00cd00cd 	.word	0x00cd00cd
    99b8:	00cd0296 	.word	0x00cd0296
    99bc:	00cd00cd 	.word	0x00cd00cd
    99c0:	00cd01ab 	.word	0x00cd01ab
    99c4:	00cd02aa 	.word	0x00cd02aa
    99c8:	06e300cd 	.word	0x06e300cd
    99cc:	00cd00cd 	.word	0x00cd00cd
    99d0:	00cd00cd 	.word	0x00cd00cd
    99d4:	00cd00cd 	.word	0x00cd00cd
    99d8:	00cd00cd 	.word	0x00cd00cd
    99dc:	00cd0153 	.word	0x00cd0153
    99e0:	01de0183 	.word	0x01de0183
    99e4:	01530153 	.word	0x01530153
    99e8:	02770153 	.word	0x02770153
    99ec:	007f01de 	.word	0x007f01de
    99f0:	028900cd 	.word	0x028900cd
    99f4:	025f00cd 	.word	0x025f00cd
    99f8:	022f06e0 	.word	0x022f06e0
    99fc:	00cd007f 	.word	0x00cd007f
    9a00:	007c01ab 	.word	0x007c01ab
    9a04:	00cd06b8 	.word	0x00cd06b8
    9a08:	06bd00cd 	.word	0x06bd00cd
    9a0c:	007c00cd 	.word	0x007c00cd
    9a10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9a14:	2100      	movs	r1, #0
    9a16:	f819 3b01 	ldrb.w	r3, [r9], #1
    9a1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9a1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9a22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9a26:	2a09      	cmp	r2, #9
    9a28:	d9f5      	bls.n	9a16 <_svfprintf_r+0x186>
    9a2a:	9106      	str	r1, [sp, #24]
    9a2c:	e78e      	b.n	994c <_svfprintf_r+0xbc>
    9a2e:	4658      	mov	r0, fp
    9a30:	f001 fdf6 	bl	b620 <_localeconv_r>
    9a34:	6843      	ldr	r3, [r0, #4]
    9a36:	9315      	str	r3, [sp, #84]	; 0x54
    9a38:	4618      	mov	r0, r3
    9a3a:	f7ff f941 	bl	8cc0 <strlen>
    9a3e:	9016      	str	r0, [sp, #88]	; 0x58
    9a40:	4658      	mov	r0, fp
    9a42:	f001 fded 	bl	b620 <_localeconv_r>
    9a46:	6883      	ldr	r3, [r0, #8]
    9a48:	9313      	str	r3, [sp, #76]	; 0x4c
    9a4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	f040 862d 	bne.w	a6ac <_svfprintf_r+0xe1c>
    9a52:	f899 3000 	ldrb.w	r3, [r9]
    9a56:	e777      	b.n	9948 <_svfprintf_r+0xb8>
    9a58:	f899 3000 	ldrb.w	r3, [r9]
    9a5c:	f048 0820 	orr.w	r8, r8, #32
    9a60:	e772      	b.n	9948 <_svfprintf_r+0xb8>
    9a62:	2208      	movs	r2, #8
    9a64:	2100      	movs	r1, #0
    9a66:	4638      	mov	r0, r7
    9a68:	f7fe fff8 	bl	8a5c <memset>
    9a6c:	2301      	movs	r3, #1
    9a6e:	4499      	add	r9, r3
    9a70:	e741      	b.n	98f6 <_svfprintf_r+0x66>
    9a72:	ebb9 0504 	subs.w	r5, r9, r4
    9a76:	4606      	mov	r6, r0
    9a78:	d011      	beq.n	9a9e <_svfprintf_r+0x20e>
    9a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9a7c:	442b      	add	r3, r5
    9a7e:	9326      	str	r3, [sp, #152]	; 0x98
    9a80:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9a82:	3301      	adds	r3, #1
    9a84:	2b07      	cmp	r3, #7
    9a86:	e9ca 4500 	strd	r4, r5, [sl]
    9a8a:	9325      	str	r3, [sp, #148]	; 0x94
    9a8c:	dc1c      	bgt.n	9ac8 <_svfprintf_r+0x238>
    9a8e:	f10a 0a08 	add.w	sl, sl, #8
    9a92:	9b04      	ldr	r3, [sp, #16]
    9a94:	442b      	add	r3, r5
    9a96:	9304      	str	r3, [sp, #16]
    9a98:	2e00      	cmp	r6, #0
    9a9a:	f47f af47 	bne.w	992c <_svfprintf_r+0x9c>
    9a9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	f041 820b 	bne.w	aebc <_svfprintf_r+0x162c>
    9aa6:	ee1b 3a10 	vmov	r3, s22
    9aaa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    9aae:	f013 0f40 	tst.w	r3, #64	; 0x40
    9ab2:	9b04      	ldr	r3, [sp, #16]
    9ab4:	bf18      	it	ne
    9ab6:	f04f 33ff 	movne.w	r3, #4294967295
    9aba:	9304      	str	r3, [sp, #16]
    9abc:	9804      	ldr	r0, [sp, #16]
    9abe:	b051      	add	sp, #324	; 0x144
    9ac0:	ecbd 8b08 	vpop	{d8-d11}
    9ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ac8:	ee1b 1a10 	vmov	r1, s22
    9acc:	aa24      	add	r2, sp, #144	; 0x90
    9ace:	4658      	mov	r0, fp
    9ad0:	f002 fdaa 	bl	c628 <__ssprint_r>
    9ad4:	2800      	cmp	r0, #0
    9ad6:	d1e6      	bne.n	9aa6 <_svfprintf_r+0x216>
    9ad8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9adc:	e7d9      	b.n	9a92 <_svfprintf_r+0x202>
    9ade:	bf00      	nop
	...
    9ae8:	ffffffff 	.word	0xffffffff
    9aec:	7fefffff 	.word	0x7fefffff
    9af0:	20002e8c 	.word	0x20002e8c
    9af4:	930b      	str	r3, [sp, #44]	; 0x2c
    9af6:	2b00      	cmp	r3, #0
    9af8:	d0d1      	beq.n	9a9e <_svfprintf_r+0x20e>
    9afa:	2100      	movs	r1, #0
    9afc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    9b00:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    9b04:	2301      	movs	r3, #1
    9b06:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    9b0a:	9302      	str	r3, [sp, #8]
    9b0c:	9107      	str	r1, [sp, #28]
    9b0e:	9305      	str	r3, [sp, #20]
    9b10:	9103      	str	r1, [sp, #12]
    9b12:	910f      	str	r1, [sp, #60]	; 0x3c
    9b14:	ac37      	add	r4, sp, #220	; 0xdc
    9b16:	f018 0302 	ands.w	r3, r8, #2
    9b1a:	9309      	str	r3, [sp, #36]	; 0x24
    9b1c:	d002      	beq.n	9b24 <_svfprintf_r+0x294>
    9b1e:	9b02      	ldr	r3, [sp, #8]
    9b20:	3302      	adds	r3, #2
    9b22:	9302      	str	r3, [sp, #8]
    9b24:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    9b28:	930a      	str	r3, [sp, #40]	; 0x28
    9b2a:	d105      	bne.n	9b38 <_svfprintf_r+0x2a8>
    9b2c:	9b06      	ldr	r3, [sp, #24]
    9b2e:	9a02      	ldr	r2, [sp, #8]
    9b30:	1a9d      	subs	r5, r3, r2
    9b32:	2d00      	cmp	r5, #0
    9b34:	f300 8369 	bgt.w	a20a <_svfprintf_r+0x97a>
    9b38:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9b3a:	b189      	cbz	r1, 9b60 <_svfprintf_r+0x2d0>
    9b3c:	9925      	ldr	r1, [sp, #148]	; 0x94
    9b3e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    9b42:	3101      	adds	r1, #1
    9b44:	3201      	adds	r2, #1
    9b46:	f8ca 0000 	str.w	r0, [sl]
    9b4a:	2907      	cmp	r1, #7
    9b4c:	f04f 0001 	mov.w	r0, #1
    9b50:	9226      	str	r2, [sp, #152]	; 0x98
    9b52:	9125      	str	r1, [sp, #148]	; 0x94
    9b54:	f8ca 0004 	str.w	r0, [sl, #4]
    9b58:	f300 83a2 	bgt.w	a2a0 <_svfprintf_r+0xa10>
    9b5c:	f10a 0a08 	add.w	sl, sl, #8
    9b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b62:	b183      	cbz	r3, 9b86 <_svfprintf_r+0x2f6>
    9b64:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9b66:	a91a      	add	r1, sp, #104	; 0x68
    9b68:	3301      	adds	r3, #1
    9b6a:	3202      	adds	r2, #2
    9b6c:	f8ca 1000 	str.w	r1, [sl]
    9b70:	2b07      	cmp	r3, #7
    9b72:	f04f 0102 	mov.w	r1, #2
    9b76:	9226      	str	r2, [sp, #152]	; 0x98
    9b78:	9325      	str	r3, [sp, #148]	; 0x94
    9b7a:	f8ca 1004 	str.w	r1, [sl, #4]
    9b7e:	f300 83a3 	bgt.w	a2c8 <_svfprintf_r+0xa38>
    9b82:	f10a 0a08 	add.w	sl, sl, #8
    9b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b88:	2b80      	cmp	r3, #128	; 0x80
    9b8a:	f000 826c 	beq.w	a066 <_svfprintf_r+0x7d6>
    9b8e:	9b03      	ldr	r3, [sp, #12]
    9b90:	9905      	ldr	r1, [sp, #20]
    9b92:	1a5d      	subs	r5, r3, r1
    9b94:	2d00      	cmp	r5, #0
    9b96:	f300 82a5 	bgt.w	a0e4 <_svfprintf_r+0x854>
    9b9a:	f418 7f80 	tst.w	r8, #256	; 0x100
    9b9e:	f040 820d 	bne.w	9fbc <_svfprintf_r+0x72c>
    9ba2:	9b05      	ldr	r3, [sp, #20]
    9ba4:	f8ca 3004 	str.w	r3, [sl, #4]
    9ba8:	441a      	add	r2, r3
    9baa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9bac:	f8ca 4000 	str.w	r4, [sl]
    9bb0:	3301      	adds	r3, #1
    9bb2:	2b07      	cmp	r3, #7
    9bb4:	9226      	str	r2, [sp, #152]	; 0x98
    9bb6:	9325      	str	r3, [sp, #148]	; 0x94
    9bb8:	f300 831b 	bgt.w	a1f2 <_svfprintf_r+0x962>
    9bbc:	f10a 0a08 	add.w	sl, sl, #8
    9bc0:	f018 0f04 	tst.w	r8, #4
    9bc4:	d005      	beq.n	9bd2 <_svfprintf_r+0x342>
    9bc6:	9b06      	ldr	r3, [sp, #24]
    9bc8:	9902      	ldr	r1, [sp, #8]
    9bca:	1a5c      	subs	r4, r3, r1
    9bcc:	2c00      	cmp	r4, #0
    9bce:	f300 8388 	bgt.w	a2e2 <_svfprintf_r+0xa52>
    9bd2:	9b04      	ldr	r3, [sp, #16]
    9bd4:	9906      	ldr	r1, [sp, #24]
    9bd6:	9802      	ldr	r0, [sp, #8]
    9bd8:	4281      	cmp	r1, r0
    9bda:	bfac      	ite	ge
    9bdc:	185b      	addge	r3, r3, r1
    9bde:	181b      	addlt	r3, r3, r0
    9be0:	9304      	str	r3, [sp, #16]
    9be2:	2a00      	cmp	r2, #0
    9be4:	f040 82b0 	bne.w	a148 <_svfprintf_r+0x8b8>
    9be8:	2300      	movs	r3, #0
    9bea:	9325      	str	r3, [sp, #148]	; 0x94
    9bec:	9b07      	ldr	r3, [sp, #28]
    9bee:	b11b      	cbz	r3, 9bf8 <_svfprintf_r+0x368>
    9bf0:	9907      	ldr	r1, [sp, #28]
    9bf2:	4658      	mov	r0, fp
    9bf4:	f7ff f966 	bl	8ec4 <_free_r>
    9bf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9bfc:	464c      	mov	r4, r9
    9bfe:	e679      	b.n	98f4 <_svfprintf_r+0x64>
    9c00:	930b      	str	r3, [sp, #44]	; 0x2c
    9c02:	9b08      	ldr	r3, [sp, #32]
    9c04:	3307      	adds	r3, #7
    9c06:	f023 0307 	bic.w	r3, r3, #7
    9c0a:	ecb3 8b02 	vldmia	r3!, {d8}
    9c0e:	eeb0 7bc8 	vabs.f64	d7, d8
    9c12:	eeb4 7b49 	vcmp.f64	d7, d9
    9c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c1a:	9308      	str	r3, [sp, #32]
    9c1c:	f340 84e9 	ble.w	a5f2 <_svfprintf_r+0xd62>
    9c20:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    9c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c28:	f101 8059 	bmi.w	acde <_svfprintf_r+0x144e>
    9c2c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9c30:	4cab      	ldr	r4, [pc, #684]	; (9ee0 <_svfprintf_r+0x650>)
    9c32:	4bac      	ldr	r3, [pc, #688]	; (9ee4 <_svfprintf_r+0x654>)
    9c34:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c3a:	2a47      	cmp	r2, #71	; 0x47
    9c3c:	bfc8      	it	gt
    9c3e:	461c      	movgt	r4, r3
    9c40:	2300      	movs	r3, #0
    9c42:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9c46:	2203      	movs	r2, #3
    9c48:	9307      	str	r3, [sp, #28]
    9c4a:	9202      	str	r2, [sp, #8]
    9c4c:	9205      	str	r2, [sp, #20]
    9c4e:	9303      	str	r3, [sp, #12]
    9c50:	930f      	str	r3, [sp, #60]	; 0x3c
    9c52:	2900      	cmp	r1, #0
    9c54:	f43f af5f 	beq.w	9b16 <_svfprintf_r+0x286>
    9c58:	9b02      	ldr	r3, [sp, #8]
    9c5a:	3301      	adds	r3, #1
    9c5c:	9302      	str	r3, [sp, #8]
    9c5e:	e75a      	b.n	9b16 <_svfprintf_r+0x286>
    9c60:	2b43      	cmp	r3, #67	; 0x43
    9c62:	930b      	str	r3, [sp, #44]	; 0x2c
    9c64:	d003      	beq.n	9c6e <_svfprintf_r+0x3de>
    9c66:	f018 0f10 	tst.w	r8, #16
    9c6a:	f000 855d 	beq.w	a728 <_svfprintf_r+0xe98>
    9c6e:	9d08      	ldr	r5, [sp, #32]
    9c70:	2208      	movs	r2, #8
    9c72:	2100      	movs	r1, #0
    9c74:	a822      	add	r0, sp, #136	; 0x88
    9c76:	ac37      	add	r4, sp, #220	; 0xdc
    9c78:	f7fe fef0 	bl	8a5c <memset>
    9c7c:	ab22      	add	r3, sp, #136	; 0x88
    9c7e:	f855 2b04 	ldr.w	r2, [r5], #4
    9c82:	4621      	mov	r1, r4
    9c84:	4658      	mov	r0, fp
    9c86:	f002 fc89 	bl	c59c <_wcrtomb_r>
    9c8a:	4603      	mov	r3, r0
    9c8c:	3301      	adds	r3, #1
    9c8e:	9005      	str	r0, [sp, #20]
    9c90:	f001 82ee 	beq.w	b270 <_svfprintf_r+0x19e0>
    9c94:	9b05      	ldr	r3, [sp, #20]
    9c96:	9508      	str	r5, [sp, #32]
    9c98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9c9c:	9302      	str	r3, [sp, #8]
    9c9e:	2100      	movs	r1, #0
    9ca0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    9ca4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    9ca8:	9107      	str	r1, [sp, #28]
    9caa:	9103      	str	r1, [sp, #12]
    9cac:	910f      	str	r1, [sp, #60]	; 0x3c
    9cae:	e732      	b.n	9b16 <_svfprintf_r+0x286>
    9cb0:	930b      	str	r3, [sp, #44]	; 0x2c
    9cb2:	9b08      	ldr	r3, [sp, #32]
    9cb4:	461a      	mov	r2, r3
    9cb6:	2300      	movs	r3, #0
    9cb8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    9cbc:	4613      	mov	r3, r2
    9cbe:	f853 4b04 	ldr.w	r4, [r3], #4
    9cc2:	9308      	str	r3, [sp, #32]
    9cc4:	2c00      	cmp	r4, #0
    9cc6:	f000 8548 	beq.w	a75a <_svfprintf_r+0xeca>
    9cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ccc:	2b53      	cmp	r3, #83	; 0x53
    9cce:	f000 86ec 	beq.w	aaaa <_svfprintf_r+0x121a>
    9cd2:	f018 0310 	ands.w	r3, r8, #16
    9cd6:	930c      	str	r3, [sp, #48]	; 0x30
    9cd8:	f040 86e7 	bne.w	aaaa <_svfprintf_r+0x121a>
    9cdc:	9b03      	ldr	r3, [sp, #12]
    9cde:	1c5d      	adds	r5, r3, #1
    9ce0:	f001 80e5 	beq.w	aeae <_svfprintf_r+0x161e>
    9ce4:	990c      	ldr	r1, [sp, #48]	; 0x30
    9ce6:	461a      	mov	r2, r3
    9ce8:	4620      	mov	r0, r4
    9cea:	f001 fca1 	bl	b630 <memchr>
    9cee:	9007      	str	r0, [sp, #28]
    9cf0:	2800      	cmp	r0, #0
    9cf2:	f001 8328 	beq.w	b346 <_svfprintf_r+0x1ab6>
    9cf6:	9b07      	ldr	r3, [sp, #28]
    9cf8:	1b1a      	subs	r2, r3, r4
    9cfa:	9205      	str	r2, [sp, #20]
    9cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9cfe:	9303      	str	r3, [sp, #12]
    9d00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9d04:	930f      	str	r3, [sp, #60]	; 0x3c
    9d06:	930d      	str	r3, [sp, #52]	; 0x34
    9d08:	9307      	str	r3, [sp, #28]
    9d0a:	2373      	movs	r3, #115	; 0x73
    9d0c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9d10:	9202      	str	r2, [sp, #8]
    9d12:	930b      	str	r3, [sp, #44]	; 0x2c
    9d14:	e79d      	b.n	9c52 <_svfprintf_r+0x3c2>
    9d16:	f018 0f20 	tst.w	r8, #32
    9d1a:	930b      	str	r3, [sp, #44]	; 0x2c
    9d1c:	9b08      	ldr	r3, [sp, #32]
    9d1e:	d03d      	beq.n	9d9c <_svfprintf_r+0x50c>
    9d20:	3307      	adds	r3, #7
    9d22:	f023 0307 	bic.w	r3, r3, #7
    9d26:	461a      	mov	r2, r3
    9d28:	4611      	mov	r1, r2
    9d2a:	685b      	ldr	r3, [r3, #4]
    9d2c:	f851 2b08 	ldr.w	r2, [r1], #8
    9d30:	9108      	str	r1, [sp, #32]
    9d32:	4619      	mov	r1, r3
    9d34:	2b00      	cmp	r3, #0
    9d36:	f2c0 840c 	blt.w	a552 <_svfprintf_r+0xcc2>
    9d3a:	9b03      	ldr	r3, [sp, #12]
    9d3c:	3301      	adds	r3, #1
    9d3e:	f000 829e 	beq.w	a27e <_svfprintf_r+0x9ee>
    9d42:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    9d46:	ea52 0301 	orrs.w	r3, r2, r1
    9d4a:	9002      	str	r0, [sp, #8]
    9d4c:	f040 8299 	bne.w	a282 <_svfprintf_r+0x9f2>
    9d50:	9b03      	ldr	r3, [sp, #12]
    9d52:	2b00      	cmp	r3, #0
    9d54:	f040 829a 	bne.w	a28c <_svfprintf_r+0x9fc>
    9d58:	4680      	mov	r8, r0
    9d5a:	2300      	movs	r3, #0
    9d5c:	9303      	str	r3, [sp, #12]
    9d5e:	9305      	str	r3, [sp, #20]
    9d60:	ac50      	add	r4, sp, #320	; 0x140
    9d62:	e106      	b.n	9f72 <_svfprintf_r+0x6e2>
    9d64:	9b08      	ldr	r3, [sp, #32]
    9d66:	f853 2b04 	ldr.w	r2, [r3], #4
    9d6a:	9206      	str	r2, [sp, #24]
    9d6c:	2a00      	cmp	r2, #0
    9d6e:	f280 8419 	bge.w	a5a4 <_svfprintf_r+0xd14>
    9d72:	9a06      	ldr	r2, [sp, #24]
    9d74:	9308      	str	r3, [sp, #32]
    9d76:	4252      	negs	r2, r2
    9d78:	9206      	str	r2, [sp, #24]
    9d7a:	f899 3000 	ldrb.w	r3, [r9]
    9d7e:	f048 0804 	orr.w	r8, r8, #4
    9d82:	e5e1      	b.n	9948 <_svfprintf_r+0xb8>
    9d84:	f899 3000 	ldrb.w	r3, [r9]
    9d88:	f048 0808 	orr.w	r8, r8, #8
    9d8c:	e5dc      	b.n	9948 <_svfprintf_r+0xb8>
    9d8e:	f048 0810 	orr.w	r8, r8, #16
    9d92:	f018 0f20 	tst.w	r8, #32
    9d96:	930b      	str	r3, [sp, #44]	; 0x2c
    9d98:	9b08      	ldr	r3, [sp, #32]
    9d9a:	d1c1      	bne.n	9d20 <_svfprintf_r+0x490>
    9d9c:	f018 0f10 	tst.w	r8, #16
    9da0:	f040 840b 	bne.w	a5ba <_svfprintf_r+0xd2a>
    9da4:	f018 0f40 	tst.w	r8, #64	; 0x40
    9da8:	f000 8403 	beq.w	a5b2 <_svfprintf_r+0xd22>
    9dac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    9db0:	9308      	str	r3, [sp, #32]
    9db2:	17d1      	asrs	r1, r2, #31
    9db4:	460b      	mov	r3, r1
    9db6:	e7bd      	b.n	9d34 <_svfprintf_r+0x4a4>
    9db8:	9b08      	ldr	r3, [sp, #32]
    9dba:	f048 0202 	orr.w	r2, r8, #2
    9dbe:	9202      	str	r2, [sp, #8]
    9dc0:	f853 2b04 	ldr.w	r2, [r3], #4
    9dc4:	9308      	str	r3, [sp, #32]
    9dc6:	f647 0330 	movw	r3, #30768	; 0x7830
    9dca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    9dce:	2078      	movs	r0, #120	; 0x78
    9dd0:	4b45      	ldr	r3, [pc, #276]	; (9ee8 <_svfprintf_r+0x658>)
    9dd2:	9311      	str	r3, [sp, #68]	; 0x44
    9dd4:	2100      	movs	r1, #0
    9dd6:	2302      	movs	r3, #2
    9dd8:	900b      	str	r0, [sp, #44]	; 0x2c
    9dda:	2000      	movs	r0, #0
    9ddc:	9c03      	ldr	r4, [sp, #12]
    9dde:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    9de2:	1c60      	adds	r0, r4, #1
    9de4:	f000 80ad 	beq.w	9f42 <_svfprintf_r+0x6b2>
    9de8:	9802      	ldr	r0, [sp, #8]
    9dea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    9dee:	ea52 0001 	orrs.w	r0, r2, r1
    9df2:	f040 80a4 	bne.w	9f3e <_svfprintf_r+0x6ae>
    9df6:	2c00      	cmp	r4, #0
    9df8:	f040 86ae 	bne.w	ab58 <_svfprintf_r+0x12c8>
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d1ac      	bne.n	9d5a <_svfprintf_r+0x4ca>
    9e00:	9b02      	ldr	r3, [sp, #8]
    9e02:	f013 0301 	ands.w	r3, r3, #1
    9e06:	9305      	str	r3, [sp, #20]
    9e08:	f000 83d1 	beq.w	a5ae <_svfprintf_r+0xd1e>
    9e0c:	2330      	movs	r3, #48	; 0x30
    9e0e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    9e12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    9e16:	e0ac      	b.n	9f72 <_svfprintf_r+0x6e2>
    9e18:	f018 0f20 	tst.w	r8, #32
    9e1c:	f040 83d4 	bne.w	a5c8 <_svfprintf_r+0xd38>
    9e20:	f018 0f10 	tst.w	r8, #16
    9e24:	f040 869f 	bne.w	ab66 <_svfprintf_r+0x12d6>
    9e28:	f018 0f40 	tst.w	r8, #64	; 0x40
    9e2c:	f040 8797 	bne.w	ad5e <_svfprintf_r+0x14ce>
    9e30:	f418 7f00 	tst.w	r8, #512	; 0x200
    9e34:	f000 8697 	beq.w	ab66 <_svfprintf_r+0x12d6>
    9e38:	9b08      	ldr	r3, [sp, #32]
    9e3a:	9904      	ldr	r1, [sp, #16]
    9e3c:	f853 2b04 	ldr.w	r2, [r3], #4
    9e40:	9308      	str	r3, [sp, #32]
    9e42:	7011      	strb	r1, [r2, #0]
    9e44:	464c      	mov	r4, r9
    9e46:	e555      	b.n	98f4 <_svfprintf_r+0x64>
    9e48:	f899 3000 	ldrb.w	r3, [r9]
    9e4c:	2b68      	cmp	r3, #104	; 0x68
    9e4e:	bf03      	ittte	eq
    9e50:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    9e54:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    9e58:	f109 0901 	addeq.w	r9, r9, #1
    9e5c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    9e60:	e572      	b.n	9948 <_svfprintf_r+0xb8>
    9e62:	f899 3000 	ldrb.w	r3, [r9]
    9e66:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    9e6a:	e56d      	b.n	9948 <_svfprintf_r+0xb8>
    9e6c:	f899 3000 	ldrb.w	r3, [r9]
    9e70:	2b6c      	cmp	r3, #108	; 0x6c
    9e72:	bf03      	ittte	eq
    9e74:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    9e78:	f048 0820 	orreq.w	r8, r8, #32
    9e7c:	f109 0901 	addeq.w	r9, r9, #1
    9e80:	f048 0810 	orrne.w	r8, r8, #16
    9e84:	e560      	b.n	9948 <_svfprintf_r+0xb8>
    9e86:	930b      	str	r3, [sp, #44]	; 0x2c
    9e88:	f048 0810 	orr.w	r8, r8, #16
    9e8c:	f018 0120 	ands.w	r1, r8, #32
    9e90:	f000 8351 	beq.w	a536 <_svfprintf_r+0xca6>
    9e94:	9b08      	ldr	r3, [sp, #32]
    9e96:	3307      	adds	r3, #7
    9e98:	f023 0307 	bic.w	r3, r3, #7
    9e9c:	6859      	ldr	r1, [r3, #4]
    9e9e:	f853 2b08 	ldr.w	r2, [r3], #8
    9ea2:	9308      	str	r3, [sp, #32]
    9ea4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    9ea8:	9302      	str	r3, [sp, #8]
    9eaa:	2300      	movs	r3, #0
    9eac:	e795      	b.n	9dda <_svfprintf_r+0x54a>
    9eae:	930b      	str	r3, [sp, #44]	; 0x2c
    9eb0:	f048 0310 	orr.w	r3, r8, #16
    9eb4:	9302      	str	r3, [sp, #8]
    9eb6:	9b02      	ldr	r3, [sp, #8]
    9eb8:	f013 0120 	ands.w	r1, r3, #32
    9ebc:	f000 8329 	beq.w	a512 <_svfprintf_r+0xc82>
    9ec0:	9b08      	ldr	r3, [sp, #32]
    9ec2:	3307      	adds	r3, #7
    9ec4:	f023 0307 	bic.w	r3, r3, #7
    9ec8:	6859      	ldr	r1, [r3, #4]
    9eca:	f853 2b08 	ldr.w	r2, [r3], #8
    9ece:	9308      	str	r3, [sp, #32]
    9ed0:	2301      	movs	r3, #1
    9ed2:	e782      	b.n	9dda <_svfprintf_r+0x54a>
    9ed4:	f899 3000 	ldrb.w	r3, [r9]
    9ed8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    9edc:	e534      	b.n	9948 <_svfprintf_r+0xb8>
    9ede:	bf00      	nop
    9ee0:	20001394 	.word	0x20001394
    9ee4:	20001120 	.word	0x20001120
    9ee8:	2000139c 	.word	0x2000139c
    9eec:	4649      	mov	r1, r9
    9eee:	f811 3b01 	ldrb.w	r3, [r1], #1
    9ef2:	2b2a      	cmp	r3, #42	; 0x2a
    9ef4:	f001 8249 	beq.w	b38a <_svfprintf_r+0x1afa>
    9ef8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9efc:	2a09      	cmp	r2, #9
    9efe:	4689      	mov	r9, r1
    9f00:	bf98      	it	ls
    9f02:	2100      	movls	r1, #0
    9f04:	f201 8144 	bhi.w	b190 <_svfprintf_r+0x1900>
    9f08:	f819 3b01 	ldrb.w	r3, [r9], #1
    9f0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9f10:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9f14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9f18:	2a09      	cmp	r2, #9
    9f1a:	d9f5      	bls.n	9f08 <_svfprintf_r+0x678>
    9f1c:	9103      	str	r1, [sp, #12]
    9f1e:	e515      	b.n	994c <_svfprintf_r+0xbc>
    9f20:	f899 3000 	ldrb.w	r3, [r9]
    9f24:	f048 0801 	orr.w	r8, r8, #1
    9f28:	e50e      	b.n	9948 <_svfprintf_r+0xb8>
    9f2a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    9f2e:	2b00      	cmp	r3, #0
    9f30:	f47f ad8f 	bne.w	9a52 <_svfprintf_r+0x1c2>
    9f34:	f899 3000 	ldrb.w	r3, [r9]
    9f38:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    9f3c:	e504      	b.n	9948 <_svfprintf_r+0xb8>
    9f3e:	f8cd 8008 	str.w	r8, [sp, #8]
    9f42:	2b01      	cmp	r3, #1
    9f44:	f000 819d 	beq.w	a282 <_svfprintf_r+0x9f2>
    9f48:	2b02      	cmp	r3, #2
    9f4a:	ac50      	add	r4, sp, #320	; 0x140
    9f4c:	d120      	bne.n	9f90 <_svfprintf_r+0x700>
    9f4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    9f50:	f002 030f 	and.w	r3, r2, #15
    9f54:	0912      	lsrs	r2, r2, #4
    9f56:	5cc3      	ldrb	r3, [r0, r3]
    9f58:	f804 3d01 	strb.w	r3, [r4, #-1]!
    9f5c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    9f60:	0909      	lsrs	r1, r1, #4
    9f62:	ea52 0301 	orrs.w	r3, r2, r1
    9f66:	d1f3      	bne.n	9f50 <_svfprintf_r+0x6c0>
    9f68:	ab50      	add	r3, sp, #320	; 0x140
    9f6a:	1b1b      	subs	r3, r3, r4
    9f6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    9f70:	9305      	str	r3, [sp, #20]
    9f72:	9a05      	ldr	r2, [sp, #20]
    9f74:	9803      	ldr	r0, [sp, #12]
    9f76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9f7a:	4282      	cmp	r2, r0
    9f7c:	f04f 0300 	mov.w	r3, #0
    9f80:	bfb8      	it	lt
    9f82:	4602      	movlt	r2, r0
    9f84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9f88:	9307      	str	r3, [sp, #28]
    9f8a:	9202      	str	r2, [sp, #8]
    9f8c:	930f      	str	r3, [sp, #60]	; 0x3c
    9f8e:	e660      	b.n	9c52 <_svfprintf_r+0x3c2>
    9f90:	f002 0307 	and.w	r3, r2, #7
    9f94:	08d2      	lsrs	r2, r2, #3
    9f96:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    9f9a:	08c9      	lsrs	r1, r1, #3
    9f9c:	3330      	adds	r3, #48	; 0x30
    9f9e:	ea52 0501 	orrs.w	r5, r2, r1
    9fa2:	4620      	mov	r0, r4
    9fa4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    9fa8:	d1f2      	bne.n	9f90 <_svfprintf_r+0x700>
    9faa:	9a02      	ldr	r2, [sp, #8]
    9fac:	07d1      	lsls	r1, r2, #31
    9fae:	f100 824d 	bmi.w	a44c <_svfprintf_r+0xbbc>
    9fb2:	ab50      	add	r3, sp, #320	; 0x140
    9fb4:	1b1b      	subs	r3, r3, r4
    9fb6:	4690      	mov	r8, r2
    9fb8:	9305      	str	r3, [sp, #20]
    9fba:	e7da      	b.n	9f72 <_svfprintf_r+0x6e2>
    9fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9fbe:	2b65      	cmp	r3, #101	; 0x65
    9fc0:	f340 80d4 	ble.w	a16c <_svfprintf_r+0x8dc>
    9fc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    9fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9fcc:	f040 81c1 	bne.w	a352 <_svfprintf_r+0xac2>
    9fd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9fd2:	49ba      	ldr	r1, [pc, #744]	; (a2bc <_svfprintf_r+0xa2c>)
    9fd4:	f8ca 1000 	str.w	r1, [sl]
    9fd8:	3301      	adds	r3, #1
    9fda:	3201      	adds	r2, #1
    9fdc:	2101      	movs	r1, #1
    9fde:	2b07      	cmp	r3, #7
    9fe0:	9226      	str	r2, [sp, #152]	; 0x98
    9fe2:	9325      	str	r3, [sp, #148]	; 0x94
    9fe4:	f8ca 1004 	str.w	r1, [sl, #4]
    9fe8:	f300 8551 	bgt.w	aa8e <_svfprintf_r+0x11fe>
    9fec:	f10a 0a08 	add.w	sl, sl, #8
    9ff0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ff2:	990e      	ldr	r1, [sp, #56]	; 0x38
    9ff4:	428b      	cmp	r3, r1
    9ff6:	f280 82d0 	bge.w	a59a <_svfprintf_r+0xd0a>
    9ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ffc:	9912      	ldr	r1, [sp, #72]	; 0x48
    9ffe:	441a      	add	r2, r3
    a000:	e9ca 1300 	strd	r1, r3, [sl]
    a004:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a006:	9226      	str	r2, [sp, #152]	; 0x98
    a008:	3301      	adds	r3, #1
    a00a:	2b07      	cmp	r3, #7
    a00c:	9325      	str	r3, [sp, #148]	; 0x94
    a00e:	f300 8397 	bgt.w	a740 <_svfprintf_r+0xeb0>
    a012:	f10a 0a08 	add.w	sl, sl, #8
    a016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a018:	1e5c      	subs	r4, r3, #1
    a01a:	2c00      	cmp	r4, #0
    a01c:	f77f add0 	ble.w	9bc0 <_svfprintf_r+0x330>
    a020:	2c10      	cmp	r4, #16
    a022:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a024:	f340 856e 	ble.w	ab04 <_svfprintf_r+0x1274>
    a028:	ee1b 6a10 	vmov	r6, s22
    a02c:	2510      	movs	r5, #16
    a02e:	e005      	b.n	a03c <_svfprintf_r+0x7ac>
    a030:	f10a 0a08 	add.w	sl, sl, #8
    a034:	3c10      	subs	r4, #16
    a036:	2c10      	cmp	r4, #16
    a038:	f340 8564 	ble.w	ab04 <_svfprintf_r+0x1274>
    a03c:	3301      	adds	r3, #1
    a03e:	49a0      	ldr	r1, [pc, #640]	; (a2c0 <_svfprintf_r+0xa30>)
    a040:	3210      	adds	r2, #16
    a042:	2b07      	cmp	r3, #7
    a044:	e9ca 1500 	strd	r1, r5, [sl]
    a048:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a04c:	ddf0      	ble.n	a030 <_svfprintf_r+0x7a0>
    a04e:	aa24      	add	r2, sp, #144	; 0x90
    a050:	4631      	mov	r1, r6
    a052:	4658      	mov	r0, fp
    a054:	f002 fae8 	bl	c628 <__ssprint_r>
    a058:	2800      	cmp	r0, #0
    a05a:	d17e      	bne.n	a15a <_svfprintf_r+0x8ca>
    a05c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a060:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a064:	e7e6      	b.n	a034 <_svfprintf_r+0x7a4>
    a066:	9b06      	ldr	r3, [sp, #24]
    a068:	9902      	ldr	r1, [sp, #8]
    a06a:	1a5d      	subs	r5, r3, r1
    a06c:	2d00      	cmp	r5, #0
    a06e:	f77f ad8e 	ble.w	9b8e <_svfprintf_r+0x2fe>
    a072:	2d10      	cmp	r5, #16
    a074:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a076:	dd21      	ble.n	a0bc <_svfprintf_r+0x82c>
    a078:	9409      	str	r4, [sp, #36]	; 0x24
    a07a:	2610      	movs	r6, #16
    a07c:	ee1b 4a10 	vmov	r4, s22
    a080:	e004      	b.n	a08c <_svfprintf_r+0x7fc>
    a082:	3d10      	subs	r5, #16
    a084:	2d10      	cmp	r5, #16
    a086:	f10a 0a08 	add.w	sl, sl, #8
    a08a:	dd16      	ble.n	a0ba <_svfprintf_r+0x82a>
    a08c:	3301      	adds	r3, #1
    a08e:	498c      	ldr	r1, [pc, #560]	; (a2c0 <_svfprintf_r+0xa30>)
    a090:	3210      	adds	r2, #16
    a092:	2b07      	cmp	r3, #7
    a094:	e9ca 1600 	strd	r1, r6, [sl]
    a098:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a09c:	ddf1      	ble.n	a082 <_svfprintf_r+0x7f2>
    a09e:	aa24      	add	r2, sp, #144	; 0x90
    a0a0:	4621      	mov	r1, r4
    a0a2:	4658      	mov	r0, fp
    a0a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a0a8:	f002 fabe 	bl	c628 <__ssprint_r>
    a0ac:	2800      	cmp	r0, #0
    a0ae:	d154      	bne.n	a15a <_svfprintf_r+0x8ca>
    a0b0:	3d10      	subs	r5, #16
    a0b2:	2d10      	cmp	r5, #16
    a0b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a0b8:	dce8      	bgt.n	a08c <_svfprintf_r+0x7fc>
    a0ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a0bc:	4980      	ldr	r1, [pc, #512]	; (a2c0 <_svfprintf_r+0xa30>)
    a0be:	f8ca 5004 	str.w	r5, [sl, #4]
    a0c2:	3301      	adds	r3, #1
    a0c4:	442a      	add	r2, r5
    a0c6:	2b07      	cmp	r3, #7
    a0c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a0cc:	f8ca 1000 	str.w	r1, [sl]
    a0d0:	f300 8526 	bgt.w	ab20 <_svfprintf_r+0x1290>
    a0d4:	9b03      	ldr	r3, [sp, #12]
    a0d6:	9905      	ldr	r1, [sp, #20]
    a0d8:	1a5d      	subs	r5, r3, r1
    a0da:	2d00      	cmp	r5, #0
    a0dc:	f10a 0a08 	add.w	sl, sl, #8
    a0e0:	f77f ad5b 	ble.w	9b9a <_svfprintf_r+0x30a>
    a0e4:	2d10      	cmp	r5, #16
    a0e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a0e8:	dd1f      	ble.n	a12a <_svfprintf_r+0x89a>
    a0ea:	4651      	mov	r1, sl
    a0ec:	2610      	movs	r6, #16
    a0ee:	ee1b aa10 	vmov	sl, s22
    a0f2:	e004      	b.n	a0fe <_svfprintf_r+0x86e>
    a0f4:	3d10      	subs	r5, #16
    a0f6:	2d10      	cmp	r5, #16
    a0f8:	f101 0108 	add.w	r1, r1, #8
    a0fc:	dd14      	ble.n	a128 <_svfprintf_r+0x898>
    a0fe:	3301      	adds	r3, #1
    a100:	486f      	ldr	r0, [pc, #444]	; (a2c0 <_svfprintf_r+0xa30>)
    a102:	3210      	adds	r2, #16
    a104:	2b07      	cmp	r3, #7
    a106:	e9c1 0600 	strd	r0, r6, [r1]
    a10a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a10e:	ddf1      	ble.n	a0f4 <_svfprintf_r+0x864>
    a110:	aa24      	add	r2, sp, #144	; 0x90
    a112:	4651      	mov	r1, sl
    a114:	4658      	mov	r0, fp
    a116:	f002 fa87 	bl	c628 <__ssprint_r>
    a11a:	b9f0      	cbnz	r0, a15a <_svfprintf_r+0x8ca>
    a11c:	3d10      	subs	r5, #16
    a11e:	2d10      	cmp	r5, #16
    a120:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a124:	a927      	add	r1, sp, #156	; 0x9c
    a126:	dcea      	bgt.n	a0fe <_svfprintf_r+0x86e>
    a128:	468a      	mov	sl, r1
    a12a:	3301      	adds	r3, #1
    a12c:	4964      	ldr	r1, [pc, #400]	; (a2c0 <_svfprintf_r+0xa30>)
    a12e:	f8ca 5004 	str.w	r5, [sl, #4]
    a132:	442a      	add	r2, r5
    a134:	2b07      	cmp	r3, #7
    a136:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a13a:	f8ca 1000 	str.w	r1, [sl]
    a13e:	f300 81da 	bgt.w	a4f6 <_svfprintf_r+0xc66>
    a142:	f10a 0a08 	add.w	sl, sl, #8
    a146:	e528      	b.n	9b9a <_svfprintf_r+0x30a>
    a148:	ee1b 1a10 	vmov	r1, s22
    a14c:	aa24      	add	r2, sp, #144	; 0x90
    a14e:	4658      	mov	r0, fp
    a150:	f002 fa6a 	bl	c628 <__ssprint_r>
    a154:	2800      	cmp	r0, #0
    a156:	f43f ad47 	beq.w	9be8 <_svfprintf_r+0x358>
    a15a:	9b07      	ldr	r3, [sp, #28]
    a15c:	2b00      	cmp	r3, #0
    a15e:	f43f aca2 	beq.w	9aa6 <_svfprintf_r+0x216>
    a162:	9907      	ldr	r1, [sp, #28]
    a164:	4658      	mov	r0, fp
    a166:	f7fe fead 	bl	8ec4 <_free_r>
    a16a:	e49c      	b.n	9aa6 <_svfprintf_r+0x216>
    a16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a16e:	2b01      	cmp	r3, #1
    a170:	f340 817a 	ble.w	a468 <_svfprintf_r+0xbd8>
    a174:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a176:	f8ca 4000 	str.w	r4, [sl]
    a17a:	3301      	adds	r3, #1
    a17c:	3201      	adds	r2, #1
    a17e:	2101      	movs	r1, #1
    a180:	2b07      	cmp	r3, #7
    a182:	9226      	str	r2, [sp, #152]	; 0x98
    a184:	9325      	str	r3, [sp, #148]	; 0x94
    a186:	f8ca 1004 	str.w	r1, [sl, #4]
    a18a:	f300 81f8 	bgt.w	a57e <_svfprintf_r+0xcee>
    a18e:	f10a 0a08 	add.w	sl, sl, #8
    a192:	9910      	ldr	r1, [sp, #64]	; 0x40
    a194:	9812      	ldr	r0, [sp, #72]	; 0x48
    a196:	3301      	adds	r3, #1
    a198:	440a      	add	r2, r1
    a19a:	2b07      	cmp	r3, #7
    a19c:	e9ca 0100 	strd	r0, r1, [sl]
    a1a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a1a4:	f300 81dd 	bgt.w	a562 <_svfprintf_r+0xcd2>
    a1a8:	f10a 0a08 	add.w	sl, sl, #8
    a1ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1b4:	f000 8177 	beq.w	a4a6 <_svfprintf_r+0xc16>
    a1b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    a1ba:	3301      	adds	r3, #1
    a1bc:	3901      	subs	r1, #1
    a1be:	3401      	adds	r4, #1
    a1c0:	440a      	add	r2, r1
    a1c2:	2b07      	cmp	r3, #7
    a1c4:	f8ca 4000 	str.w	r4, [sl]
    a1c8:	9325      	str	r3, [sp, #148]	; 0x94
    a1ca:	f8ca 1004 	str.w	r1, [sl, #4]
    a1ce:	9226      	str	r2, [sp, #152]	; 0x98
    a1d0:	f300 815b 	bgt.w	a48a <_svfprintf_r+0xbfa>
    a1d4:	f10a 0a08 	add.w	sl, sl, #8
    a1d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    a1da:	f8ca 1004 	str.w	r1, [sl, #4]
    a1de:	3301      	adds	r3, #1
    a1e0:	440a      	add	r2, r1
    a1e2:	2b07      	cmp	r3, #7
    a1e4:	a91e      	add	r1, sp, #120	; 0x78
    a1e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a1ea:	f8ca 1000 	str.w	r1, [sl]
    a1ee:	f77f ace5 	ble.w	9bbc <_svfprintf_r+0x32c>
    a1f2:	ee1b 1a10 	vmov	r1, s22
    a1f6:	aa24      	add	r2, sp, #144	; 0x90
    a1f8:	4658      	mov	r0, fp
    a1fa:	f002 fa15 	bl	c628 <__ssprint_r>
    a1fe:	2800      	cmp	r0, #0
    a200:	d1ab      	bne.n	a15a <_svfprintf_r+0x8ca>
    a202:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a204:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a208:	e4da      	b.n	9bc0 <_svfprintf_r+0x330>
    a20a:	2d10      	cmp	r5, #16
    a20c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    a210:	4e2c      	ldr	r6, [pc, #176]	; (a2c4 <_svfprintf_r+0xa34>)
    a212:	dd24      	ble.n	a25e <_svfprintf_r+0x9ce>
    a214:	9417      	str	r4, [sp, #92]	; 0x5c
    a216:	2310      	movs	r3, #16
    a218:	ee1b 4a10 	vmov	r4, s22
    a21c:	4608      	mov	r0, r1
    a21e:	e004      	b.n	a22a <_svfprintf_r+0x99a>
    a220:	3d10      	subs	r5, #16
    a222:	2d10      	cmp	r5, #16
    a224:	f10a 0a08 	add.w	sl, sl, #8
    a228:	dd17      	ble.n	a25a <_svfprintf_r+0x9ca>
    a22a:	3001      	adds	r0, #1
    a22c:	3210      	adds	r2, #16
    a22e:	2807      	cmp	r0, #7
    a230:	e9ca 6300 	strd	r6, r3, [sl]
    a234:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    a238:	ddf2      	ble.n	a220 <_svfprintf_r+0x990>
    a23a:	aa24      	add	r2, sp, #144	; 0x90
    a23c:	4621      	mov	r1, r4
    a23e:	4658      	mov	r0, fp
    a240:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a244:	f002 f9f0 	bl	c628 <__ssprint_r>
    a248:	2800      	cmp	r0, #0
    a24a:	d186      	bne.n	a15a <_svfprintf_r+0x8ca>
    a24c:	3d10      	subs	r5, #16
    a24e:	2d10      	cmp	r5, #16
    a250:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    a254:	f04f 0310 	mov.w	r3, #16
    a258:	dce7      	bgt.n	a22a <_svfprintf_r+0x99a>
    a25a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    a25c:	4601      	mov	r1, r0
    a25e:	3101      	adds	r1, #1
    a260:	442a      	add	r2, r5
    a262:	2907      	cmp	r1, #7
    a264:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    a268:	f8ca 6000 	str.w	r6, [sl]
    a26c:	f8ca 5004 	str.w	r5, [sl, #4]
    a270:	f300 83bd 	bgt.w	a9ee <_svfprintf_r+0x115e>
    a274:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    a278:	f10a 0a08 	add.w	sl, sl, #8
    a27c:	e45d      	b.n	9b3a <_svfprintf_r+0x2aa>
    a27e:	f8cd 8008 	str.w	r8, [sp, #8]
    a282:	2a0a      	cmp	r2, #10
    a284:	f171 0300 	sbcs.w	r3, r1, #0
    a288:	f080 8345 	bcs.w	a916 <_svfprintf_r+0x1086>
    a28c:	3230      	adds	r2, #48	; 0x30
    a28e:	2301      	movs	r3, #1
    a290:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a294:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    a298:	9305      	str	r3, [sp, #20]
    a29a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    a29e:	e668      	b.n	9f72 <_svfprintf_r+0x6e2>
    a2a0:	ee1b 1a10 	vmov	r1, s22
    a2a4:	aa24      	add	r2, sp, #144	; 0x90
    a2a6:	4658      	mov	r0, fp
    a2a8:	f002 f9be 	bl	c628 <__ssprint_r>
    a2ac:	2800      	cmp	r0, #0
    a2ae:	f47f af54 	bne.w	a15a <_svfprintf_r+0x8ca>
    a2b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a2b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a2b8:	e452      	b.n	9b60 <_svfprintf_r+0x2d0>
    a2ba:	bf00      	nop
    a2bc:	200013cc 	.word	0x200013cc
    a2c0:	20001c68 	.word	0x20001c68
    a2c4:	200013d0 	.word	0x200013d0
    a2c8:	ee1b 1a10 	vmov	r1, s22
    a2cc:	aa24      	add	r2, sp, #144	; 0x90
    a2ce:	4658      	mov	r0, fp
    a2d0:	f002 f9aa 	bl	c628 <__ssprint_r>
    a2d4:	2800      	cmp	r0, #0
    a2d6:	f47f af40 	bne.w	a15a <_svfprintf_r+0x8ca>
    a2da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a2dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a2e0:	e451      	b.n	9b86 <_svfprintf_r+0x2f6>
    a2e2:	2c10      	cmp	r4, #16
    a2e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a2e6:	4ebe      	ldr	r6, [pc, #760]	; (a5e0 <_svfprintf_r+0xd50>)
    a2e8:	dd1f      	ble.n	a32a <_svfprintf_r+0xa9a>
    a2ea:	ee1b 8a10 	vmov	r8, s22
    a2ee:	2510      	movs	r5, #16
    a2f0:	e004      	b.n	a2fc <_svfprintf_r+0xa6c>
    a2f2:	3c10      	subs	r4, #16
    a2f4:	2c10      	cmp	r4, #16
    a2f6:	f10a 0a08 	add.w	sl, sl, #8
    a2fa:	dd16      	ble.n	a32a <_svfprintf_r+0xa9a>
    a2fc:	3301      	adds	r3, #1
    a2fe:	3210      	adds	r2, #16
    a300:	2b07      	cmp	r3, #7
    a302:	e9ca 6500 	strd	r6, r5, [sl]
    a306:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a30a:	ddf2      	ble.n	a2f2 <_svfprintf_r+0xa62>
    a30c:	aa24      	add	r2, sp, #144	; 0x90
    a30e:	4641      	mov	r1, r8
    a310:	4658      	mov	r0, fp
    a312:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a316:	f002 f987 	bl	c628 <__ssprint_r>
    a31a:	2800      	cmp	r0, #0
    a31c:	f47f af1d 	bne.w	a15a <_svfprintf_r+0x8ca>
    a320:	3c10      	subs	r4, #16
    a322:	2c10      	cmp	r4, #16
    a324:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a328:	dce8      	bgt.n	a2fc <_svfprintf_r+0xa6c>
    a32a:	3301      	adds	r3, #1
    a32c:	4422      	add	r2, r4
    a32e:	2b07      	cmp	r3, #7
    a330:	e9ca 6400 	strd	r6, r4, [sl]
    a334:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a338:	f77f ac4b 	ble.w	9bd2 <_svfprintf_r+0x342>
    a33c:	ee1b 1a10 	vmov	r1, s22
    a340:	aa24      	add	r2, sp, #144	; 0x90
    a342:	4658      	mov	r0, fp
    a344:	f002 f970 	bl	c628 <__ssprint_r>
    a348:	2800      	cmp	r0, #0
    a34a:	f47f af06 	bne.w	a15a <_svfprintf_r+0x8ca>
    a34e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a350:	e43f      	b.n	9bd2 <_svfprintf_r+0x342>
    a352:	991b      	ldr	r1, [sp, #108]	; 0x6c
    a354:	2900      	cmp	r1, #0
    a356:	f340 835a 	ble.w	aa0e <_svfprintf_r+0x117e>
    a35a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    a35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a35e:	429e      	cmp	r6, r3
    a360:	bfa8      	it	ge
    a362:	461e      	movge	r6, r3
    a364:	2e00      	cmp	r6, #0
    a366:	dd0b      	ble.n	a380 <_svfprintf_r+0xaf0>
    a368:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a36a:	3301      	adds	r3, #1
    a36c:	4432      	add	r2, r6
    a36e:	2b07      	cmp	r3, #7
    a370:	e9ca 4600 	strd	r4, r6, [sl]
    a374:	9226      	str	r2, [sp, #152]	; 0x98
    a376:	9325      	str	r3, [sp, #148]	; 0x94
    a378:	f300 8689 	bgt.w	b08e <_svfprintf_r+0x17fe>
    a37c:	f10a 0a08 	add.w	sl, sl, #8
    a380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a382:	2e00      	cmp	r6, #0
    a384:	bfa8      	it	ge
    a386:	1bad      	subge	r5, r5, r6
    a388:	2d00      	cmp	r5, #0
    a38a:	f300 8203 	bgt.w	a794 <_svfprintf_r+0xf04>
    a38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a390:	f418 6f80 	tst.w	r8, #1024	; 0x400
    a394:	4423      	add	r3, r4
    a396:	9305      	str	r3, [sp, #20]
    a398:	f040 821f 	bne.w	a7da <_svfprintf_r+0xf4a>
    a39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a39e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a3a0:	428b      	cmp	r3, r1
    a3a2:	db03      	blt.n	a3ac <_svfprintf_r+0xb1c>
    a3a4:	f018 0f01 	tst.w	r8, #1
    a3a8:	f000 84cf 	beq.w	ad4a <_svfprintf_r+0x14ba>
    a3ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    a3ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    a3b0:	440a      	add	r2, r1
    a3b2:	e9ca 0100 	strd	r0, r1, [sl]
    a3b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    a3b8:	9226      	str	r2, [sp, #152]	; 0x98
    a3ba:	3101      	adds	r1, #1
    a3bc:	2907      	cmp	r1, #7
    a3be:	9125      	str	r1, [sp, #148]	; 0x94
    a3c0:	f300 86a5 	bgt.w	b10e <_svfprintf_r+0x187e>
    a3c4:	f10a 0a08 	add.w	sl, sl, #8
    a3c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    a3ca:	1865      	adds	r5, r4, r1
    a3cc:	1acc      	subs	r4, r1, r3
    a3ce:	9b05      	ldr	r3, [sp, #20]
    a3d0:	1aed      	subs	r5, r5, r3
    a3d2:	42a5      	cmp	r5, r4
    a3d4:	bfa8      	it	ge
    a3d6:	4625      	movge	r5, r4
    a3d8:	2d00      	cmp	r5, #0
    a3da:	dd0d      	ble.n	a3f8 <_svfprintf_r+0xb68>
    a3dc:	f8ca 3000 	str.w	r3, [sl]
    a3e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a3e2:	f8ca 5004 	str.w	r5, [sl, #4]
    a3e6:	3301      	adds	r3, #1
    a3e8:	442a      	add	r2, r5
    a3ea:	2b07      	cmp	r3, #7
    a3ec:	9226      	str	r2, [sp, #152]	; 0x98
    a3ee:	9325      	str	r3, [sp, #148]	; 0x94
    a3f0:	f300 86bb 	bgt.w	b16a <_svfprintf_r+0x18da>
    a3f4:	f10a 0a08 	add.w	sl, sl, #8
    a3f8:	2d00      	cmp	r5, #0
    a3fa:	bfa8      	it	ge
    a3fc:	1b64      	subge	r4, r4, r5
    a3fe:	2c00      	cmp	r4, #0
    a400:	f77f abde 	ble.w	9bc0 <_svfprintf_r+0x330>
    a404:	2c10      	cmp	r4, #16
    a406:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a408:	f340 837c 	ble.w	ab04 <_svfprintf_r+0x1274>
    a40c:	ee1b 6a10 	vmov	r6, s22
    a410:	2510      	movs	r5, #16
    a412:	e005      	b.n	a420 <_svfprintf_r+0xb90>
    a414:	f10a 0a08 	add.w	sl, sl, #8
    a418:	3c10      	subs	r4, #16
    a41a:	2c10      	cmp	r4, #16
    a41c:	f340 8372 	ble.w	ab04 <_svfprintf_r+0x1274>
    a420:	3301      	adds	r3, #1
    a422:	4970      	ldr	r1, [pc, #448]	; (a5e4 <_svfprintf_r+0xd54>)
    a424:	3210      	adds	r2, #16
    a426:	2b07      	cmp	r3, #7
    a428:	e9ca 1500 	strd	r1, r5, [sl]
    a42c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a430:	ddf0      	ble.n	a414 <_svfprintf_r+0xb84>
    a432:	aa24      	add	r2, sp, #144	; 0x90
    a434:	4631      	mov	r1, r6
    a436:	4658      	mov	r0, fp
    a438:	f002 f8f6 	bl	c628 <__ssprint_r>
    a43c:	2800      	cmp	r0, #0
    a43e:	f47f ae8c 	bne.w	a15a <_svfprintf_r+0x8ca>
    a442:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a446:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a44a:	e7e5      	b.n	a418 <_svfprintf_r+0xb88>
    a44c:	2b30      	cmp	r3, #48	; 0x30
    a44e:	f43f ad8b 	beq.w	9f68 <_svfprintf_r+0x6d8>
    a452:	2330      	movs	r3, #48	; 0x30
    a454:	3802      	subs	r0, #2
    a456:	f804 3c01 	strb.w	r3, [r4, #-1]
    a45a:	ab50      	add	r3, sp, #320	; 0x140
    a45c:	1a1b      	subs	r3, r3, r0
    a45e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a462:	9305      	str	r3, [sp, #20]
    a464:	4604      	mov	r4, r0
    a466:	e584      	b.n	9f72 <_svfprintf_r+0x6e2>
    a468:	f018 0f01 	tst.w	r8, #1
    a46c:	f47f ae82 	bne.w	a174 <_svfprintf_r+0x8e4>
    a470:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a472:	f8ca 4000 	str.w	r4, [sl]
    a476:	3301      	adds	r3, #1
    a478:	3201      	adds	r2, #1
    a47a:	2101      	movs	r1, #1
    a47c:	2b07      	cmp	r3, #7
    a47e:	9226      	str	r2, [sp, #152]	; 0x98
    a480:	9325      	str	r3, [sp, #148]	; 0x94
    a482:	f8ca 1004 	str.w	r1, [sl, #4]
    a486:	f77f aea5 	ble.w	a1d4 <_svfprintf_r+0x944>
    a48a:	ee1b 1a10 	vmov	r1, s22
    a48e:	aa24      	add	r2, sp, #144	; 0x90
    a490:	4658      	mov	r0, fp
    a492:	f002 f8c9 	bl	c628 <__ssprint_r>
    a496:	2800      	cmp	r0, #0
    a498:	f47f ae5f 	bne.w	a15a <_svfprintf_r+0x8ca>
    a49c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a4a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a4a4:	e698      	b.n	a1d8 <_svfprintf_r+0x948>
    a4a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    a4a8:	1e4c      	subs	r4, r1, #1
    a4aa:	2c00      	cmp	r4, #0
    a4ac:	f77f ae94 	ble.w	a1d8 <_svfprintf_r+0x948>
    a4b0:	2c10      	cmp	r4, #16
    a4b2:	f340 8361 	ble.w	ab78 <_svfprintf_r+0x12e8>
    a4b6:	ee1b 6a10 	vmov	r6, s22
    a4ba:	2510      	movs	r5, #16
    a4bc:	e005      	b.n	a4ca <_svfprintf_r+0xc3a>
    a4be:	f10a 0a08 	add.w	sl, sl, #8
    a4c2:	3c10      	subs	r4, #16
    a4c4:	2c10      	cmp	r4, #16
    a4c6:	f340 8357 	ble.w	ab78 <_svfprintf_r+0x12e8>
    a4ca:	3301      	adds	r3, #1
    a4cc:	4945      	ldr	r1, [pc, #276]	; (a5e4 <_svfprintf_r+0xd54>)
    a4ce:	3210      	adds	r2, #16
    a4d0:	2b07      	cmp	r3, #7
    a4d2:	e9ca 1500 	strd	r1, r5, [sl]
    a4d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a4da:	ddf0      	ble.n	a4be <_svfprintf_r+0xc2e>
    a4dc:	aa24      	add	r2, sp, #144	; 0x90
    a4de:	4631      	mov	r1, r6
    a4e0:	4658      	mov	r0, fp
    a4e2:	f002 f8a1 	bl	c628 <__ssprint_r>
    a4e6:	2800      	cmp	r0, #0
    a4e8:	f47f ae37 	bne.w	a15a <_svfprintf_r+0x8ca>
    a4ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a4f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a4f4:	e7e5      	b.n	a4c2 <_svfprintf_r+0xc32>
    a4f6:	ee1b 1a10 	vmov	r1, s22
    a4fa:	aa24      	add	r2, sp, #144	; 0x90
    a4fc:	4658      	mov	r0, fp
    a4fe:	f002 f893 	bl	c628 <__ssprint_r>
    a502:	2800      	cmp	r0, #0
    a504:	f47f ae29 	bne.w	a15a <_svfprintf_r+0x8ca>
    a508:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a50a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a50e:	f7ff bb44 	b.w	9b9a <_svfprintf_r+0x30a>
    a512:	9b02      	ldr	r3, [sp, #8]
    a514:	f013 0310 	ands.w	r3, r3, #16
    a518:	f040 80c1 	bne.w	a69e <_svfprintf_r+0xe0e>
    a51c:	9a02      	ldr	r2, [sp, #8]
    a51e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    a522:	f000 837a 	beq.w	ac1a <_svfprintf_r+0x138a>
    a526:	9808      	ldr	r0, [sp, #32]
    a528:	f850 2b04 	ldr.w	r2, [r0], #4
    a52c:	9008      	str	r0, [sp, #32]
    a52e:	4619      	mov	r1, r3
    a530:	b292      	uxth	r2, r2
    a532:	2301      	movs	r3, #1
    a534:	e451      	b.n	9dda <_svfprintf_r+0x54a>
    a536:	f018 0310 	ands.w	r3, r8, #16
    a53a:	d155      	bne.n	a5e8 <_svfprintf_r+0xd58>
    a53c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    a540:	f000 835d 	beq.w	abfe <_svfprintf_r+0x136e>
    a544:	9808      	ldr	r0, [sp, #32]
    a546:	f850 2b04 	ldr.w	r2, [r0], #4
    a54a:	9008      	str	r0, [sp, #32]
    a54c:	4619      	mov	r1, r3
    a54e:	b292      	uxth	r2, r2
    a550:	e4a8      	b.n	9ea4 <_svfprintf_r+0x614>
    a552:	4252      	negs	r2, r2
    a554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a558:	f8cd 8008 	str.w	r8, [sp, #8]
    a55c:	202d      	movs	r0, #45	; 0x2d
    a55e:	2301      	movs	r3, #1
    a560:	e43c      	b.n	9ddc <_svfprintf_r+0x54c>
    a562:	ee1b 1a10 	vmov	r1, s22
    a566:	aa24      	add	r2, sp, #144	; 0x90
    a568:	4658      	mov	r0, fp
    a56a:	f002 f85d 	bl	c628 <__ssprint_r>
    a56e:	2800      	cmp	r0, #0
    a570:	f47f adf3 	bne.w	a15a <_svfprintf_r+0x8ca>
    a574:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a578:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a57c:	e616      	b.n	a1ac <_svfprintf_r+0x91c>
    a57e:	ee1b 1a10 	vmov	r1, s22
    a582:	aa24      	add	r2, sp, #144	; 0x90
    a584:	4658      	mov	r0, fp
    a586:	f002 f84f 	bl	c628 <__ssprint_r>
    a58a:	2800      	cmp	r0, #0
    a58c:	f47f ade5 	bne.w	a15a <_svfprintf_r+0x8ca>
    a590:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a594:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a598:	e5fb      	b.n	a192 <_svfprintf_r+0x902>
    a59a:	f018 0f01 	tst.w	r8, #1
    a59e:	f43f ab0f 	beq.w	9bc0 <_svfprintf_r+0x330>
    a5a2:	e52a      	b.n	9ffa <_svfprintf_r+0x76a>
    a5a4:	9308      	str	r3, [sp, #32]
    a5a6:	f899 3000 	ldrb.w	r3, [r9]
    a5aa:	f7ff b9cd 	b.w	9948 <_svfprintf_r+0xb8>
    a5ae:	ac50      	add	r4, sp, #320	; 0x140
    a5b0:	e4df      	b.n	9f72 <_svfprintf_r+0x6e2>
    a5b2:	f418 7f00 	tst.w	r8, #512	; 0x200
    a5b6:	f040 83db 	bne.w	ad70 <_svfprintf_r+0x14e0>
    a5ba:	f853 2b04 	ldr.w	r2, [r3], #4
    a5be:	9308      	str	r3, [sp, #32]
    a5c0:	17d1      	asrs	r1, r2, #31
    a5c2:	460b      	mov	r3, r1
    a5c4:	f7ff bbb6 	b.w	9d34 <_svfprintf_r+0x4a4>
    a5c8:	9b08      	ldr	r3, [sp, #32]
    a5ca:	9804      	ldr	r0, [sp, #16]
    a5cc:	f853 1b04 	ldr.w	r1, [r3], #4
    a5d0:	9308      	str	r3, [sp, #32]
    a5d2:	17c2      	asrs	r2, r0, #31
    a5d4:	e9c1 0200 	strd	r0, r2, [r1]
    a5d8:	464c      	mov	r4, r9
    a5da:	f7ff b98b 	b.w	98f4 <_svfprintf_r+0x64>
    a5de:	bf00      	nop
    a5e0:	200013d0 	.word	0x200013d0
    a5e4:	20001c68 	.word	0x20001c68
    a5e8:	9b08      	ldr	r3, [sp, #32]
    a5ea:	f853 2b04 	ldr.w	r2, [r3], #4
    a5ee:	9308      	str	r3, [sp, #32]
    a5f0:	e458      	b.n	9ea4 <_svfprintf_r+0x614>
    a5f2:	eeb4 8b48 	vcmp.f64	d8, d8
    a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5fa:	f180 8694 	bvs.w	b326 <_svfprintf_r+0x1a96>
    a5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a600:	2b61      	cmp	r3, #97	; 0x61
    a602:	f000 8552 	beq.w	b0aa <_svfprintf_r+0x181a>
    a606:	2b41      	cmp	r3, #65	; 0x41
    a608:	f000 85c0 	beq.w	b18c <_svfprintf_r+0x18fc>
    a60c:	9b03      	ldr	r3, [sp, #12]
    a60e:	3301      	adds	r3, #1
    a610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a612:	f023 0520 	bic.w	r5, r3, #32
    a616:	f000 8480 	beq.w	af1a <_svfprintf_r+0x168a>
    a61a:	2d47      	cmp	r5, #71	; 0x47
    a61c:	d104      	bne.n	a628 <_svfprintf_r+0xd98>
    a61e:	9b03      	ldr	r3, [sp, #12]
    a620:	2b00      	cmp	r3, #0
    a622:	bf08      	it	eq
    a624:	2301      	moveq	r3, #1
    a626:	9303      	str	r3, [sp, #12]
    a628:	ee18 3a90 	vmov	r3, s17
    a62c:	2b00      	cmp	r3, #0
    a62e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    a632:	4646      	mov	r6, r8
    a634:	f2c0 8618 	blt.w	b268 <_svfprintf_r+0x19d8>
    a638:	eeb0 ab48 	vmov.f64	d10, d8
    a63c:	2300      	movs	r3, #0
    a63e:	4690      	mov	r8, r2
    a640:	9309      	str	r3, [sp, #36]	; 0x24
    a642:	9307      	str	r3, [sp, #28]
    a644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a646:	3b41      	subs	r3, #65	; 0x41
    a648:	2b25      	cmp	r3, #37	; 0x25
    a64a:	f200 8398 	bhi.w	ad7e <_svfprintf_r+0x14ee>
    a64e:	e8df f013 	tbh	[pc, r3, lsl #1]
    a652:	046f      	.short	0x046f
    a654:	03960396 	.word	0x03960396
    a658:	04680396 	.word	0x04680396
    a65c:	0396046c 	.word	0x0396046c
    a660:	03960396 	.word	0x03960396
    a664:	03960396 	.word	0x03960396
    a668:	03960396 	.word	0x03960396
    a66c:	03960396 	.word	0x03960396
    a670:	03960396 	.word	0x03960396
    a674:	03960396 	.word	0x03960396
    a678:	03960396 	.word	0x03960396
    a67c:	03960396 	.word	0x03960396
    a680:	03960396 	.word	0x03960396
    a684:	03960396 	.word	0x03960396
    a688:	03960396 	.word	0x03960396
    a68c:	03960396 	.word	0x03960396
    a690:	03960396 	.word	0x03960396
    a694:	03960396 	.word	0x03960396
    a698:	04680396 	.word	0x04680396
    a69c:	046c      	.short	0x046c
    a69e:	9b08      	ldr	r3, [sp, #32]
    a6a0:	f853 2b04 	ldr.w	r2, [r3], #4
    a6a4:	9308      	str	r3, [sp, #32]
    a6a6:	2301      	movs	r3, #1
    a6a8:	f7ff bb97 	b.w	9dda <_svfprintf_r+0x54a>
    a6ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a6ae:	2b00      	cmp	r3, #0
    a6b0:	f43f a9cf 	beq.w	9a52 <_svfprintf_r+0x1c2>
    a6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a6b6:	781b      	ldrb	r3, [r3, #0]
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f43f a9ca 	beq.w	9a52 <_svfprintf_r+0x1c2>
    a6be:	f899 3000 	ldrb.w	r3, [r9]
    a6c2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    a6c6:	f7ff b93f 	b.w	9948 <_svfprintf_r+0xb8>
    a6ca:	930b      	str	r3, [sp, #44]	; 0x2c
    a6cc:	f8cd 8008 	str.w	r8, [sp, #8]
    a6d0:	f7ff bbf1 	b.w	9eb6 <_svfprintf_r+0x626>
    a6d4:	930b      	str	r3, [sp, #44]	; 0x2c
    a6d6:	4b9a      	ldr	r3, [pc, #616]	; (a940 <_svfprintf_r+0x10b0>)
    a6d8:	9311      	str	r3, [sp, #68]	; 0x44
    a6da:	f018 0120 	ands.w	r1, r8, #32
    a6de:	f000 8105 	beq.w	a8ec <_svfprintf_r+0x105c>
    a6e2:	9b08      	ldr	r3, [sp, #32]
    a6e4:	3307      	adds	r3, #7
    a6e6:	f023 0307 	bic.w	r3, r3, #7
    a6ea:	6859      	ldr	r1, [r3, #4]
    a6ec:	f853 2b08 	ldr.w	r2, [r3], #8
    a6f0:	9308      	str	r3, [sp, #32]
    a6f2:	f018 0f01 	tst.w	r8, #1
    a6f6:	d00a      	beq.n	a70e <_svfprintf_r+0xe7e>
    a6f8:	ea52 0301 	orrs.w	r3, r2, r1
    a6fc:	d007      	beq.n	a70e <_svfprintf_r+0xe7e>
    a6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a700:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    a704:	2330      	movs	r3, #48	; 0x30
    a706:	f048 0802 	orr.w	r8, r8, #2
    a70a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    a70e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    a712:	9302      	str	r3, [sp, #8]
    a714:	2302      	movs	r3, #2
    a716:	f7ff bb60 	b.w	9dda <_svfprintf_r+0x54a>
    a71a:	930b      	str	r3, [sp, #44]	; 0x2c
    a71c:	f7ff bbb6 	b.w	9e8c <_svfprintf_r+0x5fc>
    a720:	930b      	str	r3, [sp, #44]	; 0x2c
    a722:	4b88      	ldr	r3, [pc, #544]	; (a944 <_svfprintf_r+0x10b4>)
    a724:	9311      	str	r3, [sp, #68]	; 0x44
    a726:	e7d8      	b.n	a6da <_svfprintf_r+0xe4a>
    a728:	9b08      	ldr	r3, [sp, #32]
    a72a:	2101      	movs	r1, #1
    a72c:	f853 2b04 	ldr.w	r2, [r3], #4
    a730:	9102      	str	r1, [sp, #8]
    a732:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    a736:	9308      	str	r3, [sp, #32]
    a738:	9105      	str	r1, [sp, #20]
    a73a:	ac37      	add	r4, sp, #220	; 0xdc
    a73c:	f7ff baaf 	b.w	9c9e <_svfprintf_r+0x40e>
    a740:	ee1b 1a10 	vmov	r1, s22
    a744:	aa24      	add	r2, sp, #144	; 0x90
    a746:	4658      	mov	r0, fp
    a748:	f001 ff6e 	bl	c628 <__ssprint_r>
    a74c:	2800      	cmp	r0, #0
    a74e:	f47f ad04 	bne.w	a15a <_svfprintf_r+0x8ca>
    a752:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a754:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a758:	e45d      	b.n	a016 <_svfprintf_r+0x786>
    a75a:	9b03      	ldr	r3, [sp, #12]
    a75c:	9407      	str	r4, [sp, #28]
    a75e:	2b06      	cmp	r3, #6
    a760:	4622      	mov	r2, r4
    a762:	bf28      	it	cs
    a764:	2306      	movcs	r3, #6
    a766:	9403      	str	r4, [sp, #12]
    a768:	4621      	mov	r1, r4
    a76a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    a76e:	4c76      	ldr	r4, [pc, #472]	; (a948 <_svfprintf_r+0x10b8>)
    a770:	9302      	str	r3, [sp, #8]
    a772:	9305      	str	r3, [sp, #20]
    a774:	920f      	str	r2, [sp, #60]	; 0x3c
    a776:	f7ff ba6c 	b.w	9c52 <_svfprintf_r+0x3c2>
    a77a:	2140      	movs	r1, #64	; 0x40
    a77c:	4658      	mov	r0, fp
    a77e:	f7fd fa97 	bl	7cb0 <_malloc_r>
    a782:	6020      	str	r0, [r4, #0]
    a784:	6120      	str	r0, [r4, #16]
    a786:	2800      	cmp	r0, #0
    a788:	f000 860f 	beq.w	b3aa <_svfprintf_r+0x1b1a>
    a78c:	2340      	movs	r3, #64	; 0x40
    a78e:	6163      	str	r3, [r4, #20]
    a790:	f7ff b89e 	b.w	98d0 <_svfprintf_r+0x40>
    a794:	2d10      	cmp	r5, #16
    a796:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a798:	f340 825d 	ble.w	ac56 <_svfprintf_r+0x13c6>
    a79c:	4651      	mov	r1, sl
    a79e:	2610      	movs	r6, #16
    a7a0:	ee1b aa10 	vmov	sl, s22
    a7a4:	e004      	b.n	a7b0 <_svfprintf_r+0xf20>
    a7a6:	3108      	adds	r1, #8
    a7a8:	3d10      	subs	r5, #16
    a7aa:	2d10      	cmp	r5, #16
    a7ac:	f340 8252 	ble.w	ac54 <_svfprintf_r+0x13c4>
    a7b0:	3301      	adds	r3, #1
    a7b2:	4866      	ldr	r0, [pc, #408]	; (a94c <_svfprintf_r+0x10bc>)
    a7b4:	3210      	adds	r2, #16
    a7b6:	2b07      	cmp	r3, #7
    a7b8:	e9c1 0600 	strd	r0, r6, [r1]
    a7bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a7c0:	ddf1      	ble.n	a7a6 <_svfprintf_r+0xf16>
    a7c2:	aa24      	add	r2, sp, #144	; 0x90
    a7c4:	4651      	mov	r1, sl
    a7c6:	4658      	mov	r0, fp
    a7c8:	f001 ff2e 	bl	c628 <__ssprint_r>
    a7cc:	2800      	cmp	r0, #0
    a7ce:	f47f acc4 	bne.w	a15a <_svfprintf_r+0x8ca>
    a7d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a7d6:	a927      	add	r1, sp, #156	; 0x9c
    a7d8:	e7e6      	b.n	a7a8 <_svfprintf_r+0xf18>
    a7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a7dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a7e0:	18e3      	adds	r3, r4, r3
    a7e2:	9303      	str	r3, [sp, #12]
    a7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    a7ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    a7ec:	9d05      	ldr	r5, [sp, #20]
    a7ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    a7f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    a7f6:	940b      	str	r4, [sp, #44]	; 0x2c
    a7f8:	ee1b 1a10 	vmov	r1, s22
    a7fc:	4650      	mov	r0, sl
    a7fe:	2b00      	cmp	r3, #0
    a800:	d034      	beq.n	a86c <_svfprintf_r+0xfdc>
    a802:	f1b8 0f00 	cmp.w	r8, #0
    a806:	d135      	bne.n	a874 <_svfprintf_r+0xfe4>
    a808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a80a:	3b01      	subs	r3, #1
    a80c:	3e01      	subs	r6, #1
    a80e:	930d      	str	r3, [sp, #52]	; 0x34
    a810:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a812:	e9c0 3900 	strd	r3, r9, [r0]
    a816:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a818:	3301      	adds	r3, #1
    a81a:	444a      	add	r2, r9
    a81c:	2b07      	cmp	r3, #7
    a81e:	9226      	str	r2, [sp, #152]	; 0x98
    a820:	9325      	str	r3, [sp, #148]	; 0x94
    a822:	dc6c      	bgt.n	a8fe <_svfprintf_r+0x106e>
    a824:	3008      	adds	r0, #8
    a826:	9b03      	ldr	r3, [sp, #12]
    a828:	f896 c000 	ldrb.w	ip, [r6]
    a82c:	1b5b      	subs	r3, r3, r5
    a82e:	4563      	cmp	r3, ip
    a830:	bfa8      	it	ge
    a832:	4663      	movge	r3, ip
    a834:	2b00      	cmp	r3, #0
    a836:	469a      	mov	sl, r3
    a838:	dd0c      	ble.n	a854 <_svfprintf_r+0xfc4>
    a83a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    a83c:	3401      	adds	r4, #1
    a83e:	441a      	add	r2, r3
    a840:	2c07      	cmp	r4, #7
    a842:	e9c0 5300 	strd	r5, r3, [r0]
    a846:	9226      	str	r2, [sp, #152]	; 0x98
    a848:	9425      	str	r4, [sp, #148]	; 0x94
    a84a:	f300 8177 	bgt.w	ab3c <_svfprintf_r+0x12ac>
    a84e:	f896 c000 	ldrb.w	ip, [r6]
    a852:	3008      	adds	r0, #8
    a854:	f1ba 0f00 	cmp.w	sl, #0
    a858:	bfac      	ite	ge
    a85a:	ebac 040a 	subge.w	r4, ip, sl
    a85e:	4664      	movlt	r4, ip
    a860:	2c00      	cmp	r4, #0
    a862:	dc0a      	bgt.n	a87a <_svfprintf_r+0xfea>
    a864:	4465      	add	r5, ip
    a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a868:	2b00      	cmp	r3, #0
    a86a:	d1ca      	bne.n	a802 <_svfprintf_r+0xf72>
    a86c:	f1b8 0f00 	cmp.w	r8, #0
    a870:	f000 83ac 	beq.w	afcc <_svfprintf_r+0x173c>
    a874:	f108 38ff 	add.w	r8, r8, #4294967295
    a878:	e7ca      	b.n	a810 <_svfprintf_r+0xf80>
    a87a:	2c10      	cmp	r4, #16
    a87c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    a880:	dd24      	ble.n	a8cc <_svfprintf_r+0x103c>
    a882:	9505      	str	r5, [sp, #20]
    a884:	f04f 0a10 	mov.w	sl, #16
    a888:	4663      	mov	r3, ip
    a88a:	460d      	mov	r5, r1
    a88c:	e004      	b.n	a898 <_svfprintf_r+0x1008>
    a88e:	3c10      	subs	r4, #16
    a890:	2c10      	cmp	r4, #16
    a892:	f100 0008 	add.w	r0, r0, #8
    a896:	dd16      	ble.n	a8c6 <_svfprintf_r+0x1036>
    a898:	3301      	adds	r3, #1
    a89a:	492c      	ldr	r1, [pc, #176]	; (a94c <_svfprintf_r+0x10bc>)
    a89c:	3210      	adds	r2, #16
    a89e:	2b07      	cmp	r3, #7
    a8a0:	e9c0 1a00 	strd	r1, sl, [r0]
    a8a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a8a8:	ddf1      	ble.n	a88e <_svfprintf_r+0xffe>
    a8aa:	aa24      	add	r2, sp, #144	; 0x90
    a8ac:	4629      	mov	r1, r5
    a8ae:	4658      	mov	r0, fp
    a8b0:	f001 feba 	bl	c628 <__ssprint_r>
    a8b4:	2800      	cmp	r0, #0
    a8b6:	f47f ac50 	bne.w	a15a <_svfprintf_r+0x8ca>
    a8ba:	3c10      	subs	r4, #16
    a8bc:	2c10      	cmp	r4, #16
    a8be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a8c2:	a827      	add	r0, sp, #156	; 0x9c
    a8c4:	dce8      	bgt.n	a898 <_svfprintf_r+0x1008>
    a8c6:	4629      	mov	r1, r5
    a8c8:	9d05      	ldr	r5, [sp, #20]
    a8ca:	469c      	mov	ip, r3
    a8cc:	f10c 0301 	add.w	r3, ip, #1
    a8d0:	4422      	add	r2, r4
    a8d2:	6044      	str	r4, [r0, #4]
    a8d4:	2b07      	cmp	r3, #7
    a8d6:	4c1d      	ldr	r4, [pc, #116]	; (a94c <_svfprintf_r+0x10bc>)
    a8d8:	6004      	str	r4, [r0, #0]
    a8da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a8de:	f300 83c6 	bgt.w	b06e <_svfprintf_r+0x17de>
    a8e2:	f896 c000 	ldrb.w	ip, [r6]
    a8e6:	3008      	adds	r0, #8
    a8e8:	4465      	add	r5, ip
    a8ea:	e7bc      	b.n	a866 <_svfprintf_r+0xfd6>
    a8ec:	f018 0310 	ands.w	r3, r8, #16
    a8f0:	f000 80c2 	beq.w	aa78 <_svfprintf_r+0x11e8>
    a8f4:	9b08      	ldr	r3, [sp, #32]
    a8f6:	f853 2b04 	ldr.w	r2, [r3], #4
    a8fa:	9308      	str	r3, [sp, #32]
    a8fc:	e6f9      	b.n	a6f2 <_svfprintf_r+0xe62>
    a8fe:	aa24      	add	r2, sp, #144	; 0x90
    a900:	4658      	mov	r0, fp
    a902:	9105      	str	r1, [sp, #20]
    a904:	f001 fe90 	bl	c628 <__ssprint_r>
    a908:	2800      	cmp	r0, #0
    a90a:	f47f ac26 	bne.w	a15a <_svfprintf_r+0x8ca>
    a90e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a910:	9905      	ldr	r1, [sp, #20]
    a912:	a827      	add	r0, sp, #156	; 0x9c
    a914:	e787      	b.n	a826 <_svfprintf_r+0xf96>
    a916:	9802      	ldr	r0, [sp, #8]
    a918:	f8cd a01c 	str.w	sl, [sp, #28]
    a91c:	ac50      	add	r4, sp, #320	; 0x140
    a91e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    a922:	2500      	movs	r5, #0
    a924:	ee0a ba10 	vmov	s20, fp
    a928:	4b09      	ldr	r3, [pc, #36]	; (a950 <_svfprintf_r+0x10c0>)
    a92a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    a92e:	f8cd 9014 	str.w	r9, [sp, #20]
    a932:	46a3      	mov	fp, r4
    a934:	f04f 0805 	mov.w	r8, #5
    a938:	46ac      	mov	ip, r5
    a93a:	4604      	mov	r4, r0
    a93c:	e010      	b.n	a960 <_svfprintf_r+0x10d0>
    a93e:	bf00      	nop
    a940:	2000139c 	.word	0x2000139c
    a944:	200013b0 	.word	0x200013b0
    a948:	200013c4 	.word	0x200013c4
    a94c:	20001c68 	.word	0x20001c68
    a950:	cccccccd 	.word	0xcccccccd
    a954:	2a0a      	cmp	r2, #10
    a956:	f171 0100 	sbcs.w	r1, r1, #0
    a95a:	d336      	bcc.n	a9ca <_svfprintf_r+0x113a>
    a95c:	464a      	mov	r2, r9
    a95e:	4631      	mov	r1, r6
    a960:	1850      	adds	r0, r2, r1
    a962:	f140 0000 	adc.w	r0, r0, #0
    a966:	fba3 5600 	umull	r5, r6, r3, r0
    a96a:	f026 0503 	bic.w	r5, r6, #3
    a96e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    a972:	1b40      	subs	r0, r0, r5
    a974:	1a15      	subs	r5, r2, r0
    a976:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    a97a:	f161 0e00 	sbc.w	lr, r1, #0
    a97e:	fb06 f605 	mul.w	r6, r6, r5
    a982:	fba5 9503 	umull	r9, r5, r5, r3
    a986:	fb03 660e 	mla	r6, r3, lr, r6
    a98a:	f009 0e01 	and.w	lr, r9, #1
    a98e:	442e      	add	r6, r5
    a990:	fbae 5e08 	umull	r5, lr, lr, r8
    a994:	182d      	adds	r5, r5, r0
    a996:	ea4f 0959 	mov.w	r9, r9, lsr #1
    a99a:	3530      	adds	r5, #48	; 0x30
    a99c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    a9a0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    a9a4:	f10c 0c01 	add.w	ip, ip, #1
    a9a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    a9ac:	0876      	lsrs	r6, r6, #1
    a9ae:	2c00      	cmp	r4, #0
    a9b0:	d0d0      	beq.n	a954 <_svfprintf_r+0x10c4>
    a9b2:	f89a 0000 	ldrb.w	r0, [sl]
    a9b6:	4584      	cmp	ip, r0
    a9b8:	d1cc      	bne.n	a954 <_svfprintf_r+0x10c4>
    a9ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    a9be:	d0c9      	beq.n	a954 <_svfprintf_r+0x10c4>
    a9c0:	2a0a      	cmp	r2, #10
    a9c2:	f171 0100 	sbcs.w	r1, r1, #0
    a9c6:	f080 818f 	bcs.w	ace8 <_svfprintf_r+0x1458>
    a9ca:	465c      	mov	r4, fp
    a9cc:	ab50      	add	r3, sp, #320	; 0x140
    a9ce:	1b1b      	subs	r3, r3, r4
    a9d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    a9d4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    a9d8:	ee1a ba10 	vmov	fp, s20
    a9dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    a9e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a9e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    a9e8:	9305      	str	r3, [sp, #20]
    a9ea:	f7ff bac2 	b.w	9f72 <_svfprintf_r+0x6e2>
    a9ee:	ee1b 1a10 	vmov	r1, s22
    a9f2:	aa24      	add	r2, sp, #144	; 0x90
    a9f4:	4658      	mov	r0, fp
    a9f6:	f001 fe17 	bl	c628 <__ssprint_r>
    a9fa:	2800      	cmp	r0, #0
    a9fc:	f47f abad 	bne.w	a15a <_svfprintf_r+0x8ca>
    aa00:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    aa04:	9a26      	ldr	r2, [sp, #152]	; 0x98
    aa06:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    aa0a:	f7ff b896 	b.w	9b3a <_svfprintf_r+0x2aa>
    aa0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    aa10:	48be      	ldr	r0, [pc, #760]	; (ad0c <_svfprintf_r+0x147c>)
    aa12:	f8ca 0000 	str.w	r0, [sl]
    aa16:	3301      	adds	r3, #1
    aa18:	3201      	adds	r2, #1
    aa1a:	2001      	movs	r0, #1
    aa1c:	2b07      	cmp	r3, #7
    aa1e:	9226      	str	r2, [sp, #152]	; 0x98
    aa20:	9325      	str	r3, [sp, #148]	; 0x94
    aa22:	f8ca 0004 	str.w	r0, [sl, #4]
    aa26:	f300 8177 	bgt.w	ad18 <_svfprintf_r+0x1488>
    aa2a:	f10a 0a08 	add.w	sl, sl, #8
    aa2e:	2900      	cmp	r1, #0
    aa30:	f040 80af 	bne.w	ab92 <_svfprintf_r+0x1302>
    aa34:	990e      	ldr	r1, [sp, #56]	; 0x38
    aa36:	f008 0301 	and.w	r3, r8, #1
    aa3a:	430b      	orrs	r3, r1
    aa3c:	f43f a8c0 	beq.w	9bc0 <_svfprintf_r+0x330>
    aa40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa42:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa44:	441a      	add	r2, r3
    aa46:	e9ca 1300 	strd	r1, r3, [sl]
    aa4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    aa4c:	9226      	str	r2, [sp, #152]	; 0x98
    aa4e:	3301      	adds	r3, #1
    aa50:	2b07      	cmp	r3, #7
    aa52:	9325      	str	r3, [sp, #148]	; 0x94
    aa54:	f300 8252 	bgt.w	aefc <_svfprintf_r+0x166c>
    aa58:	f10a 0a08 	add.w	sl, sl, #8
    aa5c:	990e      	ldr	r1, [sp, #56]	; 0x38
    aa5e:	f8ca 4000 	str.w	r4, [sl]
    aa62:	3301      	adds	r3, #1
    aa64:	440a      	add	r2, r1
    aa66:	2b07      	cmp	r3, #7
    aa68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    aa6c:	f8ca 1004 	str.w	r1, [sl, #4]
    aa70:	f77f a8a4 	ble.w	9bbc <_svfprintf_r+0x32c>
    aa74:	f7ff bbbd 	b.w	a1f2 <_svfprintf_r+0x962>
    aa78:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    aa7c:	f000 80dd 	beq.w	ac3a <_svfprintf_r+0x13aa>
    aa80:	9808      	ldr	r0, [sp, #32]
    aa82:	f850 2b04 	ldr.w	r2, [r0], #4
    aa86:	9008      	str	r0, [sp, #32]
    aa88:	4619      	mov	r1, r3
    aa8a:	b292      	uxth	r2, r2
    aa8c:	e631      	b.n	a6f2 <_svfprintf_r+0xe62>
    aa8e:	ee1b 1a10 	vmov	r1, s22
    aa92:	aa24      	add	r2, sp, #144	; 0x90
    aa94:	4658      	mov	r0, fp
    aa96:	f001 fdc7 	bl	c628 <__ssprint_r>
    aa9a:	2800      	cmp	r0, #0
    aa9c:	f47f ab5d 	bne.w	a15a <_svfprintf_r+0x8ca>
    aaa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    aaa2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    aaa6:	f7ff baa3 	b.w	9ff0 <_svfprintf_r+0x760>
    aaaa:	ae22      	add	r6, sp, #136	; 0x88
    aaac:	2208      	movs	r2, #8
    aaae:	2100      	movs	r1, #0
    aab0:	4630      	mov	r0, r6
    aab2:	941d      	str	r4, [sp, #116]	; 0x74
    aab4:	f7fd ffd2 	bl	8a5c <memset>
    aab8:	9b03      	ldr	r3, [sp, #12]
    aaba:	1c5a      	adds	r2, r3, #1
    aabc:	f000 80db 	beq.w	ac76 <_svfprintf_r+0x13e6>
    aac0:	2500      	movs	r5, #0
    aac2:	f8cd 9008 	str.w	r9, [sp, #8]
    aac6:	f8cd 801c 	str.w	r8, [sp, #28]
    aaca:	4699      	mov	r9, r3
    aacc:	46a8      	mov	r8, r5
    aace:	e00c      	b.n	aaea <_svfprintf_r+0x125a>
    aad0:	a937      	add	r1, sp, #220	; 0xdc
    aad2:	4658      	mov	r0, fp
    aad4:	f001 fd62 	bl	c59c <_wcrtomb_r>
    aad8:	1c43      	adds	r3, r0, #1
    aada:	4440      	add	r0, r8
    aadc:	f000 83c8 	beq.w	b270 <_svfprintf_r+0x19e0>
    aae0:	4548      	cmp	r0, r9
    aae2:	dc08      	bgt.n	aaf6 <_svfprintf_r+0x1266>
    aae4:	f000 8418 	beq.w	b318 <_svfprintf_r+0x1a88>
    aae8:	4680      	mov	r8, r0
    aaea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    aaec:	5952      	ldr	r2, [r2, r5]
    aaee:	4633      	mov	r3, r6
    aaf0:	3504      	adds	r5, #4
    aaf2:	2a00      	cmp	r2, #0
    aaf4:	d1ec      	bne.n	aad0 <_svfprintf_r+0x1240>
    aaf6:	f8cd 8014 	str.w	r8, [sp, #20]
    aafa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    aafe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ab02:	e0c5      	b.n	ac90 <_svfprintf_r+0x1400>
    ab04:	3301      	adds	r3, #1
    ab06:	4982      	ldr	r1, [pc, #520]	; (ad10 <_svfprintf_r+0x1480>)
    ab08:	f8ca 4004 	str.w	r4, [sl, #4]
    ab0c:	4422      	add	r2, r4
    ab0e:	2b07      	cmp	r3, #7
    ab10:	f8ca 1000 	str.w	r1, [sl]
    ab14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ab18:	f77f a850 	ble.w	9bbc <_svfprintf_r+0x32c>
    ab1c:	f7ff bb69 	b.w	a1f2 <_svfprintf_r+0x962>
    ab20:	ee1b 1a10 	vmov	r1, s22
    ab24:	aa24      	add	r2, sp, #144	; 0x90
    ab26:	4658      	mov	r0, fp
    ab28:	f001 fd7e 	bl	c628 <__ssprint_r>
    ab2c:	2800      	cmp	r0, #0
    ab2e:	f47f ab14 	bne.w	a15a <_svfprintf_r+0x8ca>
    ab32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ab34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ab38:	f7ff b829 	b.w	9b8e <_svfprintf_r+0x2fe>
    ab3c:	aa24      	add	r2, sp, #144	; 0x90
    ab3e:	4658      	mov	r0, fp
    ab40:	9105      	str	r1, [sp, #20]
    ab42:	f001 fd71 	bl	c628 <__ssprint_r>
    ab46:	2800      	cmp	r0, #0
    ab48:	f47f ab07 	bne.w	a15a <_svfprintf_r+0x8ca>
    ab4c:	f896 c000 	ldrb.w	ip, [r6]
    ab50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ab52:	9905      	ldr	r1, [sp, #20]
    ab54:	a827      	add	r0, sp, #156	; 0x9c
    ab56:	e67d      	b.n	a854 <_svfprintf_r+0xfc4>
    ab58:	2b01      	cmp	r3, #1
    ab5a:	f8cd 8008 	str.w	r8, [sp, #8]
    ab5e:	f47f a9f3 	bne.w	9f48 <_svfprintf_r+0x6b8>
    ab62:	f7ff bb93 	b.w	a28c <_svfprintf_r+0x9fc>
    ab66:	9b08      	ldr	r3, [sp, #32]
    ab68:	9904      	ldr	r1, [sp, #16]
    ab6a:	f853 2b04 	ldr.w	r2, [r3], #4
    ab6e:	464c      	mov	r4, r9
    ab70:	6011      	str	r1, [r2, #0]
    ab72:	9308      	str	r3, [sp, #32]
    ab74:	f7fe bebe 	b.w	98f4 <_svfprintf_r+0x64>
    ab78:	3301      	adds	r3, #1
    ab7a:	4965      	ldr	r1, [pc, #404]	; (ad10 <_svfprintf_r+0x1480>)
    ab7c:	f8ca 4004 	str.w	r4, [sl, #4]
    ab80:	4422      	add	r2, r4
    ab82:	2b07      	cmp	r3, #7
    ab84:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ab88:	f8ca 1000 	str.w	r1, [sl]
    ab8c:	f77f ab22 	ble.w	a1d4 <_svfprintf_r+0x944>
    ab90:	e47b      	b.n	a48a <_svfprintf_r+0xbfa>
    ab92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ab94:	9812      	ldr	r0, [sp, #72]	; 0x48
    ab96:	441a      	add	r2, r3
    ab98:	e9ca 0300 	strd	r0, r3, [sl]
    ab9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ab9e:	9226      	str	r2, [sp, #152]	; 0x98
    aba0:	3301      	adds	r3, #1
    aba2:	2b07      	cmp	r3, #7
    aba4:	9325      	str	r3, [sp, #148]	; 0x94
    aba6:	f300 81a9 	bgt.w	aefc <_svfprintf_r+0x166c>
    abaa:	f10a 0a08 	add.w	sl, sl, #8
    abae:	2900      	cmp	r1, #0
    abb0:	f6bf af54 	bge.w	aa5c <_svfprintf_r+0x11cc>
    abb4:	424d      	negs	r5, r1
    abb6:	3110      	adds	r1, #16
    abb8:	f280 830f 	bge.w	b1da <_svfprintf_r+0x194a>
    abbc:	ee1b 1a10 	vmov	r1, s22
    abc0:	2610      	movs	r6, #16
    abc2:	e005      	b.n	abd0 <_svfprintf_r+0x1340>
    abc4:	f10a 0a08 	add.w	sl, sl, #8
    abc8:	3d10      	subs	r5, #16
    abca:	2d10      	cmp	r5, #16
    abcc:	f340 8305 	ble.w	b1da <_svfprintf_r+0x194a>
    abd0:	3301      	adds	r3, #1
    abd2:	484f      	ldr	r0, [pc, #316]	; (ad10 <_svfprintf_r+0x1480>)
    abd4:	3210      	adds	r2, #16
    abd6:	2b07      	cmp	r3, #7
    abd8:	e9ca 0600 	strd	r0, r6, [sl]
    abdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    abe0:	ddf0      	ble.n	abc4 <_svfprintf_r+0x1334>
    abe2:	aa24      	add	r2, sp, #144	; 0x90
    abe4:	4658      	mov	r0, fp
    abe6:	9103      	str	r1, [sp, #12]
    abe8:	f001 fd1e 	bl	c628 <__ssprint_r>
    abec:	2800      	cmp	r0, #0
    abee:	f47f aab4 	bne.w	a15a <_svfprintf_r+0x8ca>
    abf2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    abf6:	9903      	ldr	r1, [sp, #12]
    abf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    abfc:	e7e4      	b.n	abc8 <_svfprintf_r+0x1338>
    abfe:	9b08      	ldr	r3, [sp, #32]
    ac00:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ac04:	bf1a      	itte	ne
    ac06:	4611      	movne	r1, r2
    ac08:	f853 2b04 	ldrne.w	r2, [r3], #4
    ac0c:	f853 2b04 	ldreq.w	r2, [r3], #4
    ac10:	9308      	str	r3, [sp, #32]
    ac12:	bf18      	it	ne
    ac14:	b2d2      	uxtbne	r2, r2
    ac16:	f7ff b945 	b.w	9ea4 <_svfprintf_r+0x614>
    ac1a:	9b02      	ldr	r3, [sp, #8]
    ac1c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    ac20:	9b08      	ldr	r3, [sp, #32]
    ac22:	bf1a      	itte	ne
    ac24:	4611      	movne	r1, r2
    ac26:	f853 2b04 	ldrne.w	r2, [r3], #4
    ac2a:	f853 2b04 	ldreq.w	r2, [r3], #4
    ac2e:	9308      	str	r3, [sp, #32]
    ac30:	bf18      	it	ne
    ac32:	b2d2      	uxtbne	r2, r2
    ac34:	2301      	movs	r3, #1
    ac36:	f7ff b8d0 	b.w	9dda <_svfprintf_r+0x54a>
    ac3a:	9b08      	ldr	r3, [sp, #32]
    ac3c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ac40:	bf1a      	itte	ne
    ac42:	4611      	movne	r1, r2
    ac44:	f853 2b04 	ldrne.w	r2, [r3], #4
    ac48:	f853 2b04 	ldreq.w	r2, [r3], #4
    ac4c:	9308      	str	r3, [sp, #32]
    ac4e:	bf18      	it	ne
    ac50:	b2d2      	uxtbne	r2, r2
    ac52:	e54e      	b.n	a6f2 <_svfprintf_r+0xe62>
    ac54:	468a      	mov	sl, r1
    ac56:	3301      	adds	r3, #1
    ac58:	492d      	ldr	r1, [pc, #180]	; (ad10 <_svfprintf_r+0x1480>)
    ac5a:	f8ca 5004 	str.w	r5, [sl, #4]
    ac5e:	442a      	add	r2, r5
    ac60:	2b07      	cmp	r3, #7
    ac62:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ac66:	f8ca 1000 	str.w	r1, [sl]
    ac6a:	f300 8139 	bgt.w	aee0 <_svfprintf_r+0x1650>
    ac6e:	f10a 0a08 	add.w	sl, sl, #8
    ac72:	f7ff bb8c 	b.w	a38e <_svfprintf_r+0xafe>
    ac76:	2300      	movs	r3, #0
    ac78:	4619      	mov	r1, r3
    ac7a:	9600      	str	r6, [sp, #0]
    ac7c:	aa1d      	add	r2, sp, #116	; 0x74
    ac7e:	4658      	mov	r0, fp
    ac80:	f001 fcb2 	bl	c5e8 <_wcsrtombs_r>
    ac84:	4603      	mov	r3, r0
    ac86:	3301      	adds	r3, #1
    ac88:	9005      	str	r0, [sp, #20]
    ac8a:	f000 82f1 	beq.w	b270 <_svfprintf_r+0x19e0>
    ac8e:	941d      	str	r4, [sp, #116]	; 0x74
    ac90:	9b05      	ldr	r3, [sp, #20]
    ac92:	2b00      	cmp	r3, #0
    ac94:	d04e      	beq.n	ad34 <_svfprintf_r+0x14a4>
    ac96:	2b63      	cmp	r3, #99	; 0x63
    ac98:	f300 8118 	bgt.w	aecc <_svfprintf_r+0x163c>
    ac9c:	2300      	movs	r3, #0
    ac9e:	9307      	str	r3, [sp, #28]
    aca0:	ac37      	add	r4, sp, #220	; 0xdc
    aca2:	2208      	movs	r2, #8
    aca4:	2100      	movs	r1, #0
    aca6:	4630      	mov	r0, r6
    aca8:	f7fd fed8 	bl	8a5c <memset>
    acac:	9d05      	ldr	r5, [sp, #20]
    acae:	9600      	str	r6, [sp, #0]
    acb0:	462b      	mov	r3, r5
    acb2:	aa1d      	add	r2, sp, #116	; 0x74
    acb4:	4621      	mov	r1, r4
    acb6:	4658      	mov	r0, fp
    acb8:	f001 fc96 	bl	c5e8 <_wcsrtombs_r>
    acbc:	4285      	cmp	r5, r0
    acbe:	f040 837c 	bne.w	b3ba <_svfprintf_r+0x1b2a>
    acc2:	9a05      	ldr	r2, [sp, #20]
    acc4:	2300      	movs	r3, #0
    acc6:	54a3      	strb	r3, [r4, r2]
    acc8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    accc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    acd0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    acd4:	9303      	str	r3, [sp, #12]
    acd6:	9202      	str	r2, [sp, #8]
    acd8:	930f      	str	r3, [sp, #60]	; 0x3c
    acda:	f7fe bfba 	b.w	9c52 <_svfprintf_r+0x3c2>
    acde:	212d      	movs	r1, #45	; 0x2d
    ace0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ace4:	f7fe bfa4 	b.w	9c30 <_svfprintf_r+0x3a0>
    ace8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    acea:	9915      	ldr	r1, [sp, #84]	; 0x54
    acec:	ebab 0b03 	sub.w	fp, fp, r3
    acf0:	461a      	mov	r2, r3
    acf2:	4658      	mov	r0, fp
    acf4:	f7fd ff04 	bl	8b00 <strncpy>
    acf8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    acfc:	4b05      	ldr	r3, [pc, #20]	; (ad14 <_svfprintf_r+0x1484>)
    acfe:	b10a      	cbz	r2, ad04 <_svfprintf_r+0x1474>
    ad00:	f10a 0a01 	add.w	sl, sl, #1
    ad04:	f04f 0c00 	mov.w	ip, #0
    ad08:	e628      	b.n	a95c <_svfprintf_r+0x10cc>
    ad0a:	bf00      	nop
    ad0c:	200013cc 	.word	0x200013cc
    ad10:	20001c68 	.word	0x20001c68
    ad14:	cccccccd 	.word	0xcccccccd
    ad18:	ee1b 1a10 	vmov	r1, s22
    ad1c:	aa24      	add	r2, sp, #144	; 0x90
    ad1e:	4658      	mov	r0, fp
    ad20:	f001 fc82 	bl	c628 <__ssprint_r>
    ad24:	2800      	cmp	r0, #0
    ad26:	f47f aa18 	bne.w	a15a <_svfprintf_r+0x8ca>
    ad2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ad2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ad2e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ad32:	e67c      	b.n	aa2e <_svfprintf_r+0x119e>
    ad34:	9b05      	ldr	r3, [sp, #20]
    ad36:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ad3a:	930f      	str	r3, [sp, #60]	; 0x3c
    ad3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ad40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ad44:	9307      	str	r3, [sp, #28]
    ad46:	f7fe bf84 	b.w	9c52 <_svfprintf_r+0x3c2>
    ad4a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ad4c:	9805      	ldr	r0, [sp, #20]
    ad4e:	1865      	adds	r5, r4, r1
    ad50:	1a2d      	subs	r5, r5, r0
    ad52:	1acc      	subs	r4, r1, r3
    ad54:	42a5      	cmp	r5, r4
    ad56:	bfa8      	it	ge
    ad58:	4625      	movge	r5, r4
    ad5a:	f7ff bb4d 	b.w	a3f8 <_svfprintf_r+0xb68>
    ad5e:	9b08      	ldr	r3, [sp, #32]
    ad60:	9904      	ldr	r1, [sp, #16]
    ad62:	f853 2b04 	ldr.w	r2, [r3], #4
    ad66:	9308      	str	r3, [sp, #32]
    ad68:	8011      	strh	r1, [r2, #0]
    ad6a:	464c      	mov	r4, r9
    ad6c:	f7fe bdc2 	b.w	98f4 <_svfprintf_r+0x64>
    ad70:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ad74:	9308      	str	r3, [sp, #32]
    ad76:	17d1      	asrs	r1, r2, #31
    ad78:	460b      	mov	r3, r1
    ad7a:	f7fe bfdb 	b.w	9d34 <_svfprintf_r+0x4a4>
    ad7e:	9a03      	ldr	r2, [sp, #12]
    ad80:	2102      	movs	r1, #2
    ad82:	ab22      	add	r3, sp, #136	; 0x88
    ad84:	9301      	str	r3, [sp, #4]
    ad86:	ab1d      	add	r3, sp, #116	; 0x74
    ad88:	9300      	str	r3, [sp, #0]
    ad8a:	4658      	mov	r0, fp
    ad8c:	ab1b      	add	r3, sp, #108	; 0x6c
    ad8e:	eeb0 0b4a 	vmov.f64	d0, d10
    ad92:	9202      	str	r2, [sp, #8]
    ad94:	f000 fd8c 	bl	b8b0 <_dtoa_r>
    ad98:	2d47      	cmp	r5, #71	; 0x47
    ad9a:	9a02      	ldr	r2, [sp, #8]
    ad9c:	4604      	mov	r4, r0
    ad9e:	f000 8161 	beq.w	b064 <_svfprintf_r+0x17d4>
    ada2:	2d46      	cmp	r5, #70	; 0x46
    ada4:	4410      	add	r0, r2
    ada6:	d105      	bne.n	adb4 <_svfprintf_r+0x1524>
    ada8:	7823      	ldrb	r3, [r4, #0]
    adaa:	2b30      	cmp	r3, #48	; 0x30
    adac:	f000 826f 	beq.w	b28e <_svfprintf_r+0x19fe>
    adb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    adb2:	4410      	add	r0, r2
    adb4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adbc:	f040 8146 	bne.w	b04c <_svfprintf_r+0x17bc>
    adc0:	4603      	mov	r3, r0
    adc2:	1b1b      	subs	r3, r3, r4
    adc4:	930e      	str	r3, [sp, #56]	; 0x38
    adc6:	2d47      	cmp	r5, #71	; 0x47
    adc8:	f000 8110 	beq.w	afec <_svfprintf_r+0x175c>
    adcc:	2d46      	cmp	r5, #70	; 0x46
    adce:	f000 81b5 	beq.w	b13c <_svfprintf_r+0x18ac>
    add2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    add4:	930c      	str	r3, [sp, #48]	; 0x30
    add6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    add8:	2d41      	cmp	r5, #65	; 0x41
    adda:	f103 33ff 	add.w	r3, r3, #4294967295
    adde:	931b      	str	r3, [sp, #108]	; 0x6c
    ade0:	f000 81e5 	beq.w	b1ae <_svfprintf_r+0x191e>
    ade4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ade8:	2100      	movs	r1, #0
    adea:	2b00      	cmp	r3, #0
    adec:	bfb8      	it	lt
    adee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    adf0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    adf4:	bfba      	itte	lt
    adf6:	f1c3 0301 	rsblt	r3, r3, #1
    adfa:	222d      	movlt	r2, #45	; 0x2d
    adfc:	222b      	movge	r2, #43	; 0x2b
    adfe:	2b09      	cmp	r3, #9
    ae00:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    ae04:	f340 81da 	ble.w	b1bc <_svfprintf_r+0x192c>
    ae08:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    ae0c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; b22c <_svfprintf_r+0x199c>
    ae10:	462a      	mov	r2, r5
    ae12:	4610      	mov	r0, r2
    ae14:	fb8c 2103 	smull	r2, r1, ip, r3
    ae18:	17da      	asrs	r2, r3, #31
    ae1a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ae1e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ae22:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    ae26:	3130      	adds	r1, #48	; 0x30
    ae28:	f800 1c01 	strb.w	r1, [r0, #-1]
    ae2c:	4619      	mov	r1, r3
    ae2e:	2963      	cmp	r1, #99	; 0x63
    ae30:	4613      	mov	r3, r2
    ae32:	f100 32ff 	add.w	r2, r0, #4294967295
    ae36:	dcec      	bgt.n	ae12 <_svfprintf_r+0x1582>
    ae38:	3330      	adds	r3, #48	; 0x30
    ae3a:	b2d9      	uxtb	r1, r3
    ae3c:	1e83      	subs	r3, r0, #2
    ae3e:	429d      	cmp	r5, r3
    ae40:	f802 1c01 	strb.w	r1, [r2, #-1]
    ae44:	f240 828b 	bls.w	b35e <_svfprintf_r+0x1ace>
    ae48:	4613      	mov	r3, r2
    ae4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ae4e:	e001      	b.n	ae54 <_svfprintf_r+0x15c4>
    ae50:	f813 1b01 	ldrb.w	r1, [r3], #1
    ae54:	f802 1b01 	strb.w	r1, [r2], #1
    ae58:	429d      	cmp	r5, r3
    ae5a:	d1f9      	bne.n	ae50 <_svfprintf_r+0x15c0>
    ae5c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ae60:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ae64:	1a1b      	subs	r3, r3, r0
    ae66:	4413      	add	r3, r2
    ae68:	aa1e      	add	r2, sp, #120	; 0x78
    ae6a:	1a9b      	subs	r3, r3, r2
    ae6c:	9314      	str	r3, [sp, #80]	; 0x50
    ae6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ae72:	2b01      	cmp	r3, #1
    ae74:	441a      	add	r2, r3
    ae76:	9205      	str	r2, [sp, #20]
    ae78:	f340 8203 	ble.w	b282 <_svfprintf_r+0x19f2>
    ae7c:	9b05      	ldr	r3, [sp, #20]
    ae7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ae80:	4413      	add	r3, r2
    ae82:	9305      	str	r3, [sp, #20]
    ae84:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ae88:	9a05      	ldr	r2, [sp, #20]
    ae8a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ae8e:	2300      	movs	r3, #0
    ae90:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ae94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ae98:	930f      	str	r3, [sp, #60]	; 0x3c
    ae9a:	9202      	str	r2, [sp, #8]
    ae9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae9e:	2b00      	cmp	r3, #0
    aea0:	f040 80b1 	bne.w	b006 <_svfprintf_r+0x1776>
    aea4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    aea8:	9303      	str	r3, [sp, #12]
    aeaa:	f7fe bed2 	b.w	9c52 <_svfprintf_r+0x3c2>
    aeae:	4620      	mov	r0, r4
    aeb0:	f7fd ff06 	bl	8cc0 <strlen>
    aeb4:	4602      	mov	r2, r0
    aeb6:	9005      	str	r0, [sp, #20]
    aeb8:	f7fe bf20 	b.w	9cfc <_svfprintf_r+0x46c>
    aebc:	ee1b 1a10 	vmov	r1, s22
    aec0:	aa24      	add	r2, sp, #144	; 0x90
    aec2:	4658      	mov	r0, fp
    aec4:	f001 fbb0 	bl	c628 <__ssprint_r>
    aec8:	f7fe bded 	b.w	9aa6 <_svfprintf_r+0x216>
    aecc:	1c59      	adds	r1, r3, #1
    aece:	4658      	mov	r0, fp
    aed0:	f7fc feee 	bl	7cb0 <_malloc_r>
    aed4:	4604      	mov	r4, r0
    aed6:	2800      	cmp	r0, #0
    aed8:	f000 81ca 	beq.w	b270 <_svfprintf_r+0x19e0>
    aedc:	9007      	str	r0, [sp, #28]
    aede:	e6e0      	b.n	aca2 <_svfprintf_r+0x1412>
    aee0:	ee1b 1a10 	vmov	r1, s22
    aee4:	aa24      	add	r2, sp, #144	; 0x90
    aee6:	4658      	mov	r0, fp
    aee8:	f001 fb9e 	bl	c628 <__ssprint_r>
    aeec:	2800      	cmp	r0, #0
    aeee:	f47f a934 	bne.w	a15a <_svfprintf_r+0x8ca>
    aef2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    aef4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    aef8:	f7ff ba49 	b.w	a38e <_svfprintf_r+0xafe>
    aefc:	ee1b 1a10 	vmov	r1, s22
    af00:	aa24      	add	r2, sp, #144	; 0x90
    af02:	4658      	mov	r0, fp
    af04:	f001 fb90 	bl	c628 <__ssprint_r>
    af08:	2800      	cmp	r0, #0
    af0a:	f47f a926 	bne.w	a15a <_svfprintf_r+0x8ca>
    af0e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    af12:	991b      	ldr	r1, [sp, #108]	; 0x6c
    af14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    af18:	e649      	b.n	abae <_svfprintf_r+0x131e>
    af1a:	2306      	movs	r3, #6
    af1c:	9303      	str	r3, [sp, #12]
    af1e:	f7ff bb83 	b.w	a628 <_svfprintf_r+0xd98>
    af22:	9b03      	ldr	r3, [sp, #12]
    af24:	2102      	movs	r1, #2
    af26:	1c5a      	adds	r2, r3, #1
    af28:	e72b      	b.n	ad82 <_svfprintf_r+0x14f2>
    af2a:	9a03      	ldr	r2, [sp, #12]
    af2c:	2103      	movs	r1, #3
    af2e:	e728      	b.n	ad82 <_svfprintf_r+0x14f2>
    af30:	a81b      	add	r0, sp, #108	; 0x6c
    af32:	eeb0 0b4a 	vmov.f64	d0, d10
    af36:	f000 fbcb 	bl	b6d0 <frexp>
    af3a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    af3e:	ee20 0b07 	vmul.f64	d0, d0, d7
    af42:	eeb5 0b40 	vcmp.f64	d0, #0.0
    af46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af4a:	d101      	bne.n	af50 <_svfprintf_r+0x16c0>
    af4c:	2301      	movs	r3, #1
    af4e:	931b      	str	r3, [sp, #108]	; 0x6c
    af50:	48b3      	ldr	r0, [pc, #716]	; (b220 <_svfprintf_r+0x1990>)
    af52:	9b03      	ldr	r3, [sp, #12]
    af54:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    af58:	3b01      	subs	r3, #1
    af5a:	4622      	mov	r2, r4
    af5c:	e004      	b.n	af68 <_svfprintf_r+0x16d8>
    af5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af66:	d013      	beq.n	af90 <_svfprintf_r+0x1700>
    af68:	ee20 0b05 	vmul.f64	d0, d0, d5
    af6c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    af70:	f1b3 3fff 	cmp.w	r3, #4294967295
    af74:	ee17 1a90 	vmov	r1, s15
    af78:	5c41      	ldrb	r1, [r0, r1]
    af7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    af7e:	4694      	mov	ip, r2
    af80:	ee30 0b46 	vsub.f64	d0, d0, d6
    af84:	f802 1b01 	strb.w	r1, [r2], #1
    af88:	4619      	mov	r1, r3
    af8a:	f103 33ff 	add.w	r3, r3, #4294967295
    af8e:	d1e6      	bne.n	af5e <_svfprintf_r+0x16ce>
    af90:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    af94:	eeb4 0bc6 	vcmpe.f64	d0, d6
    af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af9c:	f300 8148 	bgt.w	b230 <_svfprintf_r+0x19a0>
    afa0:	eeb4 0b46 	vcmp.f64	d0, d6
    afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    afa8:	d104      	bne.n	afb4 <_svfprintf_r+0x1724>
    afaa:	ee17 3a90 	vmov	r3, s15
    afae:	07db      	lsls	r3, r3, #31
    afb0:	f100 813e 	bmi.w	b230 <_svfprintf_r+0x19a0>
    afb4:	2900      	cmp	r1, #0
    afb6:	db06      	blt.n	afc6 <_svfprintf_r+0x1736>
    afb8:	1c4b      	adds	r3, r1, #1
    afba:	4413      	add	r3, r2
    afbc:	2130      	movs	r1, #48	; 0x30
    afbe:	f802 1b01 	strb.w	r1, [r2], #1
    afc2:	4293      	cmp	r3, r2
    afc4:	d1fb      	bne.n	afbe <_svfprintf_r+0x172e>
    afc6:	1b13      	subs	r3, r2, r4
    afc8:	930e      	str	r3, [sp, #56]	; 0x38
    afca:	e6fc      	b.n	adc6 <_svfprintf_r+0x1536>
    afcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    afce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    afd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    afd8:	9613      	str	r6, [sp, #76]	; 0x4c
    afda:	18e3      	adds	r3, r4, r3
    afdc:	429d      	cmp	r5, r3
    afde:	4629      	mov	r1, r5
    afe0:	bf28      	it	cs
    afe2:	4619      	movcs	r1, r3
    afe4:	4682      	mov	sl, r0
    afe6:	9105      	str	r1, [sp, #20]
    afe8:	f7ff b9d8 	b.w	a39c <_svfprintf_r+0xb0c>
    afec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    afee:	930c      	str	r3, [sp, #48]	; 0x30
    aff0:	1cda      	adds	r2, r3, #3
    aff2:	db02      	blt.n	affa <_svfprintf_r+0x176a>
    aff4:	9a03      	ldr	r2, [sp, #12]
    aff6:	4293      	cmp	r3, r2
    aff8:	dd0c      	ble.n	b014 <_svfprintf_r+0x1784>
    affa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    affc:	3b02      	subs	r3, #2
    affe:	930b      	str	r3, [sp, #44]	; 0x2c
    b000:	f023 0520 	bic.w	r5, r3, #32
    b004:	e6e7      	b.n	add6 <_svfprintf_r+0x1546>
    b006:	212d      	movs	r1, #45	; 0x2d
    b008:	2300      	movs	r3, #0
    b00a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    b00e:	9303      	str	r3, [sp, #12]
    b010:	f7fe be22 	b.w	9c58 <_svfprintf_r+0x3c8>
    b014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b018:	4293      	cmp	r3, r2
    b01a:	f2c0 80bd 	blt.w	b198 <_svfprintf_r+0x1908>
    b01e:	07f0      	lsls	r0, r6, #31
    b020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b022:	f140 8132 	bpl.w	b28a <_svfprintf_r+0x19fa>
    b026:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b028:	4413      	add	r3, r2
    b02a:	9305      	str	r3, [sp, #20]
    b02c:	0571      	lsls	r1, r6, #21
    b02e:	d503      	bpl.n	b038 <_svfprintf_r+0x17a8>
    b030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b032:	2b00      	cmp	r3, #0
    b034:	f300 8135 	bgt.w	b2a2 <_svfprintf_r+0x1a12>
    b038:	9b05      	ldr	r3, [sp, #20]
    b03a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b03e:	9302      	str	r3, [sp, #8]
    b040:	2367      	movs	r3, #103	; 0x67
    b042:	930b      	str	r3, [sp, #44]	; 0x2c
    b044:	2300      	movs	r3, #0
    b046:	930f      	str	r3, [sp, #60]	; 0x3c
    b048:	930d      	str	r3, [sp, #52]	; 0x34
    b04a:	e727      	b.n	ae9c <_svfprintf_r+0x160c>
    b04c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b04e:	4283      	cmp	r3, r0
    b050:	f4bf aeb7 	bcs.w	adc2 <_svfprintf_r+0x1532>
    b054:	2130      	movs	r1, #48	; 0x30
    b056:	1c5a      	adds	r2, r3, #1
    b058:	9222      	str	r2, [sp, #136]	; 0x88
    b05a:	7019      	strb	r1, [r3, #0]
    b05c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b05e:	4298      	cmp	r0, r3
    b060:	d8f9      	bhi.n	b056 <_svfprintf_r+0x17c6>
    b062:	e6ae      	b.n	adc2 <_svfprintf_r+0x1532>
    b064:	07f3      	lsls	r3, r6, #31
    b066:	f100 80a7 	bmi.w	b1b8 <_svfprintf_r+0x1928>
    b06a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b06c:	e6a9      	b.n	adc2 <_svfprintf_r+0x1532>
    b06e:	aa24      	add	r2, sp, #144	; 0x90
    b070:	4658      	mov	r0, fp
    b072:	9105      	str	r1, [sp, #20]
    b074:	f001 fad8 	bl	c628 <__ssprint_r>
    b078:	2800      	cmp	r0, #0
    b07a:	f47f a86e 	bne.w	a15a <_svfprintf_r+0x8ca>
    b07e:	f896 c000 	ldrb.w	ip, [r6]
    b082:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b084:	9905      	ldr	r1, [sp, #20]
    b086:	a827      	add	r0, sp, #156	; 0x9c
    b088:	4465      	add	r5, ip
    b08a:	f7ff bbec 	b.w	a866 <_svfprintf_r+0xfd6>
    b08e:	ee1b 1a10 	vmov	r1, s22
    b092:	aa24      	add	r2, sp, #144	; 0x90
    b094:	4658      	mov	r0, fp
    b096:	f001 fac7 	bl	c628 <__ssprint_r>
    b09a:	2800      	cmp	r0, #0
    b09c:	f47f a85d 	bne.w	a15a <_svfprintf_r+0x8ca>
    b0a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b0a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b0a6:	f7ff b96b 	b.w	a380 <_svfprintf_r+0xaf0>
    b0aa:	2378      	movs	r3, #120	; 0x78
    b0ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    b0b0:	2330      	movs	r3, #48	; 0x30
    b0b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    b0b6:	9b03      	ldr	r3, [sp, #12]
    b0b8:	2b63      	cmp	r3, #99	; 0x63
    b0ba:	f048 0602 	orr.w	r6, r8, #2
    b0be:	f300 80a6 	bgt.w	b20e <_svfprintf_r+0x197e>
    b0c2:	2300      	movs	r3, #0
    b0c4:	9307      	str	r3, [sp, #28]
    b0c6:	ac37      	add	r4, sp, #220	; 0xdc
    b0c8:	ee18 3a90 	vmov	r3, s17
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    b0d2:	db2b      	blt.n	b12c <_svfprintf_r+0x189c>
    b0d4:	eeb0 ab48 	vmov.f64	d10, d8
    b0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b0da:	f023 0520 	bic.w	r5, r3, #32
    b0de:	2300      	movs	r3, #0
    b0e0:	9309      	str	r3, [sp, #36]	; 0x24
    b0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b0e4:	2b61      	cmp	r3, #97	; 0x61
    b0e6:	f47f aaad 	bne.w	a644 <_svfprintf_r+0xdb4>
    b0ea:	eeb0 0b4a 	vmov.f64	d0, d10
    b0ee:	a81b      	add	r0, sp, #108	; 0x6c
    b0f0:	f000 faee 	bl	b6d0 <frexp>
    b0f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    b0f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    b0fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b104:	d101      	bne.n	b10a <_svfprintf_r+0x187a>
    b106:	2301      	movs	r3, #1
    b108:	931b      	str	r3, [sp, #108]	; 0x6c
    b10a:	4846      	ldr	r0, [pc, #280]	; (b224 <_svfprintf_r+0x1994>)
    b10c:	e721      	b.n	af52 <_svfprintf_r+0x16c2>
    b10e:	ee1b 1a10 	vmov	r1, s22
    b112:	aa24      	add	r2, sp, #144	; 0x90
    b114:	4658      	mov	r0, fp
    b116:	f001 fa87 	bl	c628 <__ssprint_r>
    b11a:	2800      	cmp	r0, #0
    b11c:	f47f a81d 	bne.w	a15a <_svfprintf_r+0x8ca>
    b120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b122:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b124:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b128:	f7ff b94e 	b.w	a3c8 <_svfprintf_r+0xb38>
    b12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b12e:	f023 0520 	bic.w	r5, r3, #32
    b132:	232d      	movs	r3, #45	; 0x2d
    b134:	9309      	str	r3, [sp, #36]	; 0x24
    b136:	eeb1 ab48 	vneg.f64	d10, d8
    b13a:	e7d2      	b.n	b0e2 <_svfprintf_r+0x1852>
    b13c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b13e:	920c      	str	r2, [sp, #48]	; 0x30
    b140:	2a00      	cmp	r2, #0
    b142:	f006 0301 	and.w	r3, r6, #1
    b146:	f340 810d 	ble.w	b364 <_svfprintf_r+0x1ad4>
    b14a:	9903      	ldr	r1, [sp, #12]
    b14c:	430b      	orrs	r3, r1
    b14e:	f040 80cf 	bne.w	b2f0 <_svfprintf_r+0x1a60>
    b152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b154:	9305      	str	r3, [sp, #20]
    b156:	2366      	movs	r3, #102	; 0x66
    b158:	930b      	str	r3, [sp, #44]	; 0x2c
    b15a:	0572      	lsls	r2, r6, #21
    b15c:	f100 80a3 	bmi.w	b2a6 <_svfprintf_r+0x1a16>
    b160:	9b05      	ldr	r3, [sp, #20]
    b162:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b166:	9302      	str	r3, [sp, #8]
    b168:	e76c      	b.n	b044 <_svfprintf_r+0x17b4>
    b16a:	ee1b 1a10 	vmov	r1, s22
    b16e:	aa24      	add	r2, sp, #144	; 0x90
    b170:	4658      	mov	r0, fp
    b172:	f001 fa59 	bl	c628 <__ssprint_r>
    b176:	2800      	cmp	r0, #0
    b178:	f47e afef 	bne.w	a15a <_svfprintf_r+0x8ca>
    b17c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    b17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b180:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b182:	1b1c      	subs	r4, r3, r4
    b184:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b188:	f7ff b936 	b.w	a3f8 <_svfprintf_r+0xb68>
    b18c:	2358      	movs	r3, #88	; 0x58
    b18e:	e78d      	b.n	b0ac <_svfprintf_r+0x181c>
    b190:	2200      	movs	r2, #0
    b192:	9203      	str	r2, [sp, #12]
    b194:	f7fe bbda 	b.w	994c <_svfprintf_r+0xbc>
    b198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b19a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b19c:	189a      	adds	r2, r3, r2
    b19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b1a0:	9205      	str	r2, [sp, #20]
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	f340 80ab 	ble.w	b2fe <_svfprintf_r+0x1a6e>
    b1a8:	2367      	movs	r3, #103	; 0x67
    b1aa:	930b      	str	r3, [sp, #44]	; 0x2c
    b1ac:	e7d5      	b.n	b15a <_svfprintf_r+0x18ca>
    b1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b1b0:	320f      	adds	r2, #15
    b1b2:	b2d2      	uxtb	r2, r2
    b1b4:	2101      	movs	r1, #1
    b1b6:	e618      	b.n	adea <_svfprintf_r+0x155a>
    b1b8:	18a0      	adds	r0, r4, r2
    b1ba:	e5fb      	b.n	adb4 <_svfprintf_r+0x1524>
    b1bc:	2900      	cmp	r1, #0
    b1be:	f040 80a8 	bne.w	b312 <_svfprintf_r+0x1a82>
    b1c2:	2230      	movs	r2, #48	; 0x30
    b1c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    b1c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    b1cc:	3330      	adds	r3, #48	; 0x30
    b1ce:	f802 3b01 	strb.w	r3, [r2], #1
    b1d2:	ab1e      	add	r3, sp, #120	; 0x78
    b1d4:	1ad3      	subs	r3, r2, r3
    b1d6:	9314      	str	r3, [sp, #80]	; 0x50
    b1d8:	e649      	b.n	ae6e <_svfprintf_r+0x15de>
    b1da:	3301      	adds	r3, #1
    b1dc:	4912      	ldr	r1, [pc, #72]	; (b228 <_svfprintf_r+0x1998>)
    b1de:	f8ca 5004 	str.w	r5, [sl, #4]
    b1e2:	442a      	add	r2, r5
    b1e4:	2b07      	cmp	r3, #7
    b1e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b1ea:	f8ca 1000 	str.w	r1, [sl]
    b1ee:	f77f ac33 	ble.w	aa58 <_svfprintf_r+0x11c8>
    b1f2:	ee1b 1a10 	vmov	r1, s22
    b1f6:	aa24      	add	r2, sp, #144	; 0x90
    b1f8:	4658      	mov	r0, fp
    b1fa:	f001 fa15 	bl	c628 <__ssprint_r>
    b1fe:	2800      	cmp	r0, #0
    b200:	f47e afab 	bne.w	a15a <_svfprintf_r+0x8ca>
    b204:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b208:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b20c:	e426      	b.n	aa5c <_svfprintf_r+0x11cc>
    b20e:	1c59      	adds	r1, r3, #1
    b210:	4658      	mov	r0, fp
    b212:	f7fc fd4d 	bl	7cb0 <_malloc_r>
    b216:	4604      	mov	r4, r0
    b218:	b350      	cbz	r0, b270 <_svfprintf_r+0x19e0>
    b21a:	9007      	str	r0, [sp, #28]
    b21c:	e754      	b.n	b0c8 <_svfprintf_r+0x1838>
    b21e:	bf00      	nop
    b220:	200013b0 	.word	0x200013b0
    b224:	2000139c 	.word	0x2000139c
    b228:	20001c68 	.word	0x20001c68
    b22c:	66666667 	.word	0x66666667
    b230:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    b234:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    b238:	f890 c00f 	ldrb.w	ip, [r0, #15]
    b23c:	4561      	cmp	r1, ip
    b23e:	4613      	mov	r3, r2
    b240:	d10a      	bne.n	b258 <_svfprintf_r+0x19c8>
    b242:	f04f 0e30 	mov.w	lr, #48	; 0x30
    b246:	f803 ec01 	strb.w	lr, [r3, #-1]
    b24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b24c:	1e59      	subs	r1, r3, #1
    b24e:	9122      	str	r1, [sp, #136]	; 0x88
    b250:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    b254:	458c      	cmp	ip, r1
    b256:	d0f6      	beq.n	b246 <_svfprintf_r+0x19b6>
    b258:	2939      	cmp	r1, #57	; 0x39
    b25a:	bf16      	itet	ne
    b25c:	3101      	addne	r1, #1
    b25e:	7a81      	ldrbeq	r1, [r0, #10]
    b260:	b2c9      	uxtbne	r1, r1
    b262:	f803 1c01 	strb.w	r1, [r3, #-1]
    b266:	e6ae      	b.n	afc6 <_svfprintf_r+0x1736>
    b268:	2300      	movs	r3, #0
    b26a:	4690      	mov	r8, r2
    b26c:	9307      	str	r3, [sp, #28]
    b26e:	e760      	b.n	b132 <_svfprintf_r+0x18a2>
    b270:	ee1b 2a10 	vmov	r2, s22
    b274:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    b278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b27c:	8193      	strh	r3, [r2, #12]
    b27e:	f7fe bc16 	b.w	9aae <_svfprintf_r+0x21e>
    b282:	07f5      	lsls	r5, r6, #31
    b284:	f57f adfe 	bpl.w	ae84 <_svfprintf_r+0x15f4>
    b288:	e5f8      	b.n	ae7c <_svfprintf_r+0x15ec>
    b28a:	9305      	str	r3, [sp, #20]
    b28c:	e6ce      	b.n	b02c <_svfprintf_r+0x179c>
    b28e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b296:	f43f ad8b 	beq.w	adb0 <_svfprintf_r+0x1520>
    b29a:	f1c2 0201 	rsb	r2, r2, #1
    b29e:	921b      	str	r2, [sp, #108]	; 0x6c
    b2a0:	e587      	b.n	adb2 <_svfprintf_r+0x1522>
    b2a2:	2367      	movs	r3, #103	; 0x67
    b2a4:	930b      	str	r3, [sp, #44]	; 0x2c
    b2a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b2a8:	780b      	ldrb	r3, [r1, #0]
    b2aa:	2bff      	cmp	r3, #255	; 0xff
    b2ac:	d079      	beq.n	b3a2 <_svfprintf_r+0x1b12>
    b2ae:	2500      	movs	r5, #0
    b2b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b2b2:	4628      	mov	r0, r5
    b2b4:	e003      	b.n	b2be <_svfprintf_r+0x1a2e>
    b2b6:	3001      	adds	r0, #1
    b2b8:	3101      	adds	r1, #1
    b2ba:	2bff      	cmp	r3, #255	; 0xff
    b2bc:	d008      	beq.n	b2d0 <_svfprintf_r+0x1a40>
    b2be:	4293      	cmp	r3, r2
    b2c0:	da06      	bge.n	b2d0 <_svfprintf_r+0x1a40>
    b2c2:	1ad2      	subs	r2, r2, r3
    b2c4:	784b      	ldrb	r3, [r1, #1]
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	d1f5      	bne.n	b2b6 <_svfprintf_r+0x1a26>
    b2ca:	780b      	ldrb	r3, [r1, #0]
    b2cc:	3501      	adds	r5, #1
    b2ce:	e7f4      	b.n	b2ba <_svfprintf_r+0x1a2a>
    b2d0:	920c      	str	r2, [sp, #48]	; 0x30
    b2d2:	9113      	str	r1, [sp, #76]	; 0x4c
    b2d4:	900d      	str	r0, [sp, #52]	; 0x34
    b2d6:	950f      	str	r5, [sp, #60]	; 0x3c
    b2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    b2de:	4413      	add	r3, r2
    b2e0:	9a05      	ldr	r2, [sp, #20]
    b2e2:	fb01 2303 	mla	r3, r1, r3, r2
    b2e6:	9305      	str	r3, [sp, #20]
    b2e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b2ec:	9302      	str	r3, [sp, #8]
    b2ee:	e5d5      	b.n	ae9c <_svfprintf_r+0x160c>
    b2f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2f2:	18d3      	adds	r3, r2, r3
    b2f4:	4419      	add	r1, r3
    b2f6:	2366      	movs	r3, #102	; 0x66
    b2f8:	9105      	str	r1, [sp, #20]
    b2fa:	930b      	str	r3, [sp, #44]	; 0x2c
    b2fc:	e72d      	b.n	b15a <_svfprintf_r+0x18ca>
    b2fe:	f1c3 0301 	rsb	r3, r3, #1
    b302:	441a      	add	r2, r3
    b304:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b308:	9302      	str	r3, [sp, #8]
    b30a:	2367      	movs	r3, #103	; 0x67
    b30c:	9205      	str	r2, [sp, #20]
    b30e:	930b      	str	r3, [sp, #44]	; 0x2c
    b310:	e698      	b.n	b044 <_svfprintf_r+0x17b4>
    b312:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    b316:	e759      	b.n	b1cc <_svfprintf_r+0x193c>
    b318:	9b03      	ldr	r3, [sp, #12]
    b31a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b31e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    b322:	9305      	str	r3, [sp, #20]
    b324:	e4b4      	b.n	ac90 <_svfprintf_r+0x1400>
    b326:	ee18 3a90 	vmov	r3, s17
    b32a:	2b00      	cmp	r3, #0
    b32c:	bfb4      	ite	lt
    b32e:	212d      	movlt	r1, #45	; 0x2d
    b330:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    b334:	4c25      	ldr	r4, [pc, #148]	; (b3cc <_svfprintf_r+0x1b3c>)
    b336:	4b26      	ldr	r3, [pc, #152]	; (b3d0 <_svfprintf_r+0x1b40>)
    b338:	bfb8      	it	lt
    b33a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    b33e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    b342:	f7fe bc79 	b.w	9c38 <_svfprintf_r+0x3a8>
    b346:	9b03      	ldr	r3, [sp, #12]
    b348:	9302      	str	r3, [sp, #8]
    b34a:	9305      	str	r3, [sp, #20]
    b34c:	2373      	movs	r3, #115	; 0x73
    b34e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b352:	9003      	str	r0, [sp, #12]
    b354:	900f      	str	r0, [sp, #60]	; 0x3c
    b356:	900d      	str	r0, [sp, #52]	; 0x34
    b358:	930b      	str	r3, [sp, #44]	; 0x2c
    b35a:	f7fe bc7a 	b.w	9c52 <_svfprintf_r+0x3c2>
    b35e:	2302      	movs	r3, #2
    b360:	9314      	str	r3, [sp, #80]	; 0x50
    b362:	e584      	b.n	ae6e <_svfprintf_r+0x15de>
    b364:	9a03      	ldr	r2, [sp, #12]
    b366:	4313      	orrs	r3, r2
    b368:	d105      	bne.n	b376 <_svfprintf_r+0x1ae6>
    b36a:	2301      	movs	r3, #1
    b36c:	2266      	movs	r2, #102	; 0x66
    b36e:	9302      	str	r3, [sp, #8]
    b370:	920b      	str	r2, [sp, #44]	; 0x2c
    b372:	9305      	str	r3, [sp, #20]
    b374:	e666      	b.n	b044 <_svfprintf_r+0x17b4>
    b376:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b378:	3301      	adds	r3, #1
    b37a:	441a      	add	r2, r3
    b37c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b380:	9302      	str	r3, [sp, #8]
    b382:	2366      	movs	r3, #102	; 0x66
    b384:	9205      	str	r2, [sp, #20]
    b386:	930b      	str	r3, [sp, #44]	; 0x2c
    b388:	e65c      	b.n	b044 <_svfprintf_r+0x17b4>
    b38a:	9a08      	ldr	r2, [sp, #32]
    b38c:	f899 3001 	ldrb.w	r3, [r9, #1]
    b390:	4689      	mov	r9, r1
    b392:	f852 1b04 	ldr.w	r1, [r2], #4
    b396:	9208      	str	r2, [sp, #32]
    b398:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    b39c:	9103      	str	r1, [sp, #12]
    b39e:	f7fe bad3 	b.w	9948 <_svfprintf_r+0xb8>
    b3a2:	2300      	movs	r3, #0
    b3a4:	930f      	str	r3, [sp, #60]	; 0x3c
    b3a6:	930d      	str	r3, [sp, #52]	; 0x34
    b3a8:	e796      	b.n	b2d8 <_svfprintf_r+0x1a48>
    b3aa:	230c      	movs	r3, #12
    b3ac:	f8cb 3000 	str.w	r3, [fp]
    b3b0:	f04f 33ff 	mov.w	r3, #4294967295
    b3b4:	9304      	str	r3, [sp, #16]
    b3b6:	f7fe bb81 	b.w	9abc <_svfprintf_r+0x22c>
    b3ba:	ee1b 2a10 	vmov	r2, s22
    b3be:	8993      	ldrh	r3, [r2, #12]
    b3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b3c4:	8193      	strh	r3, [r2, #12]
    b3c6:	f7fe bec8 	b.w	a15a <_svfprintf_r+0x8ca>
    b3ca:	bf00      	nop
    b3cc:	20001398 	.word	0x20001398
    b3d0:	2000111c 	.word	0x2000111c

0000b3d4 <_fclose_r>:
    b3d4:	b570      	push	{r4, r5, r6, lr}
    b3d6:	2900      	cmp	r1, #0
    b3d8:	d04b      	beq.n	b472 <_fclose_r+0x9e>
    b3da:	4606      	mov	r6, r0
    b3dc:	460c      	mov	r4, r1
    b3de:	b110      	cbz	r0, b3e6 <_fclose_r+0x12>
    b3e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b3e2:	2b00      	cmp	r3, #0
    b3e4:	d048      	beq.n	b478 <_fclose_r+0xa4>
    b3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b3e8:	07d8      	lsls	r0, r3, #31
    b3ea:	d534      	bpl.n	b456 <_fclose_r+0x82>
    b3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	d03e      	beq.n	b472 <_fclose_r+0x9e>
    b3f4:	4621      	mov	r1, r4
    b3f6:	4630      	mov	r0, r6
    b3f8:	f000 f850 	bl	b49c <__sflush_r>
    b3fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b3fe:	4605      	mov	r5, r0
    b400:	b133      	cbz	r3, b410 <_fclose_r+0x3c>
    b402:	69e1      	ldr	r1, [r4, #28]
    b404:	4630      	mov	r0, r6
    b406:	4798      	blx	r3
    b408:	2800      	cmp	r0, #0
    b40a:	bfb8      	it	lt
    b40c:	f04f 35ff 	movlt.w	r5, #4294967295
    b410:	89a3      	ldrh	r3, [r4, #12]
    b412:	061a      	lsls	r2, r3, #24
    b414:	d43c      	bmi.n	b490 <_fclose_r+0xbc>
    b416:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b418:	b141      	cbz	r1, b42c <_fclose_r+0x58>
    b41a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b41e:	4299      	cmp	r1, r3
    b420:	d002      	beq.n	b428 <_fclose_r+0x54>
    b422:	4630      	mov	r0, r6
    b424:	f7fd fd4e 	bl	8ec4 <_free_r>
    b428:	2300      	movs	r3, #0
    b42a:	6323      	str	r3, [r4, #48]	; 0x30
    b42c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b42e:	b121      	cbz	r1, b43a <_fclose_r+0x66>
    b430:	4630      	mov	r0, r6
    b432:	f7fd fd47 	bl	8ec4 <_free_r>
    b436:	2300      	movs	r3, #0
    b438:	6463      	str	r3, [r4, #68]	; 0x44
    b43a:	f7fd f99b 	bl	8774 <__sfp_lock_acquire>
    b43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b440:	2200      	movs	r2, #0
    b442:	07db      	lsls	r3, r3, #31
    b444:	81a2      	strh	r2, [r4, #12]
    b446:	d51f      	bpl.n	b488 <_fclose_r+0xb4>
    b448:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b44a:	f7fd fc23 	bl	8c94 <__retarget_lock_close_recursive>
    b44e:	f7fd f997 	bl	8780 <__sfp_lock_release>
    b452:	4628      	mov	r0, r5
    b454:	bd70      	pop	{r4, r5, r6, pc}
    b456:	89a3      	ldrh	r3, [r4, #12]
    b458:	0599      	lsls	r1, r3, #22
    b45a:	d4cb      	bmi.n	b3f4 <_fclose_r+0x20>
    b45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b45e:	f7fd fc1b 	bl	8c98 <__retarget_lock_acquire_recursive>
    b462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b466:	2b00      	cmp	r3, #0
    b468:	d1c4      	bne.n	b3f4 <_fclose_r+0x20>
    b46a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    b46c:	f015 0501 	ands.w	r5, r5, #1
    b470:	d005      	beq.n	b47e <_fclose_r+0xaa>
    b472:	2500      	movs	r5, #0
    b474:	4628      	mov	r0, r5
    b476:	bd70      	pop	{r4, r5, r6, pc}
    b478:	f7fd f95e 	bl	8738 <__sinit>
    b47c:	e7b3      	b.n	b3e6 <_fclose_r+0x12>
    b47e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b480:	f7fd fc0c 	bl	8c9c <__retarget_lock_release_recursive>
    b484:	4628      	mov	r0, r5
    b486:	bd70      	pop	{r4, r5, r6, pc}
    b488:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b48a:	f7fd fc07 	bl	8c9c <__retarget_lock_release_recursive>
    b48e:	e7db      	b.n	b448 <_fclose_r+0x74>
    b490:	6921      	ldr	r1, [r4, #16]
    b492:	4630      	mov	r0, r6
    b494:	f7fd fd16 	bl	8ec4 <_free_r>
    b498:	e7bd      	b.n	b416 <_fclose_r+0x42>
    b49a:	bf00      	nop

0000b49c <__sflush_r>:
    b49c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4a4:	460c      	mov	r4, r1
    b4a6:	0711      	lsls	r1, r2, #28
    b4a8:	4680      	mov	r8, r0
    b4aa:	d447      	bmi.n	b53c <__sflush_r+0xa0>
    b4ac:	6863      	ldr	r3, [r4, #4]
    b4ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	81a2      	strh	r2, [r4, #12]
    b4b6:	dd5e      	ble.n	b576 <__sflush_r+0xda>
    b4b8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b4ba:	2d00      	cmp	r5, #0
    b4bc:	d058      	beq.n	b570 <__sflush_r+0xd4>
    b4be:	2300      	movs	r3, #0
    b4c0:	f8d8 6000 	ldr.w	r6, [r8]
    b4c4:	f8c8 3000 	str.w	r3, [r8]
    b4c8:	b293      	uxth	r3, r2
    b4ca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    b4ce:	d156      	bne.n	b57e <__sflush_r+0xe2>
    b4d0:	2301      	movs	r3, #1
    b4d2:	69e1      	ldr	r1, [r4, #28]
    b4d4:	4640      	mov	r0, r8
    b4d6:	47a8      	blx	r5
    b4d8:	1c43      	adds	r3, r0, #1
    b4da:	d067      	beq.n	b5ac <__sflush_r+0x110>
    b4dc:	89a3      	ldrh	r3, [r4, #12]
    b4de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b4e0:	075f      	lsls	r7, r3, #29
    b4e2:	d505      	bpl.n	b4f0 <__sflush_r+0x54>
    b4e4:	6863      	ldr	r3, [r4, #4]
    b4e6:	1ac0      	subs	r0, r0, r3
    b4e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b4ea:	b10b      	cbz	r3, b4f0 <__sflush_r+0x54>
    b4ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b4ee:	1ac0      	subs	r0, r0, r3
    b4f0:	69e1      	ldr	r1, [r4, #28]
    b4f2:	4602      	mov	r2, r0
    b4f4:	2300      	movs	r3, #0
    b4f6:	4640      	mov	r0, r8
    b4f8:	47a8      	blx	r5
    b4fa:	1c41      	adds	r1, r0, #1
    b4fc:	d141      	bne.n	b582 <__sflush_r+0xe6>
    b4fe:	f8d8 3000 	ldr.w	r3, [r8]
    b502:	2b00      	cmp	r3, #0
    b504:	d03d      	beq.n	b582 <__sflush_r+0xe6>
    b506:	2b1d      	cmp	r3, #29
    b508:	d001      	beq.n	b50e <__sflush_r+0x72>
    b50a:	2b16      	cmp	r3, #22
    b50c:	d156      	bne.n	b5bc <__sflush_r+0x120>
    b50e:	89a3      	ldrh	r3, [r4, #12]
    b510:	6922      	ldr	r2, [r4, #16]
    b512:	6022      	str	r2, [r4, #0]
    b514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b518:	2100      	movs	r1, #0
    b51a:	6061      	str	r1, [r4, #4]
    b51c:	81a3      	strh	r3, [r4, #12]
    b51e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b520:	f8c8 6000 	str.w	r6, [r8]
    b524:	b321      	cbz	r1, b570 <__sflush_r+0xd4>
    b526:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b52a:	4299      	cmp	r1, r3
    b52c:	d002      	beq.n	b534 <__sflush_r+0x98>
    b52e:	4640      	mov	r0, r8
    b530:	f7fd fcc8 	bl	8ec4 <_free_r>
    b534:	2000      	movs	r0, #0
    b536:	6320      	str	r0, [r4, #48]	; 0x30
    b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b53c:	6926      	ldr	r6, [r4, #16]
    b53e:	b1be      	cbz	r6, b570 <__sflush_r+0xd4>
    b540:	b293      	uxth	r3, r2
    b542:	6825      	ldr	r5, [r4, #0]
    b544:	6026      	str	r6, [r4, #0]
    b546:	079a      	lsls	r2, r3, #30
    b548:	bf0c      	ite	eq
    b54a:	6963      	ldreq	r3, [r4, #20]
    b54c:	2300      	movne	r3, #0
    b54e:	1bad      	subs	r5, r5, r6
    b550:	60a3      	str	r3, [r4, #8]
    b552:	e00b      	b.n	b56c <__sflush_r+0xd0>
    b554:	462b      	mov	r3, r5
    b556:	4632      	mov	r2, r6
    b558:	69e1      	ldr	r1, [r4, #28]
    b55a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b55c:	4640      	mov	r0, r8
    b55e:	47b8      	blx	r7
    b560:	f1b0 0c00 	subs.w	ip, r0, #0
    b564:	eba5 050c 	sub.w	r5, r5, ip
    b568:	4466      	add	r6, ip
    b56a:	dd17      	ble.n	b59c <__sflush_r+0x100>
    b56c:	2d00      	cmp	r5, #0
    b56e:	dcf1      	bgt.n	b554 <__sflush_r+0xb8>
    b570:	2000      	movs	r0, #0
    b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b578:	2b00      	cmp	r3, #0
    b57a:	dc9d      	bgt.n	b4b8 <__sflush_r+0x1c>
    b57c:	e7f8      	b.n	b570 <__sflush_r+0xd4>
    b57e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b580:	e7ae      	b.n	b4e0 <__sflush_r+0x44>
    b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b586:	6922      	ldr	r2, [r4, #16]
    b588:	6022      	str	r2, [r4, #0]
    b58a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b58e:	81a3      	strh	r3, [r4, #12]
    b590:	2200      	movs	r2, #0
    b592:	04db      	lsls	r3, r3, #19
    b594:	6062      	str	r2, [r4, #4]
    b596:	d5c2      	bpl.n	b51e <__sflush_r+0x82>
    b598:	6520      	str	r0, [r4, #80]	; 0x50
    b59a:	e7c0      	b.n	b51e <__sflush_r+0x82>
    b59c:	89a3      	ldrh	r3, [r4, #12]
    b59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5a2:	f04f 30ff 	mov.w	r0, #4294967295
    b5a6:	81a3      	strh	r3, [r4, #12]
    b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5ac:	f8d8 3000 	ldr.w	r3, [r8]
    b5b0:	2b00      	cmp	r3, #0
    b5b2:	d093      	beq.n	b4dc <__sflush_r+0x40>
    b5b4:	2b1d      	cmp	r3, #29
    b5b6:	d006      	beq.n	b5c6 <__sflush_r+0x12a>
    b5b8:	2b16      	cmp	r3, #22
    b5ba:	d004      	beq.n	b5c6 <__sflush_r+0x12a>
    b5bc:	89a3      	ldrh	r3, [r4, #12]
    b5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5c2:	81a3      	strh	r3, [r4, #12]
    b5c4:	e7d5      	b.n	b572 <__sflush_r+0xd6>
    b5c6:	f8c8 6000 	str.w	r6, [r8]
    b5ca:	e7d1      	b.n	b570 <__sflush_r+0xd4>

0000b5cc <_fflush_r>:
    b5cc:	b538      	push	{r3, r4, r5, lr}
    b5ce:	460c      	mov	r4, r1
    b5d0:	4605      	mov	r5, r0
    b5d2:	b108      	cbz	r0, b5d8 <_fflush_r+0xc>
    b5d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b5d6:	b303      	cbz	r3, b61a <_fflush_r+0x4e>
    b5d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b5dc:	b188      	cbz	r0, b602 <_fflush_r+0x36>
    b5de:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b5e0:	07db      	lsls	r3, r3, #31
    b5e2:	d401      	bmi.n	b5e8 <_fflush_r+0x1c>
    b5e4:	0581      	lsls	r1, r0, #22
    b5e6:	d50f      	bpl.n	b608 <_fflush_r+0x3c>
    b5e8:	4628      	mov	r0, r5
    b5ea:	4621      	mov	r1, r4
    b5ec:	f7ff ff56 	bl	b49c <__sflush_r>
    b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b5f2:	07da      	lsls	r2, r3, #31
    b5f4:	4605      	mov	r5, r0
    b5f6:	d402      	bmi.n	b5fe <_fflush_r+0x32>
    b5f8:	89a3      	ldrh	r3, [r4, #12]
    b5fa:	059b      	lsls	r3, r3, #22
    b5fc:	d508      	bpl.n	b610 <_fflush_r+0x44>
    b5fe:	4628      	mov	r0, r5
    b600:	bd38      	pop	{r3, r4, r5, pc}
    b602:	4605      	mov	r5, r0
    b604:	4628      	mov	r0, r5
    b606:	bd38      	pop	{r3, r4, r5, pc}
    b608:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b60a:	f7fd fb45 	bl	8c98 <__retarget_lock_acquire_recursive>
    b60e:	e7eb      	b.n	b5e8 <_fflush_r+0x1c>
    b610:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b612:	f7fd fb43 	bl	8c9c <__retarget_lock_release_recursive>
    b616:	4628      	mov	r0, r5
    b618:	bd38      	pop	{r3, r4, r5, pc}
    b61a:	f7fd f88d 	bl	8738 <__sinit>
    b61e:	e7db      	b.n	b5d8 <_fflush_r+0xc>

0000b620 <_localeconv_r>:
    b620:	4800      	ldr	r0, [pc, #0]	; (b624 <_localeconv_r+0x4>)
    b622:	4770      	bx	lr
    b624:	20002f7c 	.word	0x20002f7c
	...

0000b630 <memchr>:
    b630:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b634:	2a10      	cmp	r2, #16
    b636:	db2b      	blt.n	b690 <memchr+0x60>
    b638:	f010 0f07 	tst.w	r0, #7
    b63c:	d008      	beq.n	b650 <memchr+0x20>
    b63e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b642:	3a01      	subs	r2, #1
    b644:	428b      	cmp	r3, r1
    b646:	d02d      	beq.n	b6a4 <memchr+0x74>
    b648:	f010 0f07 	tst.w	r0, #7
    b64c:	b342      	cbz	r2, b6a0 <memchr+0x70>
    b64e:	d1f6      	bne.n	b63e <memchr+0xe>
    b650:	b4f0      	push	{r4, r5, r6, r7}
    b652:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b656:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b65a:	f022 0407 	bic.w	r4, r2, #7
    b65e:	f07f 0700 	mvns.w	r7, #0
    b662:	2300      	movs	r3, #0
    b664:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b668:	3c08      	subs	r4, #8
    b66a:	ea85 0501 	eor.w	r5, r5, r1
    b66e:	ea86 0601 	eor.w	r6, r6, r1
    b672:	fa85 f547 	uadd8	r5, r5, r7
    b676:	faa3 f587 	sel	r5, r3, r7
    b67a:	fa86 f647 	uadd8	r6, r6, r7
    b67e:	faa5 f687 	sel	r6, r5, r7
    b682:	b98e      	cbnz	r6, b6a8 <memchr+0x78>
    b684:	d1ee      	bne.n	b664 <memchr+0x34>
    b686:	bcf0      	pop	{r4, r5, r6, r7}
    b688:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b68c:	f002 0207 	and.w	r2, r2, #7
    b690:	b132      	cbz	r2, b6a0 <memchr+0x70>
    b692:	f810 3b01 	ldrb.w	r3, [r0], #1
    b696:	3a01      	subs	r2, #1
    b698:	ea83 0301 	eor.w	r3, r3, r1
    b69c:	b113      	cbz	r3, b6a4 <memchr+0x74>
    b69e:	d1f8      	bne.n	b692 <memchr+0x62>
    b6a0:	2000      	movs	r0, #0
    b6a2:	4770      	bx	lr
    b6a4:	3801      	subs	r0, #1
    b6a6:	4770      	bx	lr
    b6a8:	2d00      	cmp	r5, #0
    b6aa:	bf06      	itte	eq
    b6ac:	4635      	moveq	r5, r6
    b6ae:	3803      	subeq	r0, #3
    b6b0:	3807      	subne	r0, #7
    b6b2:	f015 0f01 	tst.w	r5, #1
    b6b6:	d107      	bne.n	b6c8 <memchr+0x98>
    b6b8:	3001      	adds	r0, #1
    b6ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    b6be:	bf02      	ittt	eq
    b6c0:	3001      	addeq	r0, #1
    b6c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b6c6:	3001      	addeq	r0, #1
    b6c8:	bcf0      	pop	{r4, r5, r6, r7}
    b6ca:	3801      	subs	r0, #1
    b6cc:	4770      	bx	lr
    b6ce:	bf00      	nop

0000b6d0 <frexp>:
    b6d0:	b430      	push	{r4, r5}
    b6d2:	b082      	sub	sp, #8
    b6d4:	ed8d 0b00 	vstr	d0, [sp]
    b6d8:	9a01      	ldr	r2, [sp, #4]
    b6da:	4c19      	ldr	r4, [pc, #100]	; (b740 <frexp+0x70>)
    b6dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b6e0:	2100      	movs	r1, #0
    b6e2:	42a3      	cmp	r3, r4
    b6e4:	6001      	str	r1, [r0, #0]
    b6e6:	dc21      	bgt.n	b72c <frexp+0x5c>
    b6e8:	9c00      	ldr	r4, [sp, #0]
    b6ea:	431c      	orrs	r4, r3
    b6ec:	d01e      	beq.n	b72c <frexp+0x5c>
    b6ee:	4c15      	ldr	r4, [pc, #84]	; (b744 <frexp+0x74>)
    b6f0:	4014      	ands	r4, r2
    b6f2:	b954      	cbnz	r4, b70a <frexp+0x3a>
    b6f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; b738 <frexp+0x68>
    b6f8:	ee20 7b07 	vmul.f64	d7, d0, d7
    b6fc:	ed8d 7b00 	vstr	d7, [sp]
    b700:	9a01      	ldr	r2, [sp, #4]
    b702:	f06f 0135 	mvn.w	r1, #53	; 0x35
    b706:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b70a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    b70e:	e9dd 4500 	ldrd	r4, r5, [sp]
    b712:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    b716:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    b71a:	151b      	asrs	r3, r3, #20
    b71c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    b720:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    b724:	e9cd 4500 	strd	r4, r5, [sp]
    b728:	440b      	add	r3, r1
    b72a:	6003      	str	r3, [r0, #0]
    b72c:	ed9d 0b00 	vldr	d0, [sp]
    b730:	b002      	add	sp, #8
    b732:	bc30      	pop	{r4, r5}
    b734:	4770      	bx	lr
    b736:	bf00      	nop
    b738:	00000000 	.word	0x00000000
    b73c:	43500000 	.word	0x43500000
    b740:	7fefffff 	.word	0x7fefffff
    b744:	7ff00000 	.word	0x7ff00000

0000b748 <__assert_func>:
    b748:	b500      	push	{lr}
    b74a:	4c0b      	ldr	r4, [pc, #44]	; (b778 <__assert_func+0x30>)
    b74c:	6825      	ldr	r5, [r4, #0]
    b74e:	4614      	mov	r4, r2
    b750:	68ee      	ldr	r6, [r5, #12]
    b752:	461a      	mov	r2, r3
    b754:	b085      	sub	sp, #20
    b756:	4603      	mov	r3, r0
    b758:	460d      	mov	r5, r1
    b75a:	b14c      	cbz	r4, b770 <__assert_func+0x28>
    b75c:	4907      	ldr	r1, [pc, #28]	; (b77c <__assert_func+0x34>)
    b75e:	9500      	str	r5, [sp, #0]
    b760:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b764:	4630      	mov	r0, r6
    b766:	4906      	ldr	r1, [pc, #24]	; (b780 <__assert_func+0x38>)
    b768:	f000 ff4a 	bl	c600 <fiprintf>
    b76c:	f7fb f876 	bl	685c <abort>
    b770:	4904      	ldr	r1, [pc, #16]	; (b784 <__assert_func+0x3c>)
    b772:	460c      	mov	r4, r1
    b774:	e7f3      	b.n	b75e <__assert_func+0x16>
    b776:	bf00      	nop
    b778:	20003414 	.word	0x20003414
    b77c:	20001174 	.word	0x20001174
    b780:	20001184 	.word	0x20001184
    b784:	200010e0 	.word	0x200010e0

0000b788 <quorem>:
    b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b78c:	6903      	ldr	r3, [r0, #16]
    b78e:	690c      	ldr	r4, [r1, #16]
    b790:	42a3      	cmp	r3, r4
    b792:	b083      	sub	sp, #12
    b794:	f2c0 8087 	blt.w	b8a6 <quorem+0x11e>
    b798:	3c01      	subs	r4, #1
    b79a:	f101 0514 	add.w	r5, r1, #20
    b79e:	00a3      	lsls	r3, r4, #2
    b7a0:	f100 0814 	add.w	r8, r0, #20
    b7a4:	9300      	str	r3, [sp, #0]
    b7a6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    b7aa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b7ae:	3301      	adds	r3, #1
    b7b0:	4681      	mov	r9, r0
    b7b2:	429a      	cmp	r2, r3
    b7b4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b7b8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    b7bc:	9001      	str	r0, [sp, #4]
    b7be:	fbb2 f6f3 	udiv	r6, r2, r3
    b7c2:	d33b      	bcc.n	b83c <quorem+0xb4>
    b7c4:	f04f 0c00 	mov.w	ip, #0
    b7c8:	46ae      	mov	lr, r5
    b7ca:	4640      	mov	r0, r8
    b7cc:	46e2      	mov	sl, ip
    b7ce:	4663      	mov	r3, ip
    b7d0:	f85e bb04 	ldr.w	fp, [lr], #4
    b7d4:	6802      	ldr	r2, [r0, #0]
    b7d6:	fa1f fc8b 	uxth.w	ip, fp
    b7da:	fb06 330c 	mla	r3, r6, ip, r3
    b7de:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b7e2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    b7e6:	fb06 cc0b 	mla	ip, r6, fp, ip
    b7ea:	b29b      	uxth	r3, r3
    b7ec:	ebaa 0303 	sub.w	r3, sl, r3
    b7f0:	fa1f fa8c 	uxth.w	sl, ip
    b7f4:	fa13 f382 	uxtah	r3, r3, r2
    b7f8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    b7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
    b800:	b29b      	uxth	r3, r3
    b802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b806:	4577      	cmp	r7, lr
    b808:	f840 3b04 	str.w	r3, [r0], #4
    b80c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    b810:	ea4f 431c 	mov.w	r3, ip, lsr #16
    b814:	d2dc      	bcs.n	b7d0 <quorem+0x48>
    b816:	9b00      	ldr	r3, [sp, #0]
    b818:	f858 3003 	ldr.w	r3, [r8, r3]
    b81c:	b973      	cbnz	r3, b83c <quorem+0xb4>
    b81e:	9b01      	ldr	r3, [sp, #4]
    b820:	3b04      	subs	r3, #4
    b822:	4598      	cmp	r8, r3
    b824:	d304      	bcc.n	b830 <quorem+0xa8>
    b826:	e007      	b.n	b838 <quorem+0xb0>
    b828:	4598      	cmp	r8, r3
    b82a:	f104 34ff 	add.w	r4, r4, #4294967295
    b82e:	d203      	bcs.n	b838 <quorem+0xb0>
    b830:	f853 2904 	ldr.w	r2, [r3], #-4
    b834:	2a00      	cmp	r2, #0
    b836:	d0f7      	beq.n	b828 <quorem+0xa0>
    b838:	f8c9 4010 	str.w	r4, [r9, #16]
    b83c:	4648      	mov	r0, r9
    b83e:	f7fd fee3 	bl	9608 <__mcmp>
    b842:	2800      	cmp	r0, #0
    b844:	db2b      	blt.n	b89e <quorem+0x116>
    b846:	3601      	adds	r6, #1
    b848:	4641      	mov	r1, r8
    b84a:	2300      	movs	r3, #0
    b84c:	f855 0b04 	ldr.w	r0, [r5], #4
    b850:	f8d1 c000 	ldr.w	ip, [r1]
    b854:	b282      	uxth	r2, r0
    b856:	1a9a      	subs	r2, r3, r2
    b858:	0c03      	lsrs	r3, r0, #16
    b85a:	fa12 f28c 	uxtah	r2, r2, ip
    b85e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    b862:	eb03 4322 	add.w	r3, r3, r2, asr #16
    b866:	b292      	uxth	r2, r2
    b868:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    b86c:	42af      	cmp	r7, r5
    b86e:	f841 2b04 	str.w	r2, [r1], #4
    b872:	ea4f 4323 	mov.w	r3, r3, asr #16
    b876:	d2e9      	bcs.n	b84c <quorem+0xc4>
    b878:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b87c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    b880:	b96a      	cbnz	r2, b89e <quorem+0x116>
    b882:	3b04      	subs	r3, #4
    b884:	4598      	cmp	r8, r3
    b886:	d304      	bcc.n	b892 <quorem+0x10a>
    b888:	e007      	b.n	b89a <quorem+0x112>
    b88a:	4598      	cmp	r8, r3
    b88c:	f104 34ff 	add.w	r4, r4, #4294967295
    b890:	d203      	bcs.n	b89a <quorem+0x112>
    b892:	f853 2904 	ldr.w	r2, [r3], #-4
    b896:	2a00      	cmp	r2, #0
    b898:	d0f7      	beq.n	b88a <quorem+0x102>
    b89a:	f8c9 4010 	str.w	r4, [r9, #16]
    b89e:	4630      	mov	r0, r6
    b8a0:	b003      	add	sp, #12
    b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8a6:	2000      	movs	r0, #0
    b8a8:	b003      	add	sp, #12
    b8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8ae:	bf00      	nop

0000b8b0 <_dtoa_r>:
    b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8b4:	ed2d 8b02 	vpush	{d8}
    b8b8:	b08f      	sub	sp, #60	; 0x3c
    b8ba:	ed8d 0b02 	vstr	d0, [sp, #8]
    b8be:	9101      	str	r1, [sp, #4]
    b8c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    b8c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b8c4:	9305      	str	r3, [sp, #20]
    b8c6:	ec57 6b10 	vmov	r6, r7, d0
    b8ca:	4604      	mov	r4, r0
    b8cc:	4693      	mov	fp, r2
    b8ce:	b141      	cbz	r1, b8e2 <_dtoa_r+0x32>
    b8d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    b8d2:	604a      	str	r2, [r1, #4]
    b8d4:	2301      	movs	r3, #1
    b8d6:	4093      	lsls	r3, r2
    b8d8:	608b      	str	r3, [r1, #8]
    b8da:	f7fd fc35 	bl	9148 <_Bfree>
    b8de:	2300      	movs	r3, #0
    b8e0:	63a3      	str	r3, [r4, #56]	; 0x38
    b8e2:	f1b7 0800 	subs.w	r8, r7, #0
    b8e6:	bfb4      	ite	lt
    b8e8:	2301      	movlt	r3, #1
    b8ea:	2300      	movge	r3, #0
    b8ec:	602b      	str	r3, [r5, #0]
    b8ee:	4bbe      	ldr	r3, [pc, #760]	; (bbe8 <_dtoa_r+0x338>)
    b8f0:	bfbc      	itt	lt
    b8f2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    b8f6:	f8cd 800c 	strlt.w	r8, [sp, #12]
    b8fa:	ea33 0308 	bics.w	r3, r3, r8
    b8fe:	f000 809f 	beq.w	ba40 <_dtoa_r+0x190>
    b902:	ed9d 8b02 	vldr	d8, [sp, #8]
    b906:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b90e:	d111      	bne.n	b934 <_dtoa_r+0x84>
    b910:	9a05      	ldr	r2, [sp, #20]
    b912:	2301      	movs	r3, #1
    b914:	6013      	str	r3, [r2, #0]
    b916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b918:	2b00      	cmp	r3, #0
    b91a:	f000 823f 	beq.w	bd9c <_dtoa_r+0x4ec>
    b91e:	4bb3      	ldr	r3, [pc, #716]	; (bbec <_dtoa_r+0x33c>)
    b920:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b922:	6013      	str	r3, [r2, #0]
    b924:	3b01      	subs	r3, #1
    b926:	9300      	str	r3, [sp, #0]
    b928:	9800      	ldr	r0, [sp, #0]
    b92a:	b00f      	add	sp, #60	; 0x3c
    b92c:	ecbd 8b02 	vpop	{d8}
    b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b934:	aa0c      	add	r2, sp, #48	; 0x30
    b936:	a90d      	add	r1, sp, #52	; 0x34
    b938:	4620      	mov	r0, r4
    b93a:	eeb0 0b48 	vmov.f64	d0, d8
    b93e:	f7fd ff2f 	bl	97a0 <__d2b>
    b942:	ea5f 5318 	movs.w	r3, r8, lsr #20
    b946:	4605      	mov	r5, r0
    b948:	f040 8092 	bne.w	ba70 <_dtoa_r+0x1c0>
    b94c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    b950:	440b      	add	r3, r1
    b952:	f203 4232 	addw	r2, r3, #1074	; 0x432
    b956:	2a20      	cmp	r2, #32
    b958:	f340 82fa 	ble.w	bf50 <_dtoa_r+0x6a0>
    b95c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    b960:	fa08 f802 	lsl.w	r8, r8, r2
    b964:	f203 4212 	addw	r2, r3, #1042	; 0x412
    b968:	40d6      	lsrs	r6, r2
    b96a:	ea48 0206 	orr.w	r2, r8, r6
    b96e:	ee07 2a10 	vmov	s14, r2
    b972:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    b976:	1e58      	subs	r0, r3, #1
    b978:	ee17 6a90 	vmov	r6, s15
    b97c:	ec53 2b17 	vmov	r2, r3, d7
    b980:	f04f 0a01 	mov.w	sl, #1
    b984:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    b988:	ed9f 3b91 	vldr	d3, [pc, #580]	; bbd0 <_dtoa_r+0x320>
    b98c:	ed9f 7b92 	vldr	d7, [pc, #584]	; bbd8 <_dtoa_r+0x328>
    b990:	ed9f 5b93 	vldr	d5, [pc, #588]	; bbe0 <_dtoa_r+0x330>
    b994:	ee06 0a90 	vmov	s13, r0
    b998:	ec43 2b12 	vmov	d2, r2, r3
    b99c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    b9a0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b9a4:	ee32 6b46 	vsub.f64	d6, d2, d6
    b9a8:	eea6 7b03 	vfma.f64	d7, d6, d3
    b9ac:	eea4 7b05 	vfma.f64	d7, d4, d5
    b9b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b9b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9bc:	ee16 7a90 	vmov	r7, s13
    b9c0:	d508      	bpl.n	b9d4 <_dtoa_r+0x124>
    b9c2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    b9c6:	eeb4 6b47 	vcmp.f64	d6, d7
    b9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9ce:	bf18      	it	ne
    b9d0:	f107 37ff 	addne.w	r7, r7, #4294967295
    b9d4:	2f16      	cmp	r7, #22
    b9d6:	f200 8145 	bhi.w	bc64 <_dtoa_r+0x3b4>
    b9da:	4b85      	ldr	r3, [pc, #532]	; (bbf0 <_dtoa_r+0x340>)
    b9dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b9e0:	ed93 7b00 	vldr	d7, [r3]
    b9e4:	eeb4 8bc7 	vcmpe.f64	d8, d7
    b9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9ec:	d557      	bpl.n	ba9e <_dtoa_r+0x1ee>
    b9ee:	1a09      	subs	r1, r1, r0
    b9f0:	2300      	movs	r3, #0
    b9f2:	f1b1 0801 	subs.w	r8, r1, #1
    b9f6:	f107 37ff 	add.w	r7, r7, #4294967295
    b9fa:	930a      	str	r3, [sp, #40]	; 0x28
    b9fc:	f100 8139 	bmi.w	bc72 <_dtoa_r+0x3c2>
    ba00:	2300      	movs	r3, #0
    ba02:	9306      	str	r3, [sp, #24]
    ba04:	2f00      	cmp	r7, #0
    ba06:	da52      	bge.n	baae <_dtoa_r+0x1fe>
    ba08:	9b06      	ldr	r3, [sp, #24]
    ba0a:	9704      	str	r7, [sp, #16]
    ba0c:	1bdb      	subs	r3, r3, r7
    ba0e:	9306      	str	r3, [sp, #24]
    ba10:	427b      	negs	r3, r7
    ba12:	9308      	str	r3, [sp, #32]
    ba14:	9b01      	ldr	r3, [sp, #4]
    ba16:	2b09      	cmp	r3, #9
    ba18:	f04f 0700 	mov.w	r7, #0
    ba1c:	d84e      	bhi.n	babc <_dtoa_r+0x20c>
    ba1e:	2b05      	cmp	r3, #5
    ba20:	f340 829d 	ble.w	bf5e <_dtoa_r+0x6ae>
    ba24:	3b04      	subs	r3, #4
    ba26:	9301      	str	r3, [sp, #4]
    ba28:	2600      	movs	r6, #0
    ba2a:	9b01      	ldr	r3, [sp, #4]
    ba2c:	1e9a      	subs	r2, r3, #2
    ba2e:	2a03      	cmp	r2, #3
    ba30:	f200 8125 	bhi.w	bc7e <_dtoa_r+0x3ce>
    ba34:	e8df f012 	tbh	[pc, r2, lsl #1]
    ba38:	03a703aa 	.word	0x03a703aa
    ba3c:	037e039d 	.word	0x037e039d
    ba40:	9a05      	ldr	r2, [sp, #20]
    ba42:	f3c8 0813 	ubfx	r8, r8, #0, #20
    ba46:	f242 730f 	movw	r3, #9999	; 0x270f
    ba4a:	ea58 0806 	orrs.w	r8, r8, r6
    ba4e:	6013      	str	r3, [r2, #0]
    ba50:	d11e      	bne.n	ba90 <_dtoa_r+0x1e0>
    ba52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ba54:	2b00      	cmp	r3, #0
    ba56:	f000 8591 	beq.w	c57c <_dtoa_r+0xccc>
    ba5a:	4b66      	ldr	r3, [pc, #408]	; (bbf4 <_dtoa_r+0x344>)
    ba5c:	9300      	str	r3, [sp, #0]
    ba5e:	3308      	adds	r3, #8
    ba60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ba62:	9800      	ldr	r0, [sp, #0]
    ba64:	6013      	str	r3, [r2, #0]
    ba66:	b00f      	add	sp, #60	; 0x3c
    ba68:	ecbd 8b02 	vpop	{d8}
    ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba70:	ee18 6a90 	vmov	r6, s17
    ba74:	f3c6 0613 	ubfx	r6, r6, #0, #20
    ba78:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    ba7c:	ec53 2b18 	vmov	r2, r3, d8
    ba80:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    ba84:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba86:	f04f 0a00 	mov.w	sl, #0
    ba8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ba8e:	e77b      	b.n	b988 <_dtoa_r+0xd8>
    ba90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ba92:	2b00      	cmp	r3, #0
    ba94:	f040 833b 	bne.w	c10e <_dtoa_r+0x85e>
    ba98:	4b57      	ldr	r3, [pc, #348]	; (bbf8 <_dtoa_r+0x348>)
    ba9a:	9300      	str	r3, [sp, #0]
    ba9c:	e744      	b.n	b928 <_dtoa_r+0x78>
    ba9e:	1a09      	subs	r1, r1, r0
    baa0:	2300      	movs	r3, #0
    baa2:	f1b1 0801 	subs.w	r8, r1, #1
    baa6:	930a      	str	r3, [sp, #40]	; 0x28
    baa8:	f100 80e3 	bmi.w	bc72 <_dtoa_r+0x3c2>
    baac:	9306      	str	r3, [sp, #24]
    baae:	2300      	movs	r3, #0
    bab0:	9308      	str	r3, [sp, #32]
    bab2:	9b01      	ldr	r3, [sp, #4]
    bab4:	9704      	str	r7, [sp, #16]
    bab6:	2b09      	cmp	r3, #9
    bab8:	44b8      	add	r8, r7
    baba:	d9b0      	bls.n	ba1e <_dtoa_r+0x16e>
    babc:	2300      	movs	r3, #0
    babe:	2601      	movs	r6, #1
    bac0:	9301      	str	r3, [sp, #4]
    bac2:	9607      	str	r6, [sp, #28]
    bac4:	f04f 39ff 	mov.w	r9, #4294967295
    bac8:	469b      	mov	fp, r3
    baca:	2100      	movs	r1, #0
    bacc:	63e1      	str	r1, [r4, #60]	; 0x3c
    bace:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    bad2:	4620      	mov	r0, r4
    bad4:	f7fd fb12 	bl	90fc <_Balloc>
    bad8:	9000      	str	r0, [sp, #0]
    bada:	2800      	cmp	r0, #0
    badc:	f000 8540 	beq.w	c560 <_dtoa_r+0xcb0>
    bae0:	9b00      	ldr	r3, [sp, #0]
    bae2:	63a3      	str	r3, [r4, #56]	; 0x38
    bae4:	f1b9 0f0e 	cmp.w	r9, #14
    bae8:	f200 80dc 	bhi.w	bca4 <_dtoa_r+0x3f4>
    baec:	2e00      	cmp	r6, #0
    baee:	f000 80d9 	beq.w	bca4 <_dtoa_r+0x3f4>
    baf2:	9b04      	ldr	r3, [sp, #16]
    baf4:	2b00      	cmp	r3, #0
    baf6:	f340 83de 	ble.w	c2b6 <_dtoa_r+0xa06>
    bafa:	4a3d      	ldr	r2, [pc, #244]	; (bbf0 <_dtoa_r+0x340>)
    bafc:	f003 010f 	and.w	r1, r3, #15
    bb00:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    bb04:	ed92 7b00 	vldr	d7, [r2]
    bb08:	111a      	asrs	r2, r3, #4
    bb0a:	05db      	lsls	r3, r3, #23
    bb0c:	f140 8382 	bpl.w	c214 <_dtoa_r+0x964>
    bb10:	493a      	ldr	r1, [pc, #232]	; (bbfc <_dtoa_r+0x34c>)
    bb12:	ed91 6b08 	vldr	d6, [r1, #32]
    bb16:	f002 020f 	and.w	r2, r2, #15
    bb1a:	2003      	movs	r0, #3
    bb1c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    bb20:	b15a      	cbz	r2, bb3a <_dtoa_r+0x28a>
    bb22:	4936      	ldr	r1, [pc, #216]	; (bbfc <_dtoa_r+0x34c>)
    bb24:	07d6      	lsls	r6, r2, #31
    bb26:	d504      	bpl.n	bb32 <_dtoa_r+0x282>
    bb28:	ed91 6b00 	vldr	d6, [r1]
    bb2c:	3001      	adds	r0, #1
    bb2e:	ee27 7b06 	vmul.f64	d7, d7, d6
    bb32:	1052      	asrs	r2, r2, #1
    bb34:	f101 0108 	add.w	r1, r1, #8
    bb38:	d1f4      	bne.n	bb24 <_dtoa_r+0x274>
    bb3a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    bb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb40:	b13b      	cbz	r3, bb52 <_dtoa_r+0x2a2>
    bb42:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    bb46:	eeb4 6bc7 	vcmpe.f64	d6, d7
    bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb4e:	f100 84ae 	bmi.w	c4ae <_dtoa_r+0xbfe>
    bb52:	ee07 0a90 	vmov	s15, r0
    bb56:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    bb5a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    bb5e:	eea5 7b06 	vfma.f64	d7, d5, d6
    bb62:	ee17 2a90 	vmov	r2, s15
    bb66:	ec51 0b17 	vmov	r0, r1, d7
    bb6a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    bb6e:	f1b9 0f00 	cmp.w	r9, #0
    bb72:	f000 8388 	beq.w	c286 <_dtoa_r+0x9d6>
    bb76:	9e04      	ldr	r6, [sp, #16]
    bb78:	464a      	mov	r2, r9
    bb7a:	9b07      	ldr	r3, [sp, #28]
    bb7c:	2b00      	cmp	r3, #0
    bb7e:	f000 8447 	beq.w	c410 <_dtoa_r+0xb60>
    bb82:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    bb86:	4b1a      	ldr	r3, [pc, #104]	; (bbf0 <_dtoa_r+0x340>)
    bb88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    bb8c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    bb90:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    bb94:	ee36 7b47 	vsub.f64	d7, d6, d7
    bb98:	ed1c 6b02 	vldr	d6, [ip, #-8]
    bb9c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    bba0:	ec41 0b16 	vmov	d6, r0, r1
    bba4:	ee14 0a90 	vmov	r0, s9
    bba8:	ee35 5b46 	vsub.f64	d5, d5, d6
    bbac:	9900      	ldr	r1, [sp, #0]
    bbae:	eeb4 5bc7 	vcmpe.f64	d5, d7
    bbb2:	3030      	adds	r0, #48	; 0x30
    bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbb8:	f801 0b01 	strb.w	r0, [r1], #1
    bbbc:	f300 84ac 	bgt.w	c518 <_dtoa_r+0xc68>
    bbc0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    bbc4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bbc8:	f04f 0c00 	mov.w	ip, #0
    bbcc:	e031      	b.n	bc32 <_dtoa_r+0x382>
    bbce:	bf00      	nop
    bbd0:	636f4361 	.word	0x636f4361
    bbd4:	3fd287a7 	.word	0x3fd287a7
    bbd8:	8b60c8b3 	.word	0x8b60c8b3
    bbdc:	3fc68a28 	.word	0x3fc68a28
    bbe0:	509f79fb 	.word	0x509f79fb
    bbe4:	3fd34413 	.word	0x3fd34413
    bbe8:	7ff00000 	.word	0x7ff00000
    bbec:	200013cd 	.word	0x200013cd
    bbf0:	200002a8 	.word	0x200002a8
    bbf4:	20001328 	.word	0x20001328
    bbf8:	20001334 	.word	0x20001334
    bbfc:	20000280 	.word	0x20000280
    bc00:	f10c 0c01 	add.w	ip, ip, #1
    bc04:	4594      	cmp	ip, r2
    bc06:	da4d      	bge.n	bca4 <_dtoa_r+0x3f4>
    bc08:	ee27 7b04 	vmul.f64	d7, d7, d4
    bc0c:	ee25 5b04 	vmul.f64	d5, d5, d4
    bc10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    bc14:	ee16 3a90 	vmov	r3, s13
    bc18:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    bc1c:	3330      	adds	r3, #48	; 0x30
    bc1e:	ee37 7b43 	vsub.f64	d7, d7, d3
    bc22:	eeb4 7bc5 	vcmpe.f64	d7, d5
    bc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc2a:	f801 3b01 	strb.w	r3, [r1], #1
    bc2e:	f100 8473 	bmi.w	c518 <_dtoa_r+0xc68>
    bc32:	ee32 6b47 	vsub.f64	d6, d2, d7
    bc36:	eeb4 6bc5 	vcmpe.f64	d6, d5
    bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc3e:	d5df      	bpl.n	bc00 <_dtoa_r+0x350>
    bc40:	9a00      	ldr	r2, [sp, #0]
    bc42:	9604      	str	r6, [sp, #16]
    bc44:	e002      	b.n	bc4c <_dtoa_r+0x39c>
    bc46:	428a      	cmp	r2, r1
    bc48:	f000 8450 	beq.w	c4ec <_dtoa_r+0xc3c>
    bc4c:	4689      	mov	r9, r1
    bc4e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    bc52:	2b39      	cmp	r3, #57	; 0x39
    bc54:	d0f7      	beq.n	bc46 <_dtoa_r+0x396>
    bc56:	3301      	adds	r3, #1
    bc58:	b2db      	uxtb	r3, r3
    bc5a:	700b      	strb	r3, [r1, #0]
    bc5c:	9b04      	ldr	r3, [sp, #16]
    bc5e:	3301      	adds	r3, #1
    bc60:	9304      	str	r3, [sp, #16]
    bc62:	e155      	b.n	bf10 <_dtoa_r+0x660>
    bc64:	1a09      	subs	r1, r1, r0
    bc66:	2301      	movs	r3, #1
    bc68:	f1b1 0801 	subs.w	r8, r1, #1
    bc6c:	930a      	str	r3, [sp, #40]	; 0x28
    bc6e:	f57f aec7 	bpl.w	ba00 <_dtoa_r+0x150>
    bc72:	f1c1 0301 	rsb	r3, r1, #1
    bc76:	9306      	str	r3, [sp, #24]
    bc78:	f04f 0800 	mov.w	r8, #0
    bc7c:	e6c2      	b.n	ba04 <_dtoa_r+0x154>
    bc7e:	2600      	movs	r6, #0
    bc80:	63e6      	str	r6, [r4, #60]	; 0x3c
    bc82:	4631      	mov	r1, r6
    bc84:	4620      	mov	r0, r4
    bc86:	f7fd fa39 	bl	90fc <_Balloc>
    bc8a:	9000      	str	r0, [sp, #0]
    bc8c:	2800      	cmp	r0, #0
    bc8e:	f000 8467 	beq.w	c560 <_dtoa_r+0xcb0>
    bc92:	9b00      	ldr	r3, [sp, #0]
    bc94:	63a3      	str	r3, [r4, #56]	; 0x38
    bc96:	f04f 33ff 	mov.w	r3, #4294967295
    bc9a:	930b      	str	r3, [sp, #44]	; 0x2c
    bc9c:	4699      	mov	r9, r3
    bc9e:	2301      	movs	r3, #1
    bca0:	46b3      	mov	fp, r6
    bca2:	9307      	str	r3, [sp, #28]
    bca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bca6:	2a00      	cmp	r2, #0
    bca8:	db55      	blt.n	bd56 <_dtoa_r+0x4a6>
    bcaa:	9904      	ldr	r1, [sp, #16]
    bcac:	290e      	cmp	r1, #14
    bcae:	dc52      	bgt.n	bd56 <_dtoa_r+0x4a6>
    bcb0:	4bb7      	ldr	r3, [pc, #732]	; (bf90 <_dtoa_r+0x6e0>)
    bcb2:	f1bb 0f00 	cmp.w	fp, #0
    bcb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    bcba:	ed93 6b00 	vldr	d6, [r3]
    bcbe:	da15      	bge.n	bcec <_dtoa_r+0x43c>
    bcc0:	f1b9 0f00 	cmp.w	r9, #0
    bcc4:	dc12      	bgt.n	bcec <_dtoa_r+0x43c>
    bcc6:	f040 82f2 	bne.w	c2ae <_dtoa_r+0x9fe>
    bcca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    bcce:	ee26 7b07 	vmul.f64	d7, d6, d7
    bcd2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    bcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bcda:	46ca      	mov	sl, r9
    bcdc:	464e      	mov	r6, r9
    bcde:	f200 826d 	bhi.w	c1bc <_dtoa_r+0x90c>
    bce2:	f8dd 8000 	ldr.w	r8, [sp]
    bce6:	ea6f 0b0b 	mvn.w	fp, fp
    bcea:	e270      	b.n	c1ce <_dtoa_r+0x91e>
    bcec:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bcf0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    bcf4:	9900      	ldr	r1, [sp, #0]
    bcf6:	ee17 3a10 	vmov	r3, s14
    bcfa:	f1b9 0f01 	cmp.w	r9, #1
    bcfe:	f103 0330 	add.w	r3, r3, #48	; 0x30
    bd02:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bd06:	f801 3b01 	strb.w	r3, [r1], #1
    bd0a:	eea5 8b46 	vfms.f64	d8, d5, d6
    bd0e:	f000 8334 	beq.w	c37a <_dtoa_r+0xaca>
    bd12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bd16:	2301      	movs	r3, #1
    bd18:	e011      	b.n	bd3e <_dtoa_r+0x48e>
    bd1a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bd1e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    bd22:	3301      	adds	r3, #1
    bd24:	ee17 2a10 	vmov	r2, s14
    bd28:	454b      	cmp	r3, r9
    bd2a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    bd2e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bd32:	f801 2b01 	strb.w	r2, [r1], #1
    bd36:	eea5 8b46 	vfms.f64	d8, d5, d6
    bd3a:	f000 831e 	beq.w	c37a <_dtoa_r+0xaca>
    bd3e:	ee28 8b04 	vmul.f64	d8, d8, d4
    bd42:	eeb5 8b40 	vcmp.f64	d8, #0.0
    bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bd4a:	d1e6      	bne.n	bd1a <_dtoa_r+0x46a>
    bd4c:	9b04      	ldr	r3, [sp, #16]
    bd4e:	3301      	adds	r3, #1
    bd50:	9304      	str	r3, [sp, #16]
    bd52:	4689      	mov	r9, r1
    bd54:	e0dc      	b.n	bf10 <_dtoa_r+0x660>
    bd56:	9b07      	ldr	r3, [sp, #28]
    bd58:	b343      	cbz	r3, bdac <_dtoa_r+0x4fc>
    bd5a:	9b01      	ldr	r3, [sp, #4]
    bd5c:	2b01      	cmp	r3, #1
    bd5e:	f340 8276 	ble.w	c24e <_dtoa_r+0x99e>
    bd62:	9b08      	ldr	r3, [sp, #32]
    bd64:	f109 3aff 	add.w	sl, r9, #4294967295
    bd68:	4553      	cmp	r3, sl
    bd6a:	f280 823f 	bge.w	c1ec <_dtoa_r+0x93c>
    bd6e:	9b08      	ldr	r3, [sp, #32]
    bd70:	f8cd a020 	str.w	sl, [sp, #32]
    bd74:	ebaa 0203 	sub.w	r2, sl, r3
    bd78:	4417      	add	r7, r2
    bd7a:	f04f 0a00 	mov.w	sl, #0
    bd7e:	f1b9 0f00 	cmp.w	r9, #0
    bd82:	f2c0 8325 	blt.w	c3d0 <_dtoa_r+0xb20>
    bd86:	9b06      	ldr	r3, [sp, #24]
    bd88:	9309      	str	r3, [sp, #36]	; 0x24
    bd8a:	444b      	add	r3, r9
    bd8c:	44c8      	add	r8, r9
    bd8e:	9306      	str	r3, [sp, #24]
    bd90:	2101      	movs	r1, #1
    bd92:	4620      	mov	r0, r4
    bd94:	f7fd fa84 	bl	92a0 <__i2b>
    bd98:	4606      	mov	r6, r0
    bd9a:	e00c      	b.n	bdb6 <_dtoa_r+0x506>
    bd9c:	4b7d      	ldr	r3, [pc, #500]	; (bf94 <_dtoa_r+0x6e4>)
    bd9e:	9300      	str	r3, [sp, #0]
    bda0:	9800      	ldr	r0, [sp, #0]
    bda2:	b00f      	add	sp, #60	; 0x3c
    bda4:	ecbd 8b02 	vpop	{d8}
    bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdac:	9b06      	ldr	r3, [sp, #24]
    bdae:	f8dd a020 	ldr.w	sl, [sp, #32]
    bdb2:	9e07      	ldr	r6, [sp, #28]
    bdb4:	9309      	str	r3, [sp, #36]	; 0x24
    bdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bdb8:	b16b      	cbz	r3, bdd6 <_dtoa_r+0x526>
    bdba:	f1b8 0f00 	cmp.w	r8, #0
    bdbe:	dd0a      	ble.n	bdd6 <_dtoa_r+0x526>
    bdc0:	4543      	cmp	r3, r8
    bdc2:	9906      	ldr	r1, [sp, #24]
    bdc4:	461a      	mov	r2, r3
    bdc6:	bfa8      	it	ge
    bdc8:	4642      	movge	r2, r8
    bdca:	1a89      	subs	r1, r1, r2
    bdcc:	1a9b      	subs	r3, r3, r2
    bdce:	9106      	str	r1, [sp, #24]
    bdd0:	9309      	str	r3, [sp, #36]	; 0x24
    bdd2:	eba8 0802 	sub.w	r8, r8, r2
    bdd6:	9b08      	ldr	r3, [sp, #32]
    bdd8:	b163      	cbz	r3, bdf4 <_dtoa_r+0x544>
    bdda:	9b07      	ldr	r3, [sp, #28]
    bddc:	2b00      	cmp	r3, #0
    bdde:	f000 82a7 	beq.w	c330 <_dtoa_r+0xa80>
    bde2:	f1ba 0f00 	cmp.w	sl, #0
    bde6:	f300 8204 	bgt.w	c1f2 <_dtoa_r+0x942>
    bdea:	9b08      	ldr	r3, [sp, #32]
    bdec:	ebb3 020a 	subs.w	r2, r3, sl
    bdf0:	f040 82ff 	bne.w	c3f2 <_dtoa_r+0xb42>
    bdf4:	2101      	movs	r1, #1
    bdf6:	4620      	mov	r0, r4
    bdf8:	f7fd fa52 	bl	92a0 <__i2b>
    bdfc:	2f00      	cmp	r7, #0
    bdfe:	4682      	mov	sl, r0
    be00:	f300 80af 	bgt.w	bf62 <_dtoa_r+0x6b2>
    be04:	9b01      	ldr	r3, [sp, #4]
    be06:	2b01      	cmp	r3, #1
    be08:	f340 8187 	ble.w	c11a <_dtoa_r+0x86a>
    be0c:	2300      	movs	r3, #0
    be0e:	9308      	str	r3, [sp, #32]
    be10:	2001      	movs	r0, #1
    be12:	2f00      	cmp	r7, #0
    be14:	f040 80b1 	bne.w	bf7a <_dtoa_r+0x6ca>
    be18:	4440      	add	r0, r8
    be1a:	f010 001f 	ands.w	r0, r0, #31
    be1e:	f000 817a 	beq.w	c116 <_dtoa_r+0x866>
    be22:	f1c0 0220 	rsb	r2, r0, #32
    be26:	2a04      	cmp	r2, #4
    be28:	f300 8088 	bgt.w	bf3c <_dtoa_r+0x68c>
    be2c:	f040 81f6 	bne.w	c21c <_dtoa_r+0x96c>
    be30:	9b06      	ldr	r3, [sp, #24]
    be32:	2b00      	cmp	r3, #0
    be34:	dd05      	ble.n	be42 <_dtoa_r+0x592>
    be36:	4629      	mov	r1, r5
    be38:	461a      	mov	r2, r3
    be3a:	4620      	mov	r0, r4
    be3c:	f7fd fb6c 	bl	9518 <__lshift>
    be40:	4605      	mov	r5, r0
    be42:	f1b8 0f00 	cmp.w	r8, #0
    be46:	dd05      	ble.n	be54 <_dtoa_r+0x5a4>
    be48:	4651      	mov	r1, sl
    be4a:	4642      	mov	r2, r8
    be4c:	4620      	mov	r0, r4
    be4e:	f7fd fb63 	bl	9518 <__lshift>
    be52:	4682      	mov	sl, r0
    be54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    be56:	2b00      	cmp	r3, #0
    be58:	f040 813f 	bne.w	c0da <_dtoa_r+0x82a>
    be5c:	f1b9 0f00 	cmp.w	r9, #0
    be60:	f340 8125 	ble.w	c0ae <_dtoa_r+0x7fe>
    be64:	9b07      	ldr	r3, [sp, #28]
    be66:	2b00      	cmp	r3, #0
    be68:	f040 80a3 	bne.w	bfb2 <_dtoa_r+0x702>
    be6c:	9b04      	ldr	r3, [sp, #16]
    be6e:	3301      	adds	r3, #1
    be70:	9304      	str	r3, [sp, #16]
    be72:	f8dd 8000 	ldr.w	r8, [sp]
    be76:	2701      	movs	r7, #1
    be78:	e007      	b.n	be8a <_dtoa_r+0x5da>
    be7a:	4629      	mov	r1, r5
    be7c:	2300      	movs	r3, #0
    be7e:	220a      	movs	r2, #10
    be80:	4620      	mov	r0, r4
    be82:	f7fd f96b 	bl	915c <__multadd>
    be86:	3701      	adds	r7, #1
    be88:	4605      	mov	r5, r0
    be8a:	4651      	mov	r1, sl
    be8c:	4628      	mov	r0, r5
    be8e:	f7ff fc7b 	bl	b788 <quorem>
    be92:	45b9      	cmp	r9, r7
    be94:	f100 0030 	add.w	r0, r0, #48	; 0x30
    be98:	f808 0b01 	strb.w	r0, [r8], #1
    be9c:	dced      	bgt.n	be7a <_dtoa_r+0x5ca>
    be9e:	f1b9 0f00 	cmp.w	r9, #0
    bea2:	9a00      	ldr	r2, [sp, #0]
    bea4:	bfcc      	ite	gt
    bea6:	46cb      	movgt	fp, r9
    bea8:	f04f 0b01 	movle.w	fp, #1
    beac:	4603      	mov	r3, r0
    beae:	4493      	add	fp, r2
    beb0:	2700      	movs	r7, #0
    beb2:	4629      	mov	r1, r5
    beb4:	2201      	movs	r2, #1
    beb6:	4620      	mov	r0, r4
    beb8:	9301      	str	r3, [sp, #4]
    beba:	f7fd fb2d 	bl	9518 <__lshift>
    bebe:	4651      	mov	r1, sl
    bec0:	4605      	mov	r5, r0
    bec2:	f7fd fba1 	bl	9608 <__mcmp>
    bec6:	2800      	cmp	r0, #0
    bec8:	f340 81af 	ble.w	c22a <_dtoa_r+0x97a>
    becc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    bed0:	9a00      	ldr	r2, [sp, #0]
    bed2:	f10b 3bff 	add.w	fp, fp, #4294967295
    bed6:	e004      	b.n	bee2 <_dtoa_r+0x632>
    bed8:	455a      	cmp	r2, fp
    beda:	f000 81b1 	beq.w	c240 <_dtoa_r+0x990>
    bede:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    bee2:	2b39      	cmp	r3, #57	; 0x39
    bee4:	f10b 0901 	add.w	r9, fp, #1
    bee8:	d0f6      	beq.n	bed8 <_dtoa_r+0x628>
    beea:	3301      	adds	r3, #1
    beec:	f88b 3000 	strb.w	r3, [fp]
    bef0:	4651      	mov	r1, sl
    bef2:	4620      	mov	r0, r4
    bef4:	f7fd f928 	bl	9148 <_Bfree>
    bef8:	b156      	cbz	r6, bf10 <_dtoa_r+0x660>
    befa:	b12f      	cbz	r7, bf08 <_dtoa_r+0x658>
    befc:	42b7      	cmp	r7, r6
    befe:	d003      	beq.n	bf08 <_dtoa_r+0x658>
    bf00:	4639      	mov	r1, r7
    bf02:	4620      	mov	r0, r4
    bf04:	f7fd f920 	bl	9148 <_Bfree>
    bf08:	4631      	mov	r1, r6
    bf0a:	4620      	mov	r0, r4
    bf0c:	f7fd f91c 	bl	9148 <_Bfree>
    bf10:	4629      	mov	r1, r5
    bf12:	4620      	mov	r0, r4
    bf14:	f7fd f918 	bl	9148 <_Bfree>
    bf18:	2300      	movs	r3, #0
    bf1a:	f889 3000 	strb.w	r3, [r9]
    bf1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bf22:	601a      	str	r2, [r3, #0]
    bf24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bf26:	2b00      	cmp	r3, #0
    bf28:	f43f acfe 	beq.w	b928 <_dtoa_r+0x78>
    bf2c:	9800      	ldr	r0, [sp, #0]
    bf2e:	f8c3 9000 	str.w	r9, [r3]
    bf32:	b00f      	add	sp, #60	; 0x3c
    bf34:	ecbd 8b02 	vpop	{d8}
    bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf3c:	f1c0 001c 	rsb	r0, r0, #28
    bf40:	9b06      	ldr	r3, [sp, #24]
    bf42:	4403      	add	r3, r0
    bf44:	9306      	str	r3, [sp, #24]
    bf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf48:	4403      	add	r3, r0
    bf4a:	9309      	str	r3, [sp, #36]	; 0x24
    bf4c:	4480      	add	r8, r0
    bf4e:	e76f      	b.n	be30 <_dtoa_r+0x580>
    bf50:	f1c2 0220 	rsb	r2, r2, #32
    bf54:	fa06 f202 	lsl.w	r2, r6, r2
    bf58:	ee07 2a10 	vmov	s14, r2
    bf5c:	e509      	b.n	b972 <_dtoa_r+0xc2>
    bf5e:	2601      	movs	r6, #1
    bf60:	e563      	b.n	ba2a <_dtoa_r+0x17a>
    bf62:	4601      	mov	r1, r0
    bf64:	463a      	mov	r2, r7
    bf66:	4620      	mov	r0, r4
    bf68:	f7fd fa76 	bl	9458 <__pow5mult>
    bf6c:	9b01      	ldr	r3, [sp, #4]
    bf6e:	2b01      	cmp	r3, #1
    bf70:	4682      	mov	sl, r0
    bf72:	f340 81c5 	ble.w	c300 <_dtoa_r+0xa50>
    bf76:	2300      	movs	r3, #0
    bf78:	9308      	str	r3, [sp, #32]
    bf7a:	f8da 2010 	ldr.w	r2, [sl, #16]
    bf7e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    bf82:	6910      	ldr	r0, [r2, #16]
    bf84:	f7fd f93c 	bl	9200 <__hi0bits>
    bf88:	f1c0 0020 	rsb	r0, r0, #32
    bf8c:	e744      	b.n	be18 <_dtoa_r+0x568>
    bf8e:	bf00      	nop
    bf90:	200002a8 	.word	0x200002a8
    bf94:	200013cc 	.word	0x200013cc
    bf98:	4631      	mov	r1, r6
    bf9a:	2300      	movs	r3, #0
    bf9c:	220a      	movs	r2, #10
    bf9e:	4620      	mov	r0, r4
    bfa0:	f7fd f8dc 	bl	915c <__multadd>
    bfa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	4606      	mov	r6, r0
    bfaa:	f340 82ce 	ble.w	c54a <_dtoa_r+0xc9a>
    bfae:	9704      	str	r7, [sp, #16]
    bfb0:	4699      	mov	r9, r3
    bfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	dd05      	ble.n	bfc4 <_dtoa_r+0x714>
    bfb8:	4631      	mov	r1, r6
    bfba:	461a      	mov	r2, r3
    bfbc:	4620      	mov	r0, r4
    bfbe:	f7fd faab 	bl	9518 <__lshift>
    bfc2:	4606      	mov	r6, r0
    bfc4:	9b08      	ldr	r3, [sp, #32]
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	f040 81eb 	bne.w	c3a2 <_dtoa_r+0xaf2>
    bfcc:	46b0      	mov	r8, r6
    bfce:	9b02      	ldr	r3, [sp, #8]
    bfd0:	9f00      	ldr	r7, [sp, #0]
    bfd2:	f003 0201 	and.w	r2, r3, #1
    bfd6:	1e7b      	subs	r3, r7, #1
    bfd8:	444b      	add	r3, r9
    bfda:	9308      	str	r3, [sp, #32]
    bfdc:	9b01      	ldr	r3, [sp, #4]
    bfde:	920a      	str	r2, [sp, #40]	; 0x28
    bfe0:	4313      	orrs	r3, r2
    bfe2:	9309      	str	r3, [sp, #36]	; 0x24
    bfe4:	4651      	mov	r1, sl
    bfe6:	4628      	mov	r0, r5
    bfe8:	f7ff fbce 	bl	b788 <quorem>
    bfec:	4631      	mov	r1, r6
    bfee:	4683      	mov	fp, r0
    bff0:	4628      	mov	r0, r5
    bff2:	f7fd fb09 	bl	9608 <__mcmp>
    bff6:	4642      	mov	r2, r8
    bff8:	4651      	mov	r1, sl
    bffa:	4681      	mov	r9, r0
    bffc:	4620      	mov	r0, r4
    bffe:	f7fd fb25 	bl	964c <__mdiff>
    c002:	68c2      	ldr	r2, [r0, #12]
    c004:	4601      	mov	r1, r0
    c006:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    c00a:	2a00      	cmp	r2, #0
    c00c:	d142      	bne.n	c094 <_dtoa_r+0x7e4>
    c00e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    c012:	4628      	mov	r0, r5
    c014:	f7fd faf8 	bl	9608 <__mcmp>
    c018:	9906      	ldr	r1, [sp, #24]
    c01a:	9002      	str	r0, [sp, #8]
    c01c:	4620      	mov	r0, r4
    c01e:	f7fd f893 	bl	9148 <_Bfree>
    c022:	9a02      	ldr	r2, [sp, #8]
    c024:	9b07      	ldr	r3, [sp, #28]
    c026:	b91a      	cbnz	r2, c030 <_dtoa_r+0x780>
    c028:	9909      	ldr	r1, [sp, #36]	; 0x24
    c02a:	2900      	cmp	r1, #0
    c02c:	f000 827e 	beq.w	c52c <_dtoa_r+0xc7c>
    c030:	f1b9 0f00 	cmp.w	r9, #0
    c034:	f2c0 8183 	blt.w	c33e <_dtoa_r+0xa8e>
    c038:	9901      	ldr	r1, [sp, #4]
    c03a:	ea49 0901 	orr.w	r9, r9, r1
    c03e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c040:	ea51 0909 	orrs.w	r9, r1, r9
    c044:	f000 817b 	beq.w	c33e <_dtoa_r+0xa8e>
    c048:	2a00      	cmp	r2, #0
    c04a:	f300 81c6 	bgt.w	c3da <_dtoa_r+0xb2a>
    c04e:	9a08      	ldr	r2, [sp, #32]
    c050:	703b      	strb	r3, [r7, #0]
    c052:	f107 0901 	add.w	r9, r7, #1
    c056:	4297      	cmp	r7, r2
    c058:	46cb      	mov	fp, r9
    c05a:	f000 81c4 	beq.w	c3e6 <_dtoa_r+0xb36>
    c05e:	4629      	mov	r1, r5
    c060:	2300      	movs	r3, #0
    c062:	220a      	movs	r2, #10
    c064:	4620      	mov	r0, r4
    c066:	f7fd f879 	bl	915c <__multadd>
    c06a:	4546      	cmp	r6, r8
    c06c:	4605      	mov	r5, r0
    c06e:	4631      	mov	r1, r6
    c070:	f04f 0300 	mov.w	r3, #0
    c074:	f04f 020a 	mov.w	r2, #10
    c078:	4620      	mov	r0, r4
    c07a:	d012      	beq.n	c0a2 <_dtoa_r+0x7f2>
    c07c:	f7fd f86e 	bl	915c <__multadd>
    c080:	4641      	mov	r1, r8
    c082:	4606      	mov	r6, r0
    c084:	2300      	movs	r3, #0
    c086:	220a      	movs	r2, #10
    c088:	4620      	mov	r0, r4
    c08a:	f7fd f867 	bl	915c <__multadd>
    c08e:	464f      	mov	r7, r9
    c090:	4680      	mov	r8, r0
    c092:	e7a7      	b.n	bfe4 <_dtoa_r+0x734>
    c094:	4620      	mov	r0, r4
    c096:	9302      	str	r3, [sp, #8]
    c098:	f7fd f856 	bl	9148 <_Bfree>
    c09c:	9b02      	ldr	r3, [sp, #8]
    c09e:	2201      	movs	r2, #1
    c0a0:	e7c6      	b.n	c030 <_dtoa_r+0x780>
    c0a2:	f7fd f85b 	bl	915c <__multadd>
    c0a6:	464f      	mov	r7, r9
    c0a8:	4606      	mov	r6, r0
    c0aa:	4680      	mov	r8, r0
    c0ac:	e79a      	b.n	bfe4 <_dtoa_r+0x734>
    c0ae:	9b01      	ldr	r3, [sp, #4]
    c0b0:	2b02      	cmp	r3, #2
    c0b2:	dc71      	bgt.n	c198 <_dtoa_r+0x8e8>
    c0b4:	9b07      	ldr	r3, [sp, #28]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	f47f af7b 	bne.w	bfb2 <_dtoa_r+0x702>
    c0bc:	9b04      	ldr	r3, [sp, #16]
    c0be:	4651      	mov	r1, sl
    c0c0:	3301      	adds	r3, #1
    c0c2:	4628      	mov	r0, r5
    c0c4:	9304      	str	r3, [sp, #16]
    c0c6:	f7ff fb5f 	bl	b788 <quorem>
    c0ca:	f8dd b000 	ldr.w	fp, [sp]
    c0ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
    c0d2:	f80b 3b01 	strb.w	r3, [fp], #1
    c0d6:	2700      	movs	r7, #0
    c0d8:	e6eb      	b.n	beb2 <_dtoa_r+0x602>
    c0da:	4651      	mov	r1, sl
    c0dc:	4628      	mov	r0, r5
    c0de:	f7fd fa93 	bl	9608 <__mcmp>
    c0e2:	2800      	cmp	r0, #0
    c0e4:	f6bf aeba 	bge.w	be5c <_dtoa_r+0x5ac>
    c0e8:	4629      	mov	r1, r5
    c0ea:	2300      	movs	r3, #0
    c0ec:	220a      	movs	r2, #10
    c0ee:	4620      	mov	r0, r4
    c0f0:	f7fd f834 	bl	915c <__multadd>
    c0f4:	9b04      	ldr	r3, [sp, #16]
    c0f6:	1e5f      	subs	r7, r3, #1
    c0f8:	9b07      	ldr	r3, [sp, #28]
    c0fa:	4605      	mov	r5, r0
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	f47f af4b 	bne.w	bf98 <_dtoa_r+0x6e8>
    c102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c104:	2b00      	cmp	r3, #0
    c106:	f340 8218 	ble.w	c53a <_dtoa_r+0xc8a>
    c10a:	4699      	mov	r9, r3
    c10c:	e6b1      	b.n	be72 <_dtoa_r+0x5c2>
    c10e:	4bbc      	ldr	r3, [pc, #752]	; (c400 <_dtoa_r+0xb50>)
    c110:	9300      	str	r3, [sp, #0]
    c112:	3303      	adds	r3, #3
    c114:	e4a4      	b.n	ba60 <_dtoa_r+0x1b0>
    c116:	201c      	movs	r0, #28
    c118:	e712      	b.n	bf40 <_dtoa_r+0x690>
    c11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c11e:	2800      	cmp	r0, #0
    c120:	f47f ae74 	bne.w	be0c <_dtoa_r+0x55c>
    c124:	f3c1 0213 	ubfx	r2, r1, #0, #20
    c128:	2a00      	cmp	r2, #0
    c12a:	f000 80f4 	beq.w	c316 <_dtoa_r+0xa66>
    c12e:	9b02      	ldr	r3, [sp, #8]
    c130:	9308      	str	r3, [sp, #32]
    c132:	e66d      	b.n	be10 <_dtoa_r+0x560>
    c134:	2301      	movs	r3, #1
    c136:	9307      	str	r3, [sp, #28]
    c138:	9b04      	ldr	r3, [sp, #16]
    c13a:	445b      	add	r3, fp
    c13c:	f103 0901 	add.w	r9, r3, #1
    c140:	f1b9 0f01 	cmp.w	r9, #1
    c144:	46cc      	mov	ip, r9
    c146:	930b      	str	r3, [sp, #44]	; 0x2c
    c148:	bfb8      	it	lt
    c14a:	f04f 0c01 	movlt.w	ip, #1
    c14e:	2100      	movs	r1, #0
    c150:	f1bc 0f17 	cmp.w	ip, #23
    c154:	63e1      	str	r1, [r4, #60]	; 0x3c
    c156:	f77f acbc 	ble.w	bad2 <_dtoa_r+0x222>
    c15a:	2001      	movs	r0, #1
    c15c:	2204      	movs	r2, #4
    c15e:	0052      	lsls	r2, r2, #1
    c160:	f102 0314 	add.w	r3, r2, #20
    c164:	4563      	cmp	r3, ip
    c166:	4601      	mov	r1, r0
    c168:	f100 0001 	add.w	r0, r0, #1
    c16c:	d9f7      	bls.n	c15e <_dtoa_r+0x8ae>
    c16e:	63e1      	str	r1, [r4, #60]	; 0x3c
    c170:	e4af      	b.n	bad2 <_dtoa_r+0x222>
    c172:	2301      	movs	r3, #1
    c174:	9307      	str	r3, [sp, #28]
    c176:	f1bb 0f00 	cmp.w	fp, #0
    c17a:	dd52      	ble.n	c222 <_dtoa_r+0x972>
    c17c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    c180:	46d9      	mov	r9, fp
    c182:	46dc      	mov	ip, fp
    c184:	e7e3      	b.n	c14e <_dtoa_r+0x89e>
    c186:	2300      	movs	r3, #0
    c188:	9307      	str	r3, [sp, #28]
    c18a:	e7d5      	b.n	c138 <_dtoa_r+0x888>
    c18c:	2300      	movs	r3, #0
    c18e:	9307      	str	r3, [sp, #28]
    c190:	e7f1      	b.n	c176 <_dtoa_r+0x8c6>
    c192:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c196:	9704      	str	r7, [sp, #16]
    c198:	f1b9 0f00 	cmp.w	r9, #0
    c19c:	f47f ada1 	bne.w	bce2 <_dtoa_r+0x432>
    c1a0:	4651      	mov	r1, sl
    c1a2:	464b      	mov	r3, r9
    c1a4:	2205      	movs	r2, #5
    c1a6:	4620      	mov	r0, r4
    c1a8:	f7fc ffd8 	bl	915c <__multadd>
    c1ac:	4601      	mov	r1, r0
    c1ae:	4682      	mov	sl, r0
    c1b0:	4628      	mov	r0, r5
    c1b2:	f7fd fa29 	bl	9608 <__mcmp>
    c1b6:	2800      	cmp	r0, #0
    c1b8:	f77f ad93 	ble.w	bce2 <_dtoa_r+0x432>
    c1bc:	9b04      	ldr	r3, [sp, #16]
    c1be:	f103 0b01 	add.w	fp, r3, #1
    c1c2:	9b00      	ldr	r3, [sp, #0]
    c1c4:	2231      	movs	r2, #49	; 0x31
    c1c6:	4698      	mov	r8, r3
    c1c8:	f803 2b01 	strb.w	r2, [r3], #1
    c1cc:	9300      	str	r3, [sp, #0]
    c1ce:	4651      	mov	r1, sl
    c1d0:	4620      	mov	r0, r4
    c1d2:	f7fc ffb9 	bl	9148 <_Bfree>
    c1d6:	f10b 0301 	add.w	r3, fp, #1
    c1da:	f8dd 9000 	ldr.w	r9, [sp]
    c1de:	9304      	str	r3, [sp, #16]
    c1e0:	f8cd 8000 	str.w	r8, [sp]
    c1e4:	2e00      	cmp	r6, #0
    c1e6:	f47f ae8f 	bne.w	bf08 <_dtoa_r+0x658>
    c1ea:	e691      	b.n	bf10 <_dtoa_r+0x660>
    c1ec:	eba3 0a0a 	sub.w	sl, r3, sl
    c1f0:	e5c5      	b.n	bd7e <_dtoa_r+0x4ce>
    c1f2:	4631      	mov	r1, r6
    c1f4:	4652      	mov	r2, sl
    c1f6:	4620      	mov	r0, r4
    c1f8:	f7fd f92e 	bl	9458 <__pow5mult>
    c1fc:	462a      	mov	r2, r5
    c1fe:	4601      	mov	r1, r0
    c200:	4606      	mov	r6, r0
    c202:	4620      	mov	r0, r4
    c204:	f7fd f87a 	bl	92fc <__multiply>
    c208:	4629      	mov	r1, r5
    c20a:	4605      	mov	r5, r0
    c20c:	4620      	mov	r0, r4
    c20e:	f7fc ff9b 	bl	9148 <_Bfree>
    c212:	e5ea      	b.n	bdea <_dtoa_r+0x53a>
    c214:	2002      	movs	r0, #2
    c216:	eeb0 5b48 	vmov.f64	d5, d8
    c21a:	e481      	b.n	bb20 <_dtoa_r+0x270>
    c21c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    c220:	e68e      	b.n	bf40 <_dtoa_r+0x690>
    c222:	f04f 0b01 	mov.w	fp, #1
    c226:	46d9      	mov	r9, fp
    c228:	e44f      	b.n	baca <_dtoa_r+0x21a>
    c22a:	d103      	bne.n	c234 <_dtoa_r+0x984>
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	07db      	lsls	r3, r3, #31
    c230:	f53f ae4c 	bmi.w	becc <_dtoa_r+0x61c>
    c234:	46d9      	mov	r9, fp
    c236:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c23a:	2b30      	cmp	r3, #48	; 0x30
    c23c:	d0fa      	beq.n	c234 <_dtoa_r+0x984>
    c23e:	e657      	b.n	bef0 <_dtoa_r+0x640>
    c240:	9b04      	ldr	r3, [sp, #16]
    c242:	9a00      	ldr	r2, [sp, #0]
    c244:	3301      	adds	r3, #1
    c246:	9304      	str	r3, [sp, #16]
    c248:	2331      	movs	r3, #49	; 0x31
    c24a:	7013      	strb	r3, [r2, #0]
    c24c:	e650      	b.n	bef0 <_dtoa_r+0x640>
    c24e:	f1ba 0f00 	cmp.w	sl, #0
    c252:	f000 8123 	beq.w	c49c <_dtoa_r+0xbec>
    c256:	f202 4233 	addw	r2, r2, #1075	; 0x433
    c25a:	9b06      	ldr	r3, [sp, #24]
    c25c:	9309      	str	r3, [sp, #36]	; 0x24
    c25e:	4413      	add	r3, r2
    c260:	f8dd a020 	ldr.w	sl, [sp, #32]
    c264:	9306      	str	r3, [sp, #24]
    c266:	4490      	add	r8, r2
    c268:	e592      	b.n	bd90 <_dtoa_r+0x4e0>
    c26a:	ee07 0a90 	vmov	s15, r0
    c26e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    c272:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    c276:	eea6 5b07 	vfma.f64	d5, d6, d7
    c27a:	ee15 2a90 	vmov	r2, s11
    c27e:	ec51 0b15 	vmov	r0, r1, d5
    c282:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    c286:	ec41 0b15 	vmov	d5, r0, r1
    c28a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    c28e:	ee36 7b47 	vsub.f64	d7, d6, d7
    c292:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c29a:	f300 8137 	bgt.w	c50c <_dtoa_r+0xc5c>
    c29e:	eeb1 5b45 	vneg.f64	d5, d5
    c2a2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c2aa:	f57f acfb 	bpl.w	bca4 <_dtoa_r+0x3f4>
    c2ae:	f04f 0a00 	mov.w	sl, #0
    c2b2:	4656      	mov	r6, sl
    c2b4:	e515      	b.n	bce2 <_dtoa_r+0x432>
    c2b6:	f000 80f5 	beq.w	c4a4 <_dtoa_r+0xbf4>
    c2ba:	9b04      	ldr	r3, [sp, #16]
    c2bc:	4951      	ldr	r1, [pc, #324]	; (c404 <_dtoa_r+0xb54>)
    c2be:	425a      	negs	r2, r3
    c2c0:	f002 000f 	and.w	r0, r2, #15
    c2c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c2c8:	ed91 6b00 	vldr	d6, [r1]
    c2cc:	1112      	asrs	r2, r2, #4
    c2ce:	ee28 6b06 	vmul.f64	d6, d8, d6
    c2d2:	f000 8142 	beq.w	c55a <_dtoa_r+0xcaa>
    c2d6:	eeb0 7b46 	vmov.f64	d7, d6
    c2da:	494b      	ldr	r1, [pc, #300]	; (c408 <_dtoa_r+0xb58>)
    c2dc:	2600      	movs	r6, #0
    c2de:	2002      	movs	r0, #2
    c2e0:	07d3      	lsls	r3, r2, #31
    c2e2:	d505      	bpl.n	c2f0 <_dtoa_r+0xa40>
    c2e4:	ed91 5b00 	vldr	d5, [r1]
    c2e8:	3001      	adds	r0, #1
    c2ea:	2601      	movs	r6, #1
    c2ec:	ee27 7b05 	vmul.f64	d7, d7, d5
    c2f0:	1052      	asrs	r2, r2, #1
    c2f2:	f101 0108 	add.w	r1, r1, #8
    c2f6:	d1f3      	bne.n	c2e0 <_dtoa_r+0xa30>
    c2f8:	2e00      	cmp	r6, #0
    c2fa:	fe06 6b07 	vseleq.f64	d6, d6, d7
    c2fe:	e41e      	b.n	bb3e <_dtoa_r+0x28e>
    c300:	9b02      	ldr	r3, [sp, #8]
    c302:	2b00      	cmp	r3, #0
    c304:	f47f ae37 	bne.w	bf76 <_dtoa_r+0x6c6>
    c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c30c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    c310:	2a00      	cmp	r2, #0
    c312:	f040 8137 	bne.w	c584 <_dtoa_r+0xcd4>
    c316:	4a3d      	ldr	r2, [pc, #244]	; (c40c <_dtoa_r+0xb5c>)
    c318:	400a      	ands	r2, r1
    c31a:	2a00      	cmp	r2, #0
    c31c:	f000 80fa 	beq.w	c514 <_dtoa_r+0xc64>
    c320:	9b06      	ldr	r3, [sp, #24]
    c322:	3301      	adds	r3, #1
    c324:	9306      	str	r3, [sp, #24]
    c326:	2301      	movs	r3, #1
    c328:	f108 0801 	add.w	r8, r8, #1
    c32c:	9308      	str	r3, [sp, #32]
    c32e:	e56f      	b.n	be10 <_dtoa_r+0x560>
    c330:	4629      	mov	r1, r5
    c332:	9a08      	ldr	r2, [sp, #32]
    c334:	4620      	mov	r0, r4
    c336:	f7fd f88f 	bl	9458 <__pow5mult>
    c33a:	4605      	mov	r5, r0
    c33c:	e55a      	b.n	bdf4 <_dtoa_r+0x544>
    c33e:	2a00      	cmp	r2, #0
    c340:	dd12      	ble.n	c368 <_dtoa_r+0xab8>
    c342:	4629      	mov	r1, r5
    c344:	2201      	movs	r2, #1
    c346:	4620      	mov	r0, r4
    c348:	9301      	str	r3, [sp, #4]
    c34a:	f7fd f8e5 	bl	9518 <__lshift>
    c34e:	4651      	mov	r1, sl
    c350:	4605      	mov	r5, r0
    c352:	f7fd f959 	bl	9608 <__mcmp>
    c356:	2800      	cmp	r0, #0
    c358:	9b01      	ldr	r3, [sp, #4]
    c35a:	f340 80e1 	ble.w	c520 <_dtoa_r+0xc70>
    c35e:	2b39      	cmp	r3, #57	; 0x39
    c360:	f000 80ca 	beq.w	c4f8 <_dtoa_r+0xc48>
    c364:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    c368:	46b9      	mov	r9, r7
    c36a:	f809 3b01 	strb.w	r3, [r9], #1
    c36e:	9b04      	ldr	r3, [sp, #16]
    c370:	3301      	adds	r3, #1
    c372:	4637      	mov	r7, r6
    c374:	9304      	str	r3, [sp, #16]
    c376:	4646      	mov	r6, r8
    c378:	e5ba      	b.n	bef0 <_dtoa_r+0x640>
    c37a:	ee38 8b08 	vadd.f64	d8, d8, d8
    c37e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    c382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c386:	dc0a      	bgt.n	c39e <_dtoa_r+0xaee>
    c388:	eeb4 8b46 	vcmp.f64	d8, d6
    c38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c390:	f47f acdc 	bne.w	bd4c <_dtoa_r+0x49c>
    c394:	ee17 3a10 	vmov	r3, s14
    c398:	07d8      	lsls	r0, r3, #31
    c39a:	f57f acd7 	bpl.w	bd4c <_dtoa_r+0x49c>
    c39e:	9a00      	ldr	r2, [sp, #0]
    c3a0:	e454      	b.n	bc4c <_dtoa_r+0x39c>
    c3a2:	6871      	ldr	r1, [r6, #4]
    c3a4:	4620      	mov	r0, r4
    c3a6:	f7fc fea9 	bl	90fc <_Balloc>
    c3aa:	4607      	mov	r7, r0
    c3ac:	2800      	cmp	r0, #0
    c3ae:	f000 80de 	beq.w	c56e <_dtoa_r+0xcbe>
    c3b2:	6933      	ldr	r3, [r6, #16]
    c3b4:	3302      	adds	r3, #2
    c3b6:	009a      	lsls	r2, r3, #2
    c3b8:	f106 010c 	add.w	r1, r6, #12
    c3bc:	300c      	adds	r0, #12
    c3be:	f7f9 fe1d 	bl	5ffc <memcpy>
    c3c2:	4639      	mov	r1, r7
    c3c4:	2201      	movs	r2, #1
    c3c6:	4620      	mov	r0, r4
    c3c8:	f7fd f8a6 	bl	9518 <__lshift>
    c3cc:	4680      	mov	r8, r0
    c3ce:	e5fe      	b.n	bfce <_dtoa_r+0x71e>
    c3d0:	9b06      	ldr	r3, [sp, #24]
    c3d2:	eba3 0309 	sub.w	r3, r3, r9
    c3d6:	9309      	str	r3, [sp, #36]	; 0x24
    c3d8:	e4da      	b.n	bd90 <_dtoa_r+0x4e0>
    c3da:	2b39      	cmp	r3, #57	; 0x39
    c3dc:	f000 808c 	beq.w	c4f8 <_dtoa_r+0xc48>
    c3e0:	46b9      	mov	r9, r7
    c3e2:	3301      	adds	r3, #1
    c3e4:	e7c1      	b.n	c36a <_dtoa_r+0xaba>
    c3e6:	9a04      	ldr	r2, [sp, #16]
    c3e8:	3201      	adds	r2, #1
    c3ea:	4637      	mov	r7, r6
    c3ec:	9204      	str	r2, [sp, #16]
    c3ee:	4646      	mov	r6, r8
    c3f0:	e55f      	b.n	beb2 <_dtoa_r+0x602>
    c3f2:	4629      	mov	r1, r5
    c3f4:	4620      	mov	r0, r4
    c3f6:	f7fd f82f 	bl	9458 <__pow5mult>
    c3fa:	4605      	mov	r5, r0
    c3fc:	e4fa      	b.n	bdf4 <_dtoa_r+0x544>
    c3fe:	bf00      	nop
    c400:	20001334 	.word	0x20001334
    c404:	200002a8 	.word	0x200002a8
    c408:	20000280 	.word	0x20000280
    c40c:	7ff00000 	.word	0x7ff00000
    c410:	4b5e      	ldr	r3, [pc, #376]	; (c58c <_dtoa_r+0xcdc>)
    c412:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    c416:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    c41a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    c41e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    c422:	ee36 7b47 	vsub.f64	d7, d6, d7
    c426:	ec41 0b16 	vmov	d6, r0, r1
    c42a:	ee15 1a90 	vmov	r1, s11
    c42e:	ee23 3b06 	vmul.f64	d3, d3, d6
    c432:	9800      	ldr	r0, [sp, #0]
    c434:	3130      	adds	r1, #48	; 0x30
    c436:	2a01      	cmp	r2, #1
    c438:	f800 1b01 	strb.w	r1, [r0], #1
    c43c:	f000 8083 	beq.w	c546 <_dtoa_r+0xc96>
    c440:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c444:	9b00      	ldr	r3, [sp, #0]
    c446:	1899      	adds	r1, r3, r2
    c448:	ee27 7b04 	vmul.f64	d7, d7, d4
    c44c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    c450:	ee16 3a90 	vmov	r3, s13
    c454:	3330      	adds	r3, #48	; 0x30
    c456:	f800 3b01 	strb.w	r3, [r0], #1
    c45a:	4281      	cmp	r1, r0
    c45c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    c460:	ee37 7b45 	vsub.f64	d7, d7, d5
    c464:	d1f0      	bne.n	c448 <_dtoa_r+0xb98>
    c466:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c46a:	ee33 5b06 	vadd.f64	d5, d3, d6
    c46e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    c472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c476:	f53f abe3 	bmi.w	bc40 <_dtoa_r+0x390>
    c47a:	ee36 6b43 	vsub.f64	d6, d6, d3
    c47e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    c482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c486:	f77f ac0d 	ble.w	bca4 <_dtoa_r+0x3f4>
    c48a:	4689      	mov	r9, r1
    c48c:	3901      	subs	r1, #1
    c48e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c492:	2b30      	cmp	r3, #48	; 0x30
    c494:	d0f9      	beq.n	c48a <_dtoa_r+0xbda>
    c496:	1c73      	adds	r3, r6, #1
    c498:	9304      	str	r3, [sp, #16]
    c49a:	e539      	b.n	bf10 <_dtoa_r+0x660>
    c49c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c49e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    c4a2:	e6da      	b.n	c25a <_dtoa_r+0x9aa>
    c4a4:	2002      	movs	r0, #2
    c4a6:	eeb0 6b48 	vmov.f64	d6, d8
    c4aa:	f7ff bb48 	b.w	bb3e <_dtoa_r+0x28e>
    c4ae:	f1b9 0f00 	cmp.w	r9, #0
    c4b2:	f43f aeda 	beq.w	c26a <_dtoa_r+0x9ba>
    c4b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c4b8:	2a00      	cmp	r2, #0
    c4ba:	f77f abf3 	ble.w	bca4 <_dtoa_r+0x3f4>
    c4be:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c4c2:	ee26 6b04 	vmul.f64	d6, d6, d4
    c4c6:	3001      	adds	r0, #1
    c4c8:	ee07 0a90 	vmov	s15, r0
    c4cc:	9b04      	ldr	r3, [sp, #16]
    c4ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    c4d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c4d6:	eea6 7b05 	vfma.f64	d7, d6, d5
    c4da:	ee17 ca90 	vmov	ip, s15
    c4de:	ec51 0b17 	vmov	r0, r1, d7
    c4e2:	1e5e      	subs	r6, r3, #1
    c4e4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    c4e8:	f7ff bb47 	b.w	bb7a <_dtoa_r+0x2ca>
    c4ec:	9b04      	ldr	r3, [sp, #16]
    c4ee:	3301      	adds	r3, #1
    c4f0:	9304      	str	r3, [sp, #16]
    c4f2:	2331      	movs	r3, #49	; 0x31
    c4f4:	f7ff bbb1 	b.w	bc5a <_dtoa_r+0x3aa>
    c4f8:	9b04      	ldr	r3, [sp, #16]
    c4fa:	46bb      	mov	fp, r7
    c4fc:	3301      	adds	r3, #1
    c4fe:	9304      	str	r3, [sp, #16]
    c500:	2339      	movs	r3, #57	; 0x39
    c502:	4637      	mov	r7, r6
    c504:	f80b 3b01 	strb.w	r3, [fp], #1
    c508:	4646      	mov	r6, r8
    c50a:	e4e1      	b.n	bed0 <_dtoa_r+0x620>
    c50c:	f04f 0a00 	mov.w	sl, #0
    c510:	4656      	mov	r6, sl
    c512:	e653      	b.n	c1bc <_dtoa_r+0x90c>
    c514:	9208      	str	r2, [sp, #32]
    c516:	e47b      	b.n	be10 <_dtoa_r+0x560>
    c518:	1c73      	adds	r3, r6, #1
    c51a:	9304      	str	r3, [sp, #16]
    c51c:	4689      	mov	r9, r1
    c51e:	e4f7      	b.n	bf10 <_dtoa_r+0x660>
    c520:	f47f af22 	bne.w	c368 <_dtoa_r+0xab8>
    c524:	07da      	lsls	r2, r3, #31
    c526:	f57f af1f 	bpl.w	c368 <_dtoa_r+0xab8>
    c52a:	e718      	b.n	c35e <_dtoa_r+0xaae>
    c52c:	2b39      	cmp	r3, #57	; 0x39
    c52e:	d0e3      	beq.n	c4f8 <_dtoa_r+0xc48>
    c530:	f1b9 0f00 	cmp.w	r9, #0
    c534:	f73f af16 	bgt.w	c364 <_dtoa_r+0xab4>
    c538:	e716      	b.n	c368 <_dtoa_r+0xab8>
    c53a:	9b01      	ldr	r3, [sp, #4]
    c53c:	2b02      	cmp	r3, #2
    c53e:	f73f ae28 	bgt.w	c192 <_dtoa_r+0x8e2>
    c542:	9704      	str	r7, [sp, #16]
    c544:	e5ba      	b.n	c0bc <_dtoa_r+0x80c>
    c546:	4601      	mov	r1, r0
    c548:	e78d      	b.n	c466 <_dtoa_r+0xbb6>
    c54a:	9b01      	ldr	r3, [sp, #4]
    c54c:	2b02      	cmp	r3, #2
    c54e:	f73f ae20 	bgt.w	c192 <_dtoa_r+0x8e2>
    c552:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c556:	9704      	str	r7, [sp, #16]
    c558:	e52b      	b.n	bfb2 <_dtoa_r+0x702>
    c55a:	2002      	movs	r0, #2
    c55c:	f7ff baef 	b.w	bb3e <_dtoa_r+0x28e>
    c560:	4b0b      	ldr	r3, [pc, #44]	; (c590 <_dtoa_r+0xce0>)
    c562:	480c      	ldr	r0, [pc, #48]	; (c594 <_dtoa_r+0xce4>)
    c564:	2200      	movs	r2, #0
    c566:	f240 11af 	movw	r1, #431	; 0x1af
    c56a:	f7ff f8ed 	bl	b748 <__assert_func>
    c56e:	4b08      	ldr	r3, [pc, #32]	; (c590 <_dtoa_r+0xce0>)
    c570:	4808      	ldr	r0, [pc, #32]	; (c594 <_dtoa_r+0xce4>)
    c572:	463a      	mov	r2, r7
    c574:	f240 21ef 	movw	r1, #751	; 0x2ef
    c578:	f7ff f8e6 	bl	b748 <__assert_func>
    c57c:	4b06      	ldr	r3, [pc, #24]	; (c598 <_dtoa_r+0xce8>)
    c57e:	9300      	str	r3, [sp, #0]
    c580:	f7ff b9d2 	b.w	b928 <_dtoa_r+0x78>
    c584:	9b02      	ldr	r3, [sp, #8]
    c586:	9308      	str	r3, [sp, #32]
    c588:	e4f7      	b.n	bf7a <_dtoa_r+0x6ca>
    c58a:	bf00      	nop
    c58c:	200002a8 	.word	0x200002a8
    c590:	200011b4 	.word	0x200011b4
    c594:	20001338 	.word	0x20001338
    c598:	20001328 	.word	0x20001328

0000c59c <_wcrtomb_r>:
    c59c:	b570      	push	{r4, r5, r6, lr}
    c59e:	4605      	mov	r5, r0
    c5a0:	b084      	sub	sp, #16
    c5a2:	b15b      	cbz	r3, c5bc <_wcrtomb_r+0x20>
    c5a4:	461c      	mov	r4, r3
    c5a6:	b169      	cbz	r1, c5c4 <_wcrtomb_r+0x28>
    c5a8:	4b0e      	ldr	r3, [pc, #56]	; (c5e4 <_wcrtomb_r+0x48>)
    c5aa:	4628      	mov	r0, r5
    c5ac:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    c5b0:	4623      	mov	r3, r4
    c5b2:	47b0      	blx	r6
    c5b4:	1c43      	adds	r3, r0, #1
    c5b6:	d00f      	beq.n	c5d8 <_wcrtomb_r+0x3c>
    c5b8:	b004      	add	sp, #16
    c5ba:	bd70      	pop	{r4, r5, r6, pc}
    c5bc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    c5c0:	2900      	cmp	r1, #0
    c5c2:	d1f1      	bne.n	c5a8 <_wcrtomb_r+0xc>
    c5c4:	4a07      	ldr	r2, [pc, #28]	; (c5e4 <_wcrtomb_r+0x48>)
    c5c6:	4623      	mov	r3, r4
    c5c8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    c5cc:	4628      	mov	r0, r5
    c5ce:	460a      	mov	r2, r1
    c5d0:	a901      	add	r1, sp, #4
    c5d2:	47b0      	blx	r6
    c5d4:	1c43      	adds	r3, r0, #1
    c5d6:	d1ef      	bne.n	c5b8 <_wcrtomb_r+0x1c>
    c5d8:	2200      	movs	r2, #0
    c5da:	238a      	movs	r3, #138	; 0x8a
    c5dc:	6022      	str	r2, [r4, #0]
    c5de:	602b      	str	r3, [r5, #0]
    c5e0:	b004      	add	sp, #16
    c5e2:	bd70      	pop	{r4, r5, r6, pc}
    c5e4:	20002e8c 	.word	0x20002e8c

0000c5e8 <_wcsrtombs_r>:
    c5e8:	b510      	push	{r4, lr}
    c5ea:	b082      	sub	sp, #8
    c5ec:	9c04      	ldr	r4, [sp, #16]
    c5ee:	e9cd 3400 	strd	r3, r4, [sp]
    c5f2:	f04f 33ff 	mov.w	r3, #4294967295
    c5f6:	f001 fbc7 	bl	dd88 <_wcsnrtombs_r>
    c5fa:	b002      	add	sp, #8
    c5fc:	bd10      	pop	{r4, pc}
    c5fe:	bf00      	nop

0000c600 <fiprintf>:
    c600:	b40e      	push	{r1, r2, r3}
    c602:	b510      	push	{r4, lr}
    c604:	b083      	sub	sp, #12
    c606:	ab05      	add	r3, sp, #20
    c608:	4c06      	ldr	r4, [pc, #24]	; (c624 <fiprintf+0x24>)
    c60a:	f853 2b04 	ldr.w	r2, [r3], #4
    c60e:	9301      	str	r3, [sp, #4]
    c610:	4601      	mov	r1, r0
    c612:	6820      	ldr	r0, [r4, #0]
    c614:	f000 f8c4 	bl	c7a0 <_vfiprintf_r>
    c618:	b003      	add	sp, #12
    c61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c61e:	b003      	add	sp, #12
    c620:	4770      	bx	lr
    c622:	bf00      	nop
    c624:	20003414 	.word	0x20003414

0000c628 <__ssprint_r>:
    c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c62c:	6893      	ldr	r3, [r2, #8]
    c62e:	6817      	ldr	r7, [r2, #0]
    c630:	b083      	sub	sp, #12
    c632:	4692      	mov	sl, r2
    c634:	2b00      	cmp	r3, #0
    c636:	d070      	beq.n	c71a <__ssprint_r+0xf2>
    c638:	4681      	mov	r9, r0
    c63a:	688a      	ldr	r2, [r1, #8]
    c63c:	6808      	ldr	r0, [r1, #0]
    c63e:	460c      	mov	r4, r1
    c640:	3708      	adds	r7, #8
    c642:	e043      	b.n	c6cc <__ssprint_r+0xa4>
    c644:	89a3      	ldrh	r3, [r4, #12]
    c646:	f413 6f90 	tst.w	r3, #1152	; 0x480
    c64a:	d02e      	beq.n	c6aa <__ssprint_r+0x82>
    c64c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    c650:	eba0 0801 	sub.w	r8, r0, r1
    c654:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    c658:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    c65c:	f108 0001 	add.w	r0, r8, #1
    c660:	1076      	asrs	r6, r6, #1
    c662:	4428      	add	r0, r5
    c664:	42b0      	cmp	r0, r6
    c666:	4632      	mov	r2, r6
    c668:	bf84      	itt	hi
    c66a:	4606      	movhi	r6, r0
    c66c:	4632      	movhi	r2, r6
    c66e:	055b      	lsls	r3, r3, #21
    c670:	d537      	bpl.n	c6e2 <__ssprint_r+0xba>
    c672:	4611      	mov	r1, r2
    c674:	4648      	mov	r0, r9
    c676:	f7fb fb1b 	bl	7cb0 <_malloc_r>
    c67a:	9001      	str	r0, [sp, #4]
    c67c:	2800      	cmp	r0, #0
    c67e:	d03a      	beq.n	c6f6 <__ssprint_r+0xce>
    c680:	4642      	mov	r2, r8
    c682:	6921      	ldr	r1, [r4, #16]
    c684:	f7f9 fcba 	bl	5ffc <memcpy>
    c688:	89a2      	ldrh	r2, [r4, #12]
    c68a:	9b01      	ldr	r3, [sp, #4]
    c68c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    c690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c694:	81a2      	strh	r2, [r4, #12]
    c696:	eba6 0208 	sub.w	r2, r6, r8
    c69a:	eb03 0008 	add.w	r0, r3, r8
    c69e:	6166      	str	r6, [r4, #20]
    c6a0:	60a2      	str	r2, [r4, #8]
    c6a2:	6123      	str	r3, [r4, #16]
    c6a4:	6020      	str	r0, [r4, #0]
    c6a6:	462e      	mov	r6, r5
    c6a8:	46a8      	mov	r8, r5
    c6aa:	4642      	mov	r2, r8
    c6ac:	4659      	mov	r1, fp
    c6ae:	f7fc f959 	bl	8964 <memmove>
    c6b2:	f8da 3008 	ldr.w	r3, [sl, #8]
    c6b6:	68a2      	ldr	r2, [r4, #8]
    c6b8:	6820      	ldr	r0, [r4, #0]
    c6ba:	1b92      	subs	r2, r2, r6
    c6bc:	4440      	add	r0, r8
    c6be:	1b5b      	subs	r3, r3, r5
    c6c0:	60a2      	str	r2, [r4, #8]
    c6c2:	6020      	str	r0, [r4, #0]
    c6c4:	f8ca 3008 	str.w	r3, [sl, #8]
    c6c8:	b33b      	cbz	r3, c71a <__ssprint_r+0xf2>
    c6ca:	3708      	adds	r7, #8
    c6cc:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    c6d0:	2d00      	cmp	r5, #0
    c6d2:	d0fa      	beq.n	c6ca <__ssprint_r+0xa2>
    c6d4:	42aa      	cmp	r2, r5
    c6d6:	4616      	mov	r6, r2
    c6d8:	4690      	mov	r8, r2
    c6da:	d9b3      	bls.n	c644 <__ssprint_r+0x1c>
    c6dc:	462e      	mov	r6, r5
    c6de:	46a8      	mov	r8, r5
    c6e0:	e7e3      	b.n	c6aa <__ssprint_r+0x82>
    c6e2:	4648      	mov	r0, r9
    c6e4:	f7fb fda0 	bl	8228 <_realloc_r>
    c6e8:	4603      	mov	r3, r0
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d1d3      	bne.n	c696 <__ssprint_r+0x6e>
    c6ee:	6921      	ldr	r1, [r4, #16]
    c6f0:	4648      	mov	r0, r9
    c6f2:	f7fc fbe7 	bl	8ec4 <_free_r>
    c6f6:	89a3      	ldrh	r3, [r4, #12]
    c6f8:	220c      	movs	r2, #12
    c6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c6fe:	f8c9 2000 	str.w	r2, [r9]
    c702:	f04f 30ff 	mov.w	r0, #4294967295
    c706:	81a3      	strh	r3, [r4, #12]
    c708:	2200      	movs	r2, #0
    c70a:	2300      	movs	r3, #0
    c70c:	f8ca 2008 	str.w	r2, [sl, #8]
    c710:	f8ca 3004 	str.w	r3, [sl, #4]
    c714:	b003      	add	sp, #12
    c716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c71a:	2000      	movs	r0, #0
    c71c:	2300      	movs	r3, #0
    c71e:	f8ca 3004 	str.w	r3, [sl, #4]
    c722:	b003      	add	sp, #12
    c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c728 <__sprint_r.part.0>:
    c728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c72c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    c72e:	049c      	lsls	r4, r3, #18
    c730:	4690      	mov	r8, r2
    c732:	d52d      	bpl.n	c790 <__sprint_r.part.0+0x68>
    c734:	6893      	ldr	r3, [r2, #8]
    c736:	6812      	ldr	r2, [r2, #0]
    c738:	b343      	cbz	r3, c78c <__sprint_r.part.0+0x64>
    c73a:	468b      	mov	fp, r1
    c73c:	4606      	mov	r6, r0
    c73e:	f102 0908 	add.w	r9, r2, #8
    c742:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    c746:	ea5f 079a 	movs.w	r7, sl, lsr #2
    c74a:	d015      	beq.n	c778 <__sprint_r.part.0+0x50>
    c74c:	3d04      	subs	r5, #4
    c74e:	2400      	movs	r4, #0
    c750:	e001      	b.n	c756 <__sprint_r.part.0+0x2e>
    c752:	42a7      	cmp	r7, r4
    c754:	d00e      	beq.n	c774 <__sprint_r.part.0+0x4c>
    c756:	f855 1f04 	ldr.w	r1, [r5, #4]!
    c75a:	465a      	mov	r2, fp
    c75c:	4630      	mov	r0, r6
    c75e:	f001 fa5b 	bl	dc18 <_fputwc_r>
    c762:	1c43      	adds	r3, r0, #1
    c764:	f104 0401 	add.w	r4, r4, #1
    c768:	d1f3      	bne.n	c752 <__sprint_r.part.0+0x2a>
    c76a:	2300      	movs	r3, #0
    c76c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    c770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c774:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c778:	f02a 0a03 	bic.w	sl, sl, #3
    c77c:	eba3 030a 	sub.w	r3, r3, sl
    c780:	f8c8 3008 	str.w	r3, [r8, #8]
    c784:	f109 0908 	add.w	r9, r9, #8
    c788:	2b00      	cmp	r3, #0
    c78a:	d1da      	bne.n	c742 <__sprint_r.part.0+0x1a>
    c78c:	2000      	movs	r0, #0
    c78e:	e7ec      	b.n	c76a <__sprint_r.part.0+0x42>
    c790:	f001 f80c 	bl	d7ac <__sfvwrite_r>
    c794:	2300      	movs	r3, #0
    c796:	e9c8 3301 	strd	r3, r3, [r8, #4]
    c79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c79e:	bf00      	nop

0000c7a0 <_vfiprintf_r>:
    c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7a4:	ed2d 8b02 	vpush	{d8}
    c7a8:	b0c5      	sub	sp, #276	; 0x114
    c7aa:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    c7ae:	4683      	mov	fp, r0
    c7b0:	ee08 1a10 	vmov	s16, r1
    c7b4:	4616      	mov	r6, r2
    c7b6:	2100      	movs	r1, #0
    c7b8:	2208      	movs	r2, #8
    c7ba:	4650      	mov	r0, sl
    c7bc:	461c      	mov	r4, r3
    c7be:	9307      	str	r3, [sp, #28]
    c7c0:	f7fc f94c 	bl	8a5c <memset>
    c7c4:	f1bb 0f00 	cmp.w	fp, #0
    c7c8:	d004      	beq.n	c7d4 <_vfiprintf_r+0x34>
    c7ca:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	f000 86a0 	beq.w	d514 <_vfiprintf_r+0xd74>
    c7d4:	ee18 2a10 	vmov	r2, s16
    c7d8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    c7da:	07db      	lsls	r3, r3, #31
    c7dc:	f140 8513 	bpl.w	d206 <_vfiprintf_r+0xa66>
    c7e0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    c7e4:	b28a      	uxth	r2, r1
    c7e6:	0495      	lsls	r5, r2, #18
    c7e8:	d40b      	bmi.n	c802 <_vfiprintf_r+0x62>
    c7ea:	ee18 3a10 	vmov	r3, s16
    c7ee:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    c7f2:	8199      	strh	r1, [r3, #12]
    c7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c7f6:	b28a      	uxth	r2, r1
    c7f8:	ee18 1a10 	vmov	r1, s16
    c7fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c800:	664b      	str	r3, [r1, #100]	; 0x64
    c802:	0710      	lsls	r0, r2, #28
    c804:	f140 8105 	bpl.w	ca12 <_vfiprintf_r+0x272>
    c808:	ee18 3a10 	vmov	r3, s16
    c80c:	691b      	ldr	r3, [r3, #16]
    c80e:	2b00      	cmp	r3, #0
    c810:	f000 80ff 	beq.w	ca12 <_vfiprintf_r+0x272>
    c814:	f002 031a 	and.w	r3, r2, #26
    c818:	2b0a      	cmp	r3, #10
    c81a:	f000 810a 	beq.w	ca32 <_vfiprintf_r+0x292>
    c81e:	2300      	movs	r3, #0
    c820:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    c824:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    c828:	aa1b      	add	r2, sp, #108	; 0x6c
    c82a:	930c      	str	r3, [sp, #48]	; 0x30
    c82c:	9218      	str	r2, [sp, #96]	; 0x60
    c82e:	4691      	mov	r9, r2
    c830:	930b      	str	r3, [sp, #44]	; 0x2c
    c832:	9305      	str	r3, [sp, #20]
    c834:	46b0      	mov	r8, r6
    c836:	4644      	mov	r4, r8
    c838:	4ba8      	ldr	r3, [pc, #672]	; (cadc <_vfiprintf_r+0x33c>)
    c83a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    c83e:	f7fc f991 	bl	8b64 <__locale_mb_cur_max>
    c842:	4622      	mov	r2, r4
    c844:	4603      	mov	r3, r0
    c846:	a912      	add	r1, sp, #72	; 0x48
    c848:	f8cd a000 	str.w	sl, [sp]
    c84c:	4658      	mov	r0, fp
    c84e:	47a8      	blx	r5
    c850:	2800      	cmp	r0, #0
    c852:	f000 8145 	beq.w	cae0 <_vfiprintf_r+0x340>
    c856:	f2c0 8139 	blt.w	cacc <_vfiprintf_r+0x32c>
    c85a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c85c:	2a25      	cmp	r2, #37	; 0x25
    c85e:	4603      	mov	r3, r0
    c860:	d001      	beq.n	c866 <_vfiprintf_r+0xc6>
    c862:	441c      	add	r4, r3
    c864:	e7e8      	b.n	c838 <_vfiprintf_r+0x98>
    c866:	ebb4 0608 	subs.w	r6, r4, r8
    c86a:	4605      	mov	r5, r0
    c86c:	f040 813c 	bne.w	cae8 <_vfiprintf_r+0x348>
    c870:	2300      	movs	r3, #0
    c872:	7861      	ldrb	r1, [r4, #1]
    c874:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c878:	f104 0801 	add.w	r8, r4, #1
    c87c:	9306      	str	r3, [sp, #24]
    c87e:	f04f 37ff 	mov.w	r7, #4294967295
    c882:	461e      	mov	r6, r3
    c884:	242b      	movs	r4, #43	; 0x2b
    c886:	f108 0801 	add.w	r8, r8, #1
    c88a:	f1a1 0320 	sub.w	r3, r1, #32
    c88e:	2b5a      	cmp	r3, #90	; 0x5a
    c890:	f200 8178 	bhi.w	cb84 <_vfiprintf_r+0x3e4>
    c894:	e8df f013 	tbh	[pc, r3, lsl #1]
    c898:	017602b5 	.word	0x017602b5
    c89c:	02b00176 	.word	0x02b00176
    c8a0:	01760176 	.word	0x01760176
    c8a4:	006a0176 	.word	0x006a0176
    c8a8:	01760176 	.word	0x01760176
    c8ac:	028d027d 	.word	0x028d027d
    c8b0:	02880176 	.word	0x02880176
    c8b4:	01760297 	.word	0x01760297
    c8b8:	005b0292 	.word	0x005b0292
    c8bc:	005b005b 	.word	0x005b005b
    c8c0:	005b005b 	.word	0x005b005b
    c8c4:	005b005b 	.word	0x005b005b
    c8c8:	005b005b 	.word	0x005b005b
    c8cc:	01760176 	.word	0x01760176
    c8d0:	01760176 	.word	0x01760176
    c8d4:	01760176 	.word	0x01760176
    c8d8:	01760176 	.word	0x01760176
    c8dc:	025c0176 	.word	0x025c0176
    c8e0:	01760084 	.word	0x01760084
    c8e4:	01760176 	.word	0x01760176
    c8e8:	01760176 	.word	0x01760176
    c8ec:	01760176 	.word	0x01760176
    c8f0:	01760176 	.word	0x01760176
    c8f4:	00e80176 	.word	0x00e80176
    c8f8:	01760176 	.word	0x01760176
    c8fc:	02330176 	.word	0x02330176
    c900:	02da0176 	.word	0x02da0176
    c904:	01760176 	.word	0x01760176
    c908:	0176058b 	.word	0x0176058b
    c90c:	01760176 	.word	0x01760176
    c910:	01760176 	.word	0x01760176
    c914:	01760176 	.word	0x01760176
    c918:	01760176 	.word	0x01760176
    c91c:	025c0176 	.word	0x025c0176
    c920:	01760086 	.word	0x01760086
    c924:	01760176 	.word	0x01760176
    c928:	008602cd 	.word	0x008602cd
    c92c:	0176007f 	.word	0x0176007f
    c930:	017602c0 	.word	0x017602c0
    c934:	00ea02fd 	.word	0x00ea02fd
    c938:	007f02ed 	.word	0x007f02ed
    c93c:	02330176 	.word	0x02330176
    c940:	0569007c 	.word	0x0569007c
    c944:	01760176 	.word	0x01760176
    c948:	0176056b 	.word	0x0176056b
    c94c:	007c      	.short	0x007c
    c94e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c952:	2200      	movs	r2, #0
    c954:	f818 1b01 	ldrb.w	r1, [r8], #1
    c958:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c95c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    c960:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c964:	2b09      	cmp	r3, #9
    c966:	d9f5      	bls.n	c954 <_vfiprintf_r+0x1b4>
    c968:	9206      	str	r2, [sp, #24]
    c96a:	e78e      	b.n	c88a <_vfiprintf_r+0xea>
    c96c:	4658      	mov	r0, fp
    c96e:	f7fe fe57 	bl	b620 <_localeconv_r>
    c972:	6843      	ldr	r3, [r0, #4]
    c974:	930d      	str	r3, [sp, #52]	; 0x34
    c976:	4618      	mov	r0, r3
    c978:	f7fc f9a2 	bl	8cc0 <strlen>
    c97c:	900e      	str	r0, [sp, #56]	; 0x38
    c97e:	4605      	mov	r5, r0
    c980:	4658      	mov	r0, fp
    c982:	f7fe fe4d 	bl	b620 <_localeconv_r>
    c986:	6883      	ldr	r3, [r0, #8]
    c988:	930b      	str	r3, [sp, #44]	; 0x2c
    c98a:	2d00      	cmp	r5, #0
    c98c:	f040 84d6 	bne.w	d33c <_vfiprintf_r+0xb9c>
    c990:	f898 1000 	ldrb.w	r1, [r8]
    c994:	e777      	b.n	c886 <_vfiprintf_r+0xe6>
    c996:	f898 1000 	ldrb.w	r1, [r8]
    c99a:	f046 0620 	orr.w	r6, r6, #32
    c99e:	e772      	b.n	c886 <_vfiprintf_r+0xe6>
    c9a0:	f046 0610 	orr.w	r6, r6, #16
    c9a4:	06b4      	lsls	r4, r6, #26
    c9a6:	f140 818e 	bpl.w	ccc6 <_vfiprintf_r+0x526>
    c9aa:	9b07      	ldr	r3, [sp, #28]
    c9ac:	3307      	adds	r3, #7
    c9ae:	f023 0307 	bic.w	r3, r3, #7
    c9b2:	461a      	mov	r2, r3
    c9b4:	6859      	ldr	r1, [r3, #4]
    c9b6:	f852 3b08 	ldr.w	r3, [r2], #8
    c9ba:	9207      	str	r2, [sp, #28]
    c9bc:	460a      	mov	r2, r1
    c9be:	2900      	cmp	r1, #0
    c9c0:	f2c0 8470 	blt.w	d2a4 <_vfiprintf_r+0xb04>
    c9c4:	1c79      	adds	r1, r7, #1
    c9c6:	f000 85a2 	beq.w	d50e <_vfiprintf_r+0xd6e>
    c9ca:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    c9ce:	9103      	str	r1, [sp, #12]
    c9d0:	ea53 0102 	orrs.w	r1, r3, r2
    c9d4:	f000 843f 	beq.w	d256 <_vfiprintf_r+0xab6>
    c9d8:	2b0a      	cmp	r3, #10
    c9da:	f172 0100 	sbcs.w	r1, r2, #0
    c9de:	f080 8541 	bcs.w	d464 <_vfiprintf_r+0xcc4>
    c9e2:	3330      	adds	r3, #48	; 0x30
    c9e4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    c9e8:	9e03      	ldr	r6, [sp, #12]
    c9ea:	2301      	movs	r3, #1
    c9ec:	9304      	str	r3, [sp, #16]
    c9ee:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    c9f2:	9b04      	ldr	r3, [sp, #16]
    c9f4:	42bb      	cmp	r3, r7
    c9f6:	bfb8      	it	lt
    c9f8:	463b      	movlt	r3, r7
    c9fa:	9303      	str	r3, [sp, #12]
    c9fc:	2300      	movs	r3, #0
    c9fe:	9308      	str	r3, [sp, #32]
    ca00:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ca04:	2b00      	cmp	r3, #0
    ca06:	f000 80cb 	beq.w	cba0 <_vfiprintf_r+0x400>
    ca0a:	9b03      	ldr	r3, [sp, #12]
    ca0c:	3301      	adds	r3, #1
    ca0e:	9303      	str	r3, [sp, #12]
    ca10:	e0c6      	b.n	cba0 <_vfiprintf_r+0x400>
    ca12:	ee18 1a10 	vmov	r1, s16
    ca16:	4658      	mov	r0, fp
    ca18:	ee18 5a10 	vmov	r5, s16
    ca1c:	f001 f840 	bl	daa0 <__swsetup_r>
    ca20:	2800      	cmp	r0, #0
    ca22:	f040 8652 	bne.w	d6ca <_vfiprintf_r+0xf2a>
    ca26:	89aa      	ldrh	r2, [r5, #12]
    ca28:	f002 031a 	and.w	r3, r2, #26
    ca2c:	2b0a      	cmp	r3, #10
    ca2e:	f47f aef6 	bne.w	c81e <_vfiprintf_r+0x7e>
    ca32:	ee18 1a10 	vmov	r1, s16
    ca36:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	f6ff aeef 	blt.w	c81e <_vfiprintf_r+0x7e>
    ca40:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ca42:	07db      	lsls	r3, r3, #31
    ca44:	d402      	bmi.n	ca4c <_vfiprintf_r+0x2ac>
    ca46:	0597      	lsls	r7, r2, #22
    ca48:	f140 8612 	bpl.w	d670 <_vfiprintf_r+0xed0>
    ca4c:	ee18 1a10 	vmov	r1, s16
    ca50:	4623      	mov	r3, r4
    ca52:	4632      	mov	r2, r6
    ca54:	4658      	mov	r0, fp
    ca56:	f000 fe69 	bl	d72c <__sbprintf>
    ca5a:	9005      	str	r0, [sp, #20]
    ca5c:	9805      	ldr	r0, [sp, #20]
    ca5e:	b045      	add	sp, #276	; 0x114
    ca60:	ecbd 8b02 	vpop	{d8}
    ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca68:	f046 0610 	orr.w	r6, r6, #16
    ca6c:	f016 0220 	ands.w	r2, r6, #32
    ca70:	f000 8136 	beq.w	cce0 <_vfiprintf_r+0x540>
    ca74:	9b07      	ldr	r3, [sp, #28]
    ca76:	3307      	adds	r3, #7
    ca78:	f023 0307 	bic.w	r3, r3, #7
    ca7c:	4619      	mov	r1, r3
    ca7e:	685a      	ldr	r2, [r3, #4]
    ca80:	f851 3b08 	ldr.w	r3, [r1], #8
    ca84:	9107      	str	r1, [sp, #28]
    ca86:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    ca8a:	9103      	str	r1, [sp, #12]
    ca8c:	2100      	movs	r1, #0
    ca8e:	2000      	movs	r0, #0
    ca90:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    ca94:	1c78      	adds	r0, r7, #1
    ca96:	f000 8210 	beq.w	ceba <_vfiprintf_r+0x71a>
    ca9a:	9803      	ldr	r0, [sp, #12]
    ca9c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    caa0:	ea53 0002 	orrs.w	r0, r3, r2
    caa4:	f040 8208 	bne.w	ceb8 <_vfiprintf_r+0x718>
    caa8:	2f00      	cmp	r7, #0
    caaa:	f040 8538 	bne.w	d51e <_vfiprintf_r+0xd7e>
    caae:	2900      	cmp	r1, #0
    cab0:	f040 83d5 	bne.w	d25e <_vfiprintf_r+0xabe>
    cab4:	9b03      	ldr	r3, [sp, #12]
    cab6:	f013 0301 	ands.w	r3, r3, #1
    caba:	9304      	str	r3, [sp, #16]
    cabc:	f000 8411 	beq.w	d2e2 <_vfiprintf_r+0xb42>
    cac0:	2330      	movs	r3, #48	; 0x30
    cac2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    cac6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    caca:	e792      	b.n	c9f2 <_vfiprintf_r+0x252>
    cacc:	2208      	movs	r2, #8
    cace:	2100      	movs	r1, #0
    cad0:	4650      	mov	r0, sl
    cad2:	f7fb ffc3 	bl	8a5c <memset>
    cad6:	2301      	movs	r3, #1
    cad8:	441c      	add	r4, r3
    cada:	e6ad      	b.n	c838 <_vfiprintf_r+0x98>
    cadc:	20002e8c 	.word	0x20002e8c
    cae0:	ebb4 0608 	subs.w	r6, r4, r8
    cae4:	4605      	mov	r5, r0
    cae6:	d01b      	beq.n	cb20 <_vfiprintf_r+0x380>
    cae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    caea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    caec:	3301      	adds	r3, #1
    caee:	4432      	add	r2, r6
    caf0:	2b07      	cmp	r3, #7
    caf2:	e9c9 8600 	strd	r8, r6, [r9]
    caf6:	921a      	str	r2, [sp, #104]	; 0x68
    caf8:	9319      	str	r3, [sp, #100]	; 0x64
    cafa:	dd1c      	ble.n	cb36 <_vfiprintf_r+0x396>
    cafc:	2a00      	cmp	r2, #0
    cafe:	f000 83a6 	beq.w	d24e <_vfiprintf_r+0xaae>
    cb02:	ee18 1a10 	vmov	r1, s16
    cb06:	aa18      	add	r2, sp, #96	; 0x60
    cb08:	4658      	mov	r0, fp
    cb0a:	f7ff fe0d 	bl	c728 <__sprint_r.part.0>
    cb0e:	bb20      	cbnz	r0, cb5a <_vfiprintf_r+0x3ba>
    cb10:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cb14:	9b05      	ldr	r3, [sp, #20]
    cb16:	4433      	add	r3, r6
    cb18:	9305      	str	r3, [sp, #20]
    cb1a:	2d00      	cmp	r5, #0
    cb1c:	f47f aea8 	bne.w	c870 <_vfiprintf_r+0xd0>
    cb20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cb22:	2b00      	cmp	r3, #0
    cb24:	f040 85c1 	bne.w	d6aa <_vfiprintf_r+0xf0a>
    cb28:	ee18 3a10 	vmov	r3, s16
    cb2c:	2200      	movs	r2, #0
    cb2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    cb32:	9219      	str	r2, [sp, #100]	; 0x64
    cb34:	e015      	b.n	cb62 <_vfiprintf_r+0x3c2>
    cb36:	f109 0908 	add.w	r9, r9, #8
    cb3a:	e7eb      	b.n	cb14 <_vfiprintf_r+0x374>
    cb3c:	ee18 1a10 	vmov	r1, s16
    cb40:	aa18      	add	r2, sp, #96	; 0x60
    cb42:	4658      	mov	r0, fp
    cb44:	f7ff fdf0 	bl	c728 <__sprint_r.part.0>
    cb48:	2800      	cmp	r0, #0
    cb4a:	f000 80a6 	beq.w	cc9a <_vfiprintf_r+0x4fa>
    cb4e:	9b08      	ldr	r3, [sp, #32]
    cb50:	b11b      	cbz	r3, cb5a <_vfiprintf_r+0x3ba>
    cb52:	9908      	ldr	r1, [sp, #32]
    cb54:	4658      	mov	r0, fp
    cb56:	f7fc f9b5 	bl	8ec4 <_free_r>
    cb5a:	ee18 3a10 	vmov	r3, s16
    cb5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    cb62:	ee18 2a10 	vmov	r2, s16
    cb66:	6e52      	ldr	r2, [r2, #100]	; 0x64
    cb68:	f012 0f01 	tst.w	r2, #1
    cb6c:	b29a      	uxth	r2, r3
    cb6e:	f000 80a0 	beq.w	ccb2 <_vfiprintf_r+0x512>
    cb72:	0650      	lsls	r0, r2, #25
    cb74:	f100 85b2 	bmi.w	d6dc <_vfiprintf_r+0xf3c>
    cb78:	9805      	ldr	r0, [sp, #20]
    cb7a:	b045      	add	sp, #276	; 0x114
    cb7c:	ecbd 8b02 	vpop	{d8}
    cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb84:	2900      	cmp	r1, #0
    cb86:	d0cb      	beq.n	cb20 <_vfiprintf_r+0x380>
    cb88:	2300      	movs	r3, #0
    cb8a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    cb8e:	2301      	movs	r3, #1
    cb90:	e9cd 3303 	strd	r3, r3, [sp, #12]
    cb94:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    cb98:	ac2b      	add	r4, sp, #172	; 0xac
    cb9a:	2300      	movs	r3, #0
    cb9c:	9308      	str	r3, [sp, #32]
    cb9e:	461f      	mov	r7, r3
    cba0:	f016 0302 	ands.w	r3, r6, #2
    cba4:	9309      	str	r3, [sp, #36]	; 0x24
    cba6:	d002      	beq.n	cbae <_vfiprintf_r+0x40e>
    cba8:	9b03      	ldr	r3, [sp, #12]
    cbaa:	3302      	adds	r3, #2
    cbac:	9303      	str	r3, [sp, #12]
    cbae:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    cbb2:	930a      	str	r3, [sp, #40]	; 0x28
    cbb4:	d105      	bne.n	cbc2 <_vfiprintf_r+0x422>
    cbb6:	9b06      	ldr	r3, [sp, #24]
    cbb8:	9a03      	ldr	r2, [sp, #12]
    cbba:	1a9d      	subs	r5, r3, r2
    cbbc:	2d00      	cmp	r5, #0
    cbbe:	f300 827b 	bgt.w	d0b8 <_vfiprintf_r+0x918>
    cbc2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    cbc6:	1c41      	adds	r1, r0, #1
    cbc8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    cbcc:	b182      	cbz	r2, cbf0 <_vfiprintf_r+0x450>
    cbce:	2201      	movs	r2, #1
    cbd0:	3301      	adds	r3, #1
    cbd2:	f8c9 2004 	str.w	r2, [r9, #4]
    cbd6:	2907      	cmp	r1, #7
    cbd8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    cbdc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    cbe0:	f8c9 2000 	str.w	r2, [r9]
    cbe4:	f300 824a 	bgt.w	d07c <_vfiprintf_r+0x8dc>
    cbe8:	4608      	mov	r0, r1
    cbea:	f109 0908 	add.w	r9, r9, #8
    cbee:	3101      	adds	r1, #1
    cbf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cbf2:	b1e2      	cbz	r2, cc2e <_vfiprintf_r+0x48e>
    cbf4:	aa11      	add	r2, sp, #68	; 0x44
    cbf6:	3302      	adds	r3, #2
    cbf8:	f8c9 2000 	str.w	r2, [r9]
    cbfc:	2907      	cmp	r1, #7
    cbfe:	f04f 0202 	mov.w	r2, #2
    cc02:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    cc06:	f8c9 2004 	str.w	r2, [r9, #4]
    cc0a:	f340 8250 	ble.w	d0ae <_vfiprintf_r+0x90e>
    cc0e:	2b00      	cmp	r3, #0
    cc10:	f000 8343 	beq.w	d29a <_vfiprintf_r+0xafa>
    cc14:	ee18 1a10 	vmov	r1, s16
    cc18:	aa18      	add	r2, sp, #96	; 0x60
    cc1a:	4658      	mov	r0, fp
    cc1c:	f7ff fd84 	bl	c728 <__sprint_r.part.0>
    cc20:	2800      	cmp	r0, #0
    cc22:	d194      	bne.n	cb4e <_vfiprintf_r+0x3ae>
    cc24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    cc28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cc2c:	1c41      	adds	r1, r0, #1
    cc2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc30:	2a80      	cmp	r2, #128	; 0x80
    cc32:	f000 8184 	beq.w	cf3e <_vfiprintf_r+0x79e>
    cc36:	9a04      	ldr	r2, [sp, #16]
    cc38:	1abd      	subs	r5, r7, r2
    cc3a:	2d00      	cmp	r5, #0
    cc3c:	f300 81d7 	bgt.w	cfee <_vfiprintf_r+0x84e>
    cc40:	9a04      	ldr	r2, [sp, #16]
    cc42:	f8c9 4000 	str.w	r4, [r9]
    cc46:	4413      	add	r3, r2
    cc48:	2907      	cmp	r1, #7
    cc4a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    cc4e:	f8c9 2004 	str.w	r2, [r9, #4]
    cc52:	f340 816e 	ble.w	cf32 <_vfiprintf_r+0x792>
    cc56:	2b00      	cmp	r3, #0
    cc58:	f000 8275 	beq.w	d146 <_vfiprintf_r+0x9a6>
    cc5c:	ee18 1a10 	vmov	r1, s16
    cc60:	aa18      	add	r2, sp, #96	; 0x60
    cc62:	4658      	mov	r0, fp
    cc64:	f7ff fd60 	bl	c728 <__sprint_r.part.0>
    cc68:	2800      	cmp	r0, #0
    cc6a:	f47f af70 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    cc6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cc70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cc74:	0775      	lsls	r5, r6, #29
    cc76:	d505      	bpl.n	cc84 <_vfiprintf_r+0x4e4>
    cc78:	9a06      	ldr	r2, [sp, #24]
    cc7a:	9903      	ldr	r1, [sp, #12]
    cc7c:	1a54      	subs	r4, r2, r1
    cc7e:	2c00      	cmp	r4, #0
    cc80:	f300 826b 	bgt.w	d15a <_vfiprintf_r+0x9ba>
    cc84:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    cc88:	9803      	ldr	r0, [sp, #12]
    cc8a:	4281      	cmp	r1, r0
    cc8c:	bfac      	ite	ge
    cc8e:	1852      	addge	r2, r2, r1
    cc90:	1812      	addlt	r2, r2, r0
    cc92:	9205      	str	r2, [sp, #20]
    cc94:	2b00      	cmp	r3, #0
    cc96:	f47f af51 	bne.w	cb3c <_vfiprintf_r+0x39c>
    cc9a:	9908      	ldr	r1, [sp, #32]
    cc9c:	2300      	movs	r3, #0
    cc9e:	9319      	str	r3, [sp, #100]	; 0x64
    cca0:	2900      	cmp	r1, #0
    cca2:	f000 8149 	beq.w	cf38 <_vfiprintf_r+0x798>
    cca6:	4658      	mov	r0, fp
    cca8:	f7fc f90c 	bl	8ec4 <_free_r>
    ccac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ccb0:	e5c1      	b.n	c836 <_vfiprintf_r+0x96>
    ccb2:	059c      	lsls	r4, r3, #22
    ccb4:	f53f af5d 	bmi.w	cb72 <_vfiprintf_r+0x3d2>
    ccb8:	ee18 4a10 	vmov	r4, s16
    ccbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ccbe:	f7fb ffed 	bl	8c9c <__retarget_lock_release_recursive>
    ccc2:	89a2      	ldrh	r2, [r4, #12]
    ccc4:	e755      	b.n	cb72 <_vfiprintf_r+0x3d2>
    ccc6:	06f0      	lsls	r0, r6, #27
    ccc8:	9a07      	ldr	r2, [sp, #28]
    ccca:	f100 831f 	bmi.w	d30c <_vfiprintf_r+0xb6c>
    ccce:	0671      	lsls	r1, r6, #25
    ccd0:	f140 8319 	bpl.w	d306 <_vfiprintf_r+0xb66>
    ccd4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    ccd8:	9207      	str	r2, [sp, #28]
    ccda:	17da      	asrs	r2, r3, #31
    ccdc:	4611      	mov	r1, r2
    ccde:	e66e      	b.n	c9be <_vfiprintf_r+0x21e>
    cce0:	f016 0310 	ands.w	r3, r6, #16
    cce4:	9907      	ldr	r1, [sp, #28]
    cce6:	f040 8309 	bne.w	d2fc <_vfiprintf_r+0xb5c>
    ccea:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    ccee:	f000 8301 	beq.w	d2f4 <_vfiprintf_r+0xb54>
    ccf2:	461a      	mov	r2, r3
    ccf4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccf8:	9107      	str	r1, [sp, #28]
    ccfa:	b29b      	uxth	r3, r3
    ccfc:	e6c3      	b.n	ca86 <_vfiprintf_r+0x2e6>
    ccfe:	9b07      	ldr	r3, [sp, #28]
    cd00:	461a      	mov	r2, r3
    cd02:	2300      	movs	r3, #0
    cd04:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    cd08:	4613      	mov	r3, r2
    cd0a:	f853 4b04 	ldr.w	r4, [r3], #4
    cd0e:	9303      	str	r3, [sp, #12]
    cd10:	2c00      	cmp	r4, #0
    cd12:	f000 8412 	beq.w	d53a <_vfiprintf_r+0xd9a>
    cd16:	2953      	cmp	r1, #83	; 0x53
    cd18:	f000 8365 	beq.w	d3e6 <_vfiprintf_r+0xc46>
    cd1c:	f016 0510 	ands.w	r5, r6, #16
    cd20:	f040 8361 	bne.w	d3e6 <_vfiprintf_r+0xc46>
    cd24:	1c7b      	adds	r3, r7, #1
    cd26:	f000 84b3 	beq.w	d690 <_vfiprintf_r+0xef0>
    cd2a:	463a      	mov	r2, r7
    cd2c:	4629      	mov	r1, r5
    cd2e:	4620      	mov	r0, r4
    cd30:	f7fe fc7e 	bl	b630 <memchr>
    cd34:	9008      	str	r0, [sp, #32]
    cd36:	2800      	cmp	r0, #0
    cd38:	f000 849f 	beq.w	d67a <_vfiprintf_r+0xeda>
    cd3c:	1b03      	subs	r3, r0, r4
    cd3e:	9a03      	ldr	r2, [sp, #12]
    cd40:	9304      	str	r3, [sp, #16]
    cd42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cd46:	462f      	mov	r7, r5
    cd48:	9207      	str	r2, [sp, #28]
    cd4a:	9303      	str	r3, [sp, #12]
    cd4c:	9508      	str	r5, [sp, #32]
    cd4e:	e657      	b.n	ca00 <_vfiprintf_r+0x260>
    cd50:	2943      	cmp	r1, #67	; 0x43
    cd52:	d002      	beq.n	cd5a <_vfiprintf_r+0x5ba>
    cd54:	06f5      	lsls	r5, r6, #27
    cd56:	f140 832d 	bpl.w	d3b4 <_vfiprintf_r+0xc14>
    cd5a:	9d07      	ldr	r5, [sp, #28]
    cd5c:	2208      	movs	r2, #8
    cd5e:	2100      	movs	r1, #0
    cd60:	a816      	add	r0, sp, #88	; 0x58
    cd62:	ac2b      	add	r4, sp, #172	; 0xac
    cd64:	f7fb fe7a 	bl	8a5c <memset>
    cd68:	ab16      	add	r3, sp, #88	; 0x58
    cd6a:	f855 2b04 	ldr.w	r2, [r5], #4
    cd6e:	4621      	mov	r1, r4
    cd70:	4658      	mov	r0, fp
    cd72:	f7ff fc13 	bl	c59c <_wcrtomb_r>
    cd76:	4603      	mov	r3, r0
    cd78:	3301      	adds	r3, #1
    cd7a:	9004      	str	r0, [sp, #16]
    cd7c:	f000 84b3 	beq.w	d6e6 <_vfiprintf_r+0xf46>
    cd80:	9b04      	ldr	r3, [sp, #16]
    cd82:	9507      	str	r5, [sp, #28]
    cd84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cd88:	9303      	str	r3, [sp, #12]
    cd8a:	2300      	movs	r3, #0
    cd8c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    cd90:	e703      	b.n	cb9a <_vfiprintf_r+0x3fa>
    cd92:	9b07      	ldr	r3, [sp, #28]
    cd94:	f853 2b04 	ldr.w	r2, [r3], #4
    cd98:	9206      	str	r2, [sp, #24]
    cd9a:	2a00      	cmp	r2, #0
    cd9c:	f280 829c 	bge.w	d2d8 <_vfiprintf_r+0xb38>
    cda0:	9a06      	ldr	r2, [sp, #24]
    cda2:	4252      	negs	r2, r2
    cda4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    cda8:	f898 1000 	ldrb.w	r1, [r8]
    cdac:	f046 0604 	orr.w	r6, r6, #4
    cdb0:	e569      	b.n	c886 <_vfiprintf_r+0xe6>
    cdb2:	f898 1000 	ldrb.w	r1, [r8]
    cdb6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    cdba:	e564      	b.n	c886 <_vfiprintf_r+0xe6>
    cdbc:	f898 1000 	ldrb.w	r1, [r8]
    cdc0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    cdc4:	e55f      	b.n	c886 <_vfiprintf_r+0xe6>
    cdc6:	4642      	mov	r2, r8
    cdc8:	f812 1b01 	ldrb.w	r1, [r2], #1
    cdcc:	292a      	cmp	r1, #42	; 0x2a
    cdce:	f000 8496 	beq.w	d6fe <_vfiprintf_r+0xf5e>
    cdd2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cdd6:	2b09      	cmp	r3, #9
    cdd8:	4690      	mov	r8, r2
    cdda:	f04f 0700 	mov.w	r7, #0
    cdde:	f63f ad54 	bhi.w	c88a <_vfiprintf_r+0xea>
    cde2:	f818 1b01 	ldrb.w	r1, [r8], #1
    cde6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    cdea:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    cdee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cdf2:	2b09      	cmp	r3, #9
    cdf4:	d9f5      	bls.n	cde2 <_vfiprintf_r+0x642>
    cdf6:	e548      	b.n	c88a <_vfiprintf_r+0xea>
    cdf8:	f898 1000 	ldrb.w	r1, [r8]
    cdfc:	f046 0601 	orr.w	r6, r6, #1
    ce00:	e541      	b.n	c886 <_vfiprintf_r+0xe6>
    ce02:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ce06:	2b00      	cmp	r3, #0
    ce08:	f47f adc2 	bne.w	c990 <_vfiprintf_r+0x1f0>
    ce0c:	2320      	movs	r3, #32
    ce0e:	f898 1000 	ldrb.w	r1, [r8]
    ce12:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ce16:	e536      	b.n	c886 <_vfiprintf_r+0xe6>
    ce18:	f898 1000 	ldrb.w	r1, [r8]
    ce1c:	296c      	cmp	r1, #108	; 0x6c
    ce1e:	bf03      	ittte	eq
    ce20:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    ce24:	f046 0620 	orreq.w	r6, r6, #32
    ce28:	f108 0801 	addeq.w	r8, r8, #1
    ce2c:	f046 0610 	orrne.w	r6, r6, #16
    ce30:	e529      	b.n	c886 <_vfiprintf_r+0xe6>
    ce32:	f898 1000 	ldrb.w	r1, [r8]
    ce36:	2968      	cmp	r1, #104	; 0x68
    ce38:	bf03      	ittte	eq
    ce3a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    ce3e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    ce42:	f108 0801 	addeq.w	r8, r8, #1
    ce46:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    ce4a:	e51c      	b.n	c886 <_vfiprintf_r+0xe6>
    ce4c:	f046 0310 	orr.w	r3, r6, #16
    ce50:	9303      	str	r3, [sp, #12]
    ce52:	9b03      	ldr	r3, [sp, #12]
    ce54:	f013 0220 	ands.w	r2, r3, #32
    ce58:	f000 8206 	beq.w	d268 <_vfiprintf_r+0xac8>
    ce5c:	9b07      	ldr	r3, [sp, #28]
    ce5e:	3307      	adds	r3, #7
    ce60:	f023 0307 	bic.w	r3, r3, #7
    ce64:	4619      	mov	r1, r3
    ce66:	685a      	ldr	r2, [r3, #4]
    ce68:	f851 3b08 	ldr.w	r3, [r1], #8
    ce6c:	9107      	str	r1, [sp, #28]
    ce6e:	2101      	movs	r1, #1
    ce70:	e60d      	b.n	ca8e <_vfiprintf_r+0x2ee>
    ce72:	9a07      	ldr	r2, [sp, #28]
    ce74:	f046 0302 	orr.w	r3, r6, #2
    ce78:	9303      	str	r3, [sp, #12]
    ce7a:	f852 3b04 	ldr.w	r3, [r2], #4
    ce7e:	9207      	str	r2, [sp, #28]
    ce80:	f647 0230 	movw	r2, #30768	; 0x7830
    ce84:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    ce88:	4ab8      	ldr	r2, [pc, #736]	; (d16c <_vfiprintf_r+0x9cc>)
    ce8a:	920c      	str	r2, [sp, #48]	; 0x30
    ce8c:	2102      	movs	r1, #2
    ce8e:	2200      	movs	r2, #0
    ce90:	e5fd      	b.n	ca8e <_vfiprintf_r+0x2ee>
    ce92:	06b7      	lsls	r7, r6, #26
    ce94:	f100 8248 	bmi.w	d328 <_vfiprintf_r+0xb88>
    ce98:	06f5      	lsls	r5, r6, #27
    ce9a:	f100 8346 	bmi.w	d52a <_vfiprintf_r+0xd8a>
    ce9e:	0674      	lsls	r4, r6, #25
    cea0:	f100 83d5 	bmi.w	d64e <_vfiprintf_r+0xeae>
    cea4:	05b0      	lsls	r0, r6, #22
    cea6:	f140 8340 	bpl.w	d52a <_vfiprintf_r+0xd8a>
    ceaa:	9b07      	ldr	r3, [sp, #28]
    ceac:	9905      	ldr	r1, [sp, #20]
    ceae:	f853 2b04 	ldr.w	r2, [r3], #4
    ceb2:	9307      	str	r3, [sp, #28]
    ceb4:	7011      	strb	r1, [r2, #0]
    ceb6:	e4be      	b.n	c836 <_vfiprintf_r+0x96>
    ceb8:	9603      	str	r6, [sp, #12]
    ceba:	2901      	cmp	r1, #1
    cebc:	f43f ad8c 	beq.w	c9d8 <_vfiprintf_r+0x238>
    cec0:	2902      	cmp	r1, #2
    cec2:	ac44      	add	r4, sp, #272	; 0x110
    cec4:	d111      	bne.n	ceea <_vfiprintf_r+0x74a>
    cec6:	980c      	ldr	r0, [sp, #48]	; 0x30
    cec8:	f003 010f 	and.w	r1, r3, #15
    cecc:	091b      	lsrs	r3, r3, #4
    cece:	5c41      	ldrb	r1, [r0, r1]
    ced0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    ced4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    ced8:	0912      	lsrs	r2, r2, #4
    ceda:	ea53 0102 	orrs.w	r1, r3, r2
    cede:	d1f3      	bne.n	cec8 <_vfiprintf_r+0x728>
    cee0:	9e03      	ldr	r6, [sp, #12]
    cee2:	ab44      	add	r3, sp, #272	; 0x110
    cee4:	1b1b      	subs	r3, r3, r4
    cee6:	9304      	str	r3, [sp, #16]
    cee8:	e583      	b.n	c9f2 <_vfiprintf_r+0x252>
    ceea:	f003 0107 	and.w	r1, r3, #7
    ceee:	08db      	lsrs	r3, r3, #3
    cef0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    cef4:	08d2      	lsrs	r2, r2, #3
    cef6:	3130      	adds	r1, #48	; 0x30
    cef8:	ea53 0502 	orrs.w	r5, r3, r2
    cefc:	4620      	mov	r0, r4
    cefe:	f804 1d01 	strb.w	r1, [r4, #-1]!
    cf02:	d1f2      	bne.n	ceea <_vfiprintf_r+0x74a>
    cf04:	9e03      	ldr	r6, [sp, #12]
    cf06:	07f3      	lsls	r3, r6, #31
    cf08:	d5eb      	bpl.n	cee2 <_vfiprintf_r+0x742>
    cf0a:	2930      	cmp	r1, #48	; 0x30
    cf0c:	d0e8      	beq.n	cee0 <_vfiprintf_r+0x740>
    cf0e:	2330      	movs	r3, #48	; 0x30
    cf10:	3802      	subs	r0, #2
    cf12:	f804 3c01 	strb.w	r3, [r4, #-1]
    cf16:	ab44      	add	r3, sp, #272	; 0x110
    cf18:	1a1b      	subs	r3, r3, r0
    cf1a:	9e03      	ldr	r6, [sp, #12]
    cf1c:	9304      	str	r3, [sp, #16]
    cf1e:	4604      	mov	r4, r0
    cf20:	e567      	b.n	c9f2 <_vfiprintf_r+0x252>
    cf22:	9b04      	ldr	r3, [sp, #16]
    cf24:	941b      	str	r4, [sp, #108]	; 0x6c
    cf26:	2201      	movs	r2, #1
    cf28:	931c      	str	r3, [sp, #112]	; 0x70
    cf2a:	931a      	str	r3, [sp, #104]	; 0x68
    cf2c:	9219      	str	r2, [sp, #100]	; 0x64
    cf2e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cf32:	f109 0908 	add.w	r9, r9, #8
    cf36:	e69d      	b.n	cc74 <_vfiprintf_r+0x4d4>
    cf38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cf3c:	e47b      	b.n	c836 <_vfiprintf_r+0x96>
    cf3e:	9a06      	ldr	r2, [sp, #24]
    cf40:	9d03      	ldr	r5, [sp, #12]
    cf42:	1b55      	subs	r5, r2, r5
    cf44:	2d00      	cmp	r5, #0
    cf46:	f77f ae76 	ble.w	cc36 <_vfiprintf_r+0x496>
    cf4a:	2d10      	cmp	r5, #16
    cf4c:	f340 83bb 	ble.w	d6c6 <_vfiprintf_r+0xf26>
    cf50:	9409      	str	r4, [sp, #36]	; 0x24
    cf52:	ee18 4a10 	vmov	r4, s16
    cf56:	e007      	b.n	cf68 <_vfiprintf_r+0x7c8>
    cf58:	f100 0c02 	add.w	ip, r0, #2
    cf5c:	f109 0908 	add.w	r9, r9, #8
    cf60:	4610      	mov	r0, r2
    cf62:	3d10      	subs	r5, #16
    cf64:	2d10      	cmp	r5, #16
    cf66:	dd1e      	ble.n	cfa6 <_vfiprintf_r+0x806>
    cf68:	4981      	ldr	r1, [pc, #516]	; (d170 <_vfiprintf_r+0x9d0>)
    cf6a:	f8c9 1000 	str.w	r1, [r9]
    cf6e:	1c42      	adds	r2, r0, #1
    cf70:	3310      	adds	r3, #16
    cf72:	2110      	movs	r1, #16
    cf74:	2a07      	cmp	r2, #7
    cf76:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    cf7a:	f8c9 1004 	str.w	r1, [r9, #4]
    cf7e:	ddeb      	ble.n	cf58 <_vfiprintf_r+0x7b8>
    cf80:	aa18      	add	r2, sp, #96	; 0x60
    cf82:	2b00      	cmp	r3, #0
    cf84:	d074      	beq.n	d070 <_vfiprintf_r+0x8d0>
    cf86:	4621      	mov	r1, r4
    cf88:	4658      	mov	r0, fp
    cf8a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cf8e:	f7ff fbcb 	bl	c728 <__sprint_r.part.0>
    cf92:	2800      	cmp	r0, #0
    cf94:	f47f addb 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    cf98:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    cf9c:	3d10      	subs	r5, #16
    cf9e:	2d10      	cmp	r5, #16
    cfa0:	f100 0c01 	add.w	ip, r0, #1
    cfa4:	dce0      	bgt.n	cf68 <_vfiprintf_r+0x7c8>
    cfa6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cfa8:	4a71      	ldr	r2, [pc, #452]	; (d170 <_vfiprintf_r+0x9d0>)
    cfaa:	f8c9 5004 	str.w	r5, [r9, #4]
    cfae:	442b      	add	r3, r5
    cfb0:	f1bc 0f07 	cmp.w	ip, #7
    cfb4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    cfb8:	f8c9 2000 	str.w	r2, [r9]
    cfbc:	f340 8194 	ble.w	d2e8 <_vfiprintf_r+0xb48>
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	f000 831f 	beq.w	d604 <_vfiprintf_r+0xe64>
    cfc6:	ee18 1a10 	vmov	r1, s16
    cfca:	aa18      	add	r2, sp, #96	; 0x60
    cfcc:	4658      	mov	r0, fp
    cfce:	f7ff fbab 	bl	c728 <__sprint_r.part.0>
    cfd2:	2800      	cmp	r0, #0
    cfd4:	f47f adbb 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    cfd8:	9a04      	ldr	r2, [sp, #16]
    cfda:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    cfde:	1abd      	subs	r5, r7, r2
    cfe0:	2d00      	cmp	r5, #0
    cfe2:	f100 0101 	add.w	r1, r0, #1
    cfe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cfea:	f77f ae29 	ble.w	cc40 <_vfiprintf_r+0x4a0>
    cfee:	2d10      	cmp	r5, #16
    cff0:	dd29      	ble.n	d046 <_vfiprintf_r+0x8a6>
    cff2:	9409      	str	r4, [sp, #36]	; 0x24
    cff4:	2710      	movs	r7, #16
    cff6:	ee18 4a10 	vmov	r4, s16
    cffa:	e007      	b.n	d00c <_vfiprintf_r+0x86c>
    cffc:	f100 0c02 	add.w	ip, r0, #2
    d000:	f109 0908 	add.w	r9, r9, #8
    d004:	4610      	mov	r0, r2
    d006:	3d10      	subs	r5, #16
    d008:	2d10      	cmp	r5, #16
    d00a:	dd1a      	ble.n	d042 <_vfiprintf_r+0x8a2>
    d00c:	1c42      	adds	r2, r0, #1
    d00e:	4958      	ldr	r1, [pc, #352]	; (d170 <_vfiprintf_r+0x9d0>)
    d010:	3310      	adds	r3, #16
    d012:	2a07      	cmp	r2, #7
    d014:	e9c9 1700 	strd	r1, r7, [r9]
    d018:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d01c:	ddee      	ble.n	cffc <_vfiprintf_r+0x85c>
    d01e:	aa18      	add	r2, sp, #96	; 0x60
    d020:	b303      	cbz	r3, d064 <_vfiprintf_r+0x8c4>
    d022:	4621      	mov	r1, r4
    d024:	4658      	mov	r0, fp
    d026:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d02a:	f7ff fb7d 	bl	c728 <__sprint_r.part.0>
    d02e:	2800      	cmp	r0, #0
    d030:	f47f ad8d 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d034:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d038:	3d10      	subs	r5, #16
    d03a:	2d10      	cmp	r5, #16
    d03c:	f100 0c01 	add.w	ip, r0, #1
    d040:	dce4      	bgt.n	d00c <_vfiprintf_r+0x86c>
    d042:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d044:	4661      	mov	r1, ip
    d046:	4a4a      	ldr	r2, [pc, #296]	; (d170 <_vfiprintf_r+0x9d0>)
    d048:	f8c9 5004 	str.w	r5, [r9, #4]
    d04c:	442b      	add	r3, r5
    d04e:	2907      	cmp	r1, #7
    d050:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d054:	f8c9 2000 	str.w	r2, [r9]
    d058:	f300 80e7 	bgt.w	d22a <_vfiprintf_r+0xa8a>
    d05c:	f109 0908 	add.w	r9, r9, #8
    d060:	3101      	adds	r1, #1
    d062:	e5ed      	b.n	cc40 <_vfiprintf_r+0x4a0>
    d064:	f04f 0c01 	mov.w	ip, #1
    d068:	4618      	mov	r0, r3
    d06a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d06e:	e7ca      	b.n	d006 <_vfiprintf_r+0x866>
    d070:	f04f 0c01 	mov.w	ip, #1
    d074:	4618      	mov	r0, r3
    d076:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d07a:	e772      	b.n	cf62 <_vfiprintf_r+0x7c2>
    d07c:	2b00      	cmp	r3, #0
    d07e:	f000 8104 	beq.w	d28a <_vfiprintf_r+0xaea>
    d082:	ee18 1a10 	vmov	r1, s16
    d086:	aa18      	add	r2, sp, #96	; 0x60
    d088:	4658      	mov	r0, fp
    d08a:	f7ff fb4d 	bl	c728 <__sprint_r.part.0>
    d08e:	2800      	cmp	r0, #0
    d090:	f47f ad5d 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d094:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d098:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d09c:	1c41      	adds	r1, r0, #1
    d09e:	e5a7      	b.n	cbf0 <_vfiprintf_r+0x450>
    d0a0:	2302      	movs	r3, #2
    d0a2:	aa11      	add	r2, sp, #68	; 0x44
    d0a4:	931c      	str	r3, [sp, #112]	; 0x70
    d0a6:	921b      	str	r2, [sp, #108]	; 0x6c
    d0a8:	2101      	movs	r1, #1
    d0aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d0ae:	4608      	mov	r0, r1
    d0b0:	f109 0908 	add.w	r9, r9, #8
    d0b4:	1c41      	adds	r1, r0, #1
    d0b6:	e5ba      	b.n	cc2e <_vfiprintf_r+0x48e>
    d0b8:	2d10      	cmp	r5, #16
    d0ba:	f340 82e5 	ble.w	d688 <_vfiprintf_r+0xee8>
    d0be:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d0c2:	940f      	str	r4, [sp, #60]	; 0x3c
    d0c4:	4608      	mov	r0, r1
    d0c6:	ee18 4a10 	vmov	r4, s16
    d0ca:	e007      	b.n	d0dc <_vfiprintf_r+0x93c>
    d0cc:	f100 0c02 	add.w	ip, r0, #2
    d0d0:	f109 0908 	add.w	r9, r9, #8
    d0d4:	4610      	mov	r0, r2
    d0d6:	3d10      	subs	r5, #16
    d0d8:	2d10      	cmp	r5, #16
    d0da:	dd1d      	ble.n	d118 <_vfiprintf_r+0x978>
    d0dc:	4925      	ldr	r1, [pc, #148]	; (d174 <_vfiprintf_r+0x9d4>)
    d0de:	f8c9 1000 	str.w	r1, [r9]
    d0e2:	1c42      	adds	r2, r0, #1
    d0e4:	3310      	adds	r3, #16
    d0e6:	2110      	movs	r1, #16
    d0e8:	2a07      	cmp	r2, #7
    d0ea:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d0ee:	f8c9 1004 	str.w	r1, [r9, #4]
    d0f2:	ddeb      	ble.n	d0cc <_vfiprintf_r+0x92c>
    d0f4:	aa18      	add	r2, sp, #96	; 0x60
    d0f6:	b303      	cbz	r3, d13a <_vfiprintf_r+0x99a>
    d0f8:	4621      	mov	r1, r4
    d0fa:	4658      	mov	r0, fp
    d0fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d100:	f7ff fb12 	bl	c728 <__sprint_r.part.0>
    d104:	2800      	cmp	r0, #0
    d106:	f47f ad22 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d10a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d10e:	3d10      	subs	r5, #16
    d110:	2d10      	cmp	r5, #16
    d112:	f100 0c01 	add.w	ip, r0, #1
    d116:	dce1      	bgt.n	d0dc <_vfiprintf_r+0x93c>
    d118:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    d11a:	4660      	mov	r0, ip
    d11c:	4a15      	ldr	r2, [pc, #84]	; (d174 <_vfiprintf_r+0x9d4>)
    d11e:	f8c9 5004 	str.w	r5, [r9, #4]
    d122:	442b      	add	r3, r5
    d124:	2807      	cmp	r0, #7
    d126:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d12a:	f8c9 2000 	str.w	r2, [r9]
    d12e:	f300 80c1 	bgt.w	d2b4 <_vfiprintf_r+0xb14>
    d132:	f109 0908 	add.w	r9, r9, #8
    d136:	1c41      	adds	r1, r0, #1
    d138:	e546      	b.n	cbc8 <_vfiprintf_r+0x428>
    d13a:	4618      	mov	r0, r3
    d13c:	f04f 0c01 	mov.w	ip, #1
    d140:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d144:	e7c7      	b.n	d0d6 <_vfiprintf_r+0x936>
    d146:	0776      	lsls	r6, r6, #29
    d148:	9319      	str	r3, [sp, #100]	; 0x64
    d14a:	d553      	bpl.n	d1f4 <_vfiprintf_r+0xa54>
    d14c:	9a06      	ldr	r2, [sp, #24]
    d14e:	9903      	ldr	r1, [sp, #12]
    d150:	1a54      	subs	r4, r2, r1
    d152:	2c00      	cmp	r4, #0
    d154:	dd4e      	ble.n	d1f4 <_vfiprintf_r+0xa54>
    d156:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d15a:	2c10      	cmp	r4, #16
    d15c:	f340 82b0 	ble.w	d6c0 <_vfiprintf_r+0xf20>
    d160:	9919      	ldr	r1, [sp, #100]	; 0x64
    d162:	ee18 6a10 	vmov	r6, s16
    d166:	2510      	movs	r5, #16
    d168:	e00d      	b.n	d186 <_vfiprintf_r+0x9e6>
    d16a:	bf00      	nop
    d16c:	2000139c 	.word	0x2000139c
    d170:	20001c78 	.word	0x20001c78
    d174:	200013e0 	.word	0x200013e0
    d178:	1c88      	adds	r0, r1, #2
    d17a:	f109 0908 	add.w	r9, r9, #8
    d17e:	4611      	mov	r1, r2
    d180:	3c10      	subs	r4, #16
    d182:	2c10      	cmp	r4, #16
    d184:	dd1a      	ble.n	d1bc <_vfiprintf_r+0xa1c>
    d186:	1c4a      	adds	r2, r1, #1
    d188:	48b3      	ldr	r0, [pc, #716]	; (d458 <_vfiprintf_r+0xcb8>)
    d18a:	3310      	adds	r3, #16
    d18c:	2a07      	cmp	r2, #7
    d18e:	e9c9 0500 	strd	r0, r5, [r9]
    d192:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d196:	ddef      	ble.n	d178 <_vfiprintf_r+0x9d8>
    d198:	aa18      	add	r2, sp, #96	; 0x60
    d19a:	b333      	cbz	r3, d1ea <_vfiprintf_r+0xa4a>
    d19c:	4631      	mov	r1, r6
    d19e:	4658      	mov	r0, fp
    d1a0:	f7ff fac2 	bl	c728 <__sprint_r.part.0>
    d1a4:	2800      	cmp	r0, #0
    d1a6:	f47f acd2 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d1aa:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d1ae:	3c10      	subs	r4, #16
    d1b0:	2c10      	cmp	r4, #16
    d1b2:	f101 0001 	add.w	r0, r1, #1
    d1b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d1ba:	dce4      	bgt.n	d186 <_vfiprintf_r+0x9e6>
    d1bc:	4aa6      	ldr	r2, [pc, #664]	; (d458 <_vfiprintf_r+0xcb8>)
    d1be:	f8c9 4004 	str.w	r4, [r9, #4]
    d1c2:	4423      	add	r3, r4
    d1c4:	2807      	cmp	r0, #7
    d1c6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d1ca:	f8c9 2000 	str.w	r2, [r9]
    d1ce:	f77f ad59 	ble.w	cc84 <_vfiprintf_r+0x4e4>
    d1d2:	b17b      	cbz	r3, d1f4 <_vfiprintf_r+0xa54>
    d1d4:	ee18 1a10 	vmov	r1, s16
    d1d8:	aa18      	add	r2, sp, #96	; 0x60
    d1da:	4658      	mov	r0, fp
    d1dc:	f7ff faa4 	bl	c728 <__sprint_r.part.0>
    d1e0:	2800      	cmp	r0, #0
    d1e2:	f47f acb4 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d1e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d1e8:	e54c      	b.n	cc84 <_vfiprintf_r+0x4e4>
    d1ea:	2001      	movs	r0, #1
    d1ec:	4619      	mov	r1, r3
    d1ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d1f2:	e7c5      	b.n	d180 <_vfiprintf_r+0x9e0>
    d1f4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    d1f8:	9903      	ldr	r1, [sp, #12]
    d1fa:	428a      	cmp	r2, r1
    d1fc:	bfac      	ite	ge
    d1fe:	189b      	addge	r3, r3, r2
    d200:	185b      	addlt	r3, r3, r1
    d202:	9305      	str	r3, [sp, #20]
    d204:	e549      	b.n	cc9a <_vfiprintf_r+0x4fa>
    d206:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    d20a:	058f      	lsls	r7, r1, #22
    d20c:	ee18 3a10 	vmov	r3, s16
    d210:	b28a      	uxth	r2, r1
    d212:	f53f aae8 	bmi.w	c7e6 <_vfiprintf_r+0x46>
    d216:	ee18 5a10 	vmov	r5, s16
    d21a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d21c:	f7fb fd3c 	bl	8c98 <__retarget_lock_acquire_recursive>
    d220:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    d224:	b28a      	uxth	r2, r1
    d226:	f7ff bade 	b.w	c7e6 <_vfiprintf_r+0x46>
    d22a:	2b00      	cmp	r3, #0
    d22c:	f43f ae79 	beq.w	cf22 <_vfiprintf_r+0x782>
    d230:	ee18 1a10 	vmov	r1, s16
    d234:	aa18      	add	r2, sp, #96	; 0x60
    d236:	4658      	mov	r0, fp
    d238:	f7ff fa76 	bl	c728 <__sprint_r.part.0>
    d23c:	2800      	cmp	r0, #0
    d23e:	f47f ac86 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d242:	9919      	ldr	r1, [sp, #100]	; 0x64
    d244:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d246:	3101      	adds	r1, #1
    d248:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d24c:	e4f8      	b.n	cc40 <_vfiprintf_r+0x4a0>
    d24e:	9219      	str	r2, [sp, #100]	; 0x64
    d250:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d254:	e45e      	b.n	cb14 <_vfiprintf_r+0x374>
    d256:	2f00      	cmp	r7, #0
    d258:	f47f abc3 	bne.w	c9e2 <_vfiprintf_r+0x242>
    d25c:	9e03      	ldr	r6, [sp, #12]
    d25e:	2700      	movs	r7, #0
    d260:	9704      	str	r7, [sp, #16]
    d262:	ac44      	add	r4, sp, #272	; 0x110
    d264:	f7ff bbc5 	b.w	c9f2 <_vfiprintf_r+0x252>
    d268:	9b03      	ldr	r3, [sp, #12]
    d26a:	f013 0310 	ands.w	r3, r3, #16
    d26e:	d154      	bne.n	d31a <_vfiprintf_r+0xb7a>
    d270:	9a03      	ldr	r2, [sp, #12]
    d272:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    d276:	f000 816b 	beq.w	d550 <_vfiprintf_r+0xdb0>
    d27a:	9907      	ldr	r1, [sp, #28]
    d27c:	461a      	mov	r2, r3
    d27e:	f851 3b04 	ldr.w	r3, [r1], #4
    d282:	9107      	str	r1, [sp, #28]
    d284:	b29b      	uxth	r3, r3
    d286:	2101      	movs	r1, #1
    d288:	e401      	b.n	ca8e <_vfiprintf_r+0x2ee>
    d28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d28c:	2a00      	cmp	r2, #0
    d28e:	d164      	bne.n	d35a <_vfiprintf_r+0xbba>
    d290:	4618      	mov	r0, r3
    d292:	2101      	movs	r1, #1
    d294:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d298:	e4c9      	b.n	cc2e <_vfiprintf_r+0x48e>
    d29a:	2101      	movs	r1, #1
    d29c:	4618      	mov	r0, r3
    d29e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d2a2:	e4c4      	b.n	cc2e <_vfiprintf_r+0x48e>
    d2a4:	425b      	negs	r3, r3
    d2a6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    d2aa:	9603      	str	r6, [sp, #12]
    d2ac:	202d      	movs	r0, #45	; 0x2d
    d2ae:	2101      	movs	r1, #1
    d2b0:	f7ff bbee 	b.w	ca90 <_vfiprintf_r+0x2f0>
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	f000 8088 	beq.w	d3ca <_vfiprintf_r+0xc2a>
    d2ba:	ee18 1a10 	vmov	r1, s16
    d2be:	aa18      	add	r2, sp, #96	; 0x60
    d2c0:	4658      	mov	r0, fp
    d2c2:	f7ff fa31 	bl	c728 <__sprint_r.part.0>
    d2c6:	2800      	cmp	r0, #0
    d2c8:	f47f ac41 	bne.w	cb4e <_vfiprintf_r+0x3ae>
    d2cc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d2d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d2d4:	1c41      	adds	r1, r0, #1
    d2d6:	e477      	b.n	cbc8 <_vfiprintf_r+0x428>
    d2d8:	f898 1000 	ldrb.w	r1, [r8]
    d2dc:	9307      	str	r3, [sp, #28]
    d2de:	f7ff bad2 	b.w	c886 <_vfiprintf_r+0xe6>
    d2e2:	ac44      	add	r4, sp, #272	; 0x110
    d2e4:	f7ff bb85 	b.w	c9f2 <_vfiprintf_r+0x252>
    d2e8:	f109 0908 	add.w	r9, r9, #8
    d2ec:	f10c 0101 	add.w	r1, ip, #1
    d2f0:	4660      	mov	r0, ip
    d2f2:	e4a0      	b.n	cc36 <_vfiprintf_r+0x496>
    d2f4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    d2f8:	f040 8197 	bne.w	d62a <_vfiprintf_r+0xe8a>
    d2fc:	f851 3b04 	ldr.w	r3, [r1], #4
    d300:	9107      	str	r1, [sp, #28]
    d302:	f7ff bbc0 	b.w	ca86 <_vfiprintf_r+0x2e6>
    d306:	05b3      	lsls	r3, r6, #22
    d308:	f100 8188 	bmi.w	d61c <_vfiprintf_r+0xe7c>
    d30c:	f852 3b04 	ldr.w	r3, [r2], #4
    d310:	9207      	str	r2, [sp, #28]
    d312:	17da      	asrs	r2, r3, #31
    d314:	4611      	mov	r1, r2
    d316:	f7ff bb52 	b.w	c9be <_vfiprintf_r+0x21e>
    d31a:	9907      	ldr	r1, [sp, #28]
    d31c:	f851 3b04 	ldr.w	r3, [r1], #4
    d320:	9107      	str	r1, [sp, #28]
    d322:	2101      	movs	r1, #1
    d324:	f7ff bbb3 	b.w	ca8e <_vfiprintf_r+0x2ee>
    d328:	9b07      	ldr	r3, [sp, #28]
    d32a:	9805      	ldr	r0, [sp, #20]
    d32c:	f853 1b04 	ldr.w	r1, [r3], #4
    d330:	9307      	str	r3, [sp, #28]
    d332:	17c2      	asrs	r2, r0, #31
    d334:	e9c1 0200 	strd	r0, r2, [r1]
    d338:	f7ff ba7d 	b.w	c836 <_vfiprintf_r+0x96>
    d33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d33e:	2b00      	cmp	r3, #0
    d340:	f43f ab26 	beq.w	c990 <_vfiprintf_r+0x1f0>
    d344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	2b00      	cmp	r3, #0
    d34a:	f43f ab21 	beq.w	c990 <_vfiprintf_r+0x1f0>
    d34e:	f898 1000 	ldrb.w	r1, [r8]
    d352:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    d356:	f7ff ba96 	b.w	c886 <_vfiprintf_r+0xe6>
    d35a:	2302      	movs	r3, #2
    d35c:	aa11      	add	r2, sp, #68	; 0x44
    d35e:	931c      	str	r3, [sp, #112]	; 0x70
    d360:	921b      	str	r2, [sp, #108]	; 0x6c
    d362:	2001      	movs	r0, #1
    d364:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d368:	e6a2      	b.n	d0b0 <_vfiprintf_r+0x910>
    d36a:	9603      	str	r6, [sp, #12]
    d36c:	e571      	b.n	ce52 <_vfiprintf_r+0x6b2>
    d36e:	4b3b      	ldr	r3, [pc, #236]	; (d45c <_vfiprintf_r+0xcbc>)
    d370:	930c      	str	r3, [sp, #48]	; 0x30
    d372:	f016 0220 	ands.w	r2, r6, #32
    d376:	d059      	beq.n	d42c <_vfiprintf_r+0xc8c>
    d378:	9b07      	ldr	r3, [sp, #28]
    d37a:	3307      	adds	r3, #7
    d37c:	f023 0307 	bic.w	r3, r3, #7
    d380:	4618      	mov	r0, r3
    d382:	685a      	ldr	r2, [r3, #4]
    d384:	f850 3b08 	ldr.w	r3, [r0], #8
    d388:	9007      	str	r0, [sp, #28]
    d38a:	07f4      	lsls	r4, r6, #31
    d38c:	d509      	bpl.n	d3a2 <_vfiprintf_r+0xc02>
    d38e:	ea53 0002 	orrs.w	r0, r3, r2
    d392:	d006      	beq.n	d3a2 <_vfiprintf_r+0xc02>
    d394:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    d398:	2130      	movs	r1, #48	; 0x30
    d39a:	f046 0602 	orr.w	r6, r6, #2
    d39e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    d3a2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    d3a6:	9103      	str	r1, [sp, #12]
    d3a8:	2102      	movs	r1, #2
    d3aa:	f7ff bb70 	b.w	ca8e <_vfiprintf_r+0x2ee>
    d3ae:	4b2c      	ldr	r3, [pc, #176]	; (d460 <_vfiprintf_r+0xcc0>)
    d3b0:	930c      	str	r3, [sp, #48]	; 0x30
    d3b2:	e7de      	b.n	d372 <_vfiprintf_r+0xbd2>
    d3b4:	9b07      	ldr	r3, [sp, #28]
    d3b6:	2101      	movs	r1, #1
    d3b8:	f853 2b04 	ldr.w	r2, [r3], #4
    d3bc:	9103      	str	r1, [sp, #12]
    d3be:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    d3c2:	9307      	str	r3, [sp, #28]
    d3c4:	9104      	str	r1, [sp, #16]
    d3c6:	ac2b      	add	r4, sp, #172	; 0xac
    d3c8:	e4df      	b.n	cd8a <_vfiprintf_r+0x5ea>
    d3ca:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d3ce:	2a00      	cmp	r2, #0
    d3d0:	f040 8132 	bne.w	d638 <_vfiprintf_r+0xe98>
    d3d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d3d6:	2a00      	cmp	r2, #0
    d3d8:	f47f ae62 	bne.w	d0a0 <_vfiprintf_r+0x900>
    d3dc:	4618      	mov	r0, r3
    d3de:	2101      	movs	r1, #1
    d3e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d3e4:	e427      	b.n	cc36 <_vfiprintf_r+0x496>
    d3e6:	2100      	movs	r1, #0
    d3e8:	2208      	movs	r2, #8
    d3ea:	a816      	add	r0, sp, #88	; 0x58
    d3ec:	9413      	str	r4, [sp, #76]	; 0x4c
    d3ee:	f7fb fb35 	bl	8a5c <memset>
    d3f2:	1c79      	adds	r1, r7, #1
    d3f4:	f000 80bc 	beq.w	d570 <_vfiprintf_r+0xdd0>
    d3f8:	2500      	movs	r5, #0
    d3fa:	9407      	str	r4, [sp, #28]
    d3fc:	462c      	mov	r4, r5
    d3fe:	e00c      	b.n	d41a <_vfiprintf_r+0xc7a>
    d400:	a92b      	add	r1, sp, #172	; 0xac
    d402:	4658      	mov	r0, fp
    d404:	f7ff f8ca 	bl	c59c <_wcrtomb_r>
    d408:	1c42      	adds	r2, r0, #1
    d40a:	4420      	add	r0, r4
    d40c:	f000 816b 	beq.w	d6e6 <_vfiprintf_r+0xf46>
    d410:	42b8      	cmp	r0, r7
    d412:	dc08      	bgt.n	d426 <_vfiprintf_r+0xc86>
    d414:	f000 8170 	beq.w	d6f8 <_vfiprintf_r+0xf58>
    d418:	4604      	mov	r4, r0
    d41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d41c:	5952      	ldr	r2, [r2, r5]
    d41e:	ab16      	add	r3, sp, #88	; 0x58
    d420:	3504      	adds	r5, #4
    d422:	2a00      	cmp	r2, #0
    d424:	d1ec      	bne.n	d400 <_vfiprintf_r+0xc60>
    d426:	9404      	str	r4, [sp, #16]
    d428:	9c07      	ldr	r4, [sp, #28]
    d42a:	e0af      	b.n	d58c <_vfiprintf_r+0xdec>
    d42c:	f016 0310 	ands.w	r3, r6, #16
    d430:	9807      	ldr	r0, [sp, #28]
    d432:	d10c      	bne.n	d44e <_vfiprintf_r+0xcae>
    d434:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    d438:	d005      	beq.n	d446 <_vfiprintf_r+0xca6>
    d43a:	461a      	mov	r2, r3
    d43c:	f850 3b04 	ldr.w	r3, [r0], #4
    d440:	9007      	str	r0, [sp, #28]
    d442:	b29b      	uxth	r3, r3
    d444:	e7a1      	b.n	d38a <_vfiprintf_r+0xbea>
    d446:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    d44a:	f040 80e1 	bne.w	d610 <_vfiprintf_r+0xe70>
    d44e:	f850 3b04 	ldr.w	r3, [r0], #4
    d452:	9007      	str	r0, [sp, #28]
    d454:	e799      	b.n	d38a <_vfiprintf_r+0xbea>
    d456:	bf00      	nop
    d458:	200013e0 	.word	0x200013e0
    d45c:	2000139c 	.word	0x2000139c
    d460:	200013b0 	.word	0x200013b0
    d464:	9903      	ldr	r1, [sp, #12]
    d466:	9704      	str	r7, [sp, #16]
    d468:	ac44      	add	r4, sp, #272	; 0x110
    d46a:	469e      	mov	lr, r3
    d46c:	ee08 ba90 	vmov	s17, fp
    d470:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    d474:	f04f 0c00 	mov.w	ip, #0
    d478:	4623      	mov	r3, r4
    d47a:	e006      	b.n	d48a <_vfiprintf_r+0xcea>
    d47c:	f1be 0f0a 	cmp.w	lr, #10
    d480:	f172 0200 	sbcs.w	r2, r2, #0
    d484:	d339      	bcc.n	d4fa <_vfiprintf_r+0xd5a>
    d486:	46a6      	mov	lr, r4
    d488:	462a      	mov	r2, r5
    d48a:	49a6      	ldr	r1, [pc, #664]	; (d724 <_vfiprintf_r+0xf84>)
    d48c:	eb1e 0002 	adds.w	r0, lr, r2
    d490:	f140 0000 	adc.w	r0, r0, #0
    d494:	460f      	mov	r7, r1
    d496:	fba1 1400 	umull	r1, r4, r1, r0
    d49a:	f024 0103 	bic.w	r1, r4, #3
    d49e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    d4a2:	1a40      	subs	r0, r0, r1
    d4a4:	ebbe 0100 	subs.w	r1, lr, r0
    d4a8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    d4ac:	f162 0400 	sbc.w	r4, r2, #0
    d4b0:	fb05 f501 	mul.w	r5, r5, r1
    d4b4:	fb07 5504 	mla	r5, r7, r4, r5
    d4b8:	fba1 4107 	umull	r4, r1, r1, r7
    d4bc:	440d      	add	r5, r1
    d4be:	2705      	movs	r7, #5
    d4c0:	f004 0101 	and.w	r1, r4, #1
    d4c4:	fba1 1b07 	umull	r1, fp, r1, r7
    d4c8:	1809      	adds	r1, r1, r0
    d4ca:	0864      	lsrs	r4, r4, #1
    d4cc:	3130      	adds	r1, #48	; 0x30
    d4ce:	f803 1c01 	strb.w	r1, [r3, #-1]
    d4d2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    d4d6:	f10c 0c01 	add.w	ip, ip, #1
    d4da:	3b01      	subs	r3, #1
    d4dc:	086d      	lsrs	r5, r5, #1
    d4de:	2e00      	cmp	r6, #0
    d4e0:	d0cc      	beq.n	d47c <_vfiprintf_r+0xcdc>
    d4e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d4e4:	7809      	ldrb	r1, [r1, #0]
    d4e6:	4561      	cmp	r1, ip
    d4e8:	d1c8      	bne.n	d47c <_vfiprintf_r+0xcdc>
    d4ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d4ee:	d0c5      	beq.n	d47c <_vfiprintf_r+0xcdc>
    d4f0:	f1be 0f0a 	cmp.w	lr, #10
    d4f4:	f172 0200 	sbcs.w	r2, r2, #0
    d4f8:	d26c      	bcs.n	d5d4 <_vfiprintf_r+0xe34>
    d4fa:	461c      	mov	r4, r3
    d4fc:	ab44      	add	r3, sp, #272	; 0x110
    d4fe:	1b1b      	subs	r3, r3, r4
    d500:	9f04      	ldr	r7, [sp, #16]
    d502:	9e03      	ldr	r6, [sp, #12]
    d504:	9304      	str	r3, [sp, #16]
    d506:	ee18 ba90 	vmov	fp, s17
    d50a:	f7ff ba72 	b.w	c9f2 <_vfiprintf_r+0x252>
    d50e:	9603      	str	r6, [sp, #12]
    d510:	f7ff ba62 	b.w	c9d8 <_vfiprintf_r+0x238>
    d514:	4658      	mov	r0, fp
    d516:	f7fb f90f 	bl	8738 <__sinit>
    d51a:	f7ff b95b 	b.w	c7d4 <_vfiprintf_r+0x34>
    d51e:	2901      	cmp	r1, #1
    d520:	9603      	str	r6, [sp, #12]
    d522:	f47f accd 	bne.w	cec0 <_vfiprintf_r+0x720>
    d526:	f7ff ba5c 	b.w	c9e2 <_vfiprintf_r+0x242>
    d52a:	9b07      	ldr	r3, [sp, #28]
    d52c:	9905      	ldr	r1, [sp, #20]
    d52e:	f853 2b04 	ldr.w	r2, [r3], #4
    d532:	6011      	str	r1, [r2, #0]
    d534:	9307      	str	r3, [sp, #28]
    d536:	f7ff b97e 	b.w	c836 <_vfiprintf_r+0x96>
    d53a:	2f06      	cmp	r7, #6
    d53c:	463b      	mov	r3, r7
    d53e:	9a03      	ldr	r2, [sp, #12]
    d540:	4c79      	ldr	r4, [pc, #484]	; (d728 <_vfiprintf_r+0xf88>)
    d542:	9207      	str	r2, [sp, #28]
    d544:	bf28      	it	cs
    d546:	2306      	movcs	r3, #6
    d548:	9304      	str	r3, [sp, #16]
    d54a:	9303      	str	r3, [sp, #12]
    d54c:	f7ff bb25 	b.w	cb9a <_vfiprintf_r+0x3fa>
    d550:	9b03      	ldr	r3, [sp, #12]
    d552:	9907      	ldr	r1, [sp, #28]
    d554:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    d558:	bf14      	ite	ne
    d55a:	f851 3b04 	ldrne.w	r3, [r1], #4
    d55e:	f851 3b04 	ldreq.w	r3, [r1], #4
    d562:	9107      	str	r1, [sp, #28]
    d564:	bf1c      	itt	ne
    d566:	4602      	movne	r2, r0
    d568:	b2db      	uxtbne	r3, r3
    d56a:	2101      	movs	r1, #1
    d56c:	f7ff ba8f 	b.w	ca8e <_vfiprintf_r+0x2ee>
    d570:	ab16      	add	r3, sp, #88	; 0x58
    d572:	9300      	str	r3, [sp, #0]
    d574:	2300      	movs	r3, #0
    d576:	4619      	mov	r1, r3
    d578:	aa13      	add	r2, sp, #76	; 0x4c
    d57a:	4658      	mov	r0, fp
    d57c:	f7ff f834 	bl	c5e8 <_wcsrtombs_r>
    d580:	4603      	mov	r3, r0
    d582:	3301      	adds	r3, #1
    d584:	9004      	str	r0, [sp, #16]
    d586:	f000 80ae 	beq.w	d6e6 <_vfiprintf_r+0xf46>
    d58a:	9413      	str	r4, [sp, #76]	; 0x4c
    d58c:	9b04      	ldr	r3, [sp, #16]
    d58e:	2b00      	cmp	r3, #0
    d590:	d030      	beq.n	d5f4 <_vfiprintf_r+0xe54>
    d592:	2b63      	cmp	r3, #99	; 0x63
    d594:	dc63      	bgt.n	d65e <_vfiprintf_r+0xebe>
    d596:	2300      	movs	r3, #0
    d598:	9308      	str	r3, [sp, #32]
    d59a:	ac2b      	add	r4, sp, #172	; 0xac
    d59c:	2208      	movs	r2, #8
    d59e:	2100      	movs	r1, #0
    d5a0:	a816      	add	r0, sp, #88	; 0x58
    d5a2:	f7fb fa5b 	bl	8a5c <memset>
    d5a6:	9d04      	ldr	r5, [sp, #16]
    d5a8:	ab16      	add	r3, sp, #88	; 0x58
    d5aa:	9300      	str	r3, [sp, #0]
    d5ac:	aa13      	add	r2, sp, #76	; 0x4c
    d5ae:	462b      	mov	r3, r5
    d5b0:	4621      	mov	r1, r4
    d5b2:	4658      	mov	r0, fp
    d5b4:	f7ff f818 	bl	c5e8 <_wcsrtombs_r>
    d5b8:	4285      	cmp	r5, r0
    d5ba:	f040 80ab 	bne.w	d714 <_vfiprintf_r+0xf74>
    d5be:	9b03      	ldr	r3, [sp, #12]
    d5c0:	9a04      	ldr	r2, [sp, #16]
    d5c2:	9307      	str	r3, [sp, #28]
    d5c4:	2300      	movs	r3, #0
    d5c6:	54a3      	strb	r3, [r4, r2]
    d5c8:	461f      	mov	r7, r3
    d5ca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    d5ce:	9303      	str	r3, [sp, #12]
    d5d0:	f7ff ba16 	b.w	ca00 <_vfiprintf_r+0x260>
    d5d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d5d6:	990d      	ldr	r1, [sp, #52]	; 0x34
    d5d8:	1a9b      	subs	r3, r3, r2
    d5da:	4618      	mov	r0, r3
    d5dc:	9308      	str	r3, [sp, #32]
    d5de:	f7fb fa8f 	bl	8b00 <strncpy>
    d5e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d5e4:	9b08      	ldr	r3, [sp, #32]
    d5e6:	784a      	ldrb	r2, [r1, #1]
    d5e8:	b10a      	cbz	r2, d5ee <_vfiprintf_r+0xe4e>
    d5ea:	3101      	adds	r1, #1
    d5ec:	910b      	str	r1, [sp, #44]	; 0x2c
    d5ee:	f04f 0c00 	mov.w	ip, #0
    d5f2:	e748      	b.n	d486 <_vfiprintf_r+0xce6>
    d5f4:	9b03      	ldr	r3, [sp, #12]
    d5f6:	9307      	str	r3, [sp, #28]
    d5f8:	9b04      	ldr	r3, [sp, #16]
    d5fa:	9303      	str	r3, [sp, #12]
    d5fc:	461f      	mov	r7, r3
    d5fe:	9308      	str	r3, [sp, #32]
    d600:	f7ff b9fe 	b.w	ca00 <_vfiprintf_r+0x260>
    d604:	2101      	movs	r1, #1
    d606:	4618      	mov	r0, r3
    d608:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d60c:	f7ff bb13 	b.w	cc36 <_vfiprintf_r+0x496>
    d610:	f850 3b04 	ldr.w	r3, [r0], #4
    d614:	9007      	str	r0, [sp, #28]
    d616:	4622      	mov	r2, r4
    d618:	b2db      	uxtb	r3, r3
    d61a:	e6b6      	b.n	d38a <_vfiprintf_r+0xbea>
    d61c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    d620:	9207      	str	r2, [sp, #28]
    d622:	17da      	asrs	r2, r3, #31
    d624:	4611      	mov	r1, r2
    d626:	f7ff b9ca 	b.w	c9be <_vfiprintf_r+0x21e>
    d62a:	f851 3b04 	ldr.w	r3, [r1], #4
    d62e:	9107      	str	r1, [sp, #28]
    d630:	4602      	mov	r2, r0
    d632:	b2db      	uxtb	r3, r3
    d634:	f7ff ba27 	b.w	ca86 <_vfiprintf_r+0x2e6>
    d638:	2301      	movs	r3, #1
    d63a:	931c      	str	r3, [sp, #112]	; 0x70
    d63c:	2101      	movs	r1, #1
    d63e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    d642:	931b      	str	r3, [sp, #108]	; 0x6c
    d644:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d648:	460b      	mov	r3, r1
    d64a:	f7ff bacd 	b.w	cbe8 <_vfiprintf_r+0x448>
    d64e:	9b07      	ldr	r3, [sp, #28]
    d650:	9905      	ldr	r1, [sp, #20]
    d652:	f853 2b04 	ldr.w	r2, [r3], #4
    d656:	9307      	str	r3, [sp, #28]
    d658:	8011      	strh	r1, [r2, #0]
    d65a:	f7ff b8ec 	b.w	c836 <_vfiprintf_r+0x96>
    d65e:	1c59      	adds	r1, r3, #1
    d660:	4658      	mov	r0, fp
    d662:	f7fa fb25 	bl	7cb0 <_malloc_r>
    d666:	4604      	mov	r4, r0
    d668:	2800      	cmp	r0, #0
    d66a:	d03c      	beq.n	d6e6 <_vfiprintf_r+0xf46>
    d66c:	9008      	str	r0, [sp, #32]
    d66e:	e795      	b.n	d59c <_vfiprintf_r+0xdfc>
    d670:	6d88      	ldr	r0, [r1, #88]	; 0x58
    d672:	f7fb fb13 	bl	8c9c <__retarget_lock_release_recursive>
    d676:	f7ff b9e9 	b.w	ca4c <_vfiprintf_r+0x2ac>
    d67a:	9b03      	ldr	r3, [sp, #12]
    d67c:	9307      	str	r3, [sp, #28]
    d67e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    d682:	9f08      	ldr	r7, [sp, #32]
    d684:	f7ff b9bc 	b.w	ca00 <_vfiprintf_r+0x260>
    d688:	9819      	ldr	r0, [sp, #100]	; 0x64
    d68a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d68c:	3001      	adds	r0, #1
    d68e:	e545      	b.n	d11c <_vfiprintf_r+0x97c>
    d690:	9b03      	ldr	r3, [sp, #12]
    d692:	9307      	str	r3, [sp, #28]
    d694:	4620      	mov	r0, r4
    d696:	f7fb fb13 	bl	8cc0 <strlen>
    d69a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    d69e:	462f      	mov	r7, r5
    d6a0:	9004      	str	r0, [sp, #16]
    d6a2:	9303      	str	r3, [sp, #12]
    d6a4:	9508      	str	r5, [sp, #32]
    d6a6:	f7ff b9ab 	b.w	ca00 <_vfiprintf_r+0x260>
    d6aa:	ee18 1a10 	vmov	r1, s16
    d6ae:	aa18      	add	r2, sp, #96	; 0x60
    d6b0:	4658      	mov	r0, fp
    d6b2:	f7ff f839 	bl	c728 <__sprint_r.part.0>
    d6b6:	2800      	cmp	r0, #0
    d6b8:	f43f aa36 	beq.w	cb28 <_vfiprintf_r+0x388>
    d6bc:	f7ff ba4d 	b.w	cb5a <_vfiprintf_r+0x3ba>
    d6c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    d6c2:	3001      	adds	r0, #1
    d6c4:	e57a      	b.n	d1bc <_vfiprintf_r+0xa1c>
    d6c6:	468c      	mov	ip, r1
    d6c8:	e46e      	b.n	cfa8 <_vfiprintf_r+0x808>
    d6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d6cc:	07d9      	lsls	r1, r3, #31
    d6ce:	d405      	bmi.n	d6dc <_vfiprintf_r+0xf3c>
    d6d0:	89ab      	ldrh	r3, [r5, #12]
    d6d2:	059a      	lsls	r2, r3, #22
    d6d4:	d402      	bmi.n	d6dc <_vfiprintf_r+0xf3c>
    d6d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d6d8:	f7fb fae0 	bl	8c9c <__retarget_lock_release_recursive>
    d6dc:	f04f 33ff 	mov.w	r3, #4294967295
    d6e0:	9305      	str	r3, [sp, #20]
    d6e2:	f7ff ba49 	b.w	cb78 <_vfiprintf_r+0x3d8>
    d6e6:	ee18 2a10 	vmov	r2, s16
    d6ea:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    d6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d6f2:	8193      	strh	r3, [r2, #12]
    d6f4:	f7ff ba35 	b.w	cb62 <_vfiprintf_r+0x3c2>
    d6f8:	9c07      	ldr	r4, [sp, #28]
    d6fa:	9704      	str	r7, [sp, #16]
    d6fc:	e746      	b.n	d58c <_vfiprintf_r+0xdec>
    d6fe:	9b07      	ldr	r3, [sp, #28]
    d700:	f898 1001 	ldrb.w	r1, [r8, #1]
    d704:	f853 7b04 	ldr.w	r7, [r3], #4
    d708:	9307      	str	r3, [sp, #28]
    d70a:	4690      	mov	r8, r2
    d70c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    d710:	f7ff b8b9 	b.w	c886 <_vfiprintf_r+0xe6>
    d714:	ee18 2a10 	vmov	r2, s16
    d718:	8993      	ldrh	r3, [r2, #12]
    d71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d71e:	8193      	strh	r3, [r2, #12]
    d720:	f7ff ba15 	b.w	cb4e <_vfiprintf_r+0x3ae>
    d724:	cccccccd 	.word	0xcccccccd
    d728:	200013c4 	.word	0x200013c4

0000d72c <__sbprintf>:
    d72c:	b570      	push	{r4, r5, r6, lr}
    d72e:	460c      	mov	r4, r1
    d730:	8989      	ldrh	r1, [r1, #12]
    d732:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    d736:	f021 0102 	bic.w	r1, r1, #2
    d73a:	f8ad 1014 	strh.w	r1, [sp, #20]
    d73e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d740:	911b      	str	r1, [sp, #108]	; 0x6c
    d742:	89e1      	ldrh	r1, [r4, #14]
    d744:	f8ad 1016 	strh.w	r1, [sp, #22]
    d748:	69e1      	ldr	r1, [r4, #28]
    d74a:	9109      	str	r1, [sp, #36]	; 0x24
    d74c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d74e:	910b      	str	r1, [sp, #44]	; 0x2c
    d750:	a91c      	add	r1, sp, #112	; 0x70
    d752:	9102      	str	r1, [sp, #8]
    d754:	9106      	str	r1, [sp, #24]
    d756:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d75a:	4606      	mov	r6, r0
    d75c:	9104      	str	r1, [sp, #16]
    d75e:	9107      	str	r1, [sp, #28]
    d760:	a818      	add	r0, sp, #96	; 0x60
    d762:	2100      	movs	r1, #0
    d764:	e9cd 3200 	strd	r3, r2, [sp]
    d768:	9108      	str	r1, [sp, #32]
    d76a:	f7fb fa91 	bl	8c90 <__retarget_lock_init_recursive>
    d76e:	e9dd 3200 	ldrd	r3, r2, [sp]
    d772:	a902      	add	r1, sp, #8
    d774:	4630      	mov	r0, r6
    d776:	f7ff f813 	bl	c7a0 <_vfiprintf_r>
    d77a:	1e05      	subs	r5, r0, #0
    d77c:	db07      	blt.n	d78e <__sbprintf+0x62>
    d77e:	a902      	add	r1, sp, #8
    d780:	4630      	mov	r0, r6
    d782:	f7fd ff23 	bl	b5cc <_fflush_r>
    d786:	2800      	cmp	r0, #0
    d788:	bf18      	it	ne
    d78a:	f04f 35ff 	movne.w	r5, #4294967295
    d78e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    d792:	065b      	lsls	r3, r3, #25
    d794:	d503      	bpl.n	d79e <__sbprintf+0x72>
    d796:	89a3      	ldrh	r3, [r4, #12]
    d798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d79c:	81a3      	strh	r3, [r4, #12]
    d79e:	9818      	ldr	r0, [sp, #96]	; 0x60
    d7a0:	f7fb fa78 	bl	8c94 <__retarget_lock_close_recursive>
    d7a4:	4628      	mov	r0, r5
    d7a6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    d7aa:	bd70      	pop	{r4, r5, r6, pc}

0000d7ac <__sfvwrite_r>:
    d7ac:	6893      	ldr	r3, [r2, #8]
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	f000 8085 	beq.w	d8be <__sfvwrite_r+0x112>
    d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7b8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    d7bc:	460c      	mov	r4, r1
    d7be:	0719      	lsls	r1, r3, #28
    d7c0:	4680      	mov	r8, r0
    d7c2:	b083      	sub	sp, #12
    d7c4:	4617      	mov	r7, r2
    d7c6:	b298      	uxth	r0, r3
    d7c8:	d525      	bpl.n	d816 <__sfvwrite_r+0x6a>
    d7ca:	6923      	ldr	r3, [r4, #16]
    d7cc:	b31b      	cbz	r3, d816 <__sfvwrite_r+0x6a>
    d7ce:	f010 0302 	ands.w	r3, r0, #2
    d7d2:	683d      	ldr	r5, [r7, #0]
    d7d4:	d02d      	beq.n	d832 <__sfvwrite_r+0x86>
    d7d6:	f04f 0a00 	mov.w	sl, #0
    d7da:	f8df b2c0 	ldr.w	fp, [pc, #704]	; da9c <__sfvwrite_r+0x2f0>
    d7de:	4656      	mov	r6, sl
    d7e0:	46b9      	mov	r9, r7
    d7e2:	455e      	cmp	r6, fp
    d7e4:	4633      	mov	r3, r6
    d7e6:	4652      	mov	r2, sl
    d7e8:	bf28      	it	cs
    d7ea:	465b      	movcs	r3, fp
    d7ec:	4640      	mov	r0, r8
    d7ee:	2e00      	cmp	r6, #0
    d7f0:	d052      	beq.n	d898 <__sfvwrite_r+0xec>
    d7f2:	69e1      	ldr	r1, [r4, #28]
    d7f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d7f6:	47b8      	blx	r7
    d7f8:	2800      	cmp	r0, #0
    d7fa:	dd56      	ble.n	d8aa <__sfvwrite_r+0xfe>
    d7fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d800:	1a1b      	subs	r3, r3, r0
    d802:	4482      	add	sl, r0
    d804:	1a36      	subs	r6, r6, r0
    d806:	f8c9 3008 	str.w	r3, [r9, #8]
    d80a:	2b00      	cmp	r3, #0
    d80c:	d1e9      	bne.n	d7e2 <__sfvwrite_r+0x36>
    d80e:	2000      	movs	r0, #0
    d810:	b003      	add	sp, #12
    d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d816:	4621      	mov	r1, r4
    d818:	4640      	mov	r0, r8
    d81a:	f000 f941 	bl	daa0 <__swsetup_r>
    d81e:	2800      	cmp	r0, #0
    d820:	f040 8138 	bne.w	da94 <__sfvwrite_r+0x2e8>
    d824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d828:	683d      	ldr	r5, [r7, #0]
    d82a:	b298      	uxth	r0, r3
    d82c:	f010 0302 	ands.w	r3, r0, #2
    d830:	d1d1      	bne.n	d7d6 <__sfvwrite_r+0x2a>
    d832:	f010 0901 	ands.w	r9, r0, #1
    d836:	d144      	bne.n	d8c2 <__sfvwrite_r+0x116>
    d838:	464e      	mov	r6, r9
    d83a:	9700      	str	r7, [sp, #0]
    d83c:	b346      	cbz	r6, d890 <__sfvwrite_r+0xe4>
    d83e:	0582      	lsls	r2, r0, #22
    d840:	f8d4 b008 	ldr.w	fp, [r4, #8]
    d844:	f140 8085 	bpl.w	d952 <__sfvwrite_r+0x1a6>
    d848:	45b3      	cmp	fp, r6
    d84a:	465a      	mov	r2, fp
    d84c:	f200 80b4 	bhi.w	d9b8 <__sfvwrite_r+0x20c>
    d850:	f410 6f90 	tst.w	r0, #1152	; 0x480
    d854:	f040 80c1 	bne.w	d9da <__sfvwrite_r+0x22e>
    d858:	6820      	ldr	r0, [r4, #0]
    d85a:	9201      	str	r2, [sp, #4]
    d85c:	4649      	mov	r1, r9
    d85e:	f7fb f881 	bl	8964 <memmove>
    d862:	68a3      	ldr	r3, [r4, #8]
    d864:	9a01      	ldr	r2, [sp, #4]
    d866:	eba3 010b 	sub.w	r1, r3, fp
    d86a:	6823      	ldr	r3, [r4, #0]
    d86c:	60a1      	str	r1, [r4, #8]
    d86e:	4413      	add	r3, r2
    d870:	46b2      	mov	sl, r6
    d872:	6023      	str	r3, [r4, #0]
    d874:	2600      	movs	r6, #0
    d876:	9a00      	ldr	r2, [sp, #0]
    d878:	6893      	ldr	r3, [r2, #8]
    d87a:	eba3 030a 	sub.w	r3, r3, sl
    d87e:	44d1      	add	r9, sl
    d880:	6093      	str	r3, [r2, #8]
    d882:	2b00      	cmp	r3, #0
    d884:	d0c3      	beq.n	d80e <__sfvwrite_r+0x62>
    d886:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    d88a:	b280      	uxth	r0, r0
    d88c:	2e00      	cmp	r6, #0
    d88e:	d1d6      	bne.n	d83e <__sfvwrite_r+0x92>
    d890:	e9d5 9600 	ldrd	r9, r6, [r5]
    d894:	3508      	adds	r5, #8
    d896:	e7d1      	b.n	d83c <__sfvwrite_r+0x90>
    d898:	e9d5 a600 	ldrd	sl, r6, [r5]
    d89c:	3508      	adds	r5, #8
    d89e:	e7a0      	b.n	d7e2 <__sfvwrite_r+0x36>
    d8a0:	4621      	mov	r1, r4
    d8a2:	4640      	mov	r0, r8
    d8a4:	f7fd fe92 	bl	b5cc <_fflush_r>
    d8a8:	b388      	cbz	r0, d90e <__sfvwrite_r+0x162>
    d8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8b2:	f04f 30ff 	mov.w	r0, #4294967295
    d8b6:	81a3      	strh	r3, [r4, #12]
    d8b8:	b003      	add	sp, #12
    d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8be:	2000      	movs	r0, #0
    d8c0:	4770      	bx	lr
    d8c2:	461e      	mov	r6, r3
    d8c4:	46ba      	mov	sl, r7
    d8c6:	4699      	mov	r9, r3
    d8c8:	4618      	mov	r0, r3
    d8ca:	9500      	str	r5, [sp, #0]
    d8cc:	461f      	mov	r7, r3
    d8ce:	b366      	cbz	r6, d92a <__sfvwrite_r+0x17e>
    d8d0:	2800      	cmp	r0, #0
    d8d2:	d032      	beq.n	d93a <__sfvwrite_r+0x18e>
    d8d4:	464a      	mov	r2, r9
    d8d6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    d8da:	6820      	ldr	r0, [r4, #0]
    d8dc:	68a5      	ldr	r5, [r4, #8]
    d8de:	42b2      	cmp	r2, r6
    d8e0:	bf28      	it	cs
    d8e2:	4632      	movcs	r2, r6
    d8e4:	4288      	cmp	r0, r1
    d8e6:	d904      	bls.n	d8f2 <__sfvwrite_r+0x146>
    d8e8:	eb05 0b03 	add.w	fp, r5, r3
    d8ec:	455a      	cmp	r2, fp
    d8ee:	f300 80a7 	bgt.w	da40 <__sfvwrite_r+0x294>
    d8f2:	4293      	cmp	r3, r2
    d8f4:	dc64      	bgt.n	d9c0 <__sfvwrite_r+0x214>
    d8f6:	69e1      	ldr	r1, [r4, #28]
    d8f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    d8fa:	463a      	mov	r2, r7
    d8fc:	4640      	mov	r0, r8
    d8fe:	47a8      	blx	r5
    d900:	f1b0 0b00 	subs.w	fp, r0, #0
    d904:	ddd1      	ble.n	d8aa <__sfvwrite_r+0xfe>
    d906:	ebb9 090b 	subs.w	r9, r9, fp
    d90a:	d0c9      	beq.n	d8a0 <__sfvwrite_r+0xf4>
    d90c:	2001      	movs	r0, #1
    d90e:	f8da 3008 	ldr.w	r3, [sl, #8]
    d912:	eba3 030b 	sub.w	r3, r3, fp
    d916:	445f      	add	r7, fp
    d918:	eba6 060b 	sub.w	r6, r6, fp
    d91c:	f8ca 3008 	str.w	r3, [sl, #8]
    d920:	2b00      	cmp	r3, #0
    d922:	f43f af74 	beq.w	d80e <__sfvwrite_r+0x62>
    d926:	2e00      	cmp	r6, #0
    d928:	d1d2      	bne.n	d8d0 <__sfvwrite_r+0x124>
    d92a:	9a00      	ldr	r2, [sp, #0]
    d92c:	6856      	ldr	r6, [r2, #4]
    d92e:	4613      	mov	r3, r2
    d930:	3208      	adds	r2, #8
    d932:	9200      	str	r2, [sp, #0]
    d934:	2e00      	cmp	r6, #0
    d936:	d0f8      	beq.n	d92a <__sfvwrite_r+0x17e>
    d938:	681f      	ldr	r7, [r3, #0]
    d93a:	4632      	mov	r2, r6
    d93c:	210a      	movs	r1, #10
    d93e:	4638      	mov	r0, r7
    d940:	f7fd fe76 	bl	b630 <memchr>
    d944:	2800      	cmp	r0, #0
    d946:	f000 809c 	beq.w	da82 <__sfvwrite_r+0x2d6>
    d94a:	3001      	adds	r0, #1
    d94c:	eba0 0907 	sub.w	r9, r0, r7
    d950:	e7c0      	b.n	d8d4 <__sfvwrite_r+0x128>
    d952:	6820      	ldr	r0, [r4, #0]
    d954:	6923      	ldr	r3, [r4, #16]
    d956:	4298      	cmp	r0, r3
    d958:	d816      	bhi.n	d988 <__sfvwrite_r+0x1dc>
    d95a:	6962      	ldr	r2, [r4, #20]
    d95c:	42b2      	cmp	r2, r6
    d95e:	d813      	bhi.n	d988 <__sfvwrite_r+0x1dc>
    d960:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d964:	42b3      	cmp	r3, r6
    d966:	bf28      	it	cs
    d968:	4633      	movcs	r3, r6
    d96a:	69e1      	ldr	r1, [r4, #28]
    d96c:	fb93 f3f2 	sdiv	r3, r3, r2
    d970:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d972:	fb02 f303 	mul.w	r3, r2, r3
    d976:	4640      	mov	r0, r8
    d978:	464a      	mov	r2, r9
    d97a:	47b8      	blx	r7
    d97c:	f1b0 0a00 	subs.w	sl, r0, #0
    d980:	dd93      	ble.n	d8aa <__sfvwrite_r+0xfe>
    d982:	eba6 060a 	sub.w	r6, r6, sl
    d986:	e776      	b.n	d876 <__sfvwrite_r+0xca>
    d988:	45b3      	cmp	fp, r6
    d98a:	46da      	mov	sl, fp
    d98c:	bf28      	it	cs
    d98e:	46b2      	movcs	sl, r6
    d990:	4652      	mov	r2, sl
    d992:	4649      	mov	r1, r9
    d994:	f7fa ffe6 	bl	8964 <memmove>
    d998:	68a3      	ldr	r3, [r4, #8]
    d99a:	6822      	ldr	r2, [r4, #0]
    d99c:	eba3 030a 	sub.w	r3, r3, sl
    d9a0:	4452      	add	r2, sl
    d9a2:	60a3      	str	r3, [r4, #8]
    d9a4:	6022      	str	r2, [r4, #0]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d1eb      	bne.n	d982 <__sfvwrite_r+0x1d6>
    d9aa:	4621      	mov	r1, r4
    d9ac:	4640      	mov	r0, r8
    d9ae:	f7fd fe0d 	bl	b5cc <_fflush_r>
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d0e5      	beq.n	d982 <__sfvwrite_r+0x1d6>
    d9b6:	e778      	b.n	d8aa <__sfvwrite_r+0xfe>
    d9b8:	6820      	ldr	r0, [r4, #0]
    d9ba:	46b3      	mov	fp, r6
    d9bc:	4632      	mov	r2, r6
    d9be:	e74c      	b.n	d85a <__sfvwrite_r+0xae>
    d9c0:	4639      	mov	r1, r7
    d9c2:	9201      	str	r2, [sp, #4]
    d9c4:	f7fa ffce 	bl	8964 <memmove>
    d9c8:	9a01      	ldr	r2, [sp, #4]
    d9ca:	68a3      	ldr	r3, [r4, #8]
    d9cc:	1a9b      	subs	r3, r3, r2
    d9ce:	60a3      	str	r3, [r4, #8]
    d9d0:	6823      	ldr	r3, [r4, #0]
    d9d2:	4413      	add	r3, r2
    d9d4:	6023      	str	r3, [r4, #0]
    d9d6:	4693      	mov	fp, r2
    d9d8:	e795      	b.n	d906 <__sfvwrite_r+0x15a>
    d9da:	6823      	ldr	r3, [r4, #0]
    d9dc:	6921      	ldr	r1, [r4, #16]
    d9de:	eba3 0b01 	sub.w	fp, r3, r1
    d9e2:	6963      	ldr	r3, [r4, #20]
    d9e4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    d9e8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    d9ec:	f10b 0301 	add.w	r3, fp, #1
    d9f0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    d9f4:	4433      	add	r3, r6
    d9f6:	4553      	cmp	r3, sl
    d9f8:	4652      	mov	r2, sl
    d9fa:	bf84      	itt	hi
    d9fc:	469a      	movhi	sl, r3
    d9fe:	4652      	movhi	r2, sl
    da00:	0543      	lsls	r3, r0, #21
    da02:	d52c      	bpl.n	da5e <__sfvwrite_r+0x2b2>
    da04:	4611      	mov	r1, r2
    da06:	4640      	mov	r0, r8
    da08:	f7fa f952 	bl	7cb0 <_malloc_r>
    da0c:	2800      	cmp	r0, #0
    da0e:	d03b      	beq.n	da88 <__sfvwrite_r+0x2dc>
    da10:	465a      	mov	r2, fp
    da12:	6921      	ldr	r1, [r4, #16]
    da14:	9001      	str	r0, [sp, #4]
    da16:	f7f8 faf1 	bl	5ffc <memcpy>
    da1a:	89a2      	ldrh	r2, [r4, #12]
    da1c:	9b01      	ldr	r3, [sp, #4]
    da1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    da22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    da26:	81a2      	strh	r2, [r4, #12]
    da28:	eb03 000b 	add.w	r0, r3, fp
    da2c:	6123      	str	r3, [r4, #16]
    da2e:	ebaa 030b 	sub.w	r3, sl, fp
    da32:	f8c4 a014 	str.w	sl, [r4, #20]
    da36:	60a3      	str	r3, [r4, #8]
    da38:	6020      	str	r0, [r4, #0]
    da3a:	46b3      	mov	fp, r6
    da3c:	4632      	mov	r2, r6
    da3e:	e70c      	b.n	d85a <__sfvwrite_r+0xae>
    da40:	4639      	mov	r1, r7
    da42:	465a      	mov	r2, fp
    da44:	f7fa ff8e 	bl	8964 <memmove>
    da48:	6823      	ldr	r3, [r4, #0]
    da4a:	445b      	add	r3, fp
    da4c:	6023      	str	r3, [r4, #0]
    da4e:	4621      	mov	r1, r4
    da50:	4640      	mov	r0, r8
    da52:	f7fd fdbb 	bl	b5cc <_fflush_r>
    da56:	2800      	cmp	r0, #0
    da58:	f43f af55 	beq.w	d906 <__sfvwrite_r+0x15a>
    da5c:	e725      	b.n	d8aa <__sfvwrite_r+0xfe>
    da5e:	4640      	mov	r0, r8
    da60:	f7fa fbe2 	bl	8228 <_realloc_r>
    da64:	4603      	mov	r3, r0
    da66:	2800      	cmp	r0, #0
    da68:	d1de      	bne.n	da28 <__sfvwrite_r+0x27c>
    da6a:	6921      	ldr	r1, [r4, #16]
    da6c:	4640      	mov	r0, r8
    da6e:	f7fb fa29 	bl	8ec4 <_free_r>
    da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    da76:	220c      	movs	r2, #12
    da78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    da7c:	f8c8 2000 	str.w	r2, [r8]
    da80:	e715      	b.n	d8ae <__sfvwrite_r+0x102>
    da82:	1c72      	adds	r2, r6, #1
    da84:	4691      	mov	r9, r2
    da86:	e726      	b.n	d8d6 <__sfvwrite_r+0x12a>
    da88:	220c      	movs	r2, #12
    da8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    da8e:	f8c8 2000 	str.w	r2, [r8]
    da92:	e70c      	b.n	d8ae <__sfvwrite_r+0x102>
    da94:	f04f 30ff 	mov.w	r0, #4294967295
    da98:	e6ba      	b.n	d810 <__sfvwrite_r+0x64>
    da9a:	bf00      	nop
    da9c:	7ffffc00 	.word	0x7ffffc00

0000daa0 <__swsetup_r>:
    daa0:	b538      	push	{r3, r4, r5, lr}
    daa2:	4b31      	ldr	r3, [pc, #196]	; (db68 <__swsetup_r+0xc8>)
    daa4:	681b      	ldr	r3, [r3, #0]
    daa6:	4605      	mov	r5, r0
    daa8:	460c      	mov	r4, r1
    daaa:	b113      	cbz	r3, dab2 <__swsetup_r+0x12>
    daac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    daae:	2a00      	cmp	r2, #0
    dab0:	d04e      	beq.n	db50 <__swsetup_r+0xb0>
    dab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dab6:	0718      	lsls	r0, r3, #28
    dab8:	b29a      	uxth	r2, r3
    daba:	d51c      	bpl.n	daf6 <__swsetup_r+0x56>
    dabc:	6921      	ldr	r1, [r4, #16]
    dabe:	b329      	cbz	r1, db0c <__swsetup_r+0x6c>
    dac0:	f012 0001 	ands.w	r0, r2, #1
    dac4:	d007      	beq.n	dad6 <__swsetup_r+0x36>
    dac6:	2000      	movs	r0, #0
    dac8:	60a0      	str	r0, [r4, #8]
    daca:	6960      	ldr	r0, [r4, #20]
    dacc:	4240      	negs	r0, r0
    dace:	61a0      	str	r0, [r4, #24]
    dad0:	b139      	cbz	r1, dae2 <__swsetup_r+0x42>
    dad2:	2000      	movs	r0, #0
    dad4:	bd38      	pop	{r3, r4, r5, pc}
    dad6:	0795      	lsls	r5, r2, #30
    dad8:	bf58      	it	pl
    dada:	6960      	ldrpl	r0, [r4, #20]
    dadc:	60a0      	str	r0, [r4, #8]
    dade:	2900      	cmp	r1, #0
    dae0:	d1f7      	bne.n	dad2 <__swsetup_r+0x32>
    dae2:	0612      	lsls	r2, r2, #24
    dae4:	bf58      	it	pl
    dae6:	4608      	movpl	r0, r1
    dae8:	d5f4      	bpl.n	dad4 <__swsetup_r+0x34>
    daea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    daee:	81a3      	strh	r3, [r4, #12]
    daf0:	f04f 30ff 	mov.w	r0, #4294967295
    daf4:	bd38      	pop	{r3, r4, r5, pc}
    daf6:	06d1      	lsls	r1, r2, #27
    daf8:	d52e      	bpl.n	db58 <__swsetup_r+0xb8>
    dafa:	0752      	lsls	r2, r2, #29
    dafc:	d414      	bmi.n	db28 <__swsetup_r+0x88>
    dafe:	6921      	ldr	r1, [r4, #16]
    db00:	f043 0308 	orr.w	r3, r3, #8
    db04:	81a3      	strh	r3, [r4, #12]
    db06:	b29a      	uxth	r2, r3
    db08:	2900      	cmp	r1, #0
    db0a:	d1d9      	bne.n	dac0 <__swsetup_r+0x20>
    db0c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    db10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    db14:	d0d4      	beq.n	dac0 <__swsetup_r+0x20>
    db16:	4621      	mov	r1, r4
    db18:	4628      	mov	r0, r5
    db1a:	f000 f947 	bl	ddac <__smakebuf_r>
    db1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    db22:	6921      	ldr	r1, [r4, #16]
    db24:	b29a      	uxth	r2, r3
    db26:	e7cb      	b.n	dac0 <__swsetup_r+0x20>
    db28:	6b21      	ldr	r1, [r4, #48]	; 0x30
    db2a:	b151      	cbz	r1, db42 <__swsetup_r+0xa2>
    db2c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    db30:	4291      	cmp	r1, r2
    db32:	d004      	beq.n	db3e <__swsetup_r+0x9e>
    db34:	4628      	mov	r0, r5
    db36:	f7fb f9c5 	bl	8ec4 <_free_r>
    db3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    db3e:	2200      	movs	r2, #0
    db40:	6322      	str	r2, [r4, #48]	; 0x30
    db42:	6921      	ldr	r1, [r4, #16]
    db44:	2200      	movs	r2, #0
    db46:	e9c4 1200 	strd	r1, r2, [r4]
    db4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    db4e:	e7d7      	b.n	db00 <__swsetup_r+0x60>
    db50:	4618      	mov	r0, r3
    db52:	f7fa fdf1 	bl	8738 <__sinit>
    db56:	e7ac      	b.n	dab2 <__swsetup_r+0x12>
    db58:	2209      	movs	r2, #9
    db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db5e:	602a      	str	r2, [r5, #0]
    db60:	f04f 30ff 	mov.w	r0, #4294967295
    db64:	81a3      	strh	r3, [r4, #12]
    db66:	bd38      	pop	{r3, r4, r5, pc}
    db68:	20003414 	.word	0x20003414

0000db6c <__fputwc>:
    db6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db70:	b082      	sub	sp, #8
    db72:	4682      	mov	sl, r0
    db74:	4688      	mov	r8, r1
    db76:	4614      	mov	r4, r2
    db78:	f7fa fff4 	bl	8b64 <__locale_mb_cur_max>
    db7c:	2801      	cmp	r0, #1
    db7e:	d103      	bne.n	db88 <__fputwc+0x1c>
    db80:	f108 33ff 	add.w	r3, r8, #4294967295
    db84:	2bfe      	cmp	r3, #254	; 0xfe
    db86:	d936      	bls.n	dbf6 <__fputwc+0x8a>
    db88:	f10d 0904 	add.w	r9, sp, #4
    db8c:	4642      	mov	r2, r8
    db8e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    db92:	4649      	mov	r1, r9
    db94:	4650      	mov	r0, sl
    db96:	f7fe fd01 	bl	c59c <_wcrtomb_r>
    db9a:	1c42      	adds	r2, r0, #1
    db9c:	4606      	mov	r6, r0
    db9e:	d032      	beq.n	dc06 <__fputwc+0x9a>
    dba0:	b320      	cbz	r0, dbec <__fputwc+0x80>
    dba2:	f89d c004 	ldrb.w	ip, [sp, #4]
    dba6:	2500      	movs	r5, #0
    dba8:	e009      	b.n	dbbe <__fputwc+0x52>
    dbaa:	6823      	ldr	r3, [r4, #0]
    dbac:	1c5a      	adds	r2, r3, #1
    dbae:	6022      	str	r2, [r4, #0]
    dbb0:	f883 c000 	strb.w	ip, [r3]
    dbb4:	3501      	adds	r5, #1
    dbb6:	42b5      	cmp	r5, r6
    dbb8:	d218      	bcs.n	dbec <__fputwc+0x80>
    dbba:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    dbbe:	68a3      	ldr	r3, [r4, #8]
    dbc0:	3b01      	subs	r3, #1
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	60a3      	str	r3, [r4, #8]
    dbc6:	daf0      	bge.n	dbaa <__fputwc+0x3e>
    dbc8:	69a7      	ldr	r7, [r4, #24]
    dbca:	42bb      	cmp	r3, r7
    dbcc:	4661      	mov	r1, ip
    dbce:	4622      	mov	r2, r4
    dbd0:	4650      	mov	r0, sl
    dbd2:	db02      	blt.n	dbda <__fputwc+0x6e>
    dbd4:	f1bc 0f0a 	cmp.w	ip, #10
    dbd8:	d1e7      	bne.n	dbaa <__fputwc+0x3e>
    dbda:	f000 f953 	bl	de84 <__swbuf_r>
    dbde:	1c43      	adds	r3, r0, #1
    dbe0:	d1e8      	bne.n	dbb4 <__fputwc+0x48>
    dbe2:	4606      	mov	r6, r0
    dbe4:	4630      	mov	r0, r6
    dbe6:	b002      	add	sp, #8
    dbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbec:	4646      	mov	r6, r8
    dbee:	4630      	mov	r0, r6
    dbf0:	b002      	add	sp, #8
    dbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbf6:	fa5f fc88 	uxtb.w	ip, r8
    dbfa:	f88d c004 	strb.w	ip, [sp, #4]
    dbfe:	4606      	mov	r6, r0
    dc00:	f10d 0904 	add.w	r9, sp, #4
    dc04:	e7cf      	b.n	dba6 <__fputwc+0x3a>
    dc06:	89a3      	ldrh	r3, [r4, #12]
    dc08:	4630      	mov	r0, r6
    dc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc0e:	81a3      	strh	r3, [r4, #12]
    dc10:	b002      	add	sp, #8
    dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc16:	bf00      	nop

0000dc18 <_fputwc_r>:
    dc18:	b530      	push	{r4, r5, lr}
    dc1a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    dc1c:	f013 0f01 	tst.w	r3, #1
    dc20:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    dc24:	4614      	mov	r4, r2
    dc26:	b083      	sub	sp, #12
    dc28:	4605      	mov	r5, r0
    dc2a:	b29a      	uxth	r2, r3
    dc2c:	d101      	bne.n	dc32 <_fputwc_r+0x1a>
    dc2e:	0598      	lsls	r0, r3, #22
    dc30:	d51c      	bpl.n	dc6c <_fputwc_r+0x54>
    dc32:	0490      	lsls	r0, r2, #18
    dc34:	d406      	bmi.n	dc44 <_fputwc_r+0x2c>
    dc36:	6e62      	ldr	r2, [r4, #100]	; 0x64
    dc38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dc3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    dc40:	81a3      	strh	r3, [r4, #12]
    dc42:	6662      	str	r2, [r4, #100]	; 0x64
    dc44:	4622      	mov	r2, r4
    dc46:	4628      	mov	r0, r5
    dc48:	f7ff ff90 	bl	db6c <__fputwc>
    dc4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dc4e:	07da      	lsls	r2, r3, #31
    dc50:	4605      	mov	r5, r0
    dc52:	d402      	bmi.n	dc5a <_fputwc_r+0x42>
    dc54:	89a3      	ldrh	r3, [r4, #12]
    dc56:	059b      	lsls	r3, r3, #22
    dc58:	d502      	bpl.n	dc60 <_fputwc_r+0x48>
    dc5a:	4628      	mov	r0, r5
    dc5c:	b003      	add	sp, #12
    dc5e:	bd30      	pop	{r4, r5, pc}
    dc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc62:	f7fb f81b 	bl	8c9c <__retarget_lock_release_recursive>
    dc66:	4628      	mov	r0, r5
    dc68:	b003      	add	sp, #12
    dc6a:	bd30      	pop	{r4, r5, pc}
    dc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc6e:	9101      	str	r1, [sp, #4]
    dc70:	f7fb f812 	bl	8c98 <__retarget_lock_acquire_recursive>
    dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dc78:	9901      	ldr	r1, [sp, #4]
    dc7a:	b29a      	uxth	r2, r3
    dc7c:	e7d9      	b.n	dc32 <_fputwc_r+0x1a>
    dc7e:	bf00      	nop

0000dc80 <_wcsnrtombs_l>:
    dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc84:	b08b      	sub	sp, #44	; 0x2c
    dc86:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    dc8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    dc8c:	9103      	str	r1, [sp, #12]
    dc8e:	4681      	mov	r9, r0
    dc90:	9205      	str	r2, [sp, #20]
    dc92:	461e      	mov	r6, r3
    dc94:	f1b8 0f00 	cmp.w	r8, #0
    dc98:	d05c      	beq.n	dd54 <_wcsnrtombs_l+0xd4>
    dc9a:	9b03      	ldr	r3, [sp, #12]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d05e      	beq.n	dd5e <_wcsnrtombs_l+0xde>
    dca0:	9b05      	ldr	r3, [sp, #20]
    dca2:	681d      	ldr	r5, [r3, #0]
    dca4:	2f00      	cmp	r7, #0
    dca6:	d06a      	beq.n	dd7e <_wcsnrtombs_l+0xfe>
    dca8:	1e74      	subs	r4, r6, #1
    dcaa:	b34e      	cbz	r6, dd00 <_wcsnrtombs_l+0x80>
    dcac:	9b03      	ldr	r3, [sp, #12]
    dcae:	9304      	str	r3, [sp, #16]
    dcb0:	3d04      	subs	r5, #4
    dcb2:	2600      	movs	r6, #0
    dcb4:	9501      	str	r5, [sp, #4]
    dcb6:	e00b      	b.n	dcd0 <_wcsnrtombs_l+0x50>
    dcb8:	9b03      	ldr	r3, [sp, #12]
    dcba:	bb2b      	cbnz	r3, dd08 <_wcsnrtombs_l+0x88>
    dcbc:	9b01      	ldr	r3, [sp, #4]
    dcbe:	681a      	ldr	r2, [r3, #0]
    dcc0:	2a00      	cmp	r2, #0
    dcc2:	d03a      	beq.n	dd3a <_wcsnrtombs_l+0xba>
    dcc4:	45bc      	cmp	ip, r7
    dcc6:	d25c      	bcs.n	dd82 <_wcsnrtombs_l+0x102>
    dcc8:	3c01      	subs	r4, #1
    dcca:	1c63      	adds	r3, r4, #1
    dccc:	4666      	mov	r6, ip
    dcce:	d017      	beq.n	dd00 <_wcsnrtombs_l+0x80>
    dcd0:	f8d8 3000 	ldr.w	r3, [r8]
    dcd4:	9302      	str	r3, [sp, #8]
    dcd6:	9b01      	ldr	r3, [sp, #4]
    dcd8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    dcdc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    dce0:	9301      	str	r3, [sp, #4]
    dce2:	a907      	add	r1, sp, #28
    dce4:	4643      	mov	r3, r8
    dce6:	4648      	mov	r0, r9
    dce8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    dcec:	47a8      	blx	r5
    dcee:	1c42      	adds	r2, r0, #1
    dcf0:	d03a      	beq.n	dd68 <_wcsnrtombs_l+0xe8>
    dcf2:	eb00 0c06 	add.w	ip, r0, r6
    dcf6:	45bc      	cmp	ip, r7
    dcf8:	d9de      	bls.n	dcb8 <_wcsnrtombs_l+0x38>
    dcfa:	9b02      	ldr	r3, [sp, #8]
    dcfc:	e9c8 3b00 	strd	r3, fp, [r8]
    dd00:	4630      	mov	r0, r6
    dd02:	b00b      	add	sp, #44	; 0x2c
    dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd08:	2800      	cmp	r0, #0
    dd0a:	dd0e      	ble.n	dd2a <_wcsnrtombs_l+0xaa>
    dd0c:	9b04      	ldr	r3, [sp, #16]
    dd0e:	9d01      	ldr	r5, [sp, #4]
    dd10:	4418      	add	r0, r3
    dd12:	1e5a      	subs	r2, r3, #1
    dd14:	a907      	add	r1, sp, #28
    dd16:	f100 3eff 	add.w	lr, r0, #4294967295
    dd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
    dd1e:	f802 3f01 	strb.w	r3, [r2, #1]!
    dd22:	4572      	cmp	r2, lr
    dd24:	d1f9      	bne.n	dd1a <_wcsnrtombs_l+0x9a>
    dd26:	9501      	str	r5, [sp, #4]
    dd28:	9004      	str	r0, [sp, #16]
    dd2a:	9b05      	ldr	r3, [sp, #20]
    dd2c:	681a      	ldr	r2, [r3, #0]
    dd2e:	3204      	adds	r2, #4
    dd30:	601a      	str	r2, [r3, #0]
    dd32:	9b01      	ldr	r3, [sp, #4]
    dd34:	681a      	ldr	r2, [r3, #0]
    dd36:	2a00      	cmp	r2, #0
    dd38:	d1c4      	bne.n	dcc4 <_wcsnrtombs_l+0x44>
    dd3a:	9b03      	ldr	r3, [sp, #12]
    dd3c:	b10b      	cbz	r3, dd42 <_wcsnrtombs_l+0xc2>
    dd3e:	9b05      	ldr	r3, [sp, #20]
    dd40:	601a      	str	r2, [r3, #0]
    dd42:	f10c 36ff 	add.w	r6, ip, #4294967295
    dd46:	2200      	movs	r2, #0
    dd48:	4630      	mov	r0, r6
    dd4a:	f8c8 2000 	str.w	r2, [r8]
    dd4e:	b00b      	add	sp, #44	; 0x2c
    dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd54:	9b03      	ldr	r3, [sp, #12]
    dd56:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	d1a0      	bne.n	dca0 <_wcsnrtombs_l+0x20>
    dd5e:	9b05      	ldr	r3, [sp, #20]
    dd60:	f04f 37ff 	mov.w	r7, #4294967295
    dd64:	681d      	ldr	r5, [r3, #0]
    dd66:	e79f      	b.n	dca8 <_wcsnrtombs_l+0x28>
    dd68:	4606      	mov	r6, r0
    dd6a:	218a      	movs	r1, #138	; 0x8a
    dd6c:	2200      	movs	r2, #0
    dd6e:	4630      	mov	r0, r6
    dd70:	f8c9 1000 	str.w	r1, [r9]
    dd74:	f8c8 2000 	str.w	r2, [r8]
    dd78:	b00b      	add	sp, #44	; 0x2c
    dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd7e:	463e      	mov	r6, r7
    dd80:	e7be      	b.n	dd00 <_wcsnrtombs_l+0x80>
    dd82:	4666      	mov	r6, ip
    dd84:	e7bc      	b.n	dd00 <_wcsnrtombs_l+0x80>
    dd86:	bf00      	nop

0000dd88 <_wcsnrtombs_r>:
    dd88:	b510      	push	{r4, lr}
    dd8a:	b084      	sub	sp, #16
    dd8c:	4c05      	ldr	r4, [pc, #20]	; (dda4 <_wcsnrtombs_r+0x1c>)
    dd8e:	9806      	ldr	r0, [sp, #24]
    dd90:	9000      	str	r0, [sp, #0]
    dd92:	9807      	ldr	r0, [sp, #28]
    dd94:	9001      	str	r0, [sp, #4]
    dd96:	4804      	ldr	r0, [pc, #16]	; (dda8 <_wcsnrtombs_r+0x20>)
    dd98:	6800      	ldr	r0, [r0, #0]
    dd9a:	9402      	str	r4, [sp, #8]
    dd9c:	f7ff ff70 	bl	dc80 <_wcsnrtombs_l>
    dda0:	b004      	add	sp, #16
    dda2:	bd10      	pop	{r4, pc}
    dda4:	20002e8c 	.word	0x20002e8c
    dda8:	20003414 	.word	0x20003414

0000ddac <__smakebuf_r>:
    ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddb0:	898b      	ldrh	r3, [r1, #12]
    ddb2:	460c      	mov	r4, r1
    ddb4:	0799      	lsls	r1, r3, #30
    ddb6:	b096      	sub	sp, #88	; 0x58
    ddb8:	d508      	bpl.n	ddcc <__smakebuf_r+0x20>
    ddba:	f104 0343 	add.w	r3, r4, #67	; 0x43
    ddbe:	2201      	movs	r2, #1
    ddc0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    ddc4:	6023      	str	r3, [r4, #0]
    ddc6:	b016      	add	sp, #88	; 0x58
    ddc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ddd0:	2900      	cmp	r1, #0
    ddd2:	4606      	mov	r6, r0
    ddd4:	db25      	blt.n	de22 <__smakebuf_r+0x76>
    ddd6:	466a      	mov	r2, sp
    ddd8:	f000 f8ac 	bl	df34 <_fstat_r>
    dddc:	2800      	cmp	r0, #0
    ddde:	db1f      	blt.n	de20 <__smakebuf_r+0x74>
    dde0:	9d01      	ldr	r5, [sp, #4]
    dde2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    dde6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    ddea:	fab5 f585 	clz	r5, r5
    ddee:	f44f 6880 	mov.w	r8, #1024	; 0x400
    ddf2:	096d      	lsrs	r5, r5, #5
    ddf4:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ddf8:	4641      	mov	r1, r8
    ddfa:	4630      	mov	r0, r6
    ddfc:	f7f9 ff58 	bl	7cb0 <_malloc_r>
    de00:	b1e0      	cbz	r0, de3c <__smakebuf_r+0x90>
    de02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de06:	f8c4 8014 	str.w	r8, [r4, #20]
    de0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de0e:	6020      	str	r0, [r4, #0]
    de10:	6120      	str	r0, [r4, #16]
    de12:	81a3      	strh	r3, [r4, #12]
    de14:	bb35      	cbnz	r5, de64 <__smakebuf_r+0xb8>
    de16:	433b      	orrs	r3, r7
    de18:	81a3      	strh	r3, [r4, #12]
    de1a:	b016      	add	sp, #88	; 0x58
    de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de20:	89a3      	ldrh	r3, [r4, #12]
    de22:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    de26:	d019      	beq.n	de5c <__smakebuf_r+0xb0>
    de28:	f04f 0840 	mov.w	r8, #64	; 0x40
    de2c:	2500      	movs	r5, #0
    de2e:	4641      	mov	r1, r8
    de30:	4630      	mov	r0, r6
    de32:	462f      	mov	r7, r5
    de34:	f7f9 ff3c 	bl	7cb0 <_malloc_r>
    de38:	2800      	cmp	r0, #0
    de3a:	d1e2      	bne.n	de02 <__smakebuf_r+0x56>
    de3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de40:	059a      	lsls	r2, r3, #22
    de42:	d4c0      	bmi.n	ddc6 <__smakebuf_r+0x1a>
    de44:	f023 0303 	bic.w	r3, r3, #3
    de48:	f104 0243 	add.w	r2, r4, #67	; 0x43
    de4c:	f043 0302 	orr.w	r3, r3, #2
    de50:	2101      	movs	r1, #1
    de52:	e9c4 2104 	strd	r2, r1, [r4, #16]
    de56:	81a3      	strh	r3, [r4, #12]
    de58:	6022      	str	r2, [r4, #0]
    de5a:	e7b4      	b.n	ddc6 <__smakebuf_r+0x1a>
    de5c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    de60:	462f      	mov	r7, r5
    de62:	e7c9      	b.n	ddf8 <__smakebuf_r+0x4c>
    de64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    de68:	4630      	mov	r0, r6
    de6a:	f000 f879 	bl	df60 <_isatty_r>
    de6e:	b910      	cbnz	r0, de76 <__smakebuf_r+0xca>
    de70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de74:	e7cf      	b.n	de16 <__smakebuf_r+0x6a>
    de76:	89a3      	ldrh	r3, [r4, #12]
    de78:	f023 0303 	bic.w	r3, r3, #3
    de7c:	f043 0301 	orr.w	r3, r3, #1
    de80:	b21b      	sxth	r3, r3
    de82:	e7c8      	b.n	de16 <__smakebuf_r+0x6a>

0000de84 <__swbuf_r>:
    de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de86:	460d      	mov	r5, r1
    de88:	4614      	mov	r4, r2
    de8a:	4606      	mov	r6, r0
    de8c:	b110      	cbz	r0, de94 <__swbuf_r+0x10>
    de8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    de90:	2b00      	cmp	r3, #0
    de92:	d04c      	beq.n	df2e <__swbuf_r+0xaa>
    de94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    de98:	69a3      	ldr	r3, [r4, #24]
    de9a:	60a3      	str	r3, [r4, #8]
    de9c:	0717      	lsls	r7, r2, #28
    de9e:	b290      	uxth	r0, r2
    dea0:	d51b      	bpl.n	deda <__swbuf_r+0x56>
    dea2:	6923      	ldr	r3, [r4, #16]
    dea4:	b1cb      	cbz	r3, deda <__swbuf_r+0x56>
    dea6:	b2ed      	uxtb	r5, r5
    dea8:	0481      	lsls	r1, r0, #18
    deaa:	462f      	mov	r7, r5
    deac:	d522      	bpl.n	def4 <__swbuf_r+0x70>
    deae:	6822      	ldr	r2, [r4, #0]
    deb0:	6961      	ldr	r1, [r4, #20]
    deb2:	1ad3      	subs	r3, r2, r3
    deb4:	4299      	cmp	r1, r3
    deb6:	dd29      	ble.n	df0c <__swbuf_r+0x88>
    deb8:	3301      	adds	r3, #1
    deba:	68a1      	ldr	r1, [r4, #8]
    debc:	3901      	subs	r1, #1
    debe:	60a1      	str	r1, [r4, #8]
    dec0:	1c51      	adds	r1, r2, #1
    dec2:	6021      	str	r1, [r4, #0]
    dec4:	7015      	strb	r5, [r2, #0]
    dec6:	6962      	ldr	r2, [r4, #20]
    dec8:	429a      	cmp	r2, r3
    deca:	d027      	beq.n	df1c <__swbuf_r+0x98>
    decc:	89a3      	ldrh	r3, [r4, #12]
    dece:	07db      	lsls	r3, r3, #31
    ded0:	d501      	bpl.n	ded6 <__swbuf_r+0x52>
    ded2:	2d0a      	cmp	r5, #10
    ded4:	d022      	beq.n	df1c <__swbuf_r+0x98>
    ded6:	4638      	mov	r0, r7
    ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deda:	4621      	mov	r1, r4
    dedc:	4630      	mov	r0, r6
    dede:	f7ff fddf 	bl	daa0 <__swsetup_r>
    dee2:	bb08      	cbnz	r0, df28 <__swbuf_r+0xa4>
    dee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    dee8:	6923      	ldr	r3, [r4, #16]
    deea:	b290      	uxth	r0, r2
    deec:	b2ed      	uxtb	r5, r5
    deee:	0481      	lsls	r1, r0, #18
    def0:	462f      	mov	r7, r5
    def2:	d4dc      	bmi.n	deae <__swbuf_r+0x2a>
    def4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    def8:	81a2      	strh	r2, [r4, #12]
    defa:	6e62      	ldr	r2, [r4, #100]	; 0x64
    defc:	6961      	ldr	r1, [r4, #20]
    defe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    df02:	6662      	str	r2, [r4, #100]	; 0x64
    df04:	6822      	ldr	r2, [r4, #0]
    df06:	1ad3      	subs	r3, r2, r3
    df08:	4299      	cmp	r1, r3
    df0a:	dcd5      	bgt.n	deb8 <__swbuf_r+0x34>
    df0c:	4621      	mov	r1, r4
    df0e:	4630      	mov	r0, r6
    df10:	f7fd fb5c 	bl	b5cc <_fflush_r>
    df14:	b940      	cbnz	r0, df28 <__swbuf_r+0xa4>
    df16:	6822      	ldr	r2, [r4, #0]
    df18:	2301      	movs	r3, #1
    df1a:	e7ce      	b.n	deba <__swbuf_r+0x36>
    df1c:	4621      	mov	r1, r4
    df1e:	4630      	mov	r0, r6
    df20:	f7fd fb54 	bl	b5cc <_fflush_r>
    df24:	2800      	cmp	r0, #0
    df26:	d0d6      	beq.n	ded6 <__swbuf_r+0x52>
    df28:	f04f 37ff 	mov.w	r7, #4294967295
    df2c:	e7d3      	b.n	ded6 <__swbuf_r+0x52>
    df2e:	f7fa fc03 	bl	8738 <__sinit>
    df32:	e7af      	b.n	de94 <__swbuf_r+0x10>

0000df34 <_fstat_r>:
    df34:	b570      	push	{r4, r5, r6, lr}
    df36:	460c      	mov	r4, r1
    df38:	4d08      	ldr	r5, [pc, #32]	; (df5c <_fstat_r+0x28>)
    df3a:	4603      	mov	r3, r0
    df3c:	2600      	movs	r6, #0
    df3e:	4620      	mov	r0, r4
    df40:	4611      	mov	r1, r2
    df42:	461c      	mov	r4, r3
    df44:	602e      	str	r6, [r5, #0]
    df46:	f7f8 fc7d 	bl	6844 <_fstat>
    df4a:	1c43      	adds	r3, r0, #1
    df4c:	d000      	beq.n	df50 <_fstat_r+0x1c>
    df4e:	bd70      	pop	{r4, r5, r6, pc}
    df50:	682b      	ldr	r3, [r5, #0]
    df52:	2b00      	cmp	r3, #0
    df54:	d0fb      	beq.n	df4e <_fstat_r+0x1a>
    df56:	6023      	str	r3, [r4, #0]
    df58:	bd70      	pop	{r4, r5, r6, pc}
    df5a:	bf00      	nop
    df5c:	20004064 	.word	0x20004064

0000df60 <_isatty_r>:
    df60:	b538      	push	{r3, r4, r5, lr}
    df62:	4d07      	ldr	r5, [pc, #28]	; (df80 <_isatty_r+0x20>)
    df64:	2200      	movs	r2, #0
    df66:	4604      	mov	r4, r0
    df68:	4608      	mov	r0, r1
    df6a:	602a      	str	r2, [r5, #0]
    df6c:	f7f8 fc70 	bl	6850 <_isatty>
    df70:	1c43      	adds	r3, r0, #1
    df72:	d000      	beq.n	df76 <_isatty_r+0x16>
    df74:	bd38      	pop	{r3, r4, r5, pc}
    df76:	682b      	ldr	r3, [r5, #0]
    df78:	2b00      	cmp	r3, #0
    df7a:	d0fb      	beq.n	df74 <_isatty_r+0x14>
    df7c:	6023      	str	r3, [r4, #0]
    df7e:	bd38      	pop	{r3, r4, r5, pc}
    df80:	20004064 	.word	0x20004064
    df84:	00000000 	.word	0x00000000

0000df88 <___ZN7TwoWire5beginEv_veneer>:
    df88:	f85f f000 	ldr.w	pc, [pc]	; df8c <___ZN7TwoWire5beginEv_veneer+0x4>
    df8c:	60001789 	.word	0x60001789

0000df90 <___reboot_Teensyduino__veneer>:
    df90:	f85f f000 	ldr.w	pc, [pc]	; df94 <___reboot_Teensyduino__veneer+0x4>
    df94:	60001f5d 	.word	0x60001f5d

0000df98 <___init_veneer>:
    df98:	f85f f000 	ldr.w	pc, [pc]	; df9c <___init_veneer+0x4>
    df9c:	60001fb1 	.word	0x60001fb1

Disassembly of section .fini:

0000dfa0 <_fini>:
    dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfa2:	bf00      	nop
